### YamlMime:ManagedReference
items:
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  commentId: T:Infrastructure.Repositories.BaseRepository.BaseRepository`1
  id: BaseRepository`1
  parent: Infrastructure.Repositories.BaseRepository
  children:
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.#ctor(System.String,System.String)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.Count
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountAsync
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountBy(System.Func{`0,System.Boolean})
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteAll
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteById(System.Guid)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.Dispose
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Func{`0,System.Boolean})
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Int32,System.Int32)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetById(System.Guid)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetCollection
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert(`0)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update(`0)
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1._collection
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1._collectionName
  - Infrastructure.Repositories.BaseRepository.BaseRepository`1._db
  langs:
  - csharp
  - vb
  name: BaseRepository<T>
  nameWithType: BaseRepository<T>
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>
  type: Class
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: BaseRepository
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 8
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  syntax:
    content: 'public class BaseRepository<T> : IBaseRepository<T>, IDisposable where T : class'
    typeParameters:
    - id: T
    content.vb: Public Class BaseRepository(Of T As Class) Implements IBaseRepository(Of T), IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - Infrastructure.Audits.AuditTrailService
  - Infrastructure.Repositories.CategoryRepository
  - Infrastructure.Repositories.LanguageRepository
  - Infrastructure.Repositories.QuestionRepository
  - Infrastructure.Repositories.ReferenceRepository
  - Infrastructure.Repositories.SourceRepository
  - Infrastructure.Repositories.TagRepository
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  - System.IDisposable
  extensionMethods:
  - System.Object.Domain.Extentions.ObjectExtention.IsNotNull
  - System.Object.Domain.Extentions.ObjectExtention.IsNull
  nameWithType.vb: BaseRepository(Of T)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T)
  name.vb: BaseRepository(Of T)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1._db
  commentId: F:Infrastructure.Repositories.BaseRepository.BaseRepository`1._db
  id: _db
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: _db
  nameWithType: BaseRepository<T>._db
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>._db
  type: Field
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: _db
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 10
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  syntax:
    content: protected readonly LiteDatabase _db
    return:
      type: LiteDB.LiteDatabase
    content.vb: Protected ReadOnly _db As LiteDatabase
  nameWithType.vb: BaseRepository(Of T)._db
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T)._db
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1._collection
  commentId: F:Infrastructure.Repositories.BaseRepository.BaseRepository`1._collection
  id: _collection
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: _collection
  nameWithType: BaseRepository<T>._collection
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>._collection
  type: Field
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: _collection
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 11
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  syntax:
    content: protected readonly ILiteCollection<T> _collection
    return:
      type: LiteDB.ILiteCollection{{T}}
    content.vb: Protected ReadOnly _collection As ILiteCollection(Of T)
  nameWithType.vb: BaseRepository(Of T)._collection
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T)._collection
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1._collectionName
  commentId: F:Infrastructure.Repositories.BaseRepository.BaseRepository`1._collectionName
  id: _collectionName
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: _collectionName
  nameWithType: BaseRepository<T>._collectionName
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>._collectionName
  type: Field
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: _collectionName
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 12
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  syntax:
    content: protected readonly string _collectionName
    return:
      type: System.String
    content.vb: Protected ReadOnly _collectionName As String
  nameWithType.vb: BaseRepository(Of T)._collectionName
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T)._collectionName
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.#ctor(System.String,System.String)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: BaseRepository(string, string)
  nameWithType: BaseRepository<T>.BaseRepository(string, string)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.BaseRepository(string, string)
  type: Constructor
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: .ctor
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 14
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  syntax:
    content: public BaseRepository(string databasePath, string collectionName)
    parameters:
    - id: databasePath
      type: System.String
    - id: collectionName
      type: System.String
    content.vb: Public Sub New(databasePath As String, collectionName As String)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.#ctor*
  nameWithType.vb: BaseRepository(Of T).New(String, String)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).New(String, String)
  name.vb: New(String, String)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert(`0)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert(`0)
  id: Insert(`0)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: Insert(T)
  nameWithType: BaseRepository<T>.Insert(T)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Insert(T)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: Insert
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 21
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual void Insert(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Overridable Sub Insert(entity As T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Insert({T})
  nameWithType.vb: BaseRepository(Of T).Insert(T)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Insert(T)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  id: Insert(System.Collections.Generic.IEnumerable{`0})
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: Insert(IEnumerable<T>)
  nameWithType: BaseRepository<T>.Insert(IEnumerable<T>)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Insert(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: Insert
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 24
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual void Insert(IEnumerable<T> entity)
    parameters:
    - id: entity
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Overridable Sub Insert(entity As IEnumerable(Of T))
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Insert(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: BaseRepository(Of T).Insert(IEnumerable(Of T))
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Insert(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Insert(IEnumerable(Of T))
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update(`0)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update(`0)
  id: Update(`0)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: Update(T)
  nameWithType: BaseRepository<T>.Update(T)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Update(T)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: Update
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 27
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual void Update(T entity)
    parameters:
    - id: entity
      type: '{T}'
    content.vb: Public Overridable Sub Update(entity As T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Update({T})
  nameWithType.vb: BaseRepository(Of T).Update(T)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Update(T)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteById(System.Guid)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteById(System.Guid)
  id: DeleteById(System.Guid)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: DeleteById(Guid)
  nameWithType: BaseRepository<T>.DeleteById(Guid)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.DeleteById(System.Guid)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: DeleteById
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 30
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual void DeleteById(Guid id)
    parameters:
    - id: id
      type: System.Guid
    content.vb: Public Overridable Sub DeleteById(id As Guid)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteById*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.DeleteById(System.Guid)
  nameWithType.vb: BaseRepository(Of T).DeleteById(Guid)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).DeleteById(System.Guid)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteAll
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteAll
  id: DeleteAll
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: DeleteAll()
  nameWithType: BaseRepository<T>.DeleteAll()
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.DeleteAll()
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: DeleteAll
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 33
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual void DeleteAll()
    content.vb: Public Overridable Sub DeleteAll()
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteAll*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.DeleteAll
  nameWithType.vb: BaseRepository(Of T).DeleteAll()
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).DeleteAll()
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetById(System.Guid)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetById(System.Guid)
  id: GetById(System.Guid)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetById(Guid)
  nameWithType: BaseRepository<T>.GetById(Guid)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetById(System.Guid)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetById
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 36
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual T GetById(Guid id)
    parameters:
    - id: id
      type: System.Guid
    return:
      type: '{T}'
    content.vb: Public Overridable Function GetById(id As Guid) As T
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetById*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetById(System.Guid)
  nameWithType.vb: BaseRepository(Of T).GetById(Guid)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetById(System.Guid)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll
  id: GetAll
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: BaseRepository<T>.GetAll()
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAll()
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetAll
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 39
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual IEnumerable<T> GetAll()
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Overridable Function GetAll() As IEnumerable(Of T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll
  nameWithType.vb: BaseRepository(Of T).GetAll()
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAll()
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  id: GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetAll(Func<T, bool>, int, int)
  nameWithType: BaseRepository<T>.GetAll(Func<T, bool>, int, int)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAll(System.Func<T, bool>, int, int)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetAll
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 42
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual IEnumerable<T> GetAll(Func<T, bool> func, int pageNumber, int pageSize)
    parameters:
    - id: func
      type: System.Func{{T},System.Boolean}
    - id: pageNumber
      type: System.Int32
    - id: pageSize
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Overridable Function GetAll(func As Func(Of T, Boolean), pageNumber As Integer, pageSize As Integer) As IEnumerable(Of T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll(System.Func{{T},System.Boolean},System.Int32,System.Int32)
  nameWithType.vb: BaseRepository(Of T).GetAll(Func(Of T, Boolean), Integer, Integer)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAll(System.Func(Of T, Boolean), Integer, Integer)
  name.vb: GetAll(Func(Of T, Boolean), Integer, Integer)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Func{`0,System.Boolean})
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Func{`0,System.Boolean})
  id: GetAll(System.Func{`0,System.Boolean})
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetAll(Func<T, bool>)
  nameWithType: BaseRepository<T>.GetAll(Func<T, bool>)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAll(System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetAll
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 48
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual IEnumerable<T> GetAll(Func<T, bool> func)
    parameters:
    - id: func
      type: System.Func{{T},System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Overridable Function GetAll(func As Func(Of T, Boolean)) As IEnumerable(Of T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll(System.Func{{T},System.Boolean})
  nameWithType.vb: BaseRepository(Of T).GetAll(Func(Of T, Boolean))
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAll(System.Func(Of T, Boolean))
  name.vb: GetAll(Func(Of T, Boolean))
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  id: GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync(Func<T, bool>, int, int)
  nameWithType: BaseRepository<T>.GetAllAsync(Func<T, bool>, int, int)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAllAsync(System.Func<T, bool>, int, int)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetAllAsync
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 53
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual Task<IEnumerable<T>> GetAllAsync(Func<T, bool> func, int pageNumber, int pageSize)
    parameters:
    - id: func
      type: System.Func{{T},System.Boolean}
    - id: pageNumber
      type: System.Int32
    - id: pageSize
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
    content.vb: Public Overridable Function GetAllAsync(func As Func(Of T, Boolean), pageNumber As Integer, pageSize As Integer) As Task(Of IEnumerable(Of T))
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAllAsync*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAllAsync(System.Func{{T},System.Boolean},System.Int32,System.Int32)
  nameWithType.vb: BaseRepository(Of T).GetAllAsync(Func(Of T, Boolean), Integer, Integer)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAllAsync(System.Func(Of T, Boolean), Integer, Integer)
  name.vb: GetAllAsync(Func(Of T, Boolean), Integer, Integer)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Int32,System.Int32)
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll(System.Int32,System.Int32)
  id: GetAll(System.Int32,System.Int32)
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetAll(int, int)
  nameWithType: BaseRepository<T>.GetAll(int, int)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAll(int, int)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetAll
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 64
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual IEnumerable<T> GetAll(int pageNumber, int pageSize)
    parameters:
    - id: pageNumber
      type: System.Int32
    - id: pageSize
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Overridable Function GetAll(pageNumber As Integer, pageSize As Integer) As IEnumerable(Of T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll(System.Int32,System.Int32)
  nameWithType.vb: BaseRepository(Of T).GetAll(Integer, Integer)
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAll(Integer, Integer)
  name.vb: GetAll(Integer, Integer)
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetCollection
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetCollection
  id: GetCollection
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: GetCollection()
  nameWithType: BaseRepository<T>.GetCollection()
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetCollection()
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: GetCollection
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 69
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual ILiteCollection<T> GetCollection()
    return:
      type: LiteDB.ILiteCollection{{T}}
    content.vb: Public Overridable Function GetCollection() As ILiteCollection(Of T)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetCollection*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetCollection
  nameWithType.vb: BaseRepository(Of T).GetCollection()
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetCollection()
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Count
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Count
  id: Count
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: Count()
  nameWithType: BaseRepository<T>.Count()
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Count()
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: Count
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 72
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual int Count()
    return:
      type: System.Int32
    content.vb: Public Overridable Function Count() As Integer
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Count*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Count
  nameWithType.vb: BaseRepository(Of T).Count()
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Count()
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountBy(System.Func{`0,System.Boolean})
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountBy(System.Func{`0,System.Boolean})
  id: CountBy(System.Func{`0,System.Boolean})
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: CountBy(Func<T, bool>)
  nameWithType: BaseRepository<T>.CountBy(Func<T, bool>)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.CountBy(System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: CountBy
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 76
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual int CountBy(Func<T, bool> func)
    parameters:
    - id: func
      type: System.Func{{T},System.Boolean}
    return:
      type: System.Int32
    content.vb: Public Overridable Function CountBy(func As Func(Of T, Boolean)) As Integer
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountBy*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.CountBy(System.Func{{T},System.Boolean})
  nameWithType.vb: BaseRepository(Of T).CountBy(Func(Of T, Boolean))
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).CountBy(System.Func(Of T, Boolean))
  name.vb: CountBy(Func(Of T, Boolean))
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountAsync
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountAsync
  id: CountAsync
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: CountAsync()
  nameWithType: BaseRepository<T>.CountAsync()
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.CountAsync()
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: CountAsync
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 80
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public virtual Task<int> CountAsync()
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Overridable Function CountAsync() As Task(Of Integer)
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountAsync*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.CountAsync
  nameWithType.vb: BaseRepository(Of T).CountAsync()
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).CountAsync()
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
  id: Update(System.Collections.Generic.IEnumerable{`0})
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: Update(IEnumerable<T>)
  nameWithType: BaseRepository<T>.Update(IEnumerable<T>)
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Update(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: Update
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 85
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  example: []
  syntax:
    content: public void Update(IEnumerable<T> entity)
    parameters:
    - id: entity
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub Update(entity As IEnumerable(Of T))
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update*
  implements:
  - Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Update(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: BaseRepository(Of T).Update(IEnumerable(Of T))
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Dispose
  commentId: M:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Dispose
  id: Dispose
  parent: Infrastructure.Repositories.BaseRepository.BaseRepository`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BaseRepository<T>.Dispose()
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
      branch: master
      repo: https://github.com/abdulazizAbabutain/Examiner.git
    id: Dispose
    path: src/Infrastructure/Repositories/BaseRepository/BaseRepository.cs
    startLine: 88
  assemblies:
  - Infrastructure
  namespace: Infrastructure.Repositories.BaseRepository
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: BaseRepository(Of T).Dispose()
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Dispose()
references:
- uid: Infrastructure.Repositories.BaseRepository
  commentId: N:Infrastructure.Repositories.BaseRepository
  href: Infrastructure.html
  name: Infrastructure.Repositories.BaseRepository
  nameWithType: Infrastructure.Repositories.BaseRepository
  fullName: Infrastructure.Repositories.BaseRepository
  spec.csharp:
  - uid: Infrastructure
    name: Infrastructure
    href: Infrastructure.html
  - name: .
  - uid: Infrastructure.Repositories
    name: Repositories
    href: Infrastructure.Repositories.html
  - name: .
  - uid: Infrastructure.Repositories.BaseRepository
    name: BaseRepository
    href: Infrastructure.Repositories.BaseRepository.html
  spec.vb:
  - uid: Infrastructure
    name: Infrastructure
    href: Infrastructure.html
  - name: .
  - uid: Infrastructure.Repositories
    name: Repositories
    href: Infrastructure.Repositories.html
  - name: .
  - uid: Infrastructure.Repositories.BaseRepository
    name: BaseRepository
    href: Infrastructure.Repositories.BaseRepository.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  commentId: T:Domain.Repositories.RepositoryBase.IBaseRepository{`0}
  parent: Domain.Repositories.RepositoryBase
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1
  name: IBaseRepository<T>
  nameWithType: IBaseRepository<T>
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>
  nameWithType.vb: IBaseRepository(Of T)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T)
  name.vb: IBaseRepository(Of T)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1
    name: IBaseRepository
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1
    name: IBaseRepository
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Domain.Extentions.ObjectExtention.IsNotNull
  commentId: M:Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
  parent: Domain.Extentions.ObjectExtention
  definition: Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
  href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNotNull_System_Object_
  name: IsNotNull(object)
  nameWithType: ObjectExtention.IsNotNull(object)
  fullName: Domain.Extentions.ObjectExtention.IsNotNull(object)
  nameWithType.vb: ObjectExtention.IsNotNull(Object)
  fullName.vb: Domain.Extentions.ObjectExtention.IsNotNull(Object)
  name.vb: IsNotNull(Object)
  spec.csharp:
  - uid: Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
    name: IsNotNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNotNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
    name: IsNotNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNotNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Domain.Extentions.ObjectExtention.IsNull
  commentId: M:Domain.Extentions.ObjectExtention.IsNull(System.Object)
  parent: Domain.Extentions.ObjectExtention
  definition: Domain.Extentions.ObjectExtention.IsNull(System.Object)
  href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: ObjectExtention.IsNull(object)
  fullName: Domain.Extentions.ObjectExtention.IsNull(object)
  nameWithType.vb: ObjectExtention.IsNull(Object)
  fullName.vb: Domain.Extentions.ObjectExtention.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Domain.Extentions.ObjectExtention.IsNull(System.Object)
    name: IsNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Domain.Extentions.ObjectExtention.IsNull(System.Object)
    name: IsNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1
  commentId: T:Domain.Repositories.RepositoryBase.IBaseRepository`1
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html
  name: IBaseRepository<T>
  nameWithType: IBaseRepository<T>
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>
  nameWithType.vb: IBaseRepository(Of T)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T)
  name.vb: IBaseRepository(Of T)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1
    name: IBaseRepository
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1
    name: IBaseRepository
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Domain.Repositories.RepositoryBase
  commentId: N:Domain.Repositories.RepositoryBase
  href: Domain.html
  name: Domain.Repositories.RepositoryBase
  nameWithType: Domain.Repositories.RepositoryBase
  fullName: Domain.Repositories.RepositoryBase
  spec.csharp:
  - uid: Domain
    name: Domain
    href: Domain.html
  - name: .
  - uid: Domain.Repositories
    name: Repositories
    href: Domain.Repositories.html
  - name: .
  - uid: Domain.Repositories.RepositoryBase
    name: RepositoryBase
    href: Domain.Repositories.RepositoryBase.html
  spec.vb:
  - uid: Domain
    name: Domain
    href: Domain.html
  - name: .
  - uid: Domain.Repositories
    name: Repositories
    href: Domain.Repositories.html
  - name: .
  - uid: Domain.Repositories.RepositoryBase
    name: RepositoryBase
    href: Domain.Repositories.RepositoryBase.html
- uid: Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
  commentId: M:Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
  isExternal: true
  href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNotNull_System_Object_
  name: IsNotNull(object)
  nameWithType: ObjectExtention.IsNotNull(object)
  fullName: Domain.Extentions.ObjectExtention.IsNotNull(object)
  nameWithType.vb: ObjectExtention.IsNotNull(Object)
  fullName.vb: Domain.Extentions.ObjectExtention.IsNotNull(Object)
  name.vb: IsNotNull(Object)
  spec.csharp:
  - uid: Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
    name: IsNotNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNotNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Domain.Extentions.ObjectExtention.IsNotNull(System.Object)
    name: IsNotNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNotNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Domain.Extentions.ObjectExtention
  commentId: T:Domain.Extentions.ObjectExtention
  parent: Domain.Extentions
  href: Domain.Extentions.ObjectExtention.html
  name: ObjectExtention
  nameWithType: ObjectExtention
  fullName: Domain.Extentions.ObjectExtention
- uid: Domain.Extentions.ObjectExtention.IsNull(System.Object)
  commentId: M:Domain.Extentions.ObjectExtention.IsNull(System.Object)
  isExternal: true
  href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNull_System_Object_
  name: IsNull(object)
  nameWithType: ObjectExtention.IsNull(object)
  fullName: Domain.Extentions.ObjectExtention.IsNull(object)
  nameWithType.vb: ObjectExtention.IsNull(Object)
  fullName.vb: Domain.Extentions.ObjectExtention.IsNull(Object)
  name.vb: IsNull(Object)
  spec.csharp:
  - uid: Domain.Extentions.ObjectExtention.IsNull(System.Object)
    name: IsNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Domain.Extentions.ObjectExtention.IsNull(System.Object)
    name: IsNull
    href: Domain.Extentions.ObjectExtention.html#Domain_Extentions_ObjectExtention_IsNull_System_Object_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Domain.Extentions
  commentId: N:Domain.Extentions
  href: Domain.html
  name: Domain.Extentions
  nameWithType: Domain.Extentions
  fullName: Domain.Extentions
  spec.csharp:
  - uid: Domain
    name: Domain
    href: Domain.html
  - name: .
  - uid: Domain.Extentions
    name: Extentions
    href: Domain.Extentions.html
  spec.vb:
  - uid: Domain
    name: Domain
    href: Domain.html
  - name: .
  - uid: Domain.Extentions
    name: Extentions
    href: Domain.Extentions.html
- uid: LiteDB.LiteDatabase
  commentId: T:LiteDB.LiteDatabase
  parent: LiteDB
  isExternal: true
  name: LiteDatabase
  nameWithType: LiteDatabase
  fullName: LiteDB.LiteDatabase
- uid: LiteDB
  commentId: N:LiteDB
  isExternal: true
  name: LiteDB
  nameWithType: LiteDB
  fullName: LiteDB
- uid: LiteDB.ILiteCollection{{T}}
  commentId: T:LiteDB.ILiteCollection{`0}
  parent: LiteDB
  definition: LiteDB.ILiteCollection`1
  name: ILiteCollection<T>
  nameWithType: ILiteCollection<T>
  fullName: LiteDB.ILiteCollection<T>
  nameWithType.vb: ILiteCollection(Of T)
  fullName.vb: LiteDB.ILiteCollection(Of T)
  name.vb: ILiteCollection(Of T)
  spec.csharp:
  - uid: LiteDB.ILiteCollection`1
    name: ILiteCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteDB.ILiteCollection`1
    name: ILiteCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteDB.ILiteCollection`1
  commentId: T:LiteDB.ILiteCollection`1
  isExternal: true
  name: ILiteCollection<T>
  nameWithType: ILiteCollection<T>
  fullName: LiteDB.ILiteCollection<T>
  nameWithType.vb: ILiteCollection(Of T)
  fullName.vb: LiteDB.ILiteCollection(Of T)
  name.vb: ILiteCollection(Of T)
  spec.csharp:
  - uid: LiteDB.ILiteCollection`1
    name: ILiteCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteDB.ILiteCollection`1
    name: ILiteCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.#ctor*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.#ctor
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1__ctor_System_String_System_String_
  name: BaseRepository
  nameWithType: BaseRepository<T>.BaseRepository
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.BaseRepository
  nameWithType.vb: BaseRepository(Of T).New
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).New
  name.vb: New
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Insert
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_Insert__0_
  name: Insert
  nameWithType: BaseRepository<T>.Insert
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Insert
  nameWithType.vb: BaseRepository(Of T).Insert
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Insert
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Insert({T})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Insert(`0)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(`0)
  name: Insert(T)
  nameWithType: IBaseRepository<T>.Insert(T)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Insert(T)
  nameWithType.vb: IBaseRepository(Of T).Insert(T)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Insert(T)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Insert(`0)
    name: Insert
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Insert(`0)
    name: Insert
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(`0)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(`0)
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Insert__0_
  name: Insert(T)
  nameWithType: IBaseRepository<T>.Insert(T)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Insert(T)
  nameWithType.vb: IBaseRepository(Of T).Insert(T)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Insert(T)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(`0)
    name: Insert
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Insert__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(`0)
    name: Insert
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Insert__0_
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Insert(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Insert(System.Collections.Generic.IEnumerable{`0})
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: Insert(IEnumerable<T>)
  nameWithType: IBaseRepository<T>.Insert(IEnumerable<T>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Insert(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IBaseRepository(Of T).Insert(IEnumerable(Of T))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Insert(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Insert(IEnumerable(Of T))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Insert(System.Collections.Generic.IEnumerable{`0})
    name: Insert
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Insert(System.Collections.Generic.IEnumerable{`0})
    name: Insert
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Insert_System_Collections_Generic_IEnumerable__0__
  name: Insert(IEnumerable<T>)
  nameWithType: IBaseRepository<T>.Insert(IEnumerable<T>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Insert(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IBaseRepository(Of T).Insert(IEnumerable(Of T))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Insert(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Insert(IEnumerable(Of T))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
    name: Insert
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Insert_System_Collections_Generic_IEnumerable__0__
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})
    name: Insert
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Insert_System_Collections_Generic_IEnumerable__0__
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Update
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_Update__0_
  name: Update
  nameWithType: BaseRepository<T>.Update
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Update
  nameWithType.vb: BaseRepository(Of T).Update
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Update
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Update({T})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Update(`0)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(`0)
  name: Update(T)
  nameWithType: IBaseRepository<T>.Update(T)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Update(T)
  nameWithType.vb: IBaseRepository(Of T).Update(T)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Update(T)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Update(`0)
    name: Update
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Update(`0)
    name: Update
  - name: (
  - name: T
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(`0)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(`0)
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Update__0_
  name: Update(T)
  nameWithType: IBaseRepository<T>.Update(T)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Update(T)
  nameWithType.vb: IBaseRepository(Of T).Update(T)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Update(T)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(`0)
    name: Update
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Update__0_
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(`0)
    name: Update
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Update__0_
  - name: (
  - name: T
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteById*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteById
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_DeleteById_System_Guid_
  name: DeleteById
  nameWithType: BaseRepository<T>.DeleteById
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.DeleteById
  nameWithType.vb: BaseRepository(Of T).DeleteById
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).DeleteById
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.DeleteById(System.Guid)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.DeleteById(System.Guid)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteById(System.Guid)
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: DeleteById(Guid)
  nameWithType: IBaseRepository<T>.DeleteById(Guid)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.DeleteById(System.Guid)
  nameWithType.vb: IBaseRepository(Of T).DeleteById(Guid)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).DeleteById(System.Guid)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.DeleteById(System.Guid)
    name: DeleteById
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.DeleteById(System.Guid)
    name: DeleteById
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteById(System.Guid)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteById(System.Guid)
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_DeleteById_System_Guid_
  name: DeleteById(Guid)
  nameWithType: IBaseRepository<T>.DeleteById(Guid)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.DeleteById(System.Guid)
  nameWithType.vb: IBaseRepository(Of T).DeleteById(Guid)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).DeleteById(System.Guid)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteById(System.Guid)
    name: DeleteById
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_DeleteById_System_Guid_
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteById(System.Guid)
    name: DeleteById
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_DeleteById_System_Guid_
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteAll*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.DeleteAll
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_DeleteAll
  name: DeleteAll
  nameWithType: BaseRepository<T>.DeleteAll
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.DeleteAll
  nameWithType.vb: BaseRepository(Of T).DeleteAll
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).DeleteAll
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.DeleteAll
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.DeleteAll
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteAll
  name: DeleteAll()
  nameWithType: IBaseRepository<T>.DeleteAll()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.DeleteAll()
  nameWithType.vb: IBaseRepository(Of T).DeleteAll()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).DeleteAll()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.DeleteAll
    name: DeleteAll
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.DeleteAll
    name: DeleteAll
  - name: (
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteAll
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteAll
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_DeleteAll
  name: DeleteAll()
  nameWithType: IBaseRepository<T>.DeleteAll()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.DeleteAll()
  nameWithType.vb: IBaseRepository(Of T).DeleteAll()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).DeleteAll()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteAll
    name: DeleteAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_DeleteAll
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.DeleteAll
    name: DeleteAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_DeleteAll
  - name: (
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetById*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetById
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_GetById_System_Guid_
  name: GetById
  nameWithType: BaseRepository<T>.GetById
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetById
  nameWithType.vb: BaseRepository(Of T).GetById
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetById
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetById(System.Guid)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetById(System.Guid)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetById(System.Guid)
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: GetById(Guid)
  nameWithType: IBaseRepository<T>.GetById(Guid)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetById(System.Guid)
  nameWithType.vb: IBaseRepository(Of T).GetById(Guid)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetById(System.Guid)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetById(System.Guid)
    name: GetById
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetById(System.Guid)
    name: GetById
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetById(System.Guid)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetById(System.Guid)
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetById_System_Guid_
  name: GetById(Guid)
  nameWithType: IBaseRepository<T>.GetById(Guid)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetById(System.Guid)
  nameWithType.vb: IBaseRepository(Of T).GetById(Guid)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetById(System.Guid)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetById(System.Guid)
    name: GetById
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetById_System_Guid_
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetById(System.Guid)
    name: GetById
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetById_System_Guid_
  - name: (
  - uid: System.Guid
    name: Guid
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.guid
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAll
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_GetAll
  name: GetAll
  nameWithType: BaseRepository<T>.GetAll
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAll
  nameWithType.vb: BaseRepository(Of T).GetAll
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAll
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll
  name: GetAll()
  nameWithType: IBaseRepository<T>.GetAll()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll()
  nameWithType.vb: IBaseRepository(Of T).GetAll()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll
    name: GetAll
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll
    name: GetAll
  - name: (
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll
  name: GetAll()
  nameWithType: IBaseRepository<T>.GetAll()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll()
  nameWithType.vb: IBaseRepository(Of T).GetAll()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll
  - name: (
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll(System.Func{{T},System.Boolean},System.Int32,System.Int32)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: GetAll(Func<T, bool>, int, int)
  nameWithType: IBaseRepository<T>.GetAll(Func<T, bool>, int, int)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll(System.Func<T, bool>, int, int)
  nameWithType.vb: IBaseRepository(Of T).GetAll(Func(Of T, Boolean), Integer, Integer)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll(System.Func(Of T, Boolean), Integer, Integer)
  name.vb: GetAll(Func(Of T, Boolean), Integer, Integer)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAll
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAll
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Func__0_System_Boolean__System_Int32_System_Int32_
  name: GetAll(Func<T, bool>, int, int)
  nameWithType: IBaseRepository<T>.GetAll(Func<T, bool>, int, int)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll(System.Func<T, bool>, int, int)
  nameWithType.vb: IBaseRepository(Of T).GetAll(Func(Of T, Boolean), Integer, Integer)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll(System.Func(Of T, Boolean), Integer, Integer)
  name.vb: GetAll(Func(Of T, Boolean), Integer, Integer)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Func__0_System_Boolean__System_Int32_System_Int32_
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Func__0_System_Boolean__System_Int32_System_Int32_
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll(System.Func{{T},System.Boolean})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Func{`0,System.Boolean})
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean})
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: GetAll(Func<T, bool>)
  nameWithType: IBaseRepository<T>.GetAll(Func<T, bool>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll(System.Func<T, bool>)
  nameWithType.vb: IBaseRepository(Of T).GetAll(Func(Of T, Boolean))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll(System.Func(Of T, Boolean))
  name.vb: GetAll(Func(Of T, Boolean))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Func{`0,System.Boolean})
    name: GetAll
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Func{`0,System.Boolean})
    name: GetAll
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean})
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Func__0_System_Boolean__
  name: GetAll(Func<T, bool>)
  nameWithType: IBaseRepository<T>.GetAll(Func<T, bool>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll(System.Func<T, bool>)
  nameWithType.vb: IBaseRepository(Of T).GetAll(Func(Of T, Boolean))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll(System.Func(Of T, Boolean))
  name.vb: GetAll(Func(Of T, Boolean))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean})
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Func__0_System_Boolean__
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Func{`0,System.Boolean})
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Func__0_System_Boolean__
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAllAsync*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetAllAsync
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_GetAllAsync_System_Func__0_System_Boolean__System_Int32_System_Int32_
  name: GetAllAsync
  nameWithType: BaseRepository<T>.GetAllAsync
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetAllAsync
  nameWithType.vb: BaseRepository(Of T).GetAllAsync
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetAllAsync
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAllAsync(System.Func{{T},System.Boolean},System.Int32,System.Int32)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: GetAllAsync(Func<T, bool>, int, int)
  nameWithType: IBaseRepository<T>.GetAllAsync(Func<T, bool>, int, int)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAllAsync(System.Func<T, bool>, int, int)
  nameWithType.vb: IBaseRepository(Of T).GetAllAsync(Func(Of T, Boolean), Integer, Integer)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAllAsync(System.Func(Of T, Boolean), Integer, Integer)
  name.vb: GetAllAsync(Func(Of T, Boolean), Integer, Integer)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAllAsync
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAllAsync
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEnumerable<T>>
  nameWithType: Task<IEnumerable<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Task(Of IEnumerable(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: Task(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAllAsync_System_Func__0_System_Boolean__System_Int32_System_Int32_
  name: GetAllAsync(Func<T, bool>, int, int)
  nameWithType: IBaseRepository<T>.GetAllAsync(Func<T, bool>, int, int)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAllAsync(System.Func<T, bool>, int, int)
  nameWithType.vb: IBaseRepository(Of T).GetAllAsync(Func(Of T, Boolean), Integer, Integer)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAllAsync(System.Func(Of T, Boolean), Integer, Integer)
  name.vb: GetAllAsync(Func(Of T, Boolean), Integer, Integer)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAllAsync
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAllAsync_System_Func__0_System_Boolean__System_Int32_System_Int32_
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAllAsync(System.Func{`0,System.Boolean},System.Int32,System.Int32)
    name: GetAllAsync
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAllAsync_System_Func__0_System_Boolean__System_Int32_System_Int32_
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetAll(System.Int32,System.Int32)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Int32,System.Int32)
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Int32,System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: GetAll(int, int)
  nameWithType: IBaseRepository<T>.GetAll(int, int)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll(int, int)
  nameWithType.vb: IBaseRepository(Of T).GetAll(Integer, Integer)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll(Integer, Integer)
  name.vb: GetAll(Integer, Integer)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Int32,System.Int32)
    name: GetAll
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetAll(System.Int32,System.Int32)
    name: GetAll
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Int32,System.Int32)
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Int32,System.Int32)
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Int32_System_Int32_
  name: GetAll(int, int)
  nameWithType: IBaseRepository<T>.GetAll(int, int)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetAll(int, int)
  nameWithType.vb: IBaseRepository(Of T).GetAll(Integer, Integer)
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetAll(Integer, Integer)
  name.vb: GetAll(Integer, Integer)
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Int32,System.Int32)
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetAll(System.Int32,System.Int32)
    name: GetAll
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetAll_System_Int32_System_Int32_
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetCollection*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.GetCollection
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_GetCollection
  name: GetCollection
  nameWithType: BaseRepository<T>.GetCollection
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.GetCollection
  nameWithType.vb: BaseRepository(Of T).GetCollection
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).GetCollection
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.GetCollection
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetCollection
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetCollection
  name: GetCollection()
  nameWithType: IBaseRepository<T>.GetCollection()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetCollection()
  nameWithType.vb: IBaseRepository(Of T).GetCollection()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetCollection()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetCollection
    name: GetCollection
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.GetCollection
    name: GetCollection
  - name: (
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetCollection
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.GetCollection
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetCollection
  name: GetCollection()
  nameWithType: IBaseRepository<T>.GetCollection()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.GetCollection()
  nameWithType.vb: IBaseRepository(Of T).GetCollection()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).GetCollection()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetCollection
    name: GetCollection
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetCollection
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.GetCollection
    name: GetCollection
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_GetCollection
  - name: (
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Count*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Count
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_Count
  name: Count
  nameWithType: BaseRepository<T>.Count
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Count
  nameWithType.vb: BaseRepository(Of T).Count
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Count
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Count
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Count
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.Count
  name: Count()
  nameWithType: IBaseRepository<T>.Count()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Count()
  nameWithType.vb: IBaseRepository(Of T).Count()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Count()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Count
    name: Count
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Count
    name: Count
  - name: (
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Count
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.Count
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Count
  name: Count()
  nameWithType: IBaseRepository<T>.Count()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Count()
  nameWithType.vb: IBaseRepository(Of T).Count()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Count()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Count
    name: Count
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Count
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Count
    name: Count
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Count
  - name: (
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountBy*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountBy
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_CountBy_System_Func__0_System_Boolean__
  name: CountBy
  nameWithType: BaseRepository<T>.CountBy
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.CountBy
  nameWithType.vb: BaseRepository(Of T).CountBy
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).CountBy
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.CountBy(System.Func{{T},System.Boolean})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.CountBy(System.Func{`0,System.Boolean})
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountBy(System.Func{`0,System.Boolean})
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: CountBy(Func<T, bool>)
  nameWithType: IBaseRepository<T>.CountBy(Func<T, bool>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.CountBy(System.Func<T, bool>)
  nameWithType.vb: IBaseRepository(Of T).CountBy(Func(Of T, Boolean))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).CountBy(System.Func(Of T, Boolean))
  name.vb: CountBy(Func(Of T, Boolean))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.CountBy(System.Func{`0,System.Boolean})
    name: CountBy
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.CountBy(System.Func{`0,System.Boolean})
    name: CountBy
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountBy(System.Func{`0,System.Boolean})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.CountBy(System.Func{`0,System.Boolean})
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_CountBy_System_Func__0_System_Boolean__
  name: CountBy(Func<T, bool>)
  nameWithType: IBaseRepository<T>.CountBy(Func<T, bool>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.CountBy(System.Func<T, bool>)
  nameWithType.vb: IBaseRepository(Of T).CountBy(Func(Of T, Boolean))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).CountBy(System.Func(Of T, Boolean))
  name.vb: CountBy(Func(Of T, Boolean))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountBy(System.Func{`0,System.Boolean})
    name: CountBy
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_CountBy_System_Func__0_System_Boolean__
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountBy(System.Func{`0,System.Boolean})
    name: CountBy
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_CountBy_System_Func__0_System_Boolean__
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountAsync*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.CountAsync
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_CountAsync
  name: CountAsync
  nameWithType: BaseRepository<T>.CountAsync
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.CountAsync
  nameWithType.vb: BaseRepository(Of T).CountAsync
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).CountAsync
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.CountAsync
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.CountAsync
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountAsync
  name: CountAsync()
  nameWithType: IBaseRepository<T>.CountAsync()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.CountAsync()
  nameWithType.vb: IBaseRepository(Of T).CountAsync()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).CountAsync()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.CountAsync
    name: CountAsync
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.CountAsync
    name: CountAsync
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<int>
  nameWithType: Task<int>
  fullName: System.Threading.Tasks.Task<int>
  nameWithType.vb: Task(Of Integer)
  fullName.vb: System.Threading.Tasks.Task(Of Integer)
  name.vb: Task(Of Integer)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountAsync
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.CountAsync
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_CountAsync
  name: CountAsync()
  nameWithType: IBaseRepository<T>.CountAsync()
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.CountAsync()
  nameWithType.vb: IBaseRepository(Of T).CountAsync()
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).CountAsync()
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountAsync
    name: CountAsync
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_CountAsync
  - name: (
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.CountAsync
    name: CountAsync
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_CountAsync
  - name: (
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}.Update(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Update(System.Collections.Generic.IEnumerable{`0})
  parent: Domain.Repositories.RepositoryBase.IBaseRepository{{T}}
  definition: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: Update(IEnumerable<T>)
  nameWithType: IBaseRepository<T>.Update(IEnumerable<T>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IBaseRepository(Of T).Update(IEnumerable(Of T))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository{`0}.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Update_System_Collections_Generic_IEnumerable__0__
  name: Update(IEnumerable<T>)
  nameWithType: IBaseRepository<T>.Update(IEnumerable<T>)
  fullName: Domain.Repositories.RepositoryBase.IBaseRepository<T>.Update(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: IBaseRepository(Of T).Update(IEnumerable(Of T))
  fullName.vb: Domain.Repositories.RepositoryBase.IBaseRepository(Of T).Update(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Update(IEnumerable(Of T))
  spec.csharp:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Update_System_Collections_Generic_IEnumerable__0__
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: Domain.Repositories.RepositoryBase.IBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})
    name: Update
    href: Domain.Repositories.RepositoryBase.IBaseRepository-1.html#Domain_Repositories_RepositoryBase_IBaseRepository_1_Update_System_Collections_Generic_IEnumerable__0__
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Infrastructure.Repositories.BaseRepository.BaseRepository`1.Dispose*
  commentId: Overload:Infrastructure.Repositories.BaseRepository.BaseRepository`1.Dispose
  href: Infrastructure.Repositories.BaseRepository.BaseRepository-1.html#Infrastructure_Repositories_BaseRepository_BaseRepository_1_Dispose
  name: Dispose
  nameWithType: BaseRepository<T>.Dispose
  fullName: Infrastructure.Repositories.BaseRepository.BaseRepository<T>.Dispose
  nameWithType.vb: BaseRepository(Of T).Dispose
  fullName.vb: Infrastructure.Repositories.BaseRepository.BaseRepository(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
