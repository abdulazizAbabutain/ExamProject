{
  "Examiner-UI/README.html": {
    "href": "Examiner-UI/README.html",
    "title": "React + TypeScript + Vite | Examiner",
    "summary": "React + TypeScript + Vite This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules. Currently, two official plugins are available: @vitejs/plugin-react uses Babel for Fast Refresh @vitejs/plugin-react-swc uses SWC for Fast Refresh Expanding the ESLint configuration If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules: export default tseslint.config([ globalIgnores(['dist']), { files: ['**/*.{ts,tsx}'], extends: [ // Other configs... // Remove tseslint.configs.recommended and replace with this ...tseslint.configs.recommendedTypeChecked, // Alternatively, use this for stricter rules ...tseslint.configs.strictTypeChecked, // Optionally, add this for stylistic rules ...tseslint.configs.stylisticTypeChecked, // Other configs... ], languageOptions: { parserOptions: { project: ['./tsconfig.node.json', './tsconfig.app.json'], tsconfigRootDir: import.meta.dirname, }, // other options... }, }, ]) You can also install eslint-plugin-react-x and eslint-plugin-react-dom for React-specific lint rules: // eslint.config.js import reactX from 'eslint-plugin-react-x' import reactDom from 'eslint-plugin-react-dom' export default tseslint.config([ globalIgnores(['dist']), { files: ['**/*.{ts,tsx}'], extends: [ // Other configs... // Enable lint rules for React reactX.configs['recommended-typescript'], // Enable lint rules for React DOM reactDom.configs.recommended, ], languageOptions: { parserOptions: { project: ['./tsconfig.node.json', './tsconfig.app.json'], tsconfigRootDir: import.meta.dirname, }, // other options... }, }, ])"
  },
  "Examiner-UI/node_modules/@esbuild/win32-x64/README.html": {
    "href": "Examiner-UI/node_modules/@esbuild/win32-x64/README.html",
    "title": "esbuild | Examiner",
    "summary": "esbuild This is the Windows 64-bit binary for esbuild, a JavaScript bundler and minifier. See https://github.com/evanw/esbuild for details."
  },
  "Examiner-UI/node_modules/@eslint-community/eslint-utils/README.html": {
    "href": "Examiner-UI/node_modules/@eslint-community/eslint-utils/README.html",
    "title": "| Examiner",
    "summary": "@eslint-community/eslint-utils \uD83C\uDFC1 Goal This package provides utility functions and classes for make ESLint custom rules. For examples: getStaticValue evaluates static value on AST. ReferenceTracker checks the members of modules/globals as handling assignments and destructuring. \uD83D\uDCD6 Usage See documentation. \uD83D\uDCF0 Changelog See releases. ❤️ Contributing Welcome contributing! Please use GitHub's Issues/PRs. Development Tools npm run test-coverage runs tests and measures coverage. npm run clean removes the coverage result of npm run test-coverage command. npm run coverage shows the coverage result of the last npm run test-coverage command. npm run lint runs ESLint. npm run watch runs tests on each file change."
  },
  "Examiner-UI/node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys/README.html": {
    "href": "Examiner-UI/node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys/README.html",
    "title": "eslint-visitor-keys | Examiner",
    "summary": "eslint-visitor-keys Constants and utilities about visitor keys to traverse AST. \uD83D\uDCBF Installation Use npm to install. $ npm install eslint-visitor-keys Requirements Node.js ^12.22.0, ^14.17.0, or >=16.0.0 \uD83D\uDCD6 Usage To use in an ESM file: import * as evk from \"eslint-visitor-keys\" To use in a CommonJS file: const evk = require(\"eslint-visitor-keys\") evk.KEYS type: { [type: string]: string[] | undefined } Visitor keys. This keys are frozen. This is an object. Keys are the type of ESTree nodes. Their values are an array of property names which have child nodes. For example: console.log(evk.KEYS.AssignmentExpression) // → [\"left\", \"right\"] evk.getKeys(node) type: (node: object) => string[] Get the visitor keys of a given AST node. This is similar to Object.keys(node) of ES Standard, but some keys are excluded: parent, leadingComments, trailingComments, and names which start with _. This will be used to traverse unknown nodes. For example: const node = { type: \"AssignmentExpression\", left: { type: \"Identifier\", name: \"foo\" }, right: { type: \"Literal\", value: 0 } } console.log(evk.getKeys(node)) // → [\"type\", \"left\", \"right\"] evk.unionWith(additionalKeys) type: (additionalKeys: object) => { [type: string]: string[] | undefined } Make the union set with evk.KEYS and the given keys. The order of keys is, additionalKeys is at first, then evk.KEYS is concatenated after that. It removes duplicated keys as keeping the first one. For example: console.log(evk.unionWith({ MethodDefinition: [\"decorators\"] })) // → { ..., MethodDefinition: [\"decorators\", \"key\", \"value\"], ... } \uD83D\uDCF0 Change log See GitHub releases. \uD83C\uDF7B Contributing Welcome. See ESLint contribution guidelines. Development commands npm test runs tests and measures code coverage. npm run lint checks source codes with ESLint. npm run test:open-coverage opens the code coverage report of the previous test with your default browser."
  },
  "Examiner-UI/node_modules/@eslint-community/regexpp/README.html": {
    "href": "Examiner-UI/node_modules/@eslint-community/regexpp/README.html",
    "title": "| Examiner",
    "summary": "@eslint-community/regexpp A regular expression parser for ECMAScript. \uD83D\uDCBF Installation $ npm install @eslint-community/regexpp require Node@^12.0.0 || ^14.0.0 || >=16.0.0. \uD83D\uDCD6 Usage import { AST, RegExpParser, RegExpValidator, RegExpVisitor, parseRegExpLiteral, validateRegExpLiteral, visitRegExpAST } from \"@eslint-community/regexpp\" parseRegExpLiteral(source, options?) Parse a given regular expression literal then make AST object. This is equivalent to new RegExpParser(options).parseLiteral(source). Parameters: source (string | RegExp) The source code to parse. options? (RegExpParser.Options) The options to parse. Return: The AST of the regular expression. validateRegExpLiteral(source, options?) Validate a given regular expression literal. This is equivalent to new RegExpValidator(options).validateLiteral(source). Parameters: source (string) The source code to validate. options? (RegExpValidator.Options) The options to validate. visitRegExpAST(ast, handlers) Visit each node of a given AST. This is equivalent to new RegExpVisitor(handlers).visit(ast). Parameters: ast (AST.Node) The AST to visit. handlers (RegExpVisitor.Handlers) The callbacks. RegExpParser new RegExpParser(options?) Parameters: options? (RegExpParser.Options) The options to parse. parser.parseLiteral(source, start?, end?) Parse a regular expression literal. Parameters: source (string) The source code to parse. E.g. \"/abc/g\". start? (number) The start index in the source code. Default is 0. end? (number) The end index in the source code. Default is source.length. Return: The AST of the regular expression. parser.parsePattern(source, start?, end?, flags?) Parse a regular expression pattern. Parameters: source (string) The source code to parse. E.g. \"abc\". start? (number) The start index in the source code. Default is 0. end? (number) The end index in the source code. Default is source.length. flags? ({ unicode?: boolean, unicodeSets?: boolean }) The flags to enable Unicode mode, and Unicode Set mode. Return: The AST of the regular expression pattern. parser.parseFlags(source, start?, end?) Parse a regular expression flags. Parameters: source (string) The source code to parse. E.g. \"gim\". start? (number) The start index in the source code. Default is 0. end? (number) The end index in the source code. Default is source.length. Return: The AST of the regular expression flags. RegExpValidator new RegExpValidator(options) Parameters: options (RegExpValidator.Options) The options to validate. validator.validateLiteral(source, start, end) Validate a regular expression literal. Parameters: source (string) The source code to validate. start? (number) The start index in the source code. Default is 0. end? (number) The end index in the source code. Default is source.length. validator.validatePattern(source, start, end, flags) Validate a regular expression pattern. Parameters: source (string) The source code to validate. start? (number) The start index in the source code. Default is 0. end? (number) The end index in the source code. Default is source.length. flags? ({ unicode?: boolean, unicodeSets?: boolean }) The flags to enable Unicode mode, and Unicode Set mode. validator.validateFlags(source, start, end) Validate a regular expression flags. Parameters: source (string) The source code to validate. start? (number) The start index in the source code. Default is 0. end? (number) The end index in the source code. Default is source.length. RegExpVisitor new RegExpVisitor(handlers) Parameters: handlers (RegExpVisitor.Handlers) The callbacks. visitor.visit(ast) Validate a regular expression literal. Parameters: ast (AST.Node) The AST to visit. \uD83D\uDCF0 Changelog GitHub Releases \uD83C\uDF7B Contributing Welcome contributing! Please use GitHub's Issues/PRs. Development Tools npm test runs tests and measures coverage. npm run build compiles TypeScript source code to index.js, index.js.map, and index.d.ts. npm run clean removes the temporary files which are created by npm test and npm run build. npm run lint runs ESLint. npm run update:test updates test fixtures. npm run update:ids updates src/unicode/ids.ts. npm run watch runs tests with --watch option."
  },
  "Examiner-UI/node_modules/@eslint/config-array/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/config-array/README.html",
    "title": "Config Array | Examiner",
    "summary": "Config Array Description A config array is a way of managing configurations that are based on glob pattern matching of filenames. Each config array contains the information needed to determine the correct configuration for any file based on the filename. Note: This is a generic package that can be used outside of ESLint. It contains no ESLint-specific functionality. Installation For Node.js and compatible runtimes: npm install @eslint/config-array # or yarn add @eslint/config-array # or pnpm install @eslint/config-array # or bun add @eslint/config-array For Deno: deno add @eslint/config-array Background The basic idea is that all configuration, including overrides, can be represented by a single array where each item in the array is a config object. Config objects appearing later in the array override config objects appearing earlier in the array. You can calculate a config for a given file by traversing all config objects in the array to find the ones that match the filename. Matching is done by specifying glob patterns in files and ignores properties on each config object. Here's an example: export default [ // match all JSON files { name: \"JSON Handler\", files: [\"**/*.json\"], handler: jsonHandler, }, // match only package.json { name: \"package.json Handler\", files: [\"package.json\"], handler: packageJsonHandler, }, ]; In this example, there are two config objects: the first matches all JSON files in all directories and the second matches just package.json in the base path directory (all the globs are evaluated as relative to a base path that can be specified). When you retrieve a configuration for foo.json, only the first config object matches so handler is equal to jsonHandler; when you retrieve a configuration for package.json, handler is equal to packageJsonHandler (because both config objects match, the second one wins). Usage First, import the ConfigArray constructor: import { ConfigArray } from \"@eslint/config-array\"; // or using CommonJS const { ConfigArray } = require(\"@eslint/config-array\"); When you create a new instance of ConfigArray, you must pass in two arguments: an array of configs and an options object. The array of configs is most likely read in from a configuration file, so here's a typical example: const configFilename = path.resolve(process.cwd(), \"my.config.js\"); const { default: rawConfigs } = await import(configFilename); const configs = new ConfigArray(rawConfigs, { // the path to match filenames from basePath: process.cwd(), // additional items in each config schema: mySchema, }); This example reads in an object or array from my.config.js and passes it into the ConfigArray constructor as the first argument. The second argument is an object specifying the basePath (the directory in which my.config.js is found) and a schema to define the additional properties of a config object beyond files, ignores, basePath, and name. Specifying a Schema The schema option is required for you to use additional properties in config objects. The schema is an object that follows the format of an ObjectSchema. The schema specifies both validation and merge rules that the ConfigArray instance needs to combine configs when there are multiple matches. Here's an example: const configFilename = path.resolve(process.cwd(), \"my.config.js\"); const { default: rawConfigs } = await import(configFilename); const mySchema = { // define the handler key in configs handler: { required: true, merge(a, b) { if (!b) return a; if (!a) return b; }, validate(value) { if (typeof value !== \"function\") { throw new TypeError(\"Function expected.\"); } } } }; const configs = new ConfigArray(rawConfigs, { // the path to match filenames from basePath: process.cwd(), // additional item schemas in each config schema: mySchema, // additional config types supported (default: []) extraConfigTypes: [\"array\", \"function\"]; }); Config Arrays Config arrays can be multidimensional, so it's possible for a config array to contain another config array when extraConfigTypes contains \"array\", such as: export default [ // JS config { files: [\"**/*.js\"], handler: jsHandler, }, // JSON configs [ // match all JSON files { name: \"JSON Handler\", files: [\"**/*.json\"], handler: jsonHandler, }, // match only package.json { name: \"package.json Handler\", files: [\"package.json\"], handler: packageJsonHandler, }, ], // filename must match function { files: [filePath => filePath.endsWith(\".md\")], handler: markdownHandler, }, // filename must match all patterns in subarray { files: [[\"*.test.*\", \"*.js\"]], handler: jsTestHandler, }, // filename must not match patterns beginning with ! { name: \"Non-JS files\", files: [\"!*.js\"], settings: { js: false, }, }, // specific settings for files inside `src` directory { name: \"Source files\", basePath: \"src\", files: [\"**/*\"], settings: { source: true, }, }, ]; In this example, the array contains both config objects and a config array. When a config array is normalized (see details below), it is flattened so only config objects remain. However, the order of evaluation remains the same. If the files array contains a function, then that function is called with the path of the file as it was passed in. The function is expected to return true if there is a match and false if not. (The ignores array can also contain functions.) If the files array contains an item that is an array of strings and functions, then all patterns must match in order for the config to match. In the preceding examples, both *.test.* and *.js must match in order for the config object to be used. If a pattern in the files array begins with ! then it excludes that pattern. In the preceding example, any filename that doesn't end with .js will automatically get a settings.js property set to false. You can also specify an ignores key that will force files matching those patterns to not be included. If the ignores key is in a config object without any other keys, then those ignores will always be applied; otherwise those ignores act as exclusions. Here's an example: export default [ // Always ignored { ignores: [\"**/.git/**\", \"**/node_modules/**\"] }, // .eslintrc.js file is ignored only when .js file matches { files: [\"**/*.js\"], ignores: [\".eslintrc.js\"] handler: jsHandler } ]; You can use negated patterns in ignores to exclude a file that was already ignored, such as: export default [ // Ignore all JSON files except tsconfig.json { files: [\"**/*\"], ignores: [\"**/*.json\", \"!tsconfig.json\"], }, ]; Config Functions Config arrays can also include config functions when extraConfigTypes contains \"function\". A config function accepts a single parameter, context (defined by you), and must return either a config object or a config array (it cannot return another function). Config functions allow end users to execute code in the creation of appropriate config objects. Here's an example: export default [ // JS config { files: [\"**/*.js\"], handler: jsHandler, }, // JSON configs function (context) { return [ // match all JSON files { name: context.name + \" JSON Handler\", files: [\"**/*.json\"], handler: jsonHandler, }, // match only package.json { name: context.name + \" package.json Handler\", files: [\"package.json\"], handler: packageJsonHandler, }, ]; }, ]; When a config array is normalized, each function is executed and replaced in the config array with the return value. Note: Config functions can also be async. Normalizing Config Arrays Once a config array has been created and loaded with all of the raw config data, it must be normalized before it can be used. The normalization process goes through and flattens the config array as well as executing all config functions to get their final values. To normalize a config array, call the normalize() method and pass in a context object: await configs.normalize({ name: \"MyApp\", }); The normalize() method returns a promise, so be sure to use the await operator. The config array instance is normalized in-place, so you don't need to create a new variable. If you want to disallow async config functions, you can call normalizeSync() instead. This method is completely synchronous and does not require using the await operator as it does not return a promise: await configs.normalizeSync({ name: \"MyApp\", }); Important: Once a ConfigArray is normalized, it cannot be changed further. You can, however, create a new ConfigArray and pass in the normalized instance to create an unnormalized copy. Getting Config for a File To get the config for a file, use the getConfig() method on a normalized config array and pass in the filename to get a config for: // pass in filename const fileConfig = configs.getConfig( path.resolve(process.cwd(), \"package.json\"), ); The config array always returns an object, even if there are no configs matching the given filename. You can then inspect the returned config object to determine how to proceed. A few things to keep in mind: If a filename is not an absolute path, it will be resolved relative to the base path directory. The returned config object never has files, ignores, basePath, or name properties; the only properties on the object will be the other configuration options specified. The config array caches configs, so subsequent calls to getConfig() with the same filename will return in a fast lookup rather than another calculation. A config will only be generated if the filename matches an entry in a files key. A config will not be generated without matching a files key (configs without a files key are only applied when another config with a files key is applied; configs without files are never applied on their own). Any config with a files key entry that is * or ends with /** or /* will only be applied if another entry in the same files key matches or another config matches. Determining Ignored Paths You can determine if a file is ignored by using the isFileIgnored() method and passing in the path of any file, as in this example: const ignored = configs.isFileIgnored(\"/foo/bar/baz.txt\"); A file is considered ignored if any of the following is true: It's parent directory is ignored. For example, if foo is in ignores, then foo/a.js is considered ignored. It has an ancestor directory that is ignored. For example, if foo is in ignores, then foo/baz/a.js is considered ignored. It matches an ignored file pattern. For example, if **/a.js is in ignores, then foo/a.js and foo/baz/a.js are considered ignored. If it matches an entry in files and also in ignores. For example, if **/*.js is in files and **/a.js is in ignores, then foo/a.js and foo/baz/a.js are considered ignored. The file is outside the basePath. If the basePath is /usr/me, then /foo/a.js is considered ignored. For directories, use the isDirectoryIgnored() method and pass in the path of any directory, as in this example: const ignored = configs.isDirectoryIgnored(\"/foo/bar/\"); A directory is considered ignored if any of the following is true: It's parent directory is ignored. For example, if foo is in ignores, then foo/baz is considered ignored. It has an ancestor directory that is ignored. For example, if foo is in ignores, then foo/bar/baz/a.js is considered ignored. It matches and ignored file pattern. For example, if **/a.js is in ignores, then foo/a.js and foo/baz/a.js are considered ignored. If it matches an entry in files and also in ignores. For example, if **/*.js is in files and **/a.js is in ignores, then foo/a.js and foo/baz/a.js are considered ignored. The file is outside the basePath. If the basePath is /usr/me, then /foo/a.js is considered ignored. Important: A pattern such as foo/** means that foo and foo/ are not ignored whereas foo/bar is ignored. If you want to ignore foo and all of its subdirectories, use the pattern foo or foo/ in ignores. Caching Mechanisms Each ConfigArray aggressively caches configuration objects to avoid unnecessary work. This caching occurs in two ways: File-based Caching. For each filename that is passed into a method, the resulting config is cached against that filename so you're always guaranteed to get the same object returned from getConfig() whenever you pass the same filename in. Index-based Caching. Whenever a config is calculated, the config elements that were used to create the config are also cached. So if a given filename matches elements 1, 5, and 7, the resulting config is cached with a key of 1,5,7. That way, if another file is passed that matches the same config elements, the result is already known and doesn't have to be recalculated. That means two files that match all the same elements will return the same config from getConfig(). Acknowledgements The design of this project was influenced by feedback on the ESLint RFC, and incorporates ideas from: Teddy Katz (@not-an-aardvark) Toru Nagashima (@mysticatea) Kai Cataldo (@kaicataldo) License Apache 2.0 Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/@eslint/config-helpers/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/config-helpers/README.html",
    "title": "| Examiner",
    "summary": "@eslint/config-helpers Description Helper utilities for creating ESLint configuration. Installation For Node.js and compatible runtimes: npm install @eslint/config-helpers # or yarn add @eslint/config-helpers # or pnpm install @eslint/config-helpers # or bun add @eslint/config-helpers For Deno: deno add @eslint/config-helpers Usage defineConfig() The defineConfig() function allows you to specify an ESLint configuration with full type checking and additional capabilities, such as extends. Here's an example: // eslint.config.js import { defineConfig } from \"@eslint/config-helpers\"; import js from \"@eslint/js\"; export default defineConfig([ { files: [\"src/**/*.js\"], plugins: { js }, extends: [\"js/recommended\"], rules: { semi: \"error\", \"prefer-const\": \"error\", }, }, { files: [\"test/**/*.js\"], rules: { \"no-console\": \"off\", }, }, ]); globalIgnores() The globalIgnores() function allows you to specify patterns for files and directories that should be globally ignored by ESLint. This is useful for excluding files that you don't want to lint, such as build directories or third-party libraries. Here's an example: // eslint.config.js import { defineConfig, globalIgnores } from \"@eslint/config-helpers\"; export default defineConfig([ { files: [\"src/**/*.js\"], rules: { semi: \"error\", \"prefer-const\": \"error\", }, }, globalIgnores([\"node_modules/\", \"dist/\", \"coverage/\"]), ]); License Apache 2.0 Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/@eslint/core/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/core/README.html",
    "title": "ESLint Core | Examiner",
    "summary": "ESLint Core Overview This package is the future home of the rewritten, runtime-agnostic ESLint core. Right now, it exports the core types necessary to implement language plugins. License Apache 2.0 Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/@eslint/eslintrc/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/eslintrc/README.html",
    "title": "ESLintRC Library | Examiner",
    "summary": "ESLintRC Library This repository contains the legacy ESLintRC configuration file format for ESLint. This package is not intended for use outside of the ESLint ecosystem. It is ESLint-specific and not intended for use in other programs. Note: This package is frozen except for critical bug fixes as ESLint moves to a new config system. Installation You can install the package as follows: npm install @eslint/eslintrc -D # or yarn add @eslint/eslintrc -D # or pnpm install @eslint/eslintrc -D # or bun install @eslint/eslintrc -D Usage (ESM) The primary class in this package is FlatCompat, which is a utility to translate ESLintRC-style configs into flat configs. Here's how you use it inside of your eslint.config.js file: import { FlatCompat } from \"@eslint/eslintrc\"; import js from \"@eslint/js\"; import path from \"path\"; import { fileURLToPath } from \"url\"; // mimic CommonJS variables -- not needed if using CommonJS const __filename = fileURLToPath(import.meta.url); const __dirname = path.dirname(__filename); const compat = new FlatCompat({ baseDirectory: __dirname, // optional; default: process.cwd() resolvePluginsRelativeTo: __dirname, // optional recommendedConfig: js.configs.recommended, // optional unless you're using \"eslint:recommended\" allConfig: js.configs.all, // optional unless you're using \"eslint:all\" }); export default [ // mimic ESLintRC-style extends ...compat.extends(\"standard\", \"example\", \"plugin:react/recommended\"), // mimic environments ...compat.env({ es2020: true, node: true }), // mimic plugins ...compat.plugins(\"jsx-a11y\", \"react\"), // translate an entire config ...compat.config({ plugins: [\"jsx-a11y\", \"react\"], extends: \"standard\", env: { es2020: true, node: true }, rules: { semi: \"error\" } }) ]; Usage (CommonJS) Using FlatCompat in CommonJS files is similar to ESM, but you'll use require() and module.exports instead of import and export. Here's how you use it inside of your eslint.config.js CommonJS file: const { FlatCompat } = require(\"@eslint/eslintrc\"); const js = require(\"@eslint/js\"); const compat = new FlatCompat({ baseDirectory: __dirname, // optional; default: process.cwd() resolvePluginsRelativeTo: __dirname, // optional recommendedConfig: js.configs.recommended, // optional unless using \"eslint:recommended\" allConfig: js.configs.all, // optional unless using \"eslint:all\" }); module.exports = [ // mimic ESLintRC-style extends ...compat.extends(\"standard\", \"example\", \"plugin:react/recommended\"), // mimic environments ...compat.env({ es2020: true, node: true }), // mimic plugins ...compat.plugins(\"jsx-a11y\", \"react\"), // translate an entire config ...compat.config({ plugins: [\"jsx-a11y\", \"react\"], extends: \"standard\", env: { es2020: true, node: true }, rules: { semi: \"error\" } }) ]; Troubleshooting TypeError: Missing parameter 'recommendedConfig' in FlatCompat constructor The recommendedConfig option is required when any config uses eslint:recommended, including any config in an extends clause. To fix this, follow the example above using @eslint/js to provide the eslint:recommended config. TypeError: Missing parameter 'allConfig' in FlatCompat constructor The allConfig option is required when any config uses eslint:all, including any config in an extends clause. To fix this, follow the example above using @eslint/js to provide the eslint:all config. License MIT License"
  },
  "Examiner-UI/node_modules/@eslint/eslintrc/node_modules/globals/readme.html": {
    "href": "Examiner-UI/node_modules/@eslint/eslintrc/node_modules/globals/readme.html",
    "title": "globals | Examiner",
    "summary": "globals Global identifiers from different JavaScript environments It's just a JSON file, so use it in any environment. This package is used by ESLint. This package no longer accepts new environments. If you need it for ESLint, just create a plugin. Install npm install globals Usage const globals = require('globals'); console.log(globals.browser); /* { addEventListener: false, applicationCache: false, ArrayBuffer: false, atob: false, … } */ Each global is given a value of true or false. A value of true indicates that the variable may be overwritten. A value of false indicates that the variable should be considered read-only. This information is used by static analysis tools to flag incorrect behavior. We assume all variables should be false unless we hear otherwise. For Node.js this package provides two sets of globals: globals.nodeBuiltin: Globals available to all code running in Node.js. These will usually be available as properties on the global object and include process, Buffer, but not CommonJS arguments like require. See: https://nodejs.org/api/globals.html globals.node: A combination of the globals from nodeBuiltin plus all CommonJS arguments (\"CommonJS module scope\"). See: https://nodejs.org/api/modules.html#modules_the_module_scope When analyzing code that is known to run outside of a CommonJS wrapper, for example, JavaScript modules, nodeBuiltin can find accidental CommonJS references."
  },
  "Examiner-UI/node_modules/@eslint/js/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/js/README.html",
    "title": "ESLint JavaScript Plugin | Examiner",
    "summary": "ESLint JavaScript Plugin Website | Configure ESLint | Rules | Contributing | Twitter | Chatroom The beginnings of separating out JavaScript-specific functionality from ESLint. Right now, this plugin contains two configurations: recommended - enables the rules recommended by the ESLint team (the replacement for \"eslint:recommended\") all - enables all ESLint rules (the replacement for \"eslint:all\") Installation npm install @eslint/js -D Usage Use in your eslint.config.js file anytime you want to extend one of the configs: import { defineConfig } from \"eslint/config\"; import js from \"@eslint/js\"; export default defineConfig([ // apply recommended rules to JS files { name: \"your-project/recommended-rules\", files: [\"**/*.js\"], plugins: { js, }, extends: [\"js/recommended\"], }, // apply recommended rules to JS files with an override { name: \"your-project/recommended-rules-with-override\", files: [\"**/*.js\"], plugins: { js, }, extends: [\"js/recommended\"], rules: { \"no-unused-vars\": \"warn\", }, }, // apply all rules to JS files { name: \"your-project/all-rules\", files: [\"**/*.js\"], plugins: { js, }, extends: [\"js/all\"], rules: { \"no-unused-vars\": \"warn\", }, }, ]); License MIT"
  },
  "Examiner-UI/node_modules/@eslint/object-schema/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/object-schema/README.html",
    "title": "ObjectSchema Package | Examiner",
    "summary": "ObjectSchema Package Overview A JavaScript object merge/validation utility where you can define a different merge and validation strategy for each key. This is helpful when you need to validate complex data structures and then merge them in a way that is more complex than Object.assign(). This is used in the @eslint/config-array package but can also be used on its own. Installation For Node.js and compatible runtimes: npm install @eslint/object-schema # or yarn add @eslint/object-schema # or pnpm install @eslint/object-schema # or bun install @eslint/object-schema For Deno: deno add @eslint/object-schema Usage Import the ObjectSchema constructor: // using ESM import { ObjectSchema } from \"@eslint/object-schema\"; // using CommonJS const { ObjectSchema } = require(\"@eslint/object-schema\"); const schema = new ObjectSchema({ // define a definition for the \"downloads\" key downloads: { required: true, merge(value1, value2) { return value1 + value2; }, validate(value) { if (typeof value !== \"number\") { throw new Error(\"Expected downloads to be a number.\"); } }, }, // define a strategy for the \"versions\" key version: { required: true, merge(value1, value2) { return value1.concat(value2); }, validate(value) { if (!Array.isArray(value)) { throw new Error(\"Expected versions to be an array.\"); } }, }, }); const record1 = { downloads: 25, versions: [\"v1.0.0\", \"v1.1.0\", \"v1.2.0\"], }; const record2 = { downloads: 125, versions: [\"v2.0.0\", \"v2.1.0\", \"v3.0.0\"], }; // make sure the records are valid schema.validate(record1); schema.validate(record2); // merge together (schema.merge() accepts any number of objects) const result = schema.merge(record1, record2); // result looks like this: const result = { downloads: 75, versions: [\"v1.0.0\", \"v1.1.0\", \"v1.2.0\", \"v2.0.0\", \"v2.1.0\", \"v3.0.0\"], }; Tips and Tricks Named merge strategies Instead of specifying a merge() method, you can specify one of the following strings to use a default merge strategy: \"assign\" - use Object.assign() to merge the two values into one object. \"overwrite\" - the second value always replaces the first. \"replace\" - the second value replaces the first if the second is not undefined. For example: const schema = new ObjectSchema({ name: { merge: \"replace\", validate() {}, }, }); Named validation strategies Instead of specifying a validate() method, you can specify one of the following strings to use a default validation strategy: \"array\" - value must be an array. \"boolean\" - value must be a boolean. \"number\" - value must be a number. \"object\" - value must be an object. \"object?\" - value must be an object or null. \"string\" - value must be a string. \"string!\" - value must be a non-empty string. For example: const schema = new ObjectSchema({ name: { merge: \"replace\", validate: \"string\", }, }); Subschemas If you are defining a key that is, itself, an object, you can simplify the process by using a subschema. Instead of defining merge() and validate(), assign a schema key that contains a schema definition, like this: const schema = new ObjectSchema({ name: { schema: { first: { merge: \"replace\", validate: \"string\", }, last: { merge: \"replace\", validate: \"string\", }, }, }, }); schema.validate({ name: { first: \"n\", last: \"z\", }, }); Remove Keys During Merge If the merge strategy for a key returns undefined, then the key will not appear in the final object. For example: const schema = new ObjectSchema({ date: { merge() { return undefined; }, validate(value) { Date.parse(value); // throws an error when invalid }, }, }); const object1 = { date: \"5/5/2005\" }; const object2 = { date: \"6/6/2006\" }; const result = schema.merge(object1, object2); console.log(\"date\" in result); // false Requiring Another Key Be Present If you'd like the presence of one key to require the presence of another key, you can use the requires property to specify an array of other properties that any key requires. For example: const schema = new ObjectSchema(); const schema = new ObjectSchema({ date: { merge() { return undefined; }, validate(value) { Date.parse(value); // throws an error when invalid }, }, time: { requires: [\"date\"], merge(first, second) { return second; }, validate(value) { // ... }, }, }); // throws error: Key \"time\" requires keys \"date\" schema.validate({ time: \"13:45\", }); In this example, even though date is an optional key, it is required to be present whenever time is present. License Apache 2.0 Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/@eslint/plugin-kit/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/plugin-kit/README.html",
    "title": "ESLint Plugin Kit | Examiner",
    "summary": "ESLint Plugin Kit Description A collection of utilities to help build ESLint plugins. Installation For Node.js and compatible runtimes: npm install @eslint/plugin-kit # or yarn add @eslint/plugin-kit # or pnpm install @eslint/plugin-kit # or bun add @eslint/plugin-kit For Deno: deno add @eslint/plugin-kit Usage This package exports the following utilities: ConfigCommentParser - used to parse ESLint configuration comments (i.e., /* eslint-disable rule */) VisitNodeStep and CallMethodStep - used to help implement SourceCode#traverse() Directive - used to help implement SourceCode#getDisableDirectives() TextSourceCodeBase - base class to help implement the SourceCode interface ConfigCommentParser To use the ConfigCommentParser class, import it from the package and create a new instance, such as: import { ConfigCommentParser } from \"@eslint/plugin-kit\"; // create a new instance const commentParser = new ConfigCommentParser(); // pass in a comment string without the comment delimiters const directive = commentParser.parseDirective( \"eslint-disable prefer-const, semi -- I don't want to use these.\", ); // will be undefined when a directive can't be parsed if (directive) { console.log(directive.label); // \"eslint-disable\" console.log(directive.value); // \"prefer-const, semi\" console.log(directive.justification); // \"I don't want to use these.\" } There are different styles of directive values that you'll need to parse separately to get the correct format: import { ConfigCommentParser } from \"@eslint/plugin-kit\"; // create a new instance const commentParser = new ConfigCommentParser(); // list format const list = commentParser.parseListConfig(\"prefer-const, semi\"); console.log(Object.entries(list)); // [[\"prefer-const\", true], [\"semi\", true]] // string format const strings = commentParser.parseStringConfig(\"foo:off, bar\"); console.log(Object.entries(strings)); // [[\"foo\", \"off\"], [\"bar\", null]] // JSON-like config format const jsonLike = commentParser.parseJSONLikeConfig( \"semi:[error, never], prefer-const: warn\", ); console.log(Object.entries(jsonLike.config)); // [[\"semi\", [\"error\", \"never\"]], [\"prefer-const\", \"warn\"]] VisitNodeStep and CallMethodStep The VisitNodeStep and CallMethodStep classes represent steps in the traversal of source code. They implement the correct interfaces to return from the SourceCode#traverse() method. The VisitNodeStep class is the more common of the two, where you are describing a visit to a particular node during the traversal. The constructor accepts three arguments: target - the node being visited. This is used to determine the method to call inside of a rule. For instance, if the node's type is Literal then ESLint will call a method named Literal() on the rule (if present). phase - either 1 for enter or 2 for exit. args - an array of arguments to pass into the visitor method of a rule. For example: import { VisitNodeStep } from \"@eslint/plugin-kit\"; class MySourceCode { traverse() { const steps = []; for (const { node, parent, phase } of iterator(this.ast)) { steps.push( new VisitNodeStep({ target: node, phase: phase === \"enter\" ? 1 : 2, args: [node, parent], }), ); } return steps; } } The CallMethodStep class is less common and is used to tell ESLint to call a specific method on the rule. The constructor accepts two arguments: target - the name of the method to call, frequently beginning with \"on\" such as \"onCodePathStart\". args - an array of arguments to pass to the method. For example: import { VisitNodeStep, CallMethodStep } from \"@eslint/plugin-kit\"; class MySourceCode { traverse() { const steps = []; for (const { node, parent, phase } of iterator(this.ast)) { steps.push( new VisitNodeStep({ target: node, phase: phase === \"enter\" ? 1 : 2, args: [node, parent], }), ); // call a method indicating how many times we've been through the loop steps.push( new CallMethodStep({ target: \"onIteration\", args: [steps.length] }); ) } return steps; } } Directive The Directive class represents a disable directive in the source code and implements the Directive interface from @eslint/core. You can tell ESLint about disable directives using the SourceCode#getDisableDirectives() method, where part of the return value is an array of Directive objects. Here's an example: import { Directive, ConfigCommentParser } from \"@eslint/plugin-kit\"; class MySourceCode { getDisableDirectives() { const directives = []; const problems = []; const commentParser = new ConfigCommentParser(); // read in the inline config nodes to check each one this.getInlineConfigNodes().forEach(comment => { // Step 1: Parse the directive const { label, value, justification } = commentParser.parseDirective(comment.value); // Step 2: Extract the directive value and create the `Directive` object switch (label) { case \"eslint-disable\": case \"eslint-enable\": case \"eslint-disable-next-line\": case \"eslint-disable-line\": { const directiveType = label.slice(\"eslint-\".length); directives.push( new Directive({ type: directiveType, node: comment, value, justification, }), ); } // ignore any comments that don't begin with known labels } }); return { directives, problems, }; } } TextSourceCodeBase The TextSourceCodeBase class is intended to be a base class that has several of the common members found in SourceCode objects already implemented. Those members are: lines - an array of text lines that is created automatically when the constructor is called. getLoc(node) - gets the location of a node. Works for nodes that have the ESLint-style loc property and nodes that have the Unist-style position property. If you're using an AST with a different location format, you'll still need to implement this method yourself. getRange(node) - gets the range of a node within the source text. Works for nodes that have the ESLint-style range property and nodes that have the Unist-style position property. If you're using an AST with a different range format, you'll still need to implement this method yourself. getText(nodeOrToken, charsBefore, charsAfter) - gets the source text for the given node or token that has range information attached. Optionally, can return additional characters before and after the given node or token. As long as getRange() is properly implemented, this method will just work. getAncestors(node) - returns the ancestry of the node. In order for this to work, you must implement the getParent() method yourself. Here's an example: import { TextSourceCodeBase } from \"@eslint/plugin-kit\"; export class MySourceCode extends TextSourceCodeBase { #parents = new Map(); constructor({ ast, text }) { super({ ast, text }); } getParent(node) { return this.#parents.get(node); } traverse() { const steps = []; for (const { node, parent, phase } of iterator(this.ast)) { //save the parent information this.#parent.set(node, parent); steps.push( new VisitNodeStep({ target: node, phase: phase === \"enter\" ? 1 : 2, args: [node, parent], }), ); } return steps; } } In general, it's safe to collect the parent information during the traverse() method as getParent() and getAncestor() will only be called from rules once the AST has been traversed at least once. License Apache 2.0 Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/@eslint/plugin-kit/node_modules/@eslint/core/README.html": {
    "href": "Examiner-UI/node_modules/@eslint/plugin-kit/node_modules/@eslint/core/README.html",
    "title": "ESLint Core | Examiner",
    "summary": "ESLint Core Overview This package is the future home of the rewritten, runtime-agnostic ESLint core. Right now, it exports the core types necessary to implement language plugins. License Apache 2.0 Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/@humanfs/core/README.html": {
    "href": "Examiner-UI/node_modules/@humanfs/core/README.html",
    "title": "@humanfs/core | Examiner",
    "summary": "@humanfs/core by Nicholas C. Zakas If you find this useful, please consider supporting my work with a donation or nominate me for a GitHub Star. Description The core functionality for humanfs that is shared across all implementations for all runtimes. The contents of this package are intentionally runtime agnostic and are not intended to be used alone. Currently, this package simply exports the Hfs class, which is an abstract base class intended to be inherited from in runtime-specific hfs packages (like @humanfs/node). Warning This project is experimental and may change significantly before v1.0.0. Use at your own caution and definitely not in production! Installation Node.js Install using your favorite package manager for Node.js: npm install @humanfs/core # or pnpm install @humanfs/core # or yarn add @humanfs/core # or bun install @humanfs/core Then you can import the Hfs and Path classes like this: import { Hfs, Path } from \"@humanfs/core\"; Deno Install using JSR: deno add @humanfs/core # or jsr add @humanfs/core Then you can import the Hfs class like this: import { Hfs, Path } from \"@humanfs/core\"; Browser It's recommended to import the minified version to save bandwidth: import { Hfs, Path } from \"https://cdn.skypack.dev/@humanfs/core?min\"; However, you can also import the unminified version for debugging purposes: import { Hfs, Path } from \"https://cdn.skypack.dev/@humanfs/core\"; Usage Hfs Class The Hfs class contains all of the basic functionality for an Hfs instance without a predefined impl. This class is mostly used for creating runtime-specific impls, such as NodeHfs and DenoHfs. You can create your own instance by providing an impl directly: const hfs = new Hfs({ impl: { async text() {} }}); The specified impl becomes the base impl for the instance, meaning you can always reset back to it using resetImpl(). You can also inherit from Hfs to create your own class with a preconfigured impl, such as: class MyHfs extends Hfs { constructor() { super({ impl: myImpl }); } } Path Class The Path class represents the path to a directory or file within a file system. It's an abstract representation that can be used even outside of traditional file systems where string paths might not make sense. const myPath = new Path([\"dir\", \"subdir\"]); console.log(myPath.toString()); // \"dir/subdir\" // add another step myPath.push(\"file.txt\"); console.log(myPath.toString()); // \"dir/subdir/file.txt\" // get just the last step console.log(myPath.name); // \"file.txt\" // change just the last step myPath.name = \"file.json\"; console.log(myPath.name); // \"file.json\" console.log(myPath.toString()); // \"dir/subdir/file.json\" // get the size of the path console.log(myPath.size); // 3 // remove the last step myPath.pop(); console.log(myPath.toString()); // \"dir/subdir\" // iterate over the steps for (const step of myPath) { // do something } // create a new path from a string const newPath = Path.fromString(\"/foo/bar\"); License Apache 2.0"
  },
  "Examiner-UI/node_modules/@humanfs/node/README.html": {
    "href": "Examiner-UI/node_modules/@humanfs/node/README.html",
    "title": "@humanfs/node | Examiner",
    "summary": "@humanfs/node by Nicholas C. Zakas If you find this useful, please consider supporting my work with a donation or nominate me for a GitHub Star. Description The hfs bindings for use in Node.js and Node.js-compatible runtimes. Warning This project is experimental and may change significantly before v1.0.0. Use at your own caution and definitely not in production! Installation Install using your favorite package manager: npm install @humanfs/node # or pnpm install @humanfs/node # or yarn add @humanfs/node # or bun install @humanfs/node Usage The easiest way to use hfs in your project is to import the hfs object: import { hfs } from \"@humanfs/node\"; Then, you can use the API methods: // 1. Files // read from a text file const text = await hfs.text(\"file.txt\"); // read from a JSON file const json = await hfs.json(\"file.json\"); // read raw bytes from a text file const arrayBuffer = await hfs.arrayBuffer(\"file.txt\"); // write text to a file await hfs.write(\"file.txt\", \"Hello world!\"); // write bytes to a file await hfs.write(\"file.txt\", new TextEncoder().encode(\"Hello world!\")); // append text to a file await hfs.append(\"file.txt\", \"Hello world!\"); // append bytes to a file await hfs.append(\"file.txt\", new TextEncoder().encode(\"Hello world!\")); // does the file exist? const found = await hfs.isFile(\"file.txt\"); // how big is the file? const size = await hfs.size(\"file.txt\"); // when was the file modified? const mtime = await hfs.lastModified(\"file.txt\"); // copy a file from one location to another await hfs.copy(\"file.txt\", \"file-copy.txt\"); // move a file from one location to another await hfs.move(\"file.txt\", \"renamed.txt\"); // delete a file await hfs.delete(\"file.txt\"); // 2. Directories // create a directory await hfs.createDirectory(\"dir\"); // create a directory recursively await hfs.createDirectory(\"dir/subdir\"); // does the directory exist? const dirFound = await hfs.isDirectory(\"dir\"); // copy the entire directory hfs.copyAll(\"from-dir\", \"to-dir\"); // move the entire directory hfs.moveAll(\"from-dir\", \"to-dir\"); // delete a directory await hfs.delete(\"dir\"); // delete a non-empty directory await hfs.deleteAll(\"dir\"); If you'd like to create your own instance, import the NodeHfs constructor: import { NodeHfs } from \"@humanfs/node\"; import fsp from \"fs/promises\"; const hfs = new NodeHfs(); // optionally specify the fs/promises object to use const hfs = new NodeHfs({ fsp }); If you'd like to use just the impl, import the NodeHfsImpl constructor: import { NodeHfsImpl } from \"@humanfs/node\"; import fsp from \"fs/promises\"; const hfs = new NodeHfsImpl(); // optionally specify the fs/promises object to use const hfs = new NodeHfsImpl({ fsp }); Errors Handled ENOENT - in most cases, these errors are handled silently. ENFILE and EMFILE - calls that result in these errors are retried for up to 60 seconds before giving up for good. License Apache 2.0"
  },
  "Examiner-UI/node_modules/@humanfs/node/node_modules/@humanwhocodes/retry/README.html": {
    "href": "Examiner-UI/node_modules/@humanfs/node/node_modules/@humanwhocodes/retry/README.html",
    "title": "Retry utility | Examiner",
    "summary": "Retry utility by Nicholas C. Zakas If you find this useful, please consider supporting my work with a donation or nominate me for a GitHub Star. Description A utility for retrying failed async JavaScript calls based on the error returned. Usage Node.js Install using npm or yarn: npm install @humanwhocodes/retry # or yarn add @humanwhocodes/retry Import into your Node.js project: // CommonJS const { Retrier } = require(\"@humanwhocodes/retry\"); // ESM import { Retrier } from \"@humanwhocodes/retry\"; Deno Install using JSR: deno add @humanwhocodes/retry #or jsr add @humanwhocodes/retry Then import into your Deno project: import { Retrier } from \"@humanwhocodes/retry\"; Bun Install using this command: bun add @humanwhocodes/retry Import into your Bun project: import { Retrier } from \"@humanwhocodes/retry\"; Browser It's recommended to import the minified version to save bandwidth: import { Retrier } from \"https://cdn.skypack.dev/@humanwhocodes/retry?min\"; However, you can also import the unminified version for debugging purposes: import { Retrier } from \"https://cdn.skypack.dev/@humanwhocodes/retry\"; API After importing, create a new instance of Retrier and specify the function to run on the error. This function should return true if you want the call retried and false if not. // this instance will retry if the specific error code is found const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }); Then, call the retry() method around the function you'd like to retry, such as: import fs from \"fs/promises\"; const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }); const text = await retrier.retry(() => fs.readFile(\"README.md\", \"utf8\")); The retry() method will either pass through the result on success or wait and retry on failure. Any error that isn't caught by the retrier is automatically rejected so the end result is a transparent passing through of both success and failure. You can also pass an AbortSignal to cancel a retry: import fs from \"fs/promises\"; const controller = new AbortController(); const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }); const text = await retrier.retry( () => fs.readFile(\"README.md\", \"utf8\"), { signal: controller.signal } ); Developer Setup Fork the repository Clone your fork Run npm install to setup dependencies Run npm test to run tests License Apache 2.0 Prior Art This utility is inspired by, and contains code from graceful-fs."
  },
  "Examiner-UI/node_modules/@humanwhocodes/module-importer/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/@humanwhocodes/module-importer/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog 1.0.1 (2022-08-18) Bug Fixes Ensure CommonJS mode works correctly. (cf54a0b), closes #6 1.0.0 (2022-08-17) Features Implement ModuleImporter (3ce4e82)"
  },
  "Examiner-UI/node_modules/@humanwhocodes/module-importer/README.html": {
    "href": "Examiner-UI/node_modules/@humanwhocodes/module-importer/README.html",
    "title": "ModuleImporter | Examiner",
    "summary": "ModuleImporter by Nicholas C. Zakas If you find this useful, please consider supporting my work with a donation. Description A utility for seamlessly importing modules in Node.js regardless if they are CommonJS or ESM format. Under the hood, this uses import() and relies on Node.js's CommonJS compatibility to work correctly. This ensures that the correct locations and formats are used for CommonJS so you can call one method and not worry about any compatibility issues. The problem with the default import() is that it always resolves relative to the file location in which it is called. If you want to resolve from a different location, you need to jump through a few hoops to achieve that. This package makes it easy to both resolve and import modules from any directory. Usage Node.js Install using npm or yarn: npm install @humanwhocodes/module-importer # or yarn add @humanwhocodes/module-importer Import into your Node.js project: // CommonJS const { ModuleImporter } = require(\"@humanwhocodes/module-importer\"); // ESM import { ModuleImporter } from \"@humanwhocodes/module-importer\"; Bun Install using this command: bun add @humanwhocodes/module-importer Import into your Bun project: import { ModuleImporter } from \"@humanwhocodes/module-importer\"; API After importing, create a new instance of ModuleImporter to start emitting events: // cwd can be omitted to use process.cwd() const importer = new ModuleImporter(cwd); // you can resolve the location of any package const location = importer.resolve(\"./some-file.cjs\"); // you can also import directly const module = importer.import(\"./some-file.cjs\"); For both resolve() and import(), you can pass in package names and filenames. Developer Setup Fork the repository Clone your fork Run npm install to setup dependencies Run npm test to run tests License Apache 2.0"
  },
  "Examiner-UI/node_modules/@humanwhocodes/retry/README.html": {
    "href": "Examiner-UI/node_modules/@humanwhocodes/retry/README.html",
    "title": "Retry utility | Examiner",
    "summary": "Retry utility by Nicholas C. Zakas If you find this useful, please consider supporting my work with a donation or nominate me for a GitHub Star. Description A utility for retrying failed async JavaScript calls based on the error returned. Usage Node.js Install using npm or yarn: npm install @humanwhocodes/retry # or yarn add @humanwhocodes/retry Import into your Node.js project: // CommonJS const { Retrier } = require(\"@humanwhocodes/retry\"); // ESM import { Retrier } from \"@humanwhocodes/retry\"; Deno Install using JSR: deno add @humanwhocodes/retry #or jsr add @humanwhocodes/retry Then import into your Deno project: import { Retrier } from \"@humanwhocodes/retry\"; Bun Install using this command: bun add @humanwhocodes/retry Import into your Bun project: import { Retrier } from \"@humanwhocodes/retry\"; Browser It's recommended to import the minified version to save bandwidth: import { Retrier } from \"https://cdn.skypack.dev/@humanwhocodes/retry?min\"; However, you can also import the unminified version for debugging purposes: import { Retrier } from \"https://cdn.skypack.dev/@humanwhocodes/retry\"; API After importing, create a new instance of Retrier and specify the function to run on the error. This function should return true if you want the call retried and false if not. // this instance will retry if the specific error code is found const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }); Then, call the retry() method around the function you'd like to retry, such as: import fs from \"fs/promises\"; const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }); const text = await retrier.retry(() => fs.readFile(\"README.md\", \"utf8\")); The retry() method will either pass through the result on success or wait and retry on failure. Any error that isn't caught by the retrier is automatically rejected so the end result is a transparent passing through of both success and failure. Setting a Timeout You can control how long a task will attempt to retry before giving up by passing the timeout option to the Retrier constructor. By default, the timeout is one minute. import fs from \"fs/promises\"; const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }, { timeout: 100_000 }); const text = await retrier.retry(() => fs.readFile(\"README.md\", \"utf8\")); When a call times out, it rejects the first error that was received from calling the function. Setting a Concurrency Limit When processing a large number of function calls, you can limit the number of concurrent function calls by passing the concurrency option to the Retrier constructor. By default, concurrency is 1000. import fs from \"fs/promises\"; const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }, { concurrency: 100 }); const filenames = getFilenames(); const contents = await Promise.all( filenames.map(filename => retrier.retry(() => fs.readFile(filename, \"utf8\")) ); Aborting with AbortSignal You can also pass an AbortSignal to cancel a retry: import fs from \"fs/promises\"; const controller = new AbortController(); const retrier = new Retrier(error => { return error.code === \"ENFILE\" || error.code === \"EMFILE\"; }); const text = await retrier.retry( () => fs.readFile(\"README.md\", \"utf8\"), { signal: controller.signal } ); Developer Setup Fork the repository Clone your fork Run npm install to setup dependencies Run npm test to run tests Debug Output Enable debugging output by setting the DEBUG environment variable to \"@hwc/retry\" before running. License Apache 2.0 Prior Art This utility is inspired by, and contains code from graceful-fs."
  },
  "Examiner-UI/node_modules/@icons/material/README.html": {
    "href": "Examiner-UI/node_modules/@icons/material/README.html",
    "title": "Material Icons | Examiner",
    "summary": "Material Icons materialdesignicons.com Name AccessPointIcon AccessPointNetworkIcon AccountAlertIcon AccountBoxIcon AccountBoxOutlineIcon AccountCardDetailsIcon AccountCheckIcon AccountCircleIcon AccountConvertIcon AccountEditIcon AccountGroupIcon AccountHeartIcon AccountIcon AccountKeyIcon AccountLocationIcon AccountMinusIcon AccountMultipleIcon AccountMultipleMinusIcon AccountMultipleOutlineIcon AccountMultiplePlusIcon AccountMultiplePlusOutlineIcon AccountNetworkIcon AccountOffIcon AccountOutlineIcon AccountPlusIcon AccountPlusOutlineIcon AccountRemoveIcon AccountSearchIcon AccountSettingsIcon AccountSettingsVariantIcon AccountStarIcon AccountSwitchIcon AccusoftIcon AdjustIcon AirConditionerIcon AirballoonIcon AirplaneIcon AirplaneLandingIcon AirplaneOffIcon AirplaneTakeoffIcon AirplayIcon AirportIcon AlarmBellIcon AlarmCheckIcon AlarmIcon AlarmLightIcon AlarmMultipleIcon AlarmOffIcon AlarmPlusIcon AlarmSnoozeIcon AlbumIcon AlertBoxIcon AlertCircleIcon AlertCircleOutlineIcon AlertDecagramIcon AlertIcon AlertOctagonIcon AlertOctagramIcon AlertOutlineIcon AlienIcon AllInclusiveIcon AlloIcon AlphaIcon AlphabeticalIcon AltimeterIcon AmazonClouddriveIcon AmazonIcon AmbulanceIcon AmplifierIcon AnchorIcon AndroidDebugBridgeIcon AndroidHeadIcon AndroidIcon AndroidStudioIcon AngularIcon AngularjsIcon AnimationIcon AnvilIcon AppleFinderIcon AppleIcon AppleIosIcon AppleKeyboardCapsIcon AppleKeyboardCommandIcon AppleKeyboardControlIcon AppleKeyboardOptionIcon AppleKeyboardShiftIcon AppleMobilemeIcon AppleSafariIcon ApplicationIcon ApprovalIcon AppsIcon ArchiveIcon ArrangeBringForwardIcon ArrangeBringToFrontIcon ArrangeSendBackwardIcon ArrangeSendToBackIcon ArrowAllIcon ArrowBottomLeftIcon ArrowBottomRightIcon ArrowCollapseAllIcon ArrowCollapseDownIcon ArrowCollapseHorizontalIcon ArrowCollapseIcon ArrowCollapseLeftIcon ArrowCollapseRightIcon ArrowCollapseUpIcon ArrowCollapseVerticalIcon ArrowDownBoldBoxIcon ArrowDownBoldBoxOutlineIcon ArrowDownBoldCircleIcon ArrowDownBoldCircleOutlineIcon ArrowDownBoldHexagonOutlineIcon ArrowDownBoldIcon ArrowDownBoxIcon ArrowDownDropCircleIcon ArrowDownDropCircleOutlineIcon ArrowDownIcon ArrowDownThickIcon ArrowExpandAllIcon ArrowExpandDownIcon ArrowExpandHorizontalIcon ArrowExpandIcon ArrowExpandLeftIcon ArrowExpandRightIcon ArrowExpandUpIcon ArrowExpandVerticalIcon ArrowLeftBoldBoxIcon ArrowLeftBoldBoxOutlineIcon ArrowLeftBoldCircleIcon ArrowLeftBoldCircleOutlineIcon ArrowLeftBoldHexagonOutlineIcon ArrowLeftBoldIcon ArrowLeftBoxIcon ArrowLeftDropCircleIcon ArrowLeftDropCircleOutlineIcon ArrowLeftIcon ArrowLeftThickIcon ArrowRightBoldBoxIcon ArrowRightBoldBoxOutlineIcon ArrowRightBoldCircleIcon ArrowRightBoldCircleOutlineIcon ArrowRightBoldHexagonOutlineIcon ArrowRightBoldIcon ArrowRightBoxIcon ArrowRightDropCircleIcon ArrowRightDropCircleOutlineIcon ArrowRightIcon ArrowRightThickIcon ArrowTopLeftIcon ArrowTopRightIcon ArrowUpBoldBoxIcon ArrowUpBoldBoxOutlineIcon ArrowUpBoldCircleIcon ArrowUpBoldCircleOutlineIcon ArrowUpBoldHexagonOutlineIcon ArrowUpBoldIcon ArrowUpBoxIcon ArrowUpDropCircleIcon ArrowUpDropCircleOutlineIcon ArrowUpIcon ArrowUpThickIcon ArtistIcon AssistantIcon AsteriskIcon AtIcon AtlassianIcon AtomIcon AttachmentIcon AudiobookIcon AugmentedRealityIcon AutoFixIcon AutoUploadIcon AutorenewIcon AvTimerIcon AzureIcon BabyBuggyIcon BabyIcon BackburgerIcon BackspaceIcon BackupRestoreIcon BadmintonIcon BandcampIcon BankIcon BarcodeIcon BarcodeScanIcon BarleyIcon BarrelIcon BaseballBatIcon BaseballIcon BasecampIcon BasketFillIcon BasketIcon BasketUnfillIcon BasketballIcon BatteryAlertIcon BatteryChargingIcon BatteryChargingOutlineIcon BatteryChargingWirelessAlertIcon BatteryChargingWirelessIcon BatteryChargingWirelessOutlineIcon BatteryChargingWireless_10Icon BatteryChargingWireless_20Icon BatteryChargingWireless_30Icon BatteryChargingWireless_40Icon BatteryChargingWireless_50Icon BatteryChargingWireless_60Icon BatteryChargingWireless_70Icon BatteryChargingWireless_80Icon BatteryChargingWireless_90Icon BatteryCharging_100Icon BatteryCharging_10Icon BatteryCharging_20Icon BatteryCharging_30Icon BatteryCharging_40Icon BatteryCharging_50Icon BatteryCharging_60Icon BatteryCharging_70Icon BatteryCharging_80Icon BatteryCharging_90Icon BatteryIcon BatteryMinusIcon BatteryNegativeIcon BatteryOutlineIcon BatteryPlusIcon BatteryPositiveIcon BatteryUnknownIcon Battery_10Icon Battery_20Icon Battery_30Icon Battery_40Icon Battery_50Icon Battery_60Icon Battery_70Icon Battery_80Icon Battery_90Icon BeachIcon BeakerIcon BeatsIcon BedEmptyIcon BeerIcon BehanceIcon BellIcon BellOffIcon BellOutlineIcon BellPlusIcon BellRingIcon BellRingOutlineIcon BellSleepIcon BetaIcon BibleIcon BikeIcon BingIcon BinocularsIcon BioIcon BiohazardIcon BitbucketIcon BitcoinIcon BlackMesaIcon BlackberryIcon BlenderIcon BlindsIcon BlockHelperIcon BloggerIcon BluetoothAudioIcon BluetoothConnectIcon BluetoothIcon BluetoothOffIcon BluetoothSettingsIcon BluetoothTransferIcon BlurIcon BlurLinearIcon BlurOffIcon BlurRadialIcon BombIcon BombOffIcon BoneIcon BookIcon BookMinusIcon BookMultipleIcon BookMultipleVariantIcon BookOpenIcon BookOpenPageVariantIcon BookOpenVariantIcon BookPlusIcon BookSecureIcon BookUnsecureIcon BookVariantIcon BookmarkCheckIcon BookmarkIcon BookmarkMusicIcon BookmarkOutlineIcon BookmarkPlusIcon BookmarkPlusOutlineIcon BookmarkRemoveIcon BoomboxIcon BootstrapIcon BorderAllIcon BorderAllVariantIcon BorderBottomIcon BorderBottomVariantIcon BorderColorIcon BorderHorizontalIcon BorderInsideIcon BorderLeftIcon BorderLeftVariantIcon BorderNoneIcon BorderNoneVariantIcon BorderOutsideIcon BorderRightIcon BorderRightVariantIcon BorderStyleIcon BorderTopIcon BorderTopVariantIcon BorderVerticalIcon BottleWineIcon BowTieIcon BowlIcon BowlingIcon BoxCutterIcon BoxIcon BoxShadowIcon BridgeIcon BriefcaseCheckIcon BriefcaseDownloadIcon BriefcaseIcon BriefcaseOutlineIcon BriefcaseUploadIcon BrightnessAutoIcon Brightness_1Icon Brightness_2Icon Brightness_3Icon Brightness_4Icon Brightness_5Icon Brightness_6Icon Brightness_7Icon BroomIcon BrushIcon BufferIcon BugIcon BulletinBoardIcon BullhornIcon BullseyeIcon BusArticulatedEndIcon BusArticulatedFrontIcon BusDoubleDeckerIcon BusIcon BusSchoolIcon BusSideIcon CachedIcon CakeIcon CakeLayeredIcon CakeVariantIcon CalculatorIcon CalendarBlankIcon CalendarCheckIcon CalendarClockIcon CalendarEditIcon CalendarIcon CalendarMultipleCheckIcon CalendarMultipleIcon CalendarPlusIcon CalendarQuestionIcon CalendarRangeIcon CalendarRemoveIcon CalendarTextIcon CalendarTodayIcon CallMadeIcon CallMergeIcon CallMissedIcon CallReceivedIcon CallSplitIcon CamcorderBoxIcon CamcorderBoxOffIcon CamcorderIcon CamcorderOffIcon CameraBurstIcon CameraEnhanceIcon CameraFrontIcon CameraFrontVariantIcon CameraGoproIcon CameraIcon CameraIrisIcon CameraMeteringCenterIcon CameraMeteringMatrixIcon CameraMeteringPartialIcon CameraMeteringSpotIcon CameraOffIcon CameraPartyModeIcon CameraRearIcon CameraRearVariantIcon CameraSwitchIcon CameraTimerIcon CancelIcon CandleIcon CandycaneIcon CannabisIcon CarBatteryIcon CarConnectedIcon CarConvertibleIcon CarEstateIcon CarHatchbackIcon CarIcon CarPickupIcon CarSideIcon CarSportsIcon CarWashIcon CaravanIcon CardsIcon CardsOutlineIcon CardsPlayingOutlineIcon CardsVariantIcon CarrotIcon CartIcon CartOffIcon CartOutlineIcon CartPlusIcon CaseSensitiveAltIcon CashIcon CashMultipleIcon CashUsdIcon Cash_100Icon CastConnectedIcon CastIcon CastOffIcon CastleIcon CatIcon CctvIcon CeilingLightIcon CellphoneAndroidIcon CellphoneBasicIcon CellphoneDockIcon CellphoneIcon CellphoneIphoneIcon CellphoneLinkIcon CellphoneLinkOffIcon CellphoneSettingsIcon CellphoneWirelessIcon CertificateIcon ChairSchoolIcon ChartArcIcon ChartAreasplineIcon ChartBarIcon ChartBarStackedIcon ChartBubbleIcon ChartDonutIcon ChartDonutVariantIcon ChartGanttIcon ChartHistogramIcon ChartLineIcon ChartLineStackedIcon ChartLineVariantIcon ChartPieIcon ChartScatterplotHexbinIcon ChartTimelineIcon CheckAllIcon CheckCircleIcon CheckCircleOutlineIcon CheckIcon CheckOutlineIcon CheckboxBlankCircleIcon CheckboxBlankCircleOutlineIcon CheckboxBlankIcon CheckboxBlankOutlineIcon CheckboxIntermediateIcon CheckboxMarkedCircleIcon CheckboxMarkedCircleOutlineIcon CheckboxMarkedIcon CheckboxMarkedOutlineIcon CheckboxMultipleBlankCircleIcon CheckboxMultipleBlankCircleOutlineIcon CheckboxMultipleBlankIcon CheckboxMultipleBlankOutlineIcon CheckboxMultipleMarkedCircleIcon CheckboxMultipleMarkedCircleOutlineIcon CheckboxMultipleMarkedIcon CheckboxMultipleMarkedOutlineIcon CheckerboardIcon ChemicalWeaponIcon ChessBishopIcon ChessKingIcon ChessKnightIcon ChessPawnIcon ChessQueenIcon ChessRookIcon ChevronDoubleDownIcon ChevronDoubleLeftIcon ChevronDoubleRightIcon ChevronDoubleUpIcon ChevronDownIcon ChevronLeftIcon ChevronRightIcon ChevronUpIcon ChiliHotIcon ChiliMediumIcon ChiliMildIcon ChipIcon ChurchIcon CircleIcon CircleOutlineIcon CiscoWebexIcon CityIcon ClipboardAccountIcon ClipboardAlertIcon ClipboardArrowDownIcon ClipboardArrowLeftIcon ClipboardCheckIcon ClipboardCheckOutlineIcon ClipboardFlowIcon ClipboardIcon ClipboardOutlineIcon ClipboardPlusIcon ClipboardPulseIcon ClipboardPulseOutlineIcon ClipboardTextIcon ClippyIcon ClockAlertIcon ClockEndIcon ClockFastIcon ClockIcon ClockInIcon ClockOutIcon ClockStartIcon CloseBoxIcon CloseBoxOutlineIcon CloseCircleIcon CloseCircleOutlineIcon CloseIcon CloseNetworkIcon CloseOctagonIcon CloseOctagonOutlineIcon CloseOutlineIcon ClosedCaptionIcon CloudBracesIcon CloudCheckIcon CloudCircleIcon CloudDownloadIcon CloudIcon CloudOffOutlineIcon CloudOutlineIcon CloudPrintIcon CloudPrintOutlineIcon CloudSyncIcon CloudTagsIcon CloudUploadIcon CloverIcon CodeArrayIcon CodeBracesIcon CodeBracketsIcon CodeEqualIcon CodeGreaterThanIcon CodeGreaterThanOrEqualIcon CodeLessThanIcon CodeLessThanOrEqualIcon CodeNotEqualIcon CodeNotEqualVariantIcon CodeParenthesesIcon CodeStringIcon CodeTagsCheckIcon CodeTagsIcon CodepenIcon CoffeeIcon CoffeeOutlineIcon CoffeeToGoIcon CoinIcon CoinsIcon CollageIcon ColorHelperIcon CommentAccountIcon CommentAccountOutlineIcon CommentAlertIcon CommentAlertOutlineIcon CommentCheckIcon CommentCheckOutlineIcon CommentIcon CommentMultipleIcon CommentMultipleOutlineIcon CommentOutlineIcon CommentPlusOutlineIcon CommentProcessingIcon CommentProcessingOutlineIcon CommentQuestionIcon CommentQuestionOutlineIcon CommentRemoveIcon CommentRemoveOutlineIcon CommentTextIcon CommentTextMultipleIcon CommentTextMultipleOutlineIcon CommentTextOutlineIcon CompareIcon CompassIcon CompassOutlineIcon ConsoleIcon ConsoleLineIcon ConsoleNetworkIcon ContactMailIcon ContactsIcon ContentCopyIcon ContentCutIcon ContentDuplicateIcon ContentPasteIcon ContentSaveAllIcon ContentSaveIcon ContentSaveOutlineIcon ContentSaveSettingsIcon ContrastBoxIcon ContrastCircleIcon ContrastIcon CookieIcon CopyrightIcon CornIcon CounterIcon CowIcon CraneIcon CreationIcon CreditCardIcon CreditCardMultipleIcon CreditCardOffIcon CreditCardPlusIcon CreditCardScanIcon CropFreeIcon CropIcon CropLandscapeIcon CropPortraitIcon CropRotateIcon CropSquareIcon CrosshairsGpsIcon CrosshairsIcon CrownIcon CubeIcon CubeOutlineIcon CubeSendIcon CubeUnfoldedIcon CupIcon CupOffIcon CupWaterIcon CurlingIcon CurrencyBdtIcon CurrencyBtcIcon CurrencyChfIcon CurrencyCnyIcon CurrencyEthIcon CurrencyEurIcon CurrencyGbpIcon CurrencyInrIcon CurrencyJpyIcon CurrencyKrwIcon CurrencyKztIcon CurrencyNgnIcon CurrencyRubIcon CurrencySignIcon CurrencyTryIcon CurrencyTwdIcon CurrencyUsdIcon CurrencyUsdOffIcon CursorDefaultIcon CursorDefaultOutlineIcon CursorMoveIcon CursorPointerIcon CursorTextIcon DatabaseIcon DatabaseMinusIcon DatabasePlusIcon DatabaseSearchIcon DebugStepIntoIcon DebugStepOutIcon DebugStepOverIcon DecagramIcon DecagramOutlineIcon DecimalDecreaseIcon DecimalIncreaseIcon DeleteCircleIcon DeleteEmptyIcon DeleteForeverIcon DeleteIcon DeleteRestoreIcon DeleteSweepIcon DeleteVariantIcon DeltaIcon DeskphoneIcon DesktopClassicIcon DesktopMacIcon DesktopTowerIcon DetailsIcon DeveloperBoardIcon DeviantartIcon DialpadIcon DiamondIcon DiceD10Icon DiceD12Icon DiceD20Icon DiceD4Icon DiceD6Icon DiceD8Icon DiceMultipleIcon Dice_1Icon Dice_2Icon Dice_3Icon Dice_4Icon Dice_5Icon Dice_6Icon DictionaryIcon DipSwitchIcon DirectionsForkIcon DirectionsIcon DiscordIcon DiskAlertIcon DiskIcon DisqusIcon DisqusOutlineIcon DivisionBoxIcon DivisionIcon DnaIcon DnsIcon DoNotDisturbIcon DoNotDisturbOffIcon DockerIcon DolbyIcon DomainIcon DonkeyIcon DoorClosedIcon DoorIcon DoorOpenIcon DoorbellVideoIcon DotsHorizontalCircleIcon DotsHorizontalIcon DotsVerticalCircleIcon DotsVerticalIcon DoubanIcon DownloadIcon DownloadNetworkIcon DragHorizontalIcon DragIcon DragVerticalIcon DrawingBoxIcon DrawingIcon DribbbleBoxIcon DribbbleIcon DroneIcon DropboxIcon DrupalIcon DuckIcon DumbbellIcon EarHearingIcon EarthBoxIcon EarthBoxOffIcon EarthIcon EarthOffIcon EdgeIcon EjectIcon ElephantIcon ElevationDeclineIcon ElevationRiseIcon ElevatorIcon EmailAlertIcon EmailIcon EmailOpenIcon EmailOpenOutlineIcon EmailOutlineIcon EmailSecureIcon EmailVariantIcon EmbyIcon EmoticonCoolIcon EmoticonDeadIcon EmoticonDevilIcon EmoticonExcitedIcon EmoticonHappyIcon EmoticonIcon EmoticonNeutralIcon EmoticonPoopIcon EmoticonSadIcon EmoticonTongueIcon EngineIcon EngineOutlineIcon EqualBoxIcon EqualIcon EraserIcon EraserVariantIcon EscalatorIcon EthereumIcon EthernetCableIcon EthernetCableOffIcon EthernetIcon EtsyIcon EvStationIcon EventbriteIcon EvernoteIcon ExclamationIcon ExitToAppIcon ExportIcon EyeIcon EyeOffIcon EyeOffOutlineIcon EyeOutlineIcon EyePlusIcon EyePlusOutlineIcon EyeSettingsIcon EyeSettingsOutlineIcon EyedropperIcon EyedropperVariantIcon FaceIcon FaceProfileIcon FacebookBoxIcon FacebookIcon FacebookMessengerIcon FactoryIcon FanIcon FanOffIcon FastForwardIcon FastForwardOutlineIcon FaxIcon FeatherIcon FerryIcon FileAccountIcon FileChartIcon FileCheckIcon FileCloudIcon FileCompareIcon FileDelimitedIcon FileDocumentBoxIcon FileDocumentIcon FileExcelBoxIcon FileExcelIcon FileExportIcon FileFindIcon FileHiddenIcon FileIcon FileImageIcon FileImportIcon FileLockIcon FileMultipleIcon FileMusicIcon FileOutlineIcon FilePdfBoxIcon FilePdfIcon FilePercentIcon FilePlusIcon FilePowerpointBoxIcon FilePowerpointIcon FilePresentationBoxIcon FileQuestionIcon FileRestoreIcon FileSendIcon FileTreeIcon FileVideoIcon FileWordBoxIcon FileWordIcon FileXmlIcon FilmIcon FilmstripIcon FilmstripOffIcon FilterIcon FilterOutlineIcon FilterRemoveIcon FilterRemoveOutlineIcon FilterVariantIcon FinanceIcon FindReplaceIcon FingerprintIcon FireIcon FireTruckIcon FirefoxIcon FishIcon FlagCheckeredIcon FlagIcon FlagOutlineIcon FlagTriangleIcon FlagVariantIcon FlagVariantOutlineIcon FlashAutoIcon FlashCircleIcon FlashIcon FlashOffIcon FlashOutlineIcon FlashRedEyeIcon FlashlightIcon FlashlightOffIcon FlaskEmptyIcon FlaskEmptyOutlineIcon FlaskIcon FlaskOutlineIcon FlattrIcon FlipToBackIcon FlipToFrontIcon FloorPlanIcon FloppyIcon FlowerIcon FolderAccountIcon FolderDownloadIcon FolderGoogleDriveIcon FolderIcon FolderImageIcon FolderKeyIcon FolderKeyNetworkIcon FolderLockIcon FolderLockOpenIcon FolderMoveIcon FolderMultipleIcon FolderMultipleImageIcon FolderMultipleOutlineIcon FolderNetworkIcon FolderOpenIcon FolderOutlineIcon FolderPlusIcon FolderRemoveIcon FolderStarIcon FolderUploadIcon FontAwesomeIcon FoodAppleIcon FoodCroissantIcon FoodForkDrinkIcon FoodIcon FoodOffIcon FoodVariantIcon FootballAustralianIcon FootballHelmetIcon FootballIcon ForkliftIcon FormatAlignBottomIcon FormatAlignCenterIcon FormatAlignJustifyIcon FormatAlignLeftIcon FormatAlignMiddleIcon FormatAlignRightIcon FormatAlignTopIcon FormatAnnotationPlusIcon FormatBoldIcon FormatClearIcon FormatColorFillIcon FormatColorTextIcon FormatFloatCenterIcon FormatFloatLeftIcon FormatFloatNoneIcon FormatFloatRightIcon FormatFontIcon FormatHeaderDecreaseIcon FormatHeaderEqualIcon FormatHeaderIncreaseIcon FormatHeaderPoundIcon FormatHeader_1Icon FormatHeader_2Icon FormatHeader_3Icon FormatHeader_4Icon FormatHeader_5Icon FormatHeader_6Icon FormatHorizontalAlignCenterIcon FormatHorizontalAlignLeftIcon FormatHorizontalAlignRightIcon FormatIndentDecreaseIcon FormatIndentIncreaseIcon FormatItalicIcon FormatLineSpacingIcon FormatLineStyleIcon FormatLineWeightIcon FormatListBulletedIcon FormatListBulletedTypeIcon FormatListChecksIcon FormatListNumbersIcon FormatPageBreakIcon FormatPaintIcon FormatParagraphIcon FormatPilcrowIcon FormatQuoteCloseIcon FormatQuoteOpenIcon FormatRotate_90Icon FormatSectionIcon FormatSizeIcon FormatStrikethroughIcon FormatStrikethroughVariantIcon FormatSubscriptIcon FormatSuperscriptIcon FormatTextIcon FormatTextdirectionLToRIcon FormatTextdirectionRToLIcon FormatTitleIcon FormatUnderlineIcon FormatVerticalAlignBottomIcon FormatVerticalAlignCenterIcon FormatVerticalAlignTopIcon FormatWrapInlineIcon FormatWrapSquareIcon FormatWrapTightIcon FormatWrapTopBottomIcon ForumIcon ForumOutlineIcon ForwardIcon FoursquareIcon FridgeFilledBottomIcon FridgeFilledIcon FridgeFilledTopIcon FridgeIcon FuelIcon FullscreenExitIcon FullscreenIcon FunctionIcon FunctionVariantIcon GamepadIcon GamepadVariantIcon GarageAlertIcon GarageIcon GarageOpenIcon GasCylinderIcon GasStationIcon GateIcon GaugeEmptyIcon GaugeFullIcon GaugeIcon GaugeLowIcon GavelIcon GenderFemaleIcon GenderMaleFemaleIcon GenderMaleIcon GenderTransgenderIcon GestureDoubleTapIcon GestureIcon GestureSwipeDownIcon GestureSwipeLeftIcon GestureSwipeRightIcon GestureSwipeUpIcon GestureTapIcon GestureTwoDoubleTapIcon GestureTwoTapIcon GhostIcon GiftIcon GitIcon GithubBoxIcon GithubCircleIcon GithubFaceIcon GlassCocktailIcon GlassFluteIcon GlassMugIcon GlassStangeIcon GlassTulipIcon GlassWineIcon GlassdoorIcon GlassesIcon GmailIcon GnomeIcon GolfIcon GondolaIcon GoogleAnalyticsIcon GoogleAssistantIcon GoogleCardboardIcon GoogleChromeIcon GoogleCirclesCommunitiesIcon GoogleCirclesExtendedIcon GoogleCirclesGroupIcon GoogleCirclesIcon GoogleControllerIcon GoogleControllerOffIcon GoogleDriveIcon GoogleEarthIcon GoogleGlassIcon GoogleHomeIcon GoogleIcon GoogleKeepIcon GoogleMapsIcon GoogleNearbyIcon GooglePagesIcon GooglePhotosIcon GooglePhysicalWebIcon GooglePlayIcon GooglePlusBoxIcon GooglePlusIcon GoogleTranslateIcon GoogleWalletIcon GpuIcon GradientIcon GraphqlIcon GreasePencilIcon GridIcon GridLargeIcon GridOffIcon GroupIcon GuitarAcousticIcon GuitarElectricIcon GuitarPickIcon GuitarPickOutlineIcon GuyFawkesMaskIcon HackernewsIcon HamburgerIcon HandPointingRightIcon HangerIcon HangoutsIcon HarddiskIcon HeadphonesBoxIcon HeadphonesIcon HeadphonesOffIcon HeadphonesSettingsIcon HeadsetDockIcon HeadsetIcon HeadsetOffIcon HeartBoxIcon HeartBoxOutlineIcon HeartBrokenIcon HeartHalfFullIcon HeartHalfIcon HeartHalfOutlineIcon HeartIcon HeartOffIcon HeartOutlineIcon HeartPulseIcon HelpBoxIcon HelpCircleIcon HelpCircleOutlineIcon HelpIcon HelpNetworkIcon HexagonIcon HexagonMultipleIcon HexagonOutlineIcon HighDefinitionBoxIcon HighDefinitionIcon HighwayIcon HistoryIcon HockeyPuckIcon HockeySticksIcon HololensIcon HomeAccountIcon HomeAlertIcon HomeAssistantIcon HomeAutomationIcon HomeCircleIcon HomeCurrencyUsdIcon HomeHeartIcon HomeIcon HomeMapMarkerIcon HomeModernIcon HomeOutlineIcon HomeVariantIcon HookIcon HookOffIcon HopsIcon HospitalBuildingIcon HospitalIcon HospitalMarkerIcon HotTubIcon HotelIcon HouzzBoxIcon HouzzIcon HuluIcon HumanChildIcon HumanFemaleIcon HumanGreetingIcon HumanHandsdownIcon HumanHandsupIcon HumanIcon HumanMaleFemaleIcon HumanMaleIcon HumanPregnantIcon HumbleBundleIcon IceCreamIcon ImageAlbumIcon ImageAreaCloseIcon ImageAreaIcon ImageBrokenIcon ImageBrokenVariantIcon ImageFilterBlackWhiteIcon ImageFilterCenterFocusIcon ImageFilterCenterFocusWeakIcon ImageFilterDramaIcon ImageFilterFramesIcon ImageFilterHdrIcon ImageFilterIcon ImageFilterNoneIcon ImageFilterTiltShiftIcon ImageFilterVintageIcon ImageIcon ImageMultipleIcon ImageOffIcon ImagePlusIcon ImportIcon InboxArrowDownIcon InboxArrowUpIcon InboxIcon InboxMultipleIcon IncognitoIcon InfinityIcon InformationIcon InformationOutlineIcon InformationVariantIcon InstagramIcon InstapaperIcon InternetExplorerIcon InvertColorsIcon ItunesIcon JeepneyIcon JiraIcon JqueryIcon JsfiddleIcon JsonIcon KarateIcon KegIcon KettleIcon KeyChangeIcon KeyIcon KeyMinusIcon KeyPlusIcon KeyRemoveIcon KeyVariantIcon KeyboardBackspaceIcon KeyboardCapsIcon KeyboardCloseIcon KeyboardIcon KeyboardOffIcon KeyboardReturnIcon KeyboardTabIcon KeyboardVariantIcon KickstarterIcon KodiIcon LabelIcon LabelOutlineIcon LadybugIcon LambdaIcon LampIcon LanConnectIcon LanDisconnectIcon LanIcon LanPendingIcon LanguageCIcon LanguageCppIcon LanguageCsharpIcon LanguageCss3Icon LanguageGoIcon LanguageHtml5Icon LanguageJavascriptIcon LanguageLuaIcon LanguagePhpIcon LanguagePythonIcon LanguagePythonTextIcon LanguageRIcon LanguageSwiftIcon LanguageTypescriptIcon LaptopChromebookIcon LaptopIcon LaptopMacIcon LaptopOffIcon LaptopWindowsIcon LastfmIcon LastpassIcon LaunchIcon LavaLampIcon LayersIcon LayersOffIcon LeadPencilIcon LeafIcon LedOffIcon LedOnIcon LedOutlineIcon LedStripIcon LedVariantOffIcon LedVariantOnIcon LedVariantOutlineIcon LibraryBooksIcon LibraryIcon LibraryMusicIcon LibraryPlusIcon LifebuoyIcon LightbulbIcon LightbulbOnIcon LightbulbOnOutlineIcon LightbulbOutlineIcon LinkIcon LinkOffIcon LinkVariantIcon LinkVariantOffIcon LinkedinBoxIcon LinkedinIcon LinuxIcon LoadingIcon LockIcon LockOpenIcon LockOpenOutlineIcon LockOutlineIcon LockPatternIcon LockPlusIcon LockResetIcon LockSmartIcon LockerIcon LockerMultipleIcon LoginIcon LoginVariantIcon LogoutIcon LogoutVariantIcon LooksIcon LoopIcon LoupeIcon LumxIcon MagnetIcon MagnetOnIcon MagnifyIcon MagnifyMinusIcon MagnifyMinusOutlineIcon MagnifyPlusIcon MagnifyPlusOutlineIcon MailRuIcon MailboxIcon MapIcon MapMarkerCircleIcon MapMarkerIcon MapMarkerMinusIcon MapMarkerMultipleIcon MapMarkerOffIcon MapMarkerOutlineIcon MapMarkerPlusIcon MapMarkerRadiusIcon MarginIcon MarkdownIcon MarkerCheckIcon MarkerIcon MaterialUiIcon MathCompassIcon MatrixIcon MaxcdnIcon MedicalBagIcon MediumIcon MemoryIcon MenuDownIcon MenuDownOutlineIcon MenuIcon MenuLeftIcon MenuRightIcon MenuUpIcon MenuUpOutlineIcon MessageAlertIcon MessageBulletedIcon MessageBulletedOffIcon MessageDrawIcon MessageIcon MessageImageIcon MessageOutlineIcon MessagePlusIcon MessageProcessingIcon MessageReplyIcon MessageReplyTextIcon MessageSettingsIcon MessageSettingsVariantIcon MessageTextIcon MessageTextOutlineIcon MessageVideoIcon MeteorIcon MetronomeIcon MetronomeTickIcon MicroSdIcon MicrophoneIcon MicrophoneMinusIcon MicrophoneOffIcon MicrophoneOutlineIcon MicrophonePlusIcon MicrophoneSettingsIcon MicrophoneVariantIcon MicrophoneVariantOffIcon MicroscopeIcon MicrosoftIcon MinecraftIcon MinusBoxIcon MinusBoxOutlineIcon MinusCircleIcon MinusCircleOutlineIcon MinusIcon MinusNetworkIcon MixcloudIcon MixedRealityIcon MixerIcon MonitorIcon MonitorMultipleIcon MoreIcon MotorbikeIcon MouseIcon MouseOffIcon MouseVariantIcon MouseVariantOffIcon MoveResizeIcon MoveResizeVariantIcon MovieIcon MovieRollIcon MultiplicationBoxIcon MultiplicationIcon MushroomIcon MushroomOutlineIcon MusicBoxIcon MusicBoxOutlineIcon MusicCircleIcon MusicIcon MusicNoteBluetoothIcon MusicNoteBluetoothOffIcon MusicNoteEighthIcon MusicNoteHalfIcon MusicNoteIcon MusicNoteOffIcon MusicNoteQuarterIcon MusicNoteSixteenthIcon MusicNoteWholeIcon MusicOffIcon NativescriptIcon NatureIcon NaturePeopleIcon NavigationIcon NearMeIcon NeedleIcon NestProtectIcon NestThermostatIcon NetflixIcon NetworkIcon NewBoxIcon NewspaperIcon NfcIcon NfcTapIcon NfcVariantIcon NinjaIcon NintendoSwitchIcon NodejsIcon NoteIcon NoteMultipleIcon NoteMultipleOutlineIcon NoteOutlineIcon NotePlusIcon NotePlusOutlineIcon NoteTextIcon NotebookIcon NotificationClearAllIcon NpmIcon NukeIcon NullIcon NumericIcon Numeric_0BoxIcon Numeric_0BoxMultipleOutlineIcon Numeric_0BoxOutlineIcon Numeric_1BoxIcon Numeric_1BoxMultipleOutlineIcon Numeric_1BoxOutlineIcon Numeric_2BoxIcon Numeric_2BoxMultipleOutlineIcon Numeric_2BoxOutlineIcon Numeric_3BoxIcon Numeric_3BoxMultipleOutlineIcon Numeric_3BoxOutlineIcon Numeric_4BoxIcon Numeric_4BoxMultipleOutlineIcon Numeric_4BoxOutlineIcon Numeric_5BoxIcon Numeric_5BoxMultipleOutlineIcon Numeric_5BoxOutlineIcon Numeric_6BoxIcon Numeric_6BoxMultipleOutlineIcon Numeric_6BoxOutlineIcon Numeric_7BoxIcon Numeric_7BoxMultipleOutlineIcon Numeric_7BoxOutlineIcon Numeric_8BoxIcon Numeric_8BoxMultipleOutlineIcon Numeric_8BoxOutlineIcon Numeric_9BoxIcon Numeric_9BoxMultipleOutlineIcon Numeric_9BoxOutlineIcon Numeric_9PlusBoxIcon Numeric_9PlusBoxMultipleOutlineIcon Numeric_9PlusBoxOutlineIcon NutIcon NutritionIcon OarIcon OctagonIcon OctagonOutlineIcon OctagramIcon OctagramOutlineIcon OdnoklassnikiIcon OfficeIcon OilIcon OilTemperatureIcon OmegaIcon OnedriveIcon OnenoteIcon OnepasswordIcon OpacityIcon OpenInAppIcon OpenInNewIcon OpenidIcon OperaIcon OrbitIcon OrnamentIcon OrnamentVariantIcon OwlIcon PackageDownIcon PackageIcon PackageUpIcon PackageVariantClosedIcon PackageVariantIcon PageFirstIcon PageLastIcon PageLayoutBodyIcon PageLayoutFooterIcon PageLayoutHeaderIcon PageLayoutSidebarLeftIcon PageLayoutSidebarRightIcon PaletteAdvancedIcon PaletteIcon PaletteSwatchIcon PandaIcon PandoraIcon PanoramaFisheyeIcon PanoramaHorizontalIcon PanoramaIcon PanoramaVerticalIcon PanoramaWideAngleIcon PaperCutVerticalIcon PaperclipIcon ParkingIcon PassportIcon PatreonIcon PauseCircleIcon PauseCircleOutlineIcon PauseIcon PauseOctagonIcon PauseOctagonOutlineIcon PawIcon PawOffIcon PaypalIcon PeaceIcon PenIcon PencilBoxIcon PencilBoxOutlineIcon PencilCircleIcon PencilCircleOutlineIcon PencilIcon PencilLockIcon PencilOffIcon PentagonIcon PentagonOutlineIcon PercentIcon PeriodicTableCo2Icon PeriodicTableIcon PeriscopeIcon PharmacyIcon PhoneBluetoothIcon PhoneClassicIcon PhoneForwardIcon PhoneHangupIcon PhoneIcon PhoneInTalkIcon PhoneIncomingIcon PhoneLockedIcon PhoneLogIcon PhoneMinusIcon PhoneMissedIcon PhoneOutgoingIcon PhonePausedIcon PhonePlusIcon PhoneReturnIcon PhoneRotateLandscapeIcon PhoneRotatePortraitIcon PhoneSettingsIcon PhoneVoipIcon PiBoxIcon PiIcon PianoIcon PickaxeIcon PierCraneIcon PierIcon PigIcon PillIcon PillarIcon PinIcon PinOffIcon PineTreeBoxIcon PineTreeIcon PinterestBoxIcon PinterestIcon PipeDisconnectedIcon PipeIcon PipeLeakIcon PistolIcon PistonIcon PizzaIcon PlaneShieldIcon PlayBoxOutlineIcon PlayCircleIcon PlayCircleOutlineIcon PlayIcon PlayNetworkIcon PlayPauseIcon PlayProtectedContentIcon PlaylistCheckIcon PlaylistMinusIcon PlaylistPlayIcon PlaylistPlusIcon PlaylistRemoveIcon PlaystationIcon PlexIcon PlusBoxIcon PlusBoxOutlineIcon PlusCircleIcon PlusCircleMultipleOutlineIcon PlusCircleOutlineIcon PlusIcon PlusNetworkIcon PlusOneIcon PlusOutlineIcon PocketIcon PokeballIcon PokerChipIcon PolaroidIcon PollBoxIcon PollIcon PolymerIcon PoolIcon PopcornIcon PotIcon PotMixIcon PoundBoxIcon PoundIcon PowerIcon PowerPlugIcon PowerPlugOffIcon PowerSettingsIcon PowerSocketEuIcon PowerSocketIcon PowerSocketUkIcon PowerSocketUsIcon PrescriptionIcon PresentationIcon PresentationPlayIcon PrinterAlertIcon PrinterIcon PrinterSettingsIcon Printer_3dIcon PriorityHighIcon PriorityLowIcon ProfessionalHexagonIcon ProjectorIcon ProjectorScreenIcon PublishIcon PulseIcon PuzzleIcon QqchatIcon QrcodeEditIcon QrcodeIcon QrcodeScanIcon QuadcopterIcon QualityHighIcon QuicktimeIcon RadarIcon RadiatorIcon RadioHandheldIcon RadioIcon RadioTowerIcon RadioactiveIcon RadioboxBlankIcon RadioboxMarkedIcon RaspberrypiIcon RayEndArrowIcon RayEndIcon RayStartArrowIcon RayStartEndIcon RayStartIcon RayVertexIcon ReactIcon ReadIcon ReceiptIcon RecordIcon RecordRecIcon RecycleIcon RedditIcon RedoIcon RedoVariantIcon RefreshIcon RegexIcon RelativeScaleIcon ReloadIcon ReminderIcon RemoteDesktopIcon RemoteIcon RenameBoxIcon ReorderHorizontalIcon ReorderVerticalIcon RepeatIcon RepeatOffIcon RepeatOnceIcon ReplayIcon ReplyAllIcon ReplyIcon ReproductionIcon ResizeBottomRightIcon ResponsiveIcon RestartIcon RestoreIcon RewindIcon RewindOutlineIcon RhombusIcon RhombusOutlineIcon RibbonIcon RiceIcon RingIcon RoadIcon RoadVariantIcon RobotIcon RocketIcon RoomServiceIcon RoombaIcon RotateLeftIcon RotateLeftVariantIcon RotateRightIcon RotateRightVariantIcon Rotate_3dIcon RoundedCornerIcon RouterWirelessIcon RoutesIcon RowingIcon RssBoxIcon RssIcon RulerIcon RunFastIcon RunIcon SaleIcon SalesforceIcon SassIcon SatelliteIcon SatelliteVariantIcon SausageIcon SaxophoneIcon ScaleBalanceIcon ScaleBathroomIcon ScaleIcon ScannerIcon SchoolIcon ScreenRotationIcon ScreenRotationLockIcon ScrewdriverIcon ScriptIcon SdIcon SealIcon SearchWebIcon SeatFlatAngledIcon SeatFlatIcon SeatIndividualSuiteIcon SeatLegroomExtraIcon SeatLegroomNormalIcon SeatLegroomReducedIcon SeatReclineExtraIcon SeatReclineNormalIcon SecurityAccountIcon SecurityHomeIcon SecurityIcon SecurityNetworkIcon SelectAllIcon SelectIcon SelectInverseIcon SelectOffIcon SelectionIcon SelectionOffIcon SendIcon SendSecureIcon SerialPortIcon ServerIcon ServerMinusIcon ServerNetworkIcon ServerNetworkOffIcon ServerOffIcon ServerPlusIcon ServerRemoveIcon ServerSecurityIcon SetAllIcon SetCenterIcon SetCenterRightIcon SetLeftCenterIcon SetLeftIcon SetLeftRightIcon SetNoneIcon SetRightIcon SettingsBoxIcon SettingsIcon SettingsOutlineIcon ShapeCirclePlusIcon ShapeIcon ShapeOutlineIcon ShapePlusIcon ShapePolygonPlusIcon ShapeRectanglePlusIcon ShapeSquarePlusIcon ShareIcon ShareVariantIcon ShieldHalfFullIcon ShieldIcon ShieldOutlineIcon ShipWheelIcon ShoppingIcon ShoppingMusicIcon ShovelIcon ShovelOffIcon ShredderIcon ShuffleDisabledIcon ShuffleIcon ShuffleVariantIcon SigmaIcon SigmaLowerIcon SignCautionIcon SignDirectionIcon SignTextIcon SignalCellularOutlineIcon SignalCellular_1Icon SignalCellular_2Icon SignalCellular_3Icon SignalHspaIcon SignalHspaPlusIcon SignalIcon SignalOffIcon SignalVariantIcon Signal_2gIcon Signal_3gIcon Signal_4gIcon SilverwareForkIcon SilverwareIcon SilverwareSpoonIcon SilverwareVariantIcon SimAlertIcon SimIcon SimOffIcon SitemapIcon SkipBackwardIcon SkipForwardIcon SkipNextCircleIcon SkipNextCircleOutlineIcon SkipNextIcon SkipPreviousCircleIcon SkipPreviousCircleOutlineIcon SkipPreviousIcon SkullIcon SkypeBusinessIcon SkypeIcon SlackIcon SleepIcon SleepOffIcon SmokingIcon SmokingOffIcon SnapchatIcon SnowflakeIcon SnowmanIcon SoccerFieldIcon SoccerIcon SofaIcon SolidIcon SortAlphabeticalIcon SortAscendingIcon SortDescendingIcon SortIcon SortNumericIcon SortVariantIcon SoundcloudIcon SourceBranchIcon SourceCommitEndIcon SourceCommitEndLocalIcon SourceCommitIcon SourceCommitLocalIcon SourceCommitNextLocalIcon SourceCommitStartIcon SourceCommitStartNextLocalIcon SourceForkIcon SourceMergeIcon SourcePullIcon SoySauceIcon SpeakerIcon SpeakerOffIcon SpeakerWirelessIcon SpeedometerIcon SpellcheckIcon SpotifyIcon SpotlightBeamIcon SpotlightIcon SprayIcon SquareIcon SquareIncCashIcon SquareIncIcon SquareOutlineIcon SquareRootIcon SshIcon StackOverflowIcon StackexchangeIcon StadiumIcon StairsIcon StandardDefinitionIcon StarCircleIcon StarHalfIcon StarIcon StarOffIcon StarOutlineIcon SteamIcon SteeringIcon StepBackwardIcon StepBackward_2Icon StepForwardIcon StepForward_2Icon StethoscopeIcon StickerEmojiIcon StickerIcon StockingIcon StopCircleIcon StopCircleOutlineIcon StopIcon StoreIcon Store_24HourIcon StoveIcon SubdirectoryArrowLeftIcon SubdirectoryArrowRightIcon SubwayIcon SubwayVariantIcon SummitIcon SunglassesIcon SurroundSoundIcon SurroundSound_2_0Icon SurroundSound_3_1Icon SurroundSound_5_1Icon SurroundSound_7_1Icon SvgIcon SwapHorizontalIcon SwapHorizontalVariantIcon SwapVerticalIcon SwapVerticalVariantIcon SwimIcon SwitchIcon SwordCrossIcon SwordIcon SyncAlertIcon SyncIcon SyncOffIcon TabIcon TabPlusIcon TabUnselectedIcon TableColumnIcon TableColumnPlusAfterIcon TableColumnPlusBeforeIcon TableColumnRemoveIcon TableColumnWidthIcon TableEditIcon TableIcon TableLargeIcon TableOfContentsIcon TableRowHeightIcon TableRowIcon TableRowPlusAfterIcon TableRowPlusBeforeIcon TableRowRemoveIcon TableSettingsIcon TabletAndroidIcon TabletIcon TabletIpadIcon TacoIcon TagFacesIcon TagHeartIcon TagIcon TagMultipleIcon TagOutlineIcon TagPlusIcon TagRemoveIcon TagTextOutlineIcon TargetIcon TaxiIcon TeachIcon TeamviewerIcon TelegramIcon TelevisionBoxIcon TelevisionClassicIcon TelevisionClassicOffIcon TelevisionGuideIcon TelevisionIcon TelevisionOffIcon TemperatureCelsiusIcon TemperatureFahrenheitIcon TemperatureKelvinIcon TennisIcon TentIcon TerrainIcon TestTubeIcon TextShadowIcon TextToSpeechIcon TextToSpeechOffIcon TextboxIcon TextboxPasswordIcon TextureIcon TheaterIcon ThemeLightDarkIcon ThermometerIcon ThermometerLinesIcon ThermostatBoxIcon ThoughtBubbleIcon ThoughtBubbleOutlineIcon ThumbDownIcon ThumbDownOutlineIcon ThumbUpIcon ThumbUpOutlineIcon ThumbsUpDownIcon TicketAccountIcon TicketConfirmationIcon TicketIcon TicketPercentIcon TieIcon TildeIcon TimelapseIcon TimerIcon TimerOffIcon TimerSandEmptyIcon TimerSandFullIcon TimerSandIcon Timer_10Icon Timer_3Icon TimetableIcon ToggleSwitchIcon ToggleSwitchOffIcon TooltipEditIcon TooltipIcon TooltipImageIcon TooltipOutlineIcon TooltipOutlinePlusIcon TooltipTextIcon ToothIcon ToothOutlineIcon TorIcon TowerBeachIcon TowerFireIcon TowingIcon TrackpadIcon TractorIcon TrafficLightIcon TrainIcon TrainVariantIcon TramIcon TranscribeCloseIcon TranscribeIcon TransferIcon TransitTransferIcon TranslateIcon TreasureChestIcon TreeIcon TrelloIcon TrendingDownIcon TrendingNeutralIcon TrendingUpIcon TriangleIcon TriangleOutlineIcon TrophyAwardIcon TrophyIcon TrophyOutlineIcon TrophyVariantIcon TrophyVariantOutlineIcon TruckDeliveryIcon TruckFastIcon TruckIcon TruckTrailerIcon TshirtCrewIcon TshirtVIcon TumblrIcon TumblrReblogIcon TuneIcon TuneVerticalIcon TwitchIcon TwitterBoxIcon TwitterCircleIcon TwitterIcon TwitterRetweetIcon UberIcon UbuntuIcon UltraHighDefinitionIcon UmbracoIcon UmbrellaIcon UmbrellaOutlineIcon UndoIcon UndoVariantIcon UnfoldLessHorizontalIcon UnfoldLessVerticalIcon UnfoldMoreHorizontalIcon UnfoldMoreVerticalIcon UngroupIcon UnityIcon UntappdIcon UpdateIcon UploadIcon UploadMultipleIcon UploadNetworkIcon UsbIcon VanPassengerIcon VanUtilityIcon VanishIcon VectorArrangeAboveIcon VectorArrangeBelowIcon VectorCircleIcon VectorCircleVariantIcon VectorCombineIcon VectorCurveIcon VectorDifferenceAbIcon VectorDifferenceBaIcon VectorDifferenceIcon VectorEllipseIcon VectorIntersectionIcon VectorLineIcon VectorPointIcon VectorPolygonIcon VectorPolylineIcon VectorRadiusIcon VectorRectangleIcon VectorSelectionIcon VectorSquareIcon VectorTriangleIcon VectorUnionIcon VenmoIcon VerifiedIcon VibrateIcon VideoIcon VideoInputAntennaIcon VideoInputComponentIcon VideoInputHdmiIcon VideoInputSvideoIcon VideoOffIcon VideoSwitchIcon Video_3dIcon Video_4kBoxIcon ViewAgendaIcon ViewArrayIcon ViewCarouselIcon ViewColumnIcon ViewDashboardIcon ViewDashboardVariantIcon ViewDayIcon ViewGridIcon ViewHeadlineIcon ViewListIcon ViewModuleIcon ViewParallelIcon ViewQuiltIcon ViewSequentialIcon ViewStreamIcon ViewWeekIcon VimeoIcon ViolinIcon VirtualRealityIcon VisualstudioIcon VkBoxIcon VkCircleIcon VkIcon VlcIcon VoiceIcon VoicemailIcon VolumeHighIcon VolumeLowIcon VolumeMediumIcon VolumeMinusIcon VolumeMuteIcon VolumeOffIcon VolumePlusIcon VpnIcon VuejsIcon WalkIcon WallIcon WalletGiftcardIcon WalletIcon WalletMembershipIcon WalletTravelIcon WanIcon WashingMachineIcon WatchExportIcon WatchExportVariantIcon WatchIcon WatchImportIcon WatchImportVariantIcon WatchVariantIcon WatchVibrateIcon WaterIcon WaterOffIcon WaterPercentIcon WaterPumpIcon WatermarkIcon WavesIcon WeatherCloudyIcon WeatherFogIcon WeatherHailIcon WeatherHurricaneIcon WeatherLightningIcon WeatherLightningRainyIcon WeatherNightIcon WeatherPartlycloudyIcon WeatherPouringIcon WeatherRainyIcon WeatherSnowyIcon WeatherSnowyRainyIcon WeatherSunnyIcon WeatherSunsetDownIcon WeatherSunsetIcon WeatherSunsetUpIcon WeatherWindyIcon WeatherWindyVariantIcon WebIcon WebcamIcon WebhookIcon WebpackIcon WechatIcon WeightIcon WeightKilogramIcon WhatsappIcon WheelchairAccessibilityIcon WhiteBalanceAutoIcon WhiteBalanceIncandescentIcon WhiteBalanceIridescentIcon WhiteBalanceSunnyIcon WidgetsIcon WifiIcon WifiOffIcon WiiIcon WiiuIcon WikipediaIcon WindowCloseIcon WindowClosedIcon WindowMaximizeIcon WindowMinimizeIcon WindowOpenIcon WindowRestoreIcon WindowsIcon WordpressIcon WorkerIcon WrapIcon WrenchIcon WunderlistIcon XamarinIcon XamarinOutlineIcon XamlIcon XboxControllerBatteryAlertIcon XboxControllerBatteryEmptyIcon XboxControllerBatteryFullIcon XboxControllerBatteryLowIcon XboxControllerBatteryMediumIcon XboxControllerBatteryUnknownIcon XboxControllerIcon XboxControllerOffIcon XboxIcon XdaIcon XingBoxIcon XingCircleIcon XingIcon XmlIcon XmppIcon YammerIcon YeastIcon YelpIcon YinYangIcon YoutubeCreatorStudioIcon YoutubeGamingIcon YoutubePlayIcon YoutubeTvIcon ZipBoxIcon index"
  },
  "Examiner-UI/node_modules/@nodelib/fs.scandir/README.html": {
    "href": "Examiner-UI/node_modules/@nodelib/fs.scandir/README.html",
    "title": "| Examiner",
    "summary": "@nodelib/fs.scandir List files and directories inside the specified directory. \uD83D\uDCA1 Highlights The package is aimed at obtaining information about entries in the directory. \uD83D\uDCB0 Returns useful information: name, path, dirent and stats (optional). ⚙️ On Node.js 10.10+ uses the mechanism without additional calls to determine the entry type. See old and modern mode. \uD83D\uDD17 Can safely work with broken symbolic links. Install npm install @nodelib/fs.scandir Usage import * as fsScandir from '@nodelib/fs.scandir'; fsScandir.scandir('path', (error, stats) => { /* … */ }); API .scandir(path, [optionsOrSettings], callback) Returns an array of plain objects (Entry) with information about entry for provided path with standard callback-style. fsScandir.scandir('path', (error, entries) => { /* … */ }); fsScandir.scandir('path', {}, (error, entries) => { /* … */ }); fsScandir.scandir('path', new fsScandir.Settings(), (error, entries) => { /* … */ }); .scandirSync(path, [optionsOrSettings]) Returns an array of plain objects (Entry) with information about entry for provided path. const entries = fsScandir.scandirSync('path'); const entries = fsScandir.scandirSync('path', {}); const entries = fsScandir.scandirSync(('path', new fsScandir.Settings()); path Required: true Type: string | Buffer | URL A path to a file. If a URL is provided, it must use the file: protocol. optionsOrSettings Required: false Type: Options | Settings Default: An instance of Settings class An Options object or an instance of Settings class. \uD83D\uDCD6 When you pass a plain object, an instance of the Settings class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the Settings class. Settings([options]) A class of full settings of the package. const settings = new fsScandir.Settings({ followSymbolicLinks: false }); const entries = fsScandir.scandirSync('path', settings); Entry name — The name of the entry (unknown.txt). path — The path of the entry relative to call directory (root/unknown.txt). dirent — An instance of fs.Dirent class. On Node.js below 10.10 will be emulated by DirentFromStats class. stats (optional) — An instance of fs.Stats class. For example, the scandir call for tools directory with one directory inside: { dirent: Dirent { name: 'typedoc', /* … */ }, name: 'typedoc', path: 'tools/typedoc' } Options stats Type: boolean Default: false Adds an instance of fs.Stats class to the Entry. \uD83D\uDCD6 Always use fs.readdir without the withFileTypes option. ??TODO?? followSymbolicLinks Type: boolean Default: false Follow symbolic links or not. Call fs.stat on symbolic link if true. throwErrorOnBrokenSymbolicLink Type: boolean Default: true Throw an error when symbolic link is broken if true or safely use lstat call if false. pathSegmentSeparator Type: string Default: path.sep By default, this package uses the correct path separator for your OS (\\ on Windows, / on Unix-like systems). But you can set this option to any separator character(s) that you want to use instead. fs Type: FileSystemAdapter Default: A default FS methods By default, the built-in Node.js module (fs) is used to work with the file system. You can replace any method with your own. interface FileSystemAdapter { lstat?: typeof fs.lstat; stat?: typeof fs.stat; lstatSync?: typeof fs.lstatSync; statSync?: typeof fs.statSync; readdir?: typeof fs.readdir; readdirSync?: typeof fs.readdirSync; } const settings = new fsScandir.Settings({ fs: { lstat: fakeLstat } }); old and modern mode This package has two modes that are used depending on the environment and parameters of use. old Node.js below 10.10 or when the stats option is enabled When working in the old mode, the directory is read first (fs.readdir), then the type of entries is determined (fs.lstat and/or fs.stat for symbolic links). modern Node.js 10.10+ and the stats option is disabled In the modern mode, reading the directory (fs.readdir with the withFileTypes option) is combined with obtaining information about its entries. An additional call for symbolic links (fs.stat) is still present. This mode makes fewer calls to the file system. It's faster. Changelog See the Releases section of our GitHub project for changelog for each release version. License This software is released under the terms of the MIT license."
  },
  "Examiner-UI/node_modules/@nodelib/fs.stat/README.html": {
    "href": "Examiner-UI/node_modules/@nodelib/fs.stat/README.html",
    "title": "| Examiner",
    "summary": "@nodelib/fs.stat Get the status of a file with some features. \uD83D\uDCA1 Highlights Wrapper around standard method fs.lstat and fs.stat with some features. \uD83D\uDD30 Normally follows symbolic link. ⚙️ Can safely work with broken symbolic link. Install npm install @nodelib/fs.stat Usage import * as fsStat from '@nodelib/fs.stat'; fsStat.stat('path', (error, stats) => { /* … */ }); API .stat(path, [optionsOrSettings], callback) Returns an instance of fs.Stats class for provided path with standard callback-style. fsStat.stat('path', (error, stats) => { /* … */ }); fsStat.stat('path', {}, (error, stats) => { /* … */ }); fsStat.stat('path', new fsStat.Settings(), (error, stats) => { /* … */ }); .statSync(path, [optionsOrSettings]) Returns an instance of fs.Stats class for provided path. const stats = fsStat.stat('path'); const stats = fsStat.stat('path', {}); const stats = fsStat.stat('path', new fsStat.Settings()); path Required: true Type: string | Buffer | URL A path to a file. If a URL is provided, it must use the file: protocol. optionsOrSettings Required: false Type: Options | Settings Default: An instance of Settings class An Options object or an instance of Settings class. \uD83D\uDCD6 When you pass a plain object, an instance of the Settings class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the Settings class. Settings([options]) A class of full settings of the package. const settings = new fsStat.Settings({ followSymbolicLink: false }); const stats = fsStat.stat('path', settings); Options followSymbolicLink Type: boolean Default: true Follow symbolic link or not. Call fs.stat on symbolic link if true. markSymbolicLink Type: boolean Default: false Mark symbolic link by setting the return value of isSymbolicLink function to always true (even after fs.stat). \uD83D\uDCD6 Can be used if you want to know what is hidden behind a symbolic link, but still continue to know that it is a symbolic link. throwErrorOnBrokenSymbolicLink Type: boolean Default: true Throw an error when symbolic link is broken if true or safely return lstat call if false. fs Type: FileSystemAdapter Default: A default FS methods By default, the built-in Node.js module (fs) is used to work with the file system. You can replace any method with your own. interface FileSystemAdapter { lstat?: typeof fs.lstat; stat?: typeof fs.stat; lstatSync?: typeof fs.lstatSync; statSync?: typeof fs.statSync; } const settings = new fsStat.Settings({ fs: { lstat: fakeLstat } }); Changelog See the Releases section of our GitHub project for changelog for each release version. License This software is released under the terms of the MIT license."
  },
  "Examiner-UI/node_modules/@nodelib/fs.walk/README.html": {
    "href": "Examiner-UI/node_modules/@nodelib/fs.walk/README.html",
    "title": "| Examiner",
    "summary": "@nodelib/fs.walk A library for efficiently walking a directory recursively. \uD83D\uDCA1 Highlights \uD83D\uDCB0 Returns useful information: name, path, dirent and stats (optional). \uD83D\uDE80 On Node.js 10.10+ uses the mechanism without additional calls to determine the entry type for performance reasons. See old and modern mode. ⚙️ Built-in directories/files and error filtering system. \uD83D\uDD17 Can safely work with broken symbolic links. Install npm install @nodelib/fs.walk Usage import * as fsWalk from '@nodelib/fs.walk'; fsWalk.walk('path', (error, entries) => { /* … */ }); API .walk(path, [optionsOrSettings], callback) Reads the directory recursively and asynchronously. Requires a callback function. \uD83D\uDCD6 If you want to use the Promise API, use util.promisify. fsWalk.walk('path', (error, entries) => { /* … */ }); fsWalk.walk('path', {}, (error, entries) => { /* … */ }); fsWalk.walk('path', new fsWalk.Settings(), (error, entries) => { /* … */ }); .walkStream(path, [optionsOrSettings]) Reads the directory recursively and asynchronously. Readable Stream is used as a provider. const stream = fsWalk.walkStream('path'); const stream = fsWalk.walkStream('path', {}); const stream = fsWalk.walkStream('path', new fsWalk.Settings()); .walkSync(path, [optionsOrSettings]) Reads the directory recursively and synchronously. Returns an array of entries. const entries = fsWalk.walkSync('path'); const entries = fsWalk.walkSync('path', {}); const entries = fsWalk.walkSync('path', new fsWalk.Settings()); path Required: true Type: string | Buffer | URL A path to a file. If a URL is provided, it must use the file: protocol. optionsOrSettings Required: false Type: Options | Settings Default: An instance of Settings class An Options object or an instance of Settings class. \uD83D\uDCD6 When you pass a plain object, an instance of the Settings class will be created automatically. If you plan to call the method frequently, use a pre-created instance of the Settings class. Settings([options]) A class of full settings of the package. const settings = new fsWalk.Settings({ followSymbolicLinks: true }); const entries = fsWalk.walkSync('path', settings); Entry name — The name of the entry (unknown.txt). path — The path of the entry relative to call directory (root/unknown.txt). dirent — An instance of fs.Dirent class. [stats] — An instance of fs.Stats class. Options basePath Type: string Default: undefined By default, all paths are built relative to the root path. You can use this option to set custom root path. In the example below we read the files from the root directory, but in the results the root path will be custom. fsWalk.walkSync('root'); // → ['root/file.txt'] fsWalk.walkSync('root', { basePath: 'custom' }); // → ['custom/file.txt'] concurrency Type: number Default: Infinity The maximum number of concurrent calls to fs.readdir. \uD83D\uDCD6 The higher the number, the higher performance and the load on the File System. If you want to read in quiet mode, set the value to 4 * os.cpus().length (4 is default size of thread pool work scheduling). deepFilter Type: DeepFilterFunction Default: undefined A function that indicates whether the directory will be read deep or not. // Skip all directories that starts with `node_modules` const filter: DeepFilterFunction = (entry) => !entry.path.startsWith('node_modules'); entryFilter Type: EntryFilterFunction Default: undefined A function that indicates whether the entry will be included to results or not. // Exclude all `.js` files from results const filter: EntryFilterFunction = (entry) => !entry.name.endsWith('.js'); errorFilter Type: ErrorFilterFunction Default: undefined A function that allows you to skip errors that occur when reading directories. For example, you can skip ENOENT errors if required: // Skip all ENOENT errors const filter: ErrorFilterFunction = (error) => error.code == 'ENOENT'; stats Type: boolean Default: false Adds an instance of fs.Stats class to the Entry. \uD83D\uDCD6 Always use fs.readdir with additional fs.lstat/fs.stat calls to determine the entry type. followSymbolicLinks Type: boolean Default: false Follow symbolic links or not. Call fs.stat on symbolic link if true. throwErrorOnBrokenSymbolicLink Type: boolean Default: true Throw an error when symbolic link is broken if true or safely return lstat call if false. pathSegmentSeparator Type: string Default: path.sep By default, this package uses the correct path separator for your OS (\\ on Windows, / on Unix-like systems). But you can set this option to any separator character(s) that you want to use instead. fs Type: FileSystemAdapter Default: A default FS methods By default, the built-in Node.js module (fs) is used to work with the file system. You can replace any method with your own. interface FileSystemAdapter { lstat: typeof fs.lstat; stat: typeof fs.stat; lstatSync: typeof fs.lstatSync; statSync: typeof fs.statSync; readdir: typeof fs.readdir; readdirSync: typeof fs.readdirSync; } const settings = new fsWalk.Settings({ fs: { lstat: fakeLstat } }); Changelog See the Releases section of our GitHub project for changelog for each release version. License This software is released under the terms of the MIT license."
  },
  "Examiner-UI/node_modules/@rollup/rollup-win32-x64-msvc/README.html": {
    "href": "Examiner-UI/node_modules/@rollup/rollup-win32-x64-msvc/README.html",
    "title": "@rollup/rollup-win32-x64-msvc | Examiner",
    "summary": "@rollup/rollup-win32-x64-msvc This is the x86_64-pc-windows-msvc binary for rollup"
  },
  "Examiner-UI/node_modules/@swc/core-win32-x64-msvc/README.html": {
    "href": "Examiner-UI/node_modules/@swc/core-win32-x64-msvc/README.html",
    "title": "@swc/core-win32-x64-msvc | Examiner",
    "summary": "@swc/core-win32-x64-msvc This is the x86_64-pc-windows-msvc binary for @swc/core"
  },
  "Examiner-UI/node_modules/@swc/core/README.html": {
    "href": "Examiner-UI/node_modules/@swc/core/README.html",
    "title": "Documentation | Examiner",
    "summary": "Make the web (development) faster. SWC (stands for Speedy Web Compiler) is a super-fast TypeScript / JavaScript compiler written in Rust. It's a library for Rust and JavaScript at the same time. If you are using SWC from Rust, see rustdoc and for most users, your entry point for using the library will be parser. Also, SWC tries to ensure that If you select the latest version of each crates, it will work for rust users. MSRV of crates is currently 1.73. To update all SWC crates you use, you can run curl https://raw.githubusercontent.com/swc-project/swc/main/scripts/update-all-swc-crates.sh | bash -s. This script will update all dependencies to the latest version and run cargo build to ensure that everything works. Note that you need jq cargo upgrade command to run the script. Supported Node Versions: Node v10+ for usage Node v20+ for development If you are using SWC from JavaScript, please refer to docs on the website. Documentation Check out the documentation in the website. Features Please see comparison with babel. Performance Please see benchmark results on the website. Supporting development Supporting swc Star History Powered by Sponsors SWC is a community-driven project, and is maintained by a group of volunteers. If you'd like to help support the future of the project, please consider: Giving developer time on the project. (Message us on Discord (preferred) or Github discussions for guidance!) Giving funds by becoming a sponsor (see https://opencollective.com/swc)! Contributing See CONTRIBUTING.md. You may also find the architecture documentation useful (ARCHITECTURE.md). License SWC is primarily distributed under the terms of the Apache License (Version 2.0). See LICENSE for details."
  },
  "Examiner-UI/node_modules/@swc/counter/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/@swc/counter/CHANGELOG.html",
    "title": "| Examiner",
    "summary": "@swc/counter 0.1.3 Patch Changes a87f28d: Refactoring for @swc/counter"
  },
  "Examiner-UI/node_modules/@swc/counter/README.html": {
    "href": "Examiner-UI/node_modules/@swc/counter/README.html",
    "title": "| Examiner",
    "summary": "@swc/couter Download counter for swc packages. This package does not contain any code. It is used solely to track number of downloads of npm packages like @swc/core and @next/swc. If you are building a huge project using SWC, please consider depending on this package. It will not add any code to your bundle, but it will help us determine the number of users of SWC. Counting is done by npm, just like other packages."
  },
  "Examiner-UI/node_modules/@swc/types/README.html": {
    "href": "Examiner-UI/node_modules/@swc/types/README.html",
    "title": "| Examiner",
    "summary": "@swc/types Typings for @swc/core APIs. This is a separate package because SWC is used by various tools but not all of them want to depend on @swc/core. This package is very cheap, so feel free to depend on this."
  },
  "Examiner-UI/node_modules/@types/estree/README.html": {
    "href": "Examiner-UI/node_modules/@types/estree/README.html",
    "title": "Installation | Examiner",
    "summary": "Installation npm install --save @types/estree Summary This package contains type definitions for estree (https://github.com/estree/estree). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/estree. Additional Details Last updated: Fri, 06 Jun 2025 00:04:33 GMT Dependencies: none Credits These definitions were written by RReverser."
  },
  "Examiner-UI/node_modules/@types/json-schema/README.html": {
    "href": "Examiner-UI/node_modules/@types/json-schema/README.html",
    "title": "Installation | Examiner",
    "summary": "Installation npm install --save @types/json-schema Summary This package contains type definitions for json-schema (https://github.com/kriszyp/json-schema). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/json-schema. Additional Details Last updated: Tue, 07 Nov 2023 03:09:37 GMT Dependencies: none Credits These definitions were written by Boris Cherny, Lucian Buzzo, Roland Groza, and Jason Kwok."
  },
  "Examiner-UI/node_modules/@types/node/README.html": {
    "href": "Examiner-UI/node_modules/@types/node/README.html",
    "title": "Installation | Examiner",
    "summary": "Installation npm install --save @types/node Summary This package contains type definitions for node (https://nodejs.org/). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node. Additional Details Last updated: Tue, 01 Jul 2025 20:02:28 GMT Dependencies: undici-types Credits These definitions were written by Microsoft TypeScript, Alberto Schiabel, Alvis HT Tang, Andrew Makarov, Benjamin Toueg, Chigozirim C., David Junger, Deividas Bakanas, Eugene Y. Q. Shen, Hannes Magnusson, Huw, Kelvin Jin, Klaus Meinhardt, Lishude, Mariusz Wiktorczyk, Mohsen Azimi, Nikita Galkin, Parambir Singh, Sebastian Silbermann, Thomas den Hollander, Wilco Bakker, wwwy3y3, Samuel Ainsworth, Kyle Uehlein, Thanik Bhongbhibhat, Marcin Kopacz, Trivikram Kamat, Junxiao Shi, Ilia Baryshnikov, ExE Boss, Piotr Błażejewicz, Anna Henningsen, Victor Perin, NodeJS Contributors, Linus Unnebäck, wafuwafu13, Matteo Collina, Dmitry Semigradsky, René, and Yagiz Nizipli."
  },
  "Examiner-UI/node_modules/@types/react-dom/README.html": {
    "href": "Examiner-UI/node_modules/@types/react-dom/README.html",
    "title": "Installation | Examiner",
    "summary": "Installation npm install --save @types/react-dom Summary This package contains type definitions for react-dom (https://react.dev/). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-dom. Additional Details Last updated: Wed, 04 Jun 2025 12:44:27 GMT Dependencies: none Peer dependencies: @types/react Credits These definitions were written by Asana, AssureSign, Microsoft, MartynasZilinskas, Josh Rutherford, Jessica Franco, and Sebastian Silbermann."
  },
  "Examiner-UI/node_modules/@types/react/README.html": {
    "href": "Examiner-UI/node_modules/@types/react/README.html",
    "title": "Installation | Examiner",
    "summary": "Installation npm install --save @types/react Summary This package contains type definitions for react (https://react.dev/). Details Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react. Additional Details Last updated: Wed, 11 Jun 2025 13:41:16 GMT Dependencies: csstype Credits These definitions were written by Asana, AssureSign, Microsoft, John Reilly, Benoit Benezech, Patricio Zavolinsky, Eric Anderson, Dovydas Navickas, Josh Rutherford, Guilherme Hübner, Ferdy Budhidharma, Johann Rakotoharisoa, Olivier Pascal, Martin Hochel, Frank Li, Jessica Franco, Saransh Kataria, Kanitkorn Sujautra, Sebastian Silbermann, Kyle Scully, Cong Zhang, Dimitri Mitropoulos, JongChan Choi, Victor Magalhães, Priyanshu Rav, Dmitry Semigradsky, and Matt Pocock."
  },
  "Examiner-UI/node_modules/@typescript-eslint/eslint-plugin/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/eslint-plugin/README.html",
    "title": "@typescript-eslint/eslint-plugin | Examiner",
    "summary": "@typescript-eslint/eslint-plugin An ESLint plugin which provides lint rules for TypeScript codebases. \uD83D\uDC49 See https://typescript-eslint.io/getting-started for our Getting Started docs. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore/README.html",
    "title": "ignore | Examiner",
    "summary": "Linux / MacOS / Windows Coverage Downloads ignore ignore is a manager, filter and parser which implemented in pure JavaScript according to the .gitignore spec 2.22.1. ignore is used by eslint, gitbook and many others. Pay ATTENTION that minimatch (which used by fstream-ignore) does not follow the gitignore spec. To filter filenames according to a .gitignore file, I recommend this npm package, ignore. To parse an .npmignore file, you should use minimatch, because an .npmignore file is parsed by npm using minimatch and it does not work in the .gitignore way. Tested on ignore is fully tested, and has more than five hundreds of unit tests. Linux + Node: 0.8 - 7.x Windows + Node: 0.10 - 7.x, node < 0.10 is not tested due to the lack of support of appveyor. Actually, ignore does not rely on any versions of node specially. Since 4.0.0, ignore will no longer support node < 6 by default, to use in node < 6, require('ignore/legacy'). For details, see CHANGELOG. Table Of Main Contents Usage Pathname Conventions See Also: glob-gitignore matches files using patterns and filters them according to gitignore rules. Upgrade Guide Install npm i ignore Usage import ignore from 'ignore' const ig = ignore().add(['.abc/*', '!.abc/d/']) Filter the given paths const paths = [ '.abc/a.js', // filtered out '.abc/d/e.js' // included ] ig.filter(paths) // ['.abc/d/e.js'] ig.ignores('.abc/a.js') // true As the filter function paths.filter(ig.createFilter()); // ['.abc/d/e.js'] Win32 paths will be handled ig.filter(['.abc\\\\a.js', '.abc\\\\d\\\\e.js']) // if the code above runs on windows, the result will be // ['.abc\\\\d\\\\e.js'] Why another ignore? ignore is a standalone module, and is much simpler so that it could easy work with other programs, unlike isaacs's fstream-ignore which must work with the modules of the fstream family. ignore only contains utility methods to filter paths according to the specified ignore rules, so ignore never try to find out ignore rules by traversing directories or fetching from git configurations. ignore don't cares about sub-modules of git projects. Exactly according to gitignore man page, fixes some known matching issues of fstream-ignore, such as: '/*.js' should only match 'a.js', but not 'abc/a.js'. '**/foo' should match 'foo' anywhere. Prevent re-including a file if a parent directory of that file is excluded. Handle trailing whitespaces: 'a '(one space) should not match 'a '(two spaces). 'a \\ ' matches 'a ' All test cases are verified with the result of git check-ignore. Methods .add(pattern: string | Ignore): this .add(patterns: Array<string | Ignore>): this .add({pattern: string, mark?: string}): this since 7.0.0 pattern string | Ignore An ignore pattern string, or the Ignore instance patterns Array<string | Ignore> Array of ignore patterns. mark? string Pattern mark, which is used to associate the pattern with a certain marker, such as the line no of the .gitignore file. Actually it could be an arbitrary string and is optional. Adds a rule or several rules to the current manager. Returns this Notice that a line starting with '#'(hash) is treated as a comment. Put a backslash ('\\') in front of the first hash for patterns that begin with a hash, if you want to ignore a file with a hash at the beginning of the filename. ignore().add('#abc').ignores('#abc') // false ignore().add('\\\\#abc').ignores('#abc') // true pattern could either be a line of ignore pattern or a string of multiple ignore patterns, which means we could just ignore().add() the content of a ignore file: ignore() .add(fs.readFileSync(filenameOfGitignore).toString()) .filter(filenames) pattern could also be an ignore instance, so that we could easily inherit the rules of another Ignore instance. .ignores(pathname: Pathname): boolean new in 3.2.0 Returns Boolean whether pathname should be ignored. ig.ignores('.abc/a.js') // true Please PAY ATTENTION that .ignores() is NOT equivalent to git check-ignore although in most cases they return equivalent results. However, for the purposes of imitating the behavior of git check-ignore, please use .checkIgnore() instead. Pathname Conventions: 1. Pathname should be a path.relative()d pathname Pathname should be a string that have been path.join()ed, or the return value of path.relative() to the current directory, // WRONG, an error will be thrown ig.ignores('./abc') // WRONG, for it will never happen, and an error will be thrown // If the gitignore rule locates at the root directory, // `'/abc'` should be changed to `'abc'`. // ``` // path.relative('/', '/abc') -> 'abc' // ``` ig.ignores('/abc') // WRONG, that it is an absolute path on Windows, an error will be thrown ig.ignores('C:\\\\abc') // Right ig.ignores('abc') // Right ig.ignores(path.join('./abc')) // path.join('./abc') -> 'abc' In other words, each Pathname here should be a relative path to the directory of the gitignore rules. Suppose the dir structure is: /path/to/your/repo |-- a | |-- a.js | |-- .b | |-- .c |-- .DS_store Then the paths might be like this: [ 'a/a.js' '.b', '.c/.DS_store' ] 2. filenames and dirnames node-ignore does NO fs.stat during path matching, so node-ignore treats foo as a file foo/ as a directory For the example below: // First, we add a ignore pattern to ignore a directory ig.add('config/') // `ig` does NOT know if 'config', in the real world, // is a normal file, directory or something. ig.ignores('config') // `ig` treats `config` as a file, so it returns `false` ig.ignores('config/') // returns `true` Specially for people who develop some library based on node-ignore, it is important to understand that. Usually, you could use glob with option.mark = true to fetch the structure of the current directory: import glob from 'glob' glob('**', { // Adds a / character to directory matches. mark: true }, (err, files) => { if (err) { return console.error(err) } let filtered = ignore().add(patterns).filter(files) console.log(filtered) }) .filter(paths: Array<Pathname>): Array<Pathname> type Pathname = string Filters the given array of pathnames, and returns the filtered array. paths Array.<Pathname> The array of pathnames to be filtered. .createFilter() Creates a filter function which could filter an array of paths with Array.prototype.filter. Returns function(path) the filter function. .test(pathname: Pathname): TestResult New in 5.0.0 Returns TestResult // Since 5.0.0 interface TestResult { ignored: boolean // true if the `pathname` is finally unignored by some negative pattern unignored: boolean // The `IgnoreRule` which ignores the pathname rule?: IgnoreRule } // Since 7.0.0 interface IgnoreRule { // The original pattern pattern: string // Whether the pattern is a negative pattern negative: boolean // Which is used for other packages to build things upon `node-ignore` mark?: string } {ignored: true, unignored: false}: the pathname is ignored {ignored: false, unignored: true}: the pathname is unignored {ignored: false, unignored: false}: the pathname is never matched by any ignore rules. .checkIgnore(target: string): TestResult new in 7.0.0 Debugs gitignore / exclude files, which is equivalent to git check-ignore -v. Usually this method is used for other packages to implement the function of git check-ignore -v upon node-ignore target string the target to test. Returns TestResult ig.add({ pattern: 'foo/*', mark: '60' }) const { ignored, rule } = checkIgnore('foo/') if (ignored) { console.log(`.gitignore:${result}:${rule.mark}:${rule.pattern} foo/`) } // .gitignore:60:foo/* foo/ Please pay attention that this method does not have a strong built-in cache mechanism. The purpose of introducing this method is to make it possible to implement the git check-ignore command in JavaScript based on node-ignore. So do not use this method in those situations where performance is extremely important. static isPathValid(pathname): boolean since 5.0.0 Check whether the pathname is an valid path.relative()d path according to the convention. This method is NOT used to check if an ignore pattern is valid. import {isPathValid} from 'ignore' isPathValid('./foo') // false .addIgnoreFile(path) REMOVED in 3.x for now. To upgrade ignore@2.x up to 3.x, use import fs from 'fs' if (fs.existsSync(filename)) { ignore().add(fs.readFileSync(filename).toString()) } instead. ignore(options) options.ignorecase since 4.0.0 Similar to the core.ignorecase option of git-config, node-ignore will be case insensitive if options.ignorecase is set to true (the default value), otherwise case sensitive. const ig = ignore({ ignorecase: false }) ig.add('*.png') ig.ignores('*.PNG') // false options.ignoreCase?: boolean since 5.2.0 Which is an alternative to options.ignoreCase options.allowRelativePaths?: boolean since 5.2.0 This option brings backward compatibility with projects which based on ignore@4.x. If options.allowRelativePaths is true, ignore will not check whether the given path to be tested is path.relative()d. However, passing a relative path, such as './foo' or '../foo', to test if it is ignored or not is not a good practise, which might lead to unexpected behavior ignore({ allowRelativePaths: true }).ignores('../foo/bar.js') // And it will not throw Upgrade Guide Upgrade 4.x -> 5.x Since 5.0.0, if an invalid Pathname passed into ig.ignores(), an error will be thrown, unless options.allowRelative = true is passed to the Ignore factory. While ignore < 5.0.0 did not make sure what the return value was, as well as .ignores(pathname: Pathname): boolean .filter(pathnames: Array<Pathname>): Array<Pathname> .createFilter(): (pathname: Pathname) => boolean .test(pathname: Pathname): {ignored: boolean, unignored: boolean} See the convention here for details. If there are invalid pathnames, the conversion and filtration should be done by users. import {isPathValid} from 'ignore' // introduced in 5.0.0 const paths = [ // invalid ////////////////// '', false, '../foo', '.', ////////////////// // valid 'foo' ] .filter(isPathValid) ig.filter(paths) Upgrade 3.x -> 4.x Since 4.0.0, ignore will no longer support node < 6, to use ignore in node < 6: var ignore = require('ignore/legacy') Upgrade 2.x -> 3.x All options of 2.x are unnecessary and removed, so just remove them. ignore() instance is no longer an EventEmitter, and all events are unnecessary and removed. .addIgnoreFile() is removed, see the .addIgnoreFile section for details. Collaborators @whitecolor Alex @SamyPesse Samy Pessé @azproduction Mikhail Davydov @TrySound Bogdan Chadkin @JanMattner Jan Mattner @ntwb Stephen Edgar @kasperisager Kasper Isager @sandersn Nathan Shively-Sanders"
  },
  "Examiner-UI/node_modules/@typescript-eslint/parser/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/parser/README.html",
    "title": "@typescript-eslint/parser | Examiner",
    "summary": "@typescript-eslint/parser An ESLint parser which leverages TypeScript ESTree to allow for ESLint to lint TypeScript source code. \uD83D\uDC49 See https://typescript-eslint.io/packages/parser for documentation on this package. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/project-service/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/project-service/README.html",
    "title": "@typescript-eslint/project-service | Examiner",
    "summary": "@typescript-eslint/project-service Standalone TypeScript project service wrapper for linting. A standalone export of the \"Project Service\" that powers typed linting for typescript-eslint. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/scope-manager/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/scope-manager/README.html",
    "title": "@typescript-eslint/scope-manager | Examiner",
    "summary": "@typescript-eslint/scope-manager \uD83D\uDC49 See https://typescript-eslint.io/packages/scope-manager for documentation on this package. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/tsconfig-utils/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/tsconfig-utils/README.html",
    "title": "@typescript-eslint/tsconfig-utils | Examiner",
    "summary": "@typescript-eslint/tsconfig-utils Utilities for collecting TSConfigs for linting scenarios. The utilities in this package are separated from @typescript-eslint/utils so that they do not have a dependency on eslint or @typescript-eslint/typescript-estree. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/type-utils/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/type-utils/README.html",
    "title": "@typescript-eslint/type-utils | Examiner",
    "summary": "@typescript-eslint/type-utils Type utilities for working with TypeScript within ESLint rules. The utilities in this package are separated from @typescript-eslint/utils so that that package does not require a dependency on typescript. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/types/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/types/README.html",
    "title": "@typescript-eslint/types | Examiner",
    "summary": "@typescript-eslint/types Types for the TypeScript-ESTree AST spec This package exists to help us reduce cycles and provide lighter-weight packages at runtime. ✋ Internal Package This is an internal package to the typescript-eslint monorepo. You likely don't want to use it directly. \uD83D\uDC49 See https://typescript-eslint.io for docs on typescript-eslint."
  },
  "Examiner-UI/node_modules/@typescript-eslint/typescript-estree/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/typescript-estree/README.html",
    "title": "@typescript-eslint/typescript-estree | Examiner",
    "summary": "@typescript-eslint/typescript-estree A parser that produces an ESTree-compatible AST for TypeScript code. Contributing \uD83D\uDC49 See https://typescript-eslint.io/packages/typescript-estree for documentation on this package. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion/README.html",
    "title": "brace-expansion | Examiner",
    "summary": "brace-expansion Brace expansion, as known from sh/bash, in JavaScript. Example var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] API var expand = require('brace-expansion'); var expanded = expand(str) Return an array of all possible and valid expansions of str. If none are found, [str] is returned. Valid expansions are: /^(.*,)+(.+)?$/ // {a,b,...} A comma separated list of options, like {a,b} or {a,{b,c}} or {,a,}. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} A numeric sequence from x to y inclusive, with optional increment. If x or y start with a leading 0, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} An alphabetic sequence from x to y inclusive, with optional increment. x and y must be exactly one character, and if given, incr must be a number. For compatibility reasons, the string ${ is not eligible for brace expansion. Installation With npm do: npm install brace-expansion Contributors Julian Gruber Isaac Z. Schlueter Sponsors This module is proudly supported by my Sponsors! Do you want to support modules like this to improve their quality, stability and weigh in on new features? Then please consider donating to my Patreon. Not sure how much of my modules you're using? Try feross/thanks! Security contact information To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch/README.html",
    "title": "minimatch | Examiner",
    "summary": "minimatch A minimal matching utility. This is the matching library used internally by npm. It works by converting glob expressions into JavaScript RegExp objects. Usage // hybrid module, load with require() or import import { minimatch } from 'minimatch' // or: const { minimatch } = require('minimatch') minimatch('bar.foo', '*.foo') // true! minimatch('bar.foo', '*.bar') // false! minimatch('bar.foo', '*.+(bar|foo)', { debug: true }) // true, and noisy! Features Supports these glob features: Brace Expansion Extended glob matching \"Globstar\" ** matching Posix character classes, like [[:alpha:]], supporting the full range of Unicode characters. For example, [[:alpha:]] will match against 'é', though [a-zA-Z] will not. Collating symbol and set matching is not supported, so [[=e=]] will not match 'é' and [[.ch.]] will not match 'ch' in locales where ch is considered a single character. See: man sh man bash Pattern Matching man 3 fnmatch man 5 gitignore Windows Please only use forward-slashes in glob expressions. Though windows uses either / or \\ as its path separator, only / characters are used by this glob implementation. You must use forward-slashes only in glob expressions. Back-slashes in patterns will always be interpreted as escape characters, not path separators. Note that \\ or / will be interpreted as path separators in paths on Windows, and will match against / in glob expressions. So just always use / in patterns. UNC Paths On Windows, UNC paths like //?/c:/... or //ComputerName/Share/... are handled specially. Patterns starting with a double-slash followed by some non-slash characters will preserve their double-slash. As a result, a pattern like //* will match //x, but not /x. Patterns staring with //?/<drive letter>: will not treat the ? as a wildcard character. Instead, it will be treated as a normal string. Patterns starting with //?/<drive letter>:/... will match file paths starting with <drive letter>:/..., and vice versa, as if the //?/ was not present. This behavior only is present when the drive letters are a case-insensitive match to one another. The remaining portions of the path/pattern are compared case sensitively, unless nocase:true is set. Note that specifying a UNC path using \\ characters as path separators is always allowed in the file path argument, but only allowed in the pattern argument when windowsPathsNoEscape: true is set in the options. Minimatch Class Create a minimatch object by instantiating the minimatch.Minimatch class. var Minimatch = require('minimatch').Minimatch var mm = new Minimatch(pattern, options) Properties pattern The original pattern the minimatch object represents. options The options supplied to the constructor. set A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern {a,b/c}/d would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like \"foo\" rather than fo*o?), then it will be left as a string rather than converted to a regular expression. regexp Created by the makeRe method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like fnmatch(3) with FNM_PATH enabled. negate True if the pattern is negated. comment True if the pattern is a comment. empty True if the pattern is \"\". Methods makeRe() Generate the regexp member if necessary, and return it. Will return false if the pattern is invalid. match(fname) Return true if the filename matches the pattern, or false otherwise. matchOne(fileArray, patternArray, partial) Take a /-split filename, and match it against a single row in the regExpSet. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. hasMagic() Returns true if the parsed pattern contains any magic characters. Returns false if all comparator parts are string literals. If the magicalBraces option is set on the constructor, then it will consider brace expansions which are not otherwise magical to be magic. If not set, then a pattern like a{b,c}d will return false, because neither abd nor acd contain any special glob characters. This does not mean that the pattern string can be used as a literal filename, as it may contain magic glob characters that are escaped. For example, the pattern \\\\* or [*] would not be considered to have magic, as the matching portion parses to the literal string '*' and would match a path named '*', not '\\\\*' or '[*]'. The minimatch.unescape() method may be used to remove escape characters. All other methods are internal, and will be called as necessary. minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. var isJS = minimatch(file, '*.js', { matchBase: true }) minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with Array.filter. Example: var javascripts = fileList.filter(minimatch.filter('*.js', { matchBase: true })) minimatch.escape(pattern, options = {}) Escape all magic characters in a glob pattern, so that it will only ever match literal strings If the windowsPathsNoEscape option is used, then characters are escaped by wrapping in [], because a magic character wrapped in a character class can only be satisfied by that exact character. Slashes (and backslashes in windowsPathsNoEscape mode) cannot be escaped or unescaped. minimatch.unescape(pattern, options = {}) Un-escape a glob string that may contain some escaped characters. If the windowsPathsNoEscape option is used, then square-brace escapes are removed, but not backslash escapes. For example, it will turn the string '[*]' into *, but it will not turn '\\\\*' into '*', because \\ is a path separator in windowsPathsNoEscape mode. When windowsPathsNoEscape is not set, then both brace escapes and backslash escapes are removed. Slashes (and backslashes in windowsPathsNoEscape mode) cannot be escaped or unescaped. minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. var javascripts = minimatch.match(fileList, '*.js', { matchBase: true }) minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. Options All options are false by default. debug Dump a ton of stuff to stderr. nobrace Do not expand {a,b} and {1..3} brace sets. noglobstar Disable ** matching against multiple folder names. dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, a/**/b will not match a/.d/b, unless dot is set. noext Disable \"extglob\" style patterns like +(a|b). nocase Perform a case-insensitive match. nocaseMagicOnly When used with {nocase: true}, create regular expressions that are case-insensitive, but leave string match portions untouched. Has no effect when used without {nocase: true} Useful when some other form of case-insensitive matching is used, or if the original string representation is useful in some other way. nonull When a match is not found by minimatch.match, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. magicalBraces This only affects the results of the Minimatch.hasMagic method. If the pattern contains brace expansions, such as a{b,c}d, but no other magic characters, then the Minimatch.hasMagic() method will return false by default. When this option set, it will return true for brace expansion as well as other magic glob characters. matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. nocomment Suppress the behavior of treating # at the start of a pattern as a comment. nonegate Suppress the behavior of treating a leading ! character as negation. flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) partial Compare a partial path to a pattern. As long as the parts of the path that are present are not contradicted by the pattern, it will be treated as a match. This is useful in applications where you're walking through a folder structure, and don't yet have the full path, but want to ensure that you do not walk down paths that can never be a match. For example, minimatch('/a/b', '/a/*/c/d', { partial: true }) // true, might be /a/b/c/d minimatch('/a/b', '/**/d', { partial: true }) // true, might be /a/b/.../d minimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a windowsPathsNoEscape Use \\\\ as a path separator only, and never as an escape character. If set, all \\\\ characters are replaced with / in the pattern. Note that this makes it impossible to match against paths containing literal glob pattern characters, but allows matching with patterns constructed using path.join() and path.resolve() on Windows platforms, mimicking the (buggy!) behavior of earlier versions on Windows. Please use with caution, and be mindful of the caveat about Windows paths. For legacy reasons, this is also set if options.allowWindowsEscape is set to the exact value false. windowsNoMagicRoot When a pattern starts with a UNC path or drive letter, and in nocase:true mode, do not convert the root portions of the pattern into a case-insensitive regular expression, and instead leave them as strings. This is the default when the platform is win32 and nocase:true is set. preserveMultipleSlashes By default, multiple / characters (other than the leading // in a UNC path, see \"UNC Paths\" above) are treated as a single /. That is, a pattern like a///b will match the file path a/b. Set preserveMultipleSlashes: true to suppress this behavior. optimizationLevel A number indicating the level of optimization that should be done to the pattern prior to parsing and using it for matches. Globstar parts ** are always converted to * when noglobstar is set, and multiple adjacent ** parts are converted into a single ** (ie, a/**/**/b will be treated as a/**/b, as this is equivalent in all cases). 0 - Make no further changes. In this mode, . and .. are maintained in the pattern, meaning that they must also appear in the same position in the test path string. Eg, a pattern like a/*/../c will match the string a/b/../c but not the string a/c. 1 - (default) Remove cases where a double-dot .. follows a pattern portion that is not **, ., .., or empty ''. For example, the pattern ./a/b/../* is converted to ./a/*, and so it will match the path string ./a/c, but not the path string ./a/b/../c. Dots and empty path portions in the pattern are preserved. 2 (or higher) - Much more aggressive optimizations, suitable for use with file-walking cases: Remove cases where a double-dot .. follows a pattern portion that is not **, ., or empty ''. Remove empty and . portions of the pattern, where safe to do so (ie, anywhere other than the last position, the first position, or the second position in a pattern starting with /, as this may indicate a UNC path on Windows). Convert patterns containing <pre>/**/../<p>/<rest> into the equivalent <pre>/{..,**}/<p>/<rest>, where <p> is a a pattern portion other than ., .., **, or empty ''. Dedupe patterns where a ** portion is present in one and omitted in another, and it is not the final path portion, and they are otherwise equivalent. So {a/**/b,a/b} becomes a/**/b, because ** matches against an empty path portion. Dedupe patterns where a * portion is present in one, and a non-dot pattern other than **, ., .., or '' is in the same position in the other. So a/{*,x}/b becomes a/*/b, because * can match against x. While these optimizations improve the performance of file-walking use cases such as glob (ie, the reason this module exists), there are cases where it will fail to match a literal string that would have been matched in optimization level 1 or 0. Specifically, while the Minimatch.match() method will optimize the file path string in the same ways, resulting in the same matches, it will fail when tested with the regular expression provided by Minimatch.makeRe(), unless the path string is first processed with minimatch.levelTwoFileOptimize() or similar. platform When set to win32, this will trigger all windows-specific behaviors (special handling for UNC paths, and treating \\ as separators in file paths for comparison.) Defaults to the value of process.platform. Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations. Some are intentional, and some are unavoidable. If the pattern starts with a ! character, then it is negated. Set the nonegate flag to suppress this behavior, and treat leading ! characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B). Multiple ! characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with #, then it is treated as a comment, and will not match anything. Use \\# to match a literal # at the start of a line, or set the nocomment flag to suppress this behavior. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.1, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b, but a/**b will not. If an escaped pattern has no matches, and the nonull flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, minimatch.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\". This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)}, which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c), and those patterns are checked for validity. Since those two are valid, matching proceeds. Negated extglob patterns are handled as closely as possible to Bash semantics, but there are some cases with negative extglobs which are exceedingly difficult to express in a JavaScript regular expression. In particular the negated pattern <start>!(<pattern>*|)* will in bash match anything that does not start with <start><pattern>. However, <start>!(<pattern>*)* will match paths starting with <start><pattern>, because the empty string can match against the negated portion. In this library, <start>!(<pattern>*|)* will not match any pattern starting with <start>, due to a difference in precisely which patterns are considered \"greedy\" in Regular Expressions vs bash path expansion. This may be fixable, but not without incurring some complexity and performance costs, and the trade-off seems to not be worth pursuing. Note that fnmatch(3) in libc is an extremely naive string comparison matcher, which does not do anything special for slashes. This library is designed to be used in glob searching and file walkers, and so it does do special things with /. Thus, foo* will not match foo/bar in this library, even though it would in fnmatch(3)."
  },
  "Examiner-UI/node_modules/@typescript-eslint/utils/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/utils/README.html",
    "title": "@typescript-eslint/utils | Examiner",
    "summary": "@typescript-eslint/utils Utilities for working with TypeScript + ESLint together. \uD83D\uDC49 See https://typescript-eslint.io/packages/utils for documentation on this package. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/@typescript-eslint/visitor-keys/README.html": {
    "href": "Examiner-UI/node_modules/@typescript-eslint/visitor-keys/README.html",
    "title": "@typescript-eslint/visitor-keys | Examiner",
    "summary": "@typescript-eslint/visitor-keys Visitor keys used to help traverse the TypeScript-ESTree AST. ✋ Internal Package This is an internal package to the typescript-eslint monorepo. You likely don't want to use it directly. \uD83D\uDC49 See https://typescript-eslint.io for docs on typescript-eslint."
  },
  "Examiner-UI/node_modules/@vitejs/plugin-react-swc/README.html": {
    "href": "Examiner-UI/node_modules/@vitejs/plugin-react-swc/README.html",
    "title": "| Examiner",
    "summary": "@vitejs/plugin-react-swc Speed up your Vite dev server with SWC ✅ A fast Fast Refresh (~20x faster than Babel) ✅ Enable automatic JSX runtime Installation npm i -D @vitejs/plugin-react-swc Usage import { defineConfig } from 'vite' import react from '@vitejs/plugin-react-swc' export default defineConfig({ plugins: [react()], }) Caveats This plugin has limited options to enable good performances and be transpiler agnostic. Here is the list of non-configurable options that impact runtime behaviour: useDefineForClassFields is always activated, as this matches the current ECMAScript spec jsx runtime is always automatic In development: esbuild is disabled, so the esbuild configuration has no effect target is ignored and defaults to es2020 (see devTarget) JS files are not transformed tsconfig is not resolved, so properties other than the ones listed above behaves like TS defaults Options jsxImportSource Control where the JSX factory is imported from. @default \"react\" react({ jsxImportSource: '@emotion/react' }) tsDecorators Enable TypeScript decorators. Requires experimentalDecorators in tsconfig. @default false react({ tsDecorators: true }) plugins Use SWC plugins. Enable SWC at build time. react({ plugins: [['@swc/plugin-styled-components', {}]] }) devTarget Set the target for SWC in dev. This can avoid to down-transpile private class method for example. For production target, see https://vite.dev/config/build-options.html#build-target. @default \"es2020\" react({ devTarget: 'es2022' }) parserConfig Override the default include list (.ts, .tsx, .mts, .jsx, .mdx). This requires to redefine the config for any file you want to be included (ts, mdx, ...). If you want to trigger fast refresh on compiled JS, use jsx: true. Exclusion of node_modules should be handled by the function if needed. Using this option to use JSX inside .js files is highly discouraged and can be removed in any future version. react({ parserConfig(id) { if (id.endsWith('.res')) return { syntax: 'ecmascript', jsx: true } if (id.endsWith('.ts')) return { syntax: 'typescript', tsx: false } }, }) reactRefreshHost The reactRefreshHost option is only necessary in a module federation context. It enables HMR to work between a remote & host application. In your remote Vite config, you would add your host origin: react({ reactRefreshHost: 'http://localhost:3000' }) Under the hood, this simply updates the React Fash Refresh runtime URL from /@react-refresh to http://localhost:3000/@react-refresh to ensure there is only one Refresh runtime across the whole application. Note that if you define base option in the host application, you need to include it in the option, like: http://localhost:3000/{base}. useAtYourOwnRisk_mutateSwcOptions The future of Vite is with OXC, and from the beginning this was a design choice to not exposed too many specialties from SWC so that Vite React users can move to another transformer later. Also debugging why some specific version of decorators with some other unstable/legacy feature doesn't work is not fun, so we won't provide support for it, hence the name useAtYourOwnRisk. react({ useAtYourOwnRisk_mutateSwcOptions(options) { options.jsc.parser.decorators = true options.jsc.transform.decoratorVersion = '2022-03' }, }) disableOxcRecommendation If set, disables the recommendation to use @vitejs/plugin-react-oxc (which is shown when rolldown-vite is detected and neither swc plugins are used nor the swc options are mutated). react({ disableOxcRecommendation: true }) Consistent components exports For React refresh to work correctly, your file should only export React components. The best explanation I've read is the one from the Gatsby docs. If an incompatible change in exports is found, the module will be invalidated and HMR will propagate. To make it easier to export simple constants alongside your component, the module is only invalidated when their value changes. You can catch mistakes and get more detailed warning with this eslint rule."
  },
  "Examiner-UI/node_modules/acorn-jsx/README.html": {
    "href": "Examiner-UI/node_modules/acorn-jsx/README.html",
    "title": "Acorn-JSX | Examiner",
    "summary": "Acorn-JSX This is plugin for Acorn - a tiny, fast JavaScript parser, written completely in JavaScript. It was created as an experimental alternative, faster React.js JSX parser. Later, it replaced the official parser and these days is used by many prominent development tools. Transpiler Please note that this tool only parses source code to JSX AST, which is useful for various language tools and services. If you want to transpile your code to regular ES5-compliant JavaScript with source map, check out Babel and Buble transpilers which use acorn-jsx under the hood. Usage Requiring this module provides you with an Acorn plugin that you can use like this: var acorn = require(\"acorn\"); var jsx = require(\"acorn-jsx\"); acorn.Parser.extend(jsx()).parse(\"my(<jsx/>, 'code');\"); Note that official spec doesn't support mix of XML namespaces and object-style access in tag names (#27) like in <namespace:Object.Property />, so it was deprecated in acorn-jsx@3.0. If you still want to opt-in to support of such constructions, you can pass the following option: acorn.Parser.extend(jsx({ allowNamespacedObjects: true })) Also, since most apps use pure React transformer, a new option was introduced that allows to prohibit namespaces completely: acorn.Parser.extend(jsx({ allowNamespaces: false })) Note that by default allowNamespaces is enabled for spec compliancy. License This plugin is issued under the MIT license."
  },
  "Examiner-UI/node_modules/acorn/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/acorn/CHANGELOG.html",
    "title": "| Examiner",
    "summary": "8.15.0 (2025-06-08) New features Support using and await using syntax. The AnyNode type is now defined in such a way that plugins can extend it. Bug fixes Fix an issue where the bigint property of literal nodes for non-decimal bigints had the wrong format. The acorn CLI tool no longer crashes when emitting a tree that contains a bigint. 8.14.1 (2025-03-05) Bug fixes Fix an issue where await expressions in class field initializers were inappropriately allowed. Properly allow await inside an async arrow function inside a class field initializer. Mention the source file name in syntax error messages when given. Properly add an empty attributes property to every form of ExportNamedDeclaration. 8.14.0 (2024-10-27) New features Support ES2025 import attributes. Support ES2025 RegExp modifiers. Bug fixes Support some missing Unicode properties. 8.13.0 (2024-10-16) New features Upgrade to Unicode 16.0. 8.12.1 (2024-07-03) Bug fixes Fix a regression that caused Acorn to no longer run on Node versions <8.10. 8.12.0 (2024-06-14) New features Support ES2025 duplicate capture group names in regular expressions. Bug fixes Include VariableDeclarator in the AnyNode type so that walker objects can refer to it without getting a type error. Properly raise a parse error for invalid for/of statements using async as binding name. Properly recognize \"use strict\" when preceded by a string with an escaped newline. Mark the Parser constructor as protected, not private, so plugins can extend it without type errors. Fix a bug where some invalid delete expressions were let through when the operand was parenthesized and preserveParens was enabled. Properly normalize line endings in raw strings of invalid template tokens. Properly track line numbers for escaped newlines in strings. Fix a bug that broke line number accounting after a template literal with invalid escape sequences. 8.11.3 (2023-12-29) Bug fixes Add Function and Class to the AggregateType type, so that they can be used in walkers without raising a type error. Make sure onToken get an import keyword token when parsing import.meta. Fix a bug where .loc.start could be undefined for new.target meta nodes. 8.11.2 (2023-10-27) Bug fixes Fix a bug that caused regular expressions after colon tokens to not be properly tokenized in some circumstances. 8.11.1 (2023-10-26) Bug fixes Fix a regression where onToken would receive 'name' tokens for 'new' keyword tokens. 8.11.0 (2023-10-26) Bug fixes Fix an issue where tokenizing (without parsing) an object literal with a property named class or function could, in some circumstance, put the tokenizer into an invalid state. Fix an issue where a slash after a call to a propery named the same as some keywords would be tokenized as a regular expression. New features Upgrade to Unicode 15.1. Use a set of new, much more precise, TypeScript types. 8.10.0 (2023-07-05) New features Add a checkPrivateFields option that disables strict checking of private property use. 8.9.0 (2023-06-16) Bug fixes Forbid dynamic import after new, even when part of a member expression. New features Add Unicode properties for ES2023. Add support for the v flag to regular expressions. 8.8.2 (2023-01-23) Bug fixes Fix a bug that caused allowHashBang to be set to false when not provided, even with ecmaVersion >= 14. Fix an exception when passing no option object to parse or new Parser. Fix incorrect parse error on if (0) let\\n[astral identifier char]. 8.8.1 (2022-10-24) Bug fixes Make type for Comment compatible with estree types. 8.8.0 (2022-07-21) Bug fixes Allow parentheses around spread args in destructuring object assignment. Fix an issue where the tree contained directive properties in when parsing with a language version that doesn't support them. New features Support hashbang comments by default in ECMAScript 2023 and later. 8.7.1 (2021-04-26) Bug fixes Stop handling \"use strict\" directives in ECMAScript versions before 5. Fix an issue where duplicate quoted export names in export * syntax were incorrectly checked. Add missing type for tokTypes. 8.7.0 (2021-12-27) New features Support quoted export names. Upgrade to Unicode 14. Add support for Unicode 13 properties in regular expressions. Bug fixes Use a loop to find line breaks, because the existing regexp search would overrun the end of the searched range and waste a lot of time in minified code. 8.6.0 (2021-11-18) Bug fixes Fix a bug where an object literal with multiple __proto__ properties would incorrectly be accepted if a later property value held an assigment. New features Support class private fields with the in operator. 8.5.0 (2021-09-06) Bug fixes Improve context-dependent tokenization in a number of corner cases. Fix location tracking after a 0x2028 or 0x2029 character in a string literal (which before did not increase the line number). Fix an issue where arrow function bodies in for loop context would inappropriately consume in operators. Fix wrong end locations stored on SequenceExpression nodes. Implement restriction that for/of loop LHS can't start with let. New features Add support for ES2022 class static blocks. Allow multiple input files to be passed to the CLI tool. 8.4.1 (2021-06-24) Bug fixes Fix a bug where allowAwaitOutsideFunction would allow await in class field initializers, and setting ecmaVersion to 13 or higher would allow top-level await in non-module sources. 8.4.0 (2021-06-11) New features A new option, allowSuperOutsideMethod, can be used to suppress the error when super is used in the wrong context. 8.3.0 (2021-05-31) New features Default allowAwaitOutsideFunction to true for ECMAScript 2022 an higher. Add support for the d (indices) regexp flag. 8.2.4 (2021-05-04) Bug fixes Fix spec conformity in corner case 'for await (async of ...)'. 8.2.3 (2021-05-04) Bug fixes Fix an issue where the library couldn't parse 'for (async of ...)'. Fix a bug in UTF-16 decoding that would read characters incorrectly in some circumstances. 8.2.2 (2021-04-29) Bug fixes Fix a bug where a class field initialized to an async arrow function wouldn't allow await inside it. Same issue existed for generator arrow functions with yield. 8.2.1 (2021-04-24) Bug fixes Fix a regression introduced in 8.2.0 where static or async class methods with keyword names fail to parse. 8.2.0 (2021-04-24) New features Add support for ES2022 class fields and private methods. 8.1.1 (2021-04-12) Various Stop shipping source maps in the NPM package. 8.1.0 (2021-03-09) Bug fixes Fix a spurious error in nested destructuring arrays. New features Expose allowAwaitOutsideFunction in CLI interface. Make allowImportExportAnywhere also apply to import.meta. 8.0.5 (2021-01-25) Bug fixes Adjust package.json to work with Node 12.16.0 and 13.0-13.6. 8.0.4 (2020-10-05) Bug fixes Make await x ** y an error, following the spec. Fix potentially exponential regular expression. 8.0.3 (2020-10-02) Bug fixes Fix a wasteful loop during Parser creation when setting ecmaVersion to \"latest\". 8.0.2 (2020-09-30) Bug fixes Make the TypeScript types reflect the current allowed values for ecmaVersion. Fix another regexp/division tokenizer issue. 8.0.1 (2020-08-12) Bug fixes Provide the correct value in the version export. 8.0.0 (2020-08-12) Bug fixes Disallow expressions like (a = b) = c. Make non-octal escape sequences a syntax error in strict mode. New features The package can now be loaded directly as an ECMAScript module in node 13+. Update to the set of Unicode properties from ES2021. Breaking changes The ecmaVersion option is now required. For the moment, omitting it will still work with a warning, but that will change in a future release. Some changes to method signatures that may be used by plugins. 7.4.0 (2020-08-03) New features Add support for logical assignment operators. Add support for numeric separators. 7.3.1 (2020-06-11) Bug fixes Make the string in the version export match the actual library version. 7.3.0 (2020-06-11) Bug fixes Fix a bug that caused parsing of object patterns with a property named set that had a default value to fail. New features Add support for optional chaining (?.). 7.2.0 (2020-05-09) Bug fixes Fix precedence issue in parsing of async arrow functions. New features Add support for nullish coalescing. Add support for import.meta. Support export * as ... syntax. Upgrade to Unicode 13. 6.4.1 (2020-03-09) Bug fixes More carefully check for valid UTF16 surrogate pairs in regexp validator. 7.1.1 (2020-03-01) Bug fixes Treat \\8 and \\9 as invalid escapes in template strings. Allow unicode escapes in property names that are keywords. Don't error on an exponential operator expression as argument to await. More carefully check for valid UTF16 surrogate pairs in regexp validator. 7.1.0 (2019-09-24) Bug fixes Disallow trailing object literal commas when ecmaVersion is less than 5. New features Add a static acorn property to the Parser class that contains the entire module interface, to allow plugins to access the instance of the library that they are acting on. 7.0.0 (2019-08-13) Breaking changes Changes the node format for dynamic imports to use the ImportExpression node type, as defined in ESTree. Makes 10 (ES2019) the default value for the ecmaVersion option. 6.3.0 (2019-08-12) New features sourceType: \"module\" can now be used even when ecmaVersion is less than 6, to parse module-style code that otherwise conforms to an older standard. 6.2.1 (2019-07-21) Bug fixes Fix bug causing Acorn to treat some characters as identifier characters that shouldn't be treated as such. Fix issue where setting the allowReserved option to \"never\" allowed reserved words in some circumstances. 6.2.0 (2019-07-04) Bug fixes Improve valid assignment checking in for/in and for/of loops. Disallow binding let in patterns. New features Support bigint syntax with ecmaVersion >= 11. Support dynamic import syntax with ecmaVersion >= 11. Upgrade to Unicode version 12. 6.1.1 (2019-02-27) Bug fixes Fix bug that caused parsing default exports of with names to fail. 6.1.0 (2019-02-08) Bug fixes Fix scope checking when redefining a var as a lexical binding. New features Split up parseSubscripts to use an internal parseSubscript method to make it easier to extend with plugins. 6.0.7 (2019-02-04) Bug fixes Check that exported bindings are defined. Don't treat \\u180e as a whitespace character. Check for duplicate parameter names in methods. Don't allow shorthand properties when they are generators or async methods. Forbid binding await in async arrow function's parameter list. 6.0.6 (2019-01-30) Bug fixes The content of class declarations and expressions is now always parsed in strict mode. Don't allow let or const to bind the variable name let. Treat class declarations as lexical. Don't allow a generator function declaration as the sole body of an if or else. Ignore \"use strict\" when after an empty statement. Allow string line continuations with special line terminator characters. Treat for bodies as part of the for scope when checking for conflicting bindings. Fix bug with parsing yield in a for loop initializer. Implement special cases around scope checking for functions. 6.0.5 (2019-01-02) Bug fixes Fix TypeScript type for Parser.extend and add allowAwaitOutsideFunction to options type. Don't treat let as a keyword when the next token is { on the next line. Fix bug that broke checking for parentheses around an object pattern in a destructuring assignment when preserveParens was on. 6.0.4 (2018-11-05) Bug fixes Further improvements to tokenizing regular expressions in corner cases. 6.0.3 (2018-11-04) Bug fixes Fix bug in tokenizing an expression-less return followed by a function followed by a regular expression. Remove stray symlink in the package tarball. 6.0.2 (2018-09-26) Bug fixes Fix bug where default expressions could fail to parse inside an object destructuring assignment expression. 6.0.1 (2018-09-14) Bug fixes Fix wrong value in version export. 6.0.0 (2018-09-14) Bug fixes Better handle variable-redefinition checks for catch bindings and functions directly under if statements. Forbid new.target in top-level arrow functions. Fix issue with parsing a regexp after yield in some contexts. New features The package now comes with TypeScript definitions. Breaking changes The default value of the ecmaVersion option is now 9 (2018). Plugins work differently, and will have to be rewritten to work with this version. The loose parser and walker have been moved into separate packages (acorn-loose and acorn-walk). 5.7.3 (2018-09-10) Bug fixes Fix failure to tokenize regexps after expressions like x.of. Better error message for unterminated template literals. 5.7.2 (2018-08-24) Bug fixes Properly handle allowAwaitOutsideFunction in for statements. Treat function declarations at the top level of modules like let bindings. Don't allow async function declarations as the only statement under a label. 5.7.0 (2018-06-15) New features Upgraded to Unicode 11. 5.6.0 (2018-05-31) New features Allow U+2028 and U+2029 in string when ECMAVersion >= 10. Allow binding-less catch statements when ECMAVersion >= 10. Add allowAwaitOutsideFunction option for parsing top-level await. 5.5.3 (2018-03-08) Bug fixes A second republish of the code in 5.5.1, this time with yarn, to hopefully get valid timestamps. 5.5.2 (2018-03-08) Bug fixes A republish of the code in 5.5.1 in an attempt to solve an issue with the file timestamps in the npm package being 0. 5.5.1 (2018-03-06) Bug fixes Fix misleading error message for octal escapes in template strings. 5.5.0 (2018-02-27) New features The identifier character categorization is now based on Unicode version 10. Acorn will now validate the content of regular expressions, including new ES9 features. 5.4.0 (2018-02-01) Bug fixes Disallow duplicate or escaped flags on regular expressions. Disallow octal escapes in strings in strict mode. New features Add support for async iteration. Add support for object spread and rest. 5.3.0 (2017-12-28) Bug fixes Fix parsing of floating point literals with leading zeroes in loose mode. Allow duplicate property names in object patterns. Don't allow static class methods named prototype. Disallow async functions directly under if or else. Parse right-hand-side of for/of as an assignment expression. Stricter parsing of for/in. Don't allow unicode escapes in contextual keywords. New features Parsing class members was factored into smaller methods to allow plugins to hook into it. 5.2.1 (2017-10-30) Bug fixes Fix a token context corruption bug. 5.2.0 (2017-10-30) Bug fixes Fix token context tracking for class and function in property-name position. Make sure %* isn't parsed as a valid operator. Allow shorthand properties get and set to be followed by default values. Disallow super when not in callee or object position. New features Support directive property on directive expression statements. 5.1.2 (2017-09-04) Bug fixes Disable parsing of legacy HTML-style comments in modules. Fix parsing of async methods whose names are keywords. 5.1.1 (2017-07-06) Bug fixes Fix problem with disambiguating regexp and division after a class. 5.1.0 (2017-07-05) Bug fixes Fix tokenizing of regexps in an object-desctructuring for/of loop and after yield. Parse zero-prefixed numbers with non-octal digits as decimal. Allow object/array patterns in rest parameters. Don't error when yield is used as a property name. Allow async as a shorthand object property. New features Implement the template literal revision proposal for ES9. 5.0.3 (2017-04-01) Bug fixes Fix spurious duplicate variable definition errors for named functions. 5.0.2 (2017-03-30) Bug fixes A binary operator after a parenthesized arrow expression is no longer incorrectly treated as an error. 5.0.0 (2017-03-28) Bug fixes Raise an error for duplicated lexical bindings. Fix spurious error when an assignement expression occurred after a spread expression. Accept regular expressions after of (in for/of), yield (in a generator), and braced arrow functions. Allow labels in front or var declarations, even in strict mode. Breaking changes Parse declarations following export default as declaration nodes, not expressions. This means that class and function declarations nodes can now have null as their id. 4.0.11 (2017-02-07) Bug fixes Allow all forms of member expressions to be parenthesized as lvalue. 4.0.10 (2017-02-07) Bug fixes Don't expect semicolons after default-exported functions or classes, even when they are expressions. Check for use of 'use strict' directives in non-simple parameter functions, even when already in strict mode. 4.0.9 (2017-02-06) Bug fixes Fix incorrect error raised for parenthesized simple assignment targets, so that (x) = 1 parses again. 4.0.8 (2017-02-03) Bug fixes Solve spurious parenthesized pattern errors by temporarily erring on the side of accepting programs that our delayed errors don't handle correctly yet. 4.0.7 (2017-02-02) Bug fixes Accept invalidly rejected code like (x).y = 2 again. Don't raise an error when a function inside strict code has a non-simple parameter list. 4.0.6 (2017-02-02) Bug fixes Fix exponential behavior (manifesting itself as a complete hang for even relatively small source files) introduced by the new 'use strict' check. 4.0.5 (2017-02-02) Bug fixes Disallow parenthesized pattern expressions. Allow keywords as export names. Don't allow the async keyword to be parenthesized. Properly raise an error when a keyword contains a character escape. Allow \"use strict\" to appear after other string literal expressions. Disallow labeled declarations. 4.0.4 (2016-12-19) Bug fixes Fix crash when export was followed by a keyword that can't be exported. 4.0.3 (2016-08-16) Bug fixes Allow regular function declarations inside single-statement if branches in loose mode. Forbid them entirely in strict mode. Properly parse properties named async in ES2017 mode. Fix bug where reserved words were broken in ES2017 mode. 4.0.2 (2016-08-11) Bug fixes Don't ignore period or 'e' characters after octal numbers. Fix broken parsing for call expressions in default parameter values of arrow functions. 4.0.1 (2016-08-08) Bug fixes Fix false positives in duplicated export name errors. 4.0.0 (2016-08-07) Breaking changes The default ecmaVersion option value is now 7. A number of internal method signatures changed, so plugins might need to be updated. Bug fixes The parser now raises errors on duplicated export names. arguments and eval can now be used in shorthand properties. Duplicate parameter names in non-simple argument lists now always produce an error. New features The ecmaVersion option now also accepts year-style version numbers (2015, etc). Support for async/await syntax when ecmaVersion is >= 8. Support for trailing commas in call expressions when ecmaVersion is >= 8. 3.3.0 (2016-07-25) Bug fixes Fix bug in tokenizing of regexp operator after a function declaration. Fix parser crash when parsing an array pattern with a hole. New features Implement check against complex argument lists in functions that enable strict mode in ES7. 3.2.0 (2016-06-07) Bug fixes Improve handling of lack of unicode regexp support in host environment. Properly reject shorthand properties whose name is a keyword. New features Visitors created with visit.make now have their base as prototype, rather than copying properties into a fresh object. 3.1.0 (2016-04-18) Bug fixes Properly tokenize the division operator directly after a function expression. Allow trailing comma in destructuring arrays. 3.0.4 (2016-02-25) Fixes Allow update expressions as left-hand-side of the ES7 exponential operator. 3.0.2 (2016-02-10) Fixes Fix bug that accidentally made undefined a reserved word when parsing ES7. 3.0.0 (2016-02-10) Breaking changes The default value of the ecmaVersion option is now 6 (used to be 5). Support for comprehension syntax (which was dropped from the draft spec) has been removed. Fixes let and yield are now “contextual keywords”, meaning you can mostly use them as identifiers in ES5 non-strict code. A parenthesized class or function expression after export default is now parsed correctly. New features When ecmaVersion is set to 7, Acorn will parse the exponentiation operator (**). The identifier character ranges are now based on Unicode 8.0.0. Plugins can now override the raiseRecoverable method to override the way non-critical errors are handled. 2.7.0 (2016-01-04) Fixes Stop allowing rest parameters in setters. Disallow y rexexp flag in ES5. Disallow \\00 and \\000 escapes in strict mode. Raise an error when an import name is a reserved word. 2.6.2 (2015-11-10) Fixes Don't crash when no options object is passed. 2.6.0 (2015-11-09) Fixes Add await as a reserved word in module sources. Disallow yield in a parameter default value for a generator. Forbid using a comma after a rest pattern in an array destructuring. New features Support parsing stdin in command-line tool. 2.5.0 (2015-10-27) Fixes Fix tokenizer support in the command-line tool. Stop allowing new.target outside of functions. Remove legacy guard and guardedHandler properties from try nodes. Stop allowing multiple __proto__ properties on an object literal in strict mode. Don't allow rest parameters to be non-identifier patterns. Check for duplicate paramter names in arrow functions."
  },
  "Examiner-UI/node_modules/acorn/README.html": {
    "href": "Examiner-UI/node_modules/acorn/README.html",
    "title": "Acorn | Examiner",
    "summary": "Acorn A tiny, fast JavaScript parser written in JavaScript. Community Acorn is open source software released under an MIT license. You are welcome to report bugs or create pull requests on github. Installation The easiest way to install acorn is from npm: npm install acorn Alternately, you can download the source and build acorn yourself: git clone https://github.com/acornjs/acorn.git cd acorn npm install Interface parse(input, options) is the main interface to the library. The input parameter is a string, options must be an object setting some of the options listed below. The return value will be an abstract syntax tree object as specified by the ESTree spec. let acorn = require(\"acorn\"); console.log(acorn.parse(\"1 + 1\", {ecmaVersion: 2020})); When encountering a syntax error, the parser will raise a SyntaxError object with a meaningful message. The error object will have a pos property that indicates the string offset at which the error occurred, and a loc object that contains a {line, column} object referring to that same position. Options are provided by in a second argument, which should be an object containing any of these fields (only ecmaVersion is required): ecmaVersion: Indicates the ECMAScript version to parse. Can be a number, either in year (2022) or plain version number (6) form, or \"latest\" (the latest the library supports). This influences support for strict mode, the set of reserved words, and support for new syntax features. NOTE: Only 'stage 4' (finalized) ECMAScript features are being implemented by Acorn. Other proposed new features must be implemented through plugins. sourceType: Indicate the mode the code should be parsed in. Can be either \"script\" or \"module\". This influences global strict mode and parsing of import and export declarations. NOTE: If set to \"module\", then static import / export syntax will be valid, even if ecmaVersion is less than 6. onInsertedSemicolon: If given a callback, that callback will be called whenever a missing semicolon is inserted by the parser. The callback will be given the character offset of the point where the semicolon is inserted as argument, and if locations is on, also a {line, column} object representing this position. onTrailingComma: Like onInsertedSemicolon, but for trailing commas. allowReserved: If false, using a reserved word will generate an error. Defaults to true for ecmaVersion 3, false for higher versions. When given the value \"never\", reserved words and keywords can also not be used as property names (as in Internet Explorer's old parser). allowReturnOutsideFunction: By default, a return statement at the top level raises an error. Set this to true to accept such code. allowImportExportEverywhere: By default, import and export declarations can only appear at a program's top level. Setting this option to true allows them anywhere where a statement is allowed, and also allows import.meta expressions to appear in scripts (when sourceType is not \"module\"). allowAwaitOutsideFunction: If false, await expressions can only appear inside async functions. Defaults to true in modules for ecmaVersion 2022 and later, false for lower versions. Setting this option to true allows to have top-level await expressions. They are still not allowed in non-async functions, though. allowSuperOutsideMethod: By default, super outside a method raises an error. Set this to true to accept such code. allowHashBang: When this is enabled, if the code starts with the characters #! (as in a shellscript), the first line will be treated as a comment. Defaults to true when ecmaVersion >= 2023. checkPrivateFields: By default, the parser will verify that private properties are only used in places where they are valid and have been declared. Set this to false to turn such checks off. locations: When true, each node has a loc object attached with start and end subobjects, each of which contains the one-based line and zero-based column numbers in {line, column} form. Default is false. onToken: If a function is passed for this option, each found token will be passed in same format as tokens returned from tokenizer().getToken(). If array is passed, each found token is pushed to it. Note that you are not allowed to call the parser from the callback—that will corrupt its internal state. onComment: If a function is passed for this option, whenever a comment is encountered the function will be called with the following parameters: block: true if the comment is a block comment, false if it is a line comment. text: The content of the comment. start: Character offset of the start of the comment. end: Character offset of the end of the comment. When the locations options is on, the {line, column} locations of the comment’s start and end are passed as two additional parameters. If array is passed for this option, each found comment is pushed to it as object in Esprima format: { \"type\": \"Line\" | \"Block\", \"value\": \"comment text\", \"start\": Number, \"end\": Number, // If `locations` option is on: \"loc\": { \"start\": {line: Number, column: Number} \"end\": {line: Number, column: Number} }, // If `ranges` option is on: \"range\": [Number, Number] } Note that you are not allowed to call the parser from the callback—that will corrupt its internal state. ranges: Nodes have their start and end characters offsets recorded in start and end properties (directly on the node, rather than the loc object, which holds line/column data. To also add a semi-standardized range property holding a [start, end] array with the same numbers, set the ranges option to true. program: It is possible to parse multiple files into a single AST by passing the tree produced by parsing the first file as the program option in subsequent parses. This will add the toplevel forms of the parsed file to the \"Program\" (top) node of an existing parse tree. sourceFile: When the locations option is true, you can pass this option to add a source attribute in every node’s loc object. Note that the contents of this option are not examined or processed in any way; you are free to use whatever format you choose. directSourceFile: Like sourceFile, but a sourceFile property will be added (regardless of the location option) directly to the nodes, rather than the loc object. preserveParens: If this option is true, parenthesized expressions are represented by (non-standard) ParenthesizedExpression nodes that have a single expression property containing the expression inside parentheses. parseExpressionAt(input, offset, options) will parse a single expression in a string, and return its AST. It will not complain if there is more of the string left after the expression. tokenizer(input, options) returns an object with a getToken method that can be called repeatedly to get the next token, a {start, end, type, value} object (with added loc property when the locations option is enabled and range property when the ranges option is enabled). When the token's type is tokTypes.eof, you should stop calling the method, since it will keep returning that same token forever. Note that tokenizing JavaScript without parsing it is, in modern versions of the language, not really possible due to the way syntax is overloaded in ways that can only be disambiguated by the parse context. This package applies a bunch of heuristics to try and do a reasonable job, but you are advised to use parse with the onToken option instead of this. In ES6 environment, returned result can be used as any other protocol-compliant iterable: for (let token of acorn.tokenizer(str)) { // iterate over the tokens } // transform code to array of tokens: var tokens = [...acorn.tokenizer(str)]; tokTypes holds an object mapping names to the token type objects that end up in the type properties of tokens. getLineInfo(input, offset) can be used to get a {line, column} object for a given program string and offset. The Parser class Instances of the Parser class contain all the state and logic that drives a parse. It has static methods parse, parseExpressionAt, and tokenizer that match the top-level functions by the same name. When extending the parser with plugins, you need to call these methods on the extended version of the class. To extend a parser with plugins, you can use its static extend method. var acorn = require(\"acorn\"); var jsx = require(\"acorn-jsx\"); var JSXParser = acorn.Parser.extend(jsx()); JSXParser.parse(\"foo(<bar/>)\", {ecmaVersion: 2020}); The extend method takes any number of plugin values, and returns a new Parser class that includes the extra parser logic provided by the plugins. Command line interface The bin/acorn utility can be used to parse a file from the command line. It accepts as arguments its input file and the following options: --ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|--ecma10: Sets the ECMAScript version to parse. Default is version 9. --module: Sets the parsing mode to \"module\". Is set to \"script\" otherwise. --locations: Attaches a \"loc\" object to each node with \"start\" and \"end\" subobjects, each of which contains the one-based line and zero-based column numbers in {line, column} form. --allow-hash-bang: If the code starts with the characters #! (as in a shellscript), the first line will be treated as a comment. --allow-await-outside-function: Allows top-level await expressions. See the allowAwaitOutsideFunction option for more information. --compact: No whitespace is used in the AST output. --silent: Do not output the AST, just return the exit status. --help: Print the usage information and quit. The utility spits out the syntax tree as JSON data. Existing plugins acorn-jsx: Parse Facebook JSX syntax extensions"
  },
  "Examiner-UI/node_modules/ajv/README.html": {
    "href": "Examiner-UI/node_modules/ajv/README.html",
    "title": "Ajv: Another JSON Schema Validator | Examiner",
    "summary": "Ajv: Another JSON Schema Validator The fastest JSON Schema validator for Node.js and browser. Supports draft-04/06/07. Ajv v7 beta is released Ajv version 7.0.0-beta.0 is released with these changes: to reduce the mistakes in JSON schemas and unexpected validation results, strict mode is added - it prohibits ignored or ambiguous JSON Schema elements. to make code injection from untrusted schemas impossible, code generation is fully re-written to be safe. to simplify Ajv extensions, the new keyword API that is used by pre-defined keywords is available to user-defined keywords - it is much easier to define any keywords now, especially with subschemas. schemas are compiled to ES6 code (ES5 code generation is supported with an option). to improve reliability and maintainability the code is migrated to TypeScript. Please note: the support for JSON-Schema draft-04 is removed - if you have schemas using \"id\" attributes you have to replace them with \"$id\" (or continue using version 6 that will be supported until 02/28/2021). all formats are separated to ajv-formats package - they have to be explicitely added if you use them. See release notes for the details. To install the new version: npm install ajv@beta See Getting started with v7 for code example. Mozilla MOSS grant and OpenJS Foundation Ajv has been awarded a grant from Mozilla’s Open Source Support (MOSS) program in the “Foundational Technology” track! It will sponsor the development of Ajv support of JSON Schema version 2019-09 and of JSON Type Definition. Ajv also joined OpenJS Foundation – having this support will help ensure the longevity and stability of Ajv for all its users. This blog post has more details. I am looking for the long term maintainers of Ajv – working with ReadySet, also sponsored by Mozilla, to establish clear guidelines for the role of a \"maintainer\" and the contribution standards, and to encourage a wider, more inclusive, contribution from the community. Please sponsor Ajv development Since I asked to support Ajv development 40 people and 6 organizations contributed via GitHub and OpenCollective - this support helped receiving the MOSS grant! Your continuing support is very important - the funds will be used to develop and maintain Ajv once the next major version is released. Please sponsor Ajv via: GitHub sponsors page (GitHub will match it) Ajv Open Collective️ Thank you. Open Collective sponsors Using version 6 JSON Schema draft-07 is published. Ajv version 6.0.0 that supports draft-07 is released. It may require either migrating your schemas or updating your code (to continue using draft-04 and v5 schemas, draft-06 schemas will be supported without changes). Please note: To use Ajv with draft-06 schemas you need to explicitly add the meta-schema to the validator instance: ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json')); To use Ajv with draft-04 schemas in addition to explicitly adding meta-schema you also need to use option schemaId: var ajv = new Ajv({schemaId: 'id'}); // If you want to use both draft-04 and draft-06/07 schemas: // var ajv = new Ajv({schemaId: 'auto'}); ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json')); Contents Performance Features Getting started Frequently Asked Questions Using in browser Ajv and Content Security Policies (CSP) Command line interface Validation Keywords Annotation keywords Formats Combining schemas with $ref $data reference NEW: $merge and $patch keywords Defining custom keywords Asynchronous schema compilation Asynchronous validation Security considerations Security contact Untrusted schemas Circular references in objects Trusted schemas ReDoS attack Modifying data during validation Filtering data Assigning defaults Coercing data types API Methods Options Validation errors Plugins Related packages Some packages using Ajv Tests, Contributing, Changes history Support, Code of conduct, License Performance Ajv generates code using doT templates to turn JSON Schemas into super-fast validation functions that are efficient for v8 optimization. Currently Ajv is the fastest and the most standard compliant validator according to these benchmarks: json-schema-benchmark - 50% faster than the second place jsck benchmark - 20-190% faster z-schema benchmark themis benchmark Performance of different validators by json-schema-benchmark: Features Ajv implements full JSON Schema draft-06/07 and draft-04 standards: all validation keywords (see JSON Schema validation keywords) full support of remote refs (remote schemas have to be added with addSchema or compiled to be available) support of circular references between schemas correct string lengths for strings with unicode pairs (can be turned off) formats defined by JSON Schema draft-07 standard and custom formats (can be turned off) validates schemas against meta-schema supports browsers and Node.js 0.10-14.x asynchronous loading of referenced schemas during compilation \"All errors\" validation mode with option allErrors error messages with parameters describing error reasons to allow creating custom error messages i18n error messages support with ajv-i18n package filtering data from additional properties assigning defaults to missing properties and items coercing data to the types specified in type keywords custom keywords draft-06/07 keywords const, contains, propertyNames and if/then/else draft-06 boolean schemas (true/false as a schema to always pass/fail). keywords switch, patternRequired, formatMaximum / formatMinimum and formatExclusiveMaximum / formatExclusiveMinimum from JSON Schema extension proposals with ajv-keywords package $data reference to use values from the validated data as values for the schema keywords asynchronous validation of custom formats and keywords Install npm install ajv Getting started Try it in the Node.js REPL: https://tonicdev.com/npm/ajv The fastest validation call: // Node.js require: var Ajv = require('ajv'); // or ESM/TypeScript import import Ajv from 'ajv'; var ajv = new Ajv(); // options can be passed, e.g. {allErrors: true} var validate = ajv.compile(schema); var valid = validate(data); if (!valid) console.log(validate.errors); or with less code // ... var valid = ajv.validate(schema, data); if (!valid) console.log(ajv.errors); // ... or // ... var valid = ajv.addSchema(schema, 'mySchema') .validate('mySchema', data); if (!valid) console.log(ajv.errorsText()); // ... See API and Options for more details. Ajv compiles schemas to functions and caches them in all cases (using schema serialized with fast-json-stable-stringify or a custom function as a key), so that the next time the same schema is used (not necessarily the same object instance) it won't be compiled again. The best performance is achieved when using compiled functions returned by compile or getSchema methods (there is no additional function call). Please note: every time a validation function or ajv.validate are called errors property is overwritten. You need to copy errors array reference to another variable if you want to use it later (e.g., in the callback). See Validation errors Note for TypeScript users: ajv provides its own TypeScript declarations out of the box, so you don't need to install the deprecated @types/ajv module. Using in browser You can require Ajv directly from the code you browserify - in this case Ajv will be a part of your bundle. If you need to use Ajv in several bundles you can create a separate UMD bundle using npm run bundle script (thanks to siddo420). Then you need to load Ajv in the browser: <script src=\"ajv.min.js\"></script> This bundle can be used with different module systems; it creates global Ajv if no module system is found. The browser bundle is available on cdnjs. Ajv is tested with these browsers: Please note: some frameworks, e.g. Dojo, may redefine global require in such way that is not compatible with CommonJS module format. In such case Ajv bundle has to be loaded before the framework and then you can use global Ajv (see issue #234). Ajv and Content Security Policies (CSP) If you're using Ajv to compile a schema (the typical use) in a browser document that is loaded with a Content Security Policy (CSP), that policy will require a script-src directive that includes the value 'unsafe-eval'. ⚠️ NOTE, however, that unsafe-eval is NOT recommended in a secure CSP[1], as it has the potential to open the document to cross-site scripting (XSS) attacks. In order to make use of Ajv without easing your CSP, you can pre-compile a schema using the CLI. This will transpile the schema JSON into a JavaScript file that exports a validate function that works simlarly to a schema compiled at runtime. Note that pre-compilation of schemas is performed using ajv-pack and there are some limitations to the schema features it can compile. A successfully pre-compiled schema is equivalent to the same schema compiled at runtime. Command line interface CLI is available as a separate npm package ajv-cli. It supports: compiling JSON Schemas to test their validity BETA: generating standalone module exporting a validation function to be used without Ajv (using ajv-pack) migrate schemas to draft-07 (using json-schema-migrate) validating data file(s) against JSON Schema testing expected validity of data against JSON Schema referenced schemas custom meta-schemas files in JSON, JSON5, YAML, and JavaScript format all Ajv options reporting changes in data after validation in JSON-patch format Validation keywords Ajv supports all validation keywords from draft-07 of JSON Schema standard: type for numbers - maximum, minimum, exclusiveMaximum, exclusiveMinimum, multipleOf for strings - maxLength, minLength, pattern, format for arrays - maxItems, minItems, uniqueItems, items, additionalItems, contains for objects - maxProperties, minProperties, required, properties, patternProperties, additionalProperties, dependencies, propertyNames for all types - enum, const compound keywords - not, oneOf, anyOf, allOf, if/then/else With ajv-keywords package Ajv also supports validation keywords from JSON Schema extension proposals for JSON Schema standard: patternRequired - like required but with patterns that some property should match. formatMaximum, formatMinimum, formatExclusiveMaximum, formatExclusiveMinimum - setting limits for date, time, etc. See JSON Schema validation keywords for more details. Annotation keywords JSON Schema specification defines several annotation keywords that describe schema itself but do not perform any validation. title and description: information about the data represented by that schema $comment (NEW in draft-07): information for developers. With option $comment Ajv logs or passes the comment string to the user-supplied function. See Options. default: a default value of the data instance, see Assigning defaults. examples (NEW in draft-06): an array of data instances. Ajv does not check the validity of these instances against the schema. readOnly and writeOnly (NEW in draft-07): marks data-instance as read-only or write-only in relation to the source of the data (database, api, etc.). contentEncoding: RFC 2045, e.g., \"base64\". contentMediaType: RFC 2046, e.g., \"image/png\". Please note: Ajv does not implement validation of the keywords examples, contentEncoding and contentMediaType but it reserves them. If you want to create a plugin that implements some of them, it should remove these keywords from the instance. Formats Ajv implements formats defined by JSON Schema specification and several other formats. It is recommended NOT to use \"format\" keyword implementations with untrusted data, as they use potentially unsafe regular expressions - see ReDoS attack. Please note: if you need to use \"format\" keyword to validate untrusted data, you MUST assess their suitability and safety for your validation scenarios. The following formats are implemented for string validation with \"format\" keyword: date: full-date according to RFC3339. time: time with optional time-zone. date-time: date-time from the same source (time-zone is mandatory). date, time and date-time validate ranges in full mode and only regexp in fast mode (see options). uri: full URI. uri-reference: URI reference, including full and relative URIs. uri-template: URI template according to RFC6570 url (deprecated): URL record. email: email address. hostname: host name according to RFC1034. ipv4: IP address v4. ipv6: IP address v6. regex: tests whether a string is a valid regular expression by passing it to RegExp constructor. uuid: Universally Unique IDentifier according to RFC4122. json-pointer: JSON-pointer according to RFC6901. relative-json-pointer: relative JSON-pointer according to this draft. Please note: JSON Schema draft-07 also defines formats iri, iri-reference, idn-hostname and idn-email for URLs, hostnames and emails with international characters. Ajv does not implement these formats. If you create Ajv plugin that implements them please make a PR to mention this plugin here. There are two modes of format validation: fast and full. This mode affects formats date, time, date-time, uri, uri-reference, and email. See Options for details. You can add additional formats and replace any of the formats above using addFormat method. The option unknownFormats allows changing the default behaviour when an unknown format is encountered. In this case Ajv can either fail schema compilation (default) or ignore it (default in versions before 5.0.0). You also can allow specific format(s) that will be ignored. See Options for details. You can find regular expressions used for format validation and the sources that were used in formats.js. Combining schemas with $ref You can structure your validation logic across multiple schema files and have schemas reference each other using $ref keyword. Example: var schema = { \"$id\": \"http://example.com/schemas/schema.json\", \"type\": \"object\", \"properties\": { \"foo\": { \"$ref\": \"defs.json#/definitions/int\" }, \"bar\": { \"$ref\": \"defs.json#/definitions/str\" } } }; var defsSchema = { \"$id\": \"http://example.com/schemas/defs.json\", \"definitions\": { \"int\": { \"type\": \"integer\" }, \"str\": { \"type\": \"string\" } } }; Now to compile your schema you can either pass all schemas to Ajv instance: var ajv = new Ajv({schemas: [schema, defsSchema]}); var validate = ajv.getSchema('http://example.com/schemas/schema.json'); or use addSchema method: var ajv = new Ajv; var validate = ajv.addSchema(defsSchema) .compile(schema); See Options and addSchema method. Please note: $ref is resolved as the uri-reference using schema $id as the base URI (see the example). References can be recursive (and mutually recursive) to implement the schemas for different data structures (such as linked lists, trees, graphs, etc.). You don't have to host your schema files at the URIs that you use as schema $id. These URIs are only used to identify the schemas, and according to JSON Schema specification validators should not expect to be able to download the schemas from these URIs. The actual location of the schema file in the file system is not used. You can pass the identifier of the schema as the second parameter of addSchema method or as a property name in schemas option. This identifier can be used instead of (or in addition to) schema $id. You cannot have the same $id (or the schema identifier) used for more than one schema - the exception will be thrown. You can implement dynamic resolution of the referenced schemas using compileAsync method. In this way you can store schemas in any system (files, web, database, etc.) and reference them without explicitly adding to Ajv instance. See Asynchronous schema compilation. $data reference With $data option you can use values from the validated data as the values for the schema keywords. See proposal for more information about how it works. $data reference is supported in the keywords: const, enum, format, maximum/minimum, exclusiveMaximum / exclusiveMinimum, maxLength / minLength, maxItems / minItems, maxProperties / minProperties, formatMaximum / formatMinimum, formatExclusiveMaximum / formatExclusiveMinimum, multipleOf, pattern, required, uniqueItems. The value of \"$data\" should be a JSON-pointer to the data (the root is always the top level data object, even if the $data reference is inside a referenced subschema) or a relative JSON-pointer (it is relative to the current point in data; if the $data reference is inside a referenced subschema it cannot point to the data outside of the root level for this subschema). Examples. This schema requires that the value in property smaller is less or equal than the value in the property larger: var ajv = new Ajv({$data: true}); var schema = { \"properties\": { \"smaller\": { \"type\": \"number\", \"maximum\": { \"$data\": \"1/larger\" } }, \"larger\": { \"type\": \"number\" } } }; var validData = { smaller: 5, larger: 7 }; ajv.validate(schema, validData); // true This schema requires that the properties have the same format as their field names: var schema = { \"additionalProperties\": { \"type\": \"string\", \"format\": { \"$data\": \"0#\" } } }; var validData = { 'date-time': '1963-06-19T08:30:06.283185Z', email: 'joe.bloggs@example.com' } $data reference is resolved safely - it won't throw even if some property is undefined. If $data resolves to undefined the validation succeeds (with the exclusion of const keyword). If $data resolves to incorrect type (e.g. not \"number\" for maximum keyword) the validation fails. $merge and $patch keywords With the package ajv-merge-patch you can use the keywords $merge and $patch that allow extending JSON Schemas with patches using formats JSON Merge Patch (RFC 7396) and JSON Patch (RFC 6902). To add keywords $merge and $patch to Ajv instance use this code: require('ajv-merge-patch')(ajv); Examples. Using $merge: { \"$merge\": { \"source\": { \"type\": \"object\", \"properties\": { \"p\": { \"type\": \"string\" } }, \"additionalProperties\": false }, \"with\": { \"properties\": { \"q\": { \"type\": \"number\" } } } } } Using $patch: { \"$patch\": { \"source\": { \"type\": \"object\", \"properties\": { \"p\": { \"type\": \"string\" } }, \"additionalProperties\": false }, \"with\": [ { \"op\": \"add\", \"path\": \"/properties/q\", \"value\": { \"type\": \"number\" } } ] } } The schemas above are equivalent to this schema: { \"type\": \"object\", \"properties\": { \"p\": { \"type\": \"string\" }, \"q\": { \"type\": \"number\" } }, \"additionalProperties\": false } The properties source and with in the keywords $merge and $patch can use absolute or relative $ref to point to other schemas previously added to the Ajv instance or to the fragments of the current schema. See the package ajv-merge-patch for more information. Defining custom keywords The advantages of using custom keywords are: allow creating validation scenarios that cannot be expressed using JSON Schema simplify your schemas help bringing a bigger part of the validation logic to your schemas make your schemas more expressive, less verbose and closer to your application domain implement custom data processors that modify your data (modifying option MUST be used in keyword definition) and/or create side effects while the data is being validated If a keyword is used only for side-effects and its validation result is pre-defined, use option valid: true/false in keyword definition to simplify both generated code (no error handling in case of valid: true) and your keyword functions (no need to return any validation result). The concerns you have to be aware of when extending JSON Schema standard with custom keywords are the portability and understanding of your schemas. You will have to support these custom keywords on other platforms and to properly document these keywords so that everybody can understand them in your schemas. You can define custom keywords with addKeyword method. Keywords are defined on the ajv instance level - new instances will not have previously defined keywords. Ajv allows defining keywords with: validation function compilation function macro function inline compilation function that should return code (as string) that will be inlined in the currently compiled schema. Example. range and exclusiveRange keywords using compiled schema: ajv.addKeyword('range', { type: 'number', compile: function (sch, parentSchema) { var min = sch[0]; var max = sch[1]; return parentSchema.exclusiveRange === true ? function (data) { return data > min && data < max; } : function (data) { return data >= min && data <= max; } } }); var schema = { \"range\": [2, 4], \"exclusiveRange\": true }; var validate = ajv.compile(schema); console.log(validate(2.01)); // true console.log(validate(3.99)); // true console.log(validate(2)); // false console.log(validate(4)); // false Several custom keywords (typeof, instanceof, range and propertyNames) are defined in ajv-keywords package - they can be used for your schemas and as a starting point for your own custom keywords. See Defining custom keywords for more details. Asynchronous schema compilation During asynchronous compilation remote references are loaded using supplied function. See compileAsync method and loadSchema option. Example: var ajv = new Ajv({ loadSchema: loadSchema }); ajv.compileAsync(schema).then(function (validate) { var valid = validate(data); // ... }); function loadSchema(uri) { return request.json(uri).then(function (res) { if (res.statusCode >= 400) throw new Error('Loading error: ' + res.statusCode); return res.body; }); } Please note: Option missingRefs should NOT be set to \"ignore\" or \"fail\" for asynchronous compilation to work. Asynchronous validation Example in Node.js REPL: https://tonicdev.com/esp/ajv-asynchronous-validation You can define custom formats and keywords that perform validation asynchronously by accessing database or some other service. You should add async: true in the keyword or format definition (see addFormat, addKeyword and Defining custom keywords). If your schema uses asynchronous formats/keywords or refers to some schema that contains them it should have \"$async\": true keyword so that Ajv can compile it correctly. If asynchronous format/keyword or reference to asynchronous schema is used in the schema without $async keyword Ajv will throw an exception during schema compilation. Please note: all asynchronous subschemas that are referenced from the current or other schemas should have \"$async\": true keyword as well, otherwise the schema compilation will fail. Validation function for an asynchronous custom format/keyword should return a promise that resolves with true or false (or rejects with new Ajv.ValidationError(errors) if you want to return custom errors from the keyword function). Ajv compiles asynchronous schemas to es7 async functions that can optionally be transpiled with nodent. Async functions are supported in Node.js 7+ and all modern browsers. You can also supply any other transpiler as a function via processCode option. See Options. The compiled validation function has $async: true property (if the schema is asynchronous), so you can differentiate these functions if you are using both synchronous and asynchronous schemas. Validation result will be a promise that resolves with validated data or rejects with an exception Ajv.ValidationError that contains the array of validation errors in errors property. Example: var ajv = new Ajv; // require('ajv-async')(ajv); ajv.addKeyword('idExists', { async: true, type: 'number', validate: checkIdExists }); function checkIdExists(schema, data) { return knex(schema.table) .select('id') .where('id', data) .then(function (rows) { return !!rows.length; // true if record is found }); } var schema = { \"$async\": true, \"properties\": { \"userId\": { \"type\": \"integer\", \"idExists\": { \"table\": \"users\" } }, \"postId\": { \"type\": \"integer\", \"idExists\": { \"table\": \"posts\" } } } }; var validate = ajv.compile(schema); validate({ userId: 1, postId: 19 }) .then(function (data) { console.log('Data is valid', data); // { userId: 1, postId: 19 } }) .catch(function (err) { if (!(err instanceof Ajv.ValidationError)) throw err; // data is invalid console.log('Validation errors:', err.errors); }); Using transpilers with asynchronous validation functions. ajv-async uses nodent to transpile async functions. To use another transpiler you should separately install it (or load its bundle in the browser). Using nodent var ajv = new Ajv; require('ajv-async')(ajv); // in the browser if you want to load ajv-async bundle separately you can: // window.ajvAsync(ajv); var validate = ajv.compile(schema); // transpiled es7 async function validate(data).then(successFunc).catch(errorFunc); Using other transpilers var ajv = new Ajv({ processCode: transpileFunc }); var validate = ajv.compile(schema); // transpiled es7 async function validate(data).then(successFunc).catch(errorFunc); See Options. Security considerations JSON Schema, if properly used, can replace data sanitisation. It doesn't replace other API security considerations. It also introduces additional security aspects to consider. Security contact To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerabilities via GitHub issues. Untrusted schemas Ajv treats JSON schemas as trusted as your application code. This security model is based on the most common use case, when the schemas are static and bundled together with the application. If your schemas are received from untrusted sources (or generated from untrusted data) there are several scenarios you need to prevent: compiling schemas can cause stack overflow (if they are too deep) compiling schemas can be slow (e.g. #557) validating certain data can be slow It is difficult to predict all the scenarios, but at the very least it may help to limit the size of untrusted schemas (e.g. limit JSON string length) and also the maximum schema object depth (that can be high for relatively small JSON strings). You also may want to mitigate slow regular expressions in pattern and patternProperties keywords. Regardless the measures you take, using untrusted schemas increases security risks. Circular references in JavaScript objects Ajv does not support schemas and validated data that have circular references in objects. See issue #802. An attempt to compile such schemas or validate such data would cause stack overflow (or will not complete in case of asynchronous validation). Depending on the parser you use, untrusted data can lead to circular references. Security risks of trusted schemas Some keywords in JSON Schemas can lead to very slow validation for certain data. These keywords include (but may be not limited to): pattern and format for large strings - in some cases using maxLength can help mitigate it, but certain regular expressions can lead to exponential validation time even with relatively short strings (see ReDoS attack). patternProperties for large property names - use propertyNames to mitigate, but some regular expressions can have exponential evaluation time as well. uniqueItems for large non-scalar arrays - use maxItems to mitigate Please note: The suggestions above to prevent slow validation would only work if you do NOT use allErrors: true in production code (using it would continue validation after validation errors). You can validate your JSON schemas against this meta-schema to check that these recommendations are followed: const isSchemaSecure = ajv.compile(require('ajv/lib/refs/json-schema-secure.json')); const schema1 = {format: 'email'}; isSchemaSecure(schema1); // false const schema2 = {format: 'email', maxLength: MAX_LENGTH}; isSchemaSecure(schema2); // true Please note: following all these recommendation is not a guarantee that validation of untrusted data is safe - it can still lead to some undesirable results. Content Security Policies (CSP) See Ajv and Content Security Policies (CSP) ReDoS attack Certain regular expressions can lead to the exponential evaluation time even with relatively short strings. Please assess the regular expressions you use in the schemas on their vulnerability to this attack - see safe-regex, for example. Please note: some formats that Ajv implements use regular expressions that can be vulnerable to ReDoS attack, so if you use Ajv to validate data from untrusted sources it is strongly recommended to consider the following: making assessment of \"format\" implementations in Ajv. using format: 'fast' option that simplifies some of the regular expressions (although it does not guarantee that they are safe). replacing format implementations provided by Ajv with your own implementations of \"format\" keyword that either uses different regular expressions or another approach to format validation. Please see addFormat method. disabling format validation by ignoring \"format\" keyword with option format: false Whatever mitigation you choose, please assume all formats provided by Ajv as potentially unsafe and make your own assessment of their suitability for your validation scenarios. Filtering data With option removeAdditional (added by andyscott) you can filter data during the validation. This option modifies original data. Example: var ajv = new Ajv({ removeAdditional: true }); var schema = { \"additionalProperties\": false, \"properties\": { \"foo\": { \"type\": \"number\" }, \"bar\": { \"additionalProperties\": { \"type\": \"number\" }, \"properties\": { \"baz\": { \"type\": \"string\" } } } } } var data = { \"foo\": 0, \"additional1\": 1, // will be removed; `additionalProperties` == false \"bar\": { \"baz\": \"abc\", \"additional2\": 2 // will NOT be removed; `additionalProperties` != false }, } var validate = ajv.compile(schema); console.log(validate(data)); // true console.log(data); // { \"foo\": 0, \"bar\": { \"baz\": \"abc\", \"additional2\": 2 } If removeAdditional option in the example above were \"all\" then both additional1 and additional2 properties would have been removed. If the option were \"failing\" then property additional1 would have been removed regardless of its value and property additional2 would have been removed only if its value were failing the schema in the inner additionalProperties (so in the example above it would have stayed because it passes the schema, but any non-number would have been removed). Please note: If you use removeAdditional option with additionalProperties keyword inside anyOf/oneOf keywords your validation can fail with this schema, for example: { \"type\": \"object\", \"oneOf\": [ { \"properties\": { \"foo\": { \"type\": \"string\" } }, \"required\": [ \"foo\" ], \"additionalProperties\": false }, { \"properties\": { \"bar\": { \"type\": \"integer\" } }, \"required\": [ \"bar\" ], \"additionalProperties\": false } ] } The intention of the schema above is to allow objects with either the string property \"foo\" or the integer property \"bar\", but not with both and not with any other properties. With the option removeAdditional: true the validation will pass for the object { \"foo\": \"abc\"} but will fail for the object {\"bar\": 1}. It happens because while the first subschema in oneOf is validated, the property bar is removed because it is an additional property according to the standard (because it is not included in properties keyword in the same schema). While this behaviour is unexpected (issues #129, #134), it is correct. To have the expected behaviour (both objects are allowed and additional properties are removed) the schema has to be refactored in this way: { \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"string\" }, \"bar\": { \"type\": \"integer\" } }, \"additionalProperties\": false, \"oneOf\": [ { \"required\": [ \"foo\" ] }, { \"required\": [ \"bar\" ] } ] } The schema above is also more efficient - it will compile into a faster function. Assigning defaults With option useDefaults Ajv will assign values from default keyword in the schemas of properties and items (when it is the array of schemas) to the missing properties and items. With the option value \"empty\" properties and items equal to null or \"\" (empty string) will be considered missing and assigned defaults. This option modifies original data. Please note: the default value is inserted in the generated validation code as a literal, so the value inserted in the data will be the deep clone of the default in the schema. Example 1 (default in properties): var ajv = new Ajv({ useDefaults: true }); var schema = { \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"number\" }, \"bar\": { \"type\": \"string\", \"default\": \"baz\" } }, \"required\": [ \"foo\", \"bar\" ] }; var data = { \"foo\": 1 }; var validate = ajv.compile(schema); console.log(validate(data)); // true console.log(data); // { \"foo\": 1, \"bar\": \"baz\" } Example 2 (default in items): var schema = { \"type\": \"array\", \"items\": [ { \"type\": \"number\" }, { \"type\": \"string\", \"default\": \"foo\" } ] } var data = [ 1 ]; var validate = ajv.compile(schema); console.log(validate(data)); // true console.log(data); // [ 1, \"foo\" ] default keywords in other cases are ignored: not in properties or items subschemas in schemas inside anyOf, oneOf and not (see #42) in if subschema of switch keyword in schemas generated by custom macro keywords The strictDefaults option customizes Ajv's behavior for the defaults that Ajv ignores (true raises an error, and \"log\" outputs a warning). Coercing data types When you are validating user inputs all your data properties are usually strings. The option coerceTypes allows you to have your data types coerced to the types specified in your schema type keywords, both to pass the validation and to use the correctly typed data afterwards. This option modifies original data. Please note: if you pass a scalar value to the validating function its type will be coerced and it will pass the validation, but the value of the variable you pass won't be updated because scalars are passed by value. Example 1: var ajv = new Ajv({ coerceTypes: true }); var schema = { \"type\": \"object\", \"properties\": { \"foo\": { \"type\": \"number\" }, \"bar\": { \"type\": \"boolean\" } }, \"required\": [ \"foo\", \"bar\" ] }; var data = { \"foo\": \"1\", \"bar\": \"false\" }; var validate = ajv.compile(schema); console.log(validate(data)); // true console.log(data); // { \"foo\": 1, \"bar\": false } Example 2 (array coercions): var ajv = new Ajv({ coerceTypes: 'array' }); var schema = { \"properties\": { \"foo\": { \"type\": \"array\", \"items\": { \"type\": \"number\" } }, \"bar\": { \"type\": \"boolean\" } } }; var data = { \"foo\": \"1\", \"bar\": [\"false\"] }; var validate = ajv.compile(schema); console.log(validate(data)); // true console.log(data); // { \"foo\": [1], \"bar\": false } The coercion rules, as you can see from the example, are different from JavaScript both to validate user input as expected and to have the coercion reversible (to correctly validate cases where different types are defined in subschemas of \"anyOf\" and other compound keywords). See Coercion rules for details. API new Ajv(Object options) -> Object Create Ajv instance. .compile(Object schema) -> Function<Object data> Generate validating function and cache the compiled schema for future use. Validating function returns a boolean value. This function has properties errors and schema. Errors encountered during the last validation are assigned to errors property (it is assigned null if there was no errors). schema property contains the reference to the original schema. The schema passed to this method will be validated against meta-schema unless validateSchema option is false. If schema is invalid, an error will be thrown. See options. .compileAsync(Object schema [, Boolean meta] [, Function callback]) -> Promise Asynchronous version of compile method that loads missing remote schemas using asynchronous function in options.loadSchema. This function returns a Promise that resolves to a validation function. An optional callback passed to compileAsync will be called with 2 parameters: error (or null) and validating function. The returned promise will reject (and the callback will be called with an error) when: missing schema can't be loaded (loadSchema returns a Promise that rejects). a schema containing a missing reference is loaded, but the reference cannot be resolved. schema (or some loaded/referenced schema) is invalid. The function compiles schema and loads the first missing schema (or meta-schema) until all missing schemas are loaded. You can asynchronously compile meta-schema by passing true as the second parameter. See example in Asynchronous compilation. .validate(Object schema|String key|String ref, data) -> Boolean Validate data using passed schema (it will be compiled and cached). Instead of the schema you can use the key that was previously passed to addSchema, the schema id if it was present in the schema or any previously resolved reference. Validation errors will be available in the errors property of Ajv instance (null if there were no errors). Please note: every time this method is called the errors are overwritten so you need to copy them to another variable if you want to use them later. If the schema is asynchronous (has $async keyword on the top level) this method returns a Promise. See Asynchronous validation. .addSchema(Array<Object>|Object schema [, String key]) -> Ajv Add schema(s) to validator instance. This method does not compile schemas (but it still validates them). Because of that dependencies can be added in any order and circular dependencies are supported. It also prevents unnecessary compilation of schemas that are containers for other schemas but not used as a whole. Array of schemas can be passed (schemas should have ids), the second parameter will be ignored. Key can be passed that can be used to reference the schema and will be used as the schema id if there is no id inside the schema. If the key is not passed, the schema id will be used as the key. Once the schema is added, it (and all the references inside it) can be referenced in other schemas and used to validate data. Although addSchema does not compile schemas, explicit compilation is not required - the schema will be compiled when it is used first time. By default the schema is validated against meta-schema before it is added, and if the schema does not pass validation the exception is thrown. This behaviour is controlled by validateSchema option. Please note: Ajv uses the method chaining syntax for all methods with the prefix add* and remove*. This allows you to do nice things like the following. var validate = new Ajv().addSchema(schema).addFormat(name, regex).getSchema(uri); .addMetaSchema(Array<Object>|Object schema [, String key]) -> Ajv Adds meta schema(s) that can be used to validate other schemas. That function should be used instead of addSchema because there may be instance options that would compile a meta schema incorrectly (at the moment it is removeAdditional option). There is no need to explicitly add draft-07 meta schema (http://json-schema.org/draft-07/schema) - it is added by default, unless option meta is set to false. You only need to use it if you have a changed meta-schema that you want to use to validate your schemas. See validateSchema. .validateSchema(Object schema) -> Boolean Validates schema. This method should be used to validate schemas rather than validate due to the inconsistency of uri format in JSON Schema standard. By default this method is called automatically when the schema is added, so you rarely need to use it directly. If schema doesn't have $schema property, it is validated against draft 6 meta-schema (option meta should not be false). If schema has $schema property, then the schema with this id (that should be previously added) is used to validate passed schema. Errors will be available at ajv.errors. .getSchema(String key) -> Function<Object data> Retrieve compiled schema previously added with addSchema by the key passed to addSchema or by its full reference (id). The returned validating function has schema property with the reference to the original schema. .removeSchema([Object schema|String key|String ref|RegExp pattern]) -> Ajv Remove added/cached schema. Even if schema is referenced by other schemas it can be safely removed as dependent schemas have local references. Schema can be removed using: key passed to addSchema it's full reference (id) RegExp that should match schema id or key (meta-schemas won't be removed) actual schema object that will be stable-stringified to remove schema from cache If no parameter is passed all schemas but meta-schemas will be removed and the cache will be cleared. .addFormat(String name, String|RegExp|Function|Object format) -> Ajv Add custom format to validate strings or numbers. It can also be used to replace pre-defined formats for Ajv instance. Strings are converted to RegExp. Function should return validation result as true or false. If object is passed it should have properties validate, compare and async: validate: a string, RegExp or a function as described above. compare: an optional comparison function that accepts two strings and compares them according to the format meaning. This function is used with keywords formatMaximum/formatMinimum (defined in ajv-keywords package). It should return 1 if the first value is bigger than the second value, -1 if it is smaller and 0 if it is equal. async: an optional true value if validate is an asynchronous function; in this case it should return a promise that resolves with a value true or false. type: an optional type of data that the format applies to. It can be \"string\" (default) or \"number\" (see https://github.com/ajv-validator/ajv/issues/291#issuecomment-259923858). If the type of data is different, the validation will pass. Custom formats can be also added via formats option. .addKeyword(String keyword, Object definition) -> Ajv Add custom validation keyword to Ajv instance. Keyword should be different from all standard JSON Schema keywords and different from previously defined keywords. There is no way to redefine keywords or to remove keyword definition from the instance. Keyword must start with a letter, _ or $, and may continue with letters, numbers, _, $, or -. It is recommended to use an application-specific prefix for keywords to avoid current and future name collisions. Example Keywords: \"xyz-example\": valid, and uses prefix for the xyz project to avoid name collisions. \"example\": valid, but not recommended as it could collide with future versions of JSON Schema etc. \"3-example\": invalid as numbers are not allowed to be the first character in a keyword Keyword definition is an object with the following properties: type: optional string or array of strings with data type(s) that the keyword applies to. If not present, the keyword will apply to all types. validate: validating function compile: compiling function macro: macro function inline: compiling function that returns code (as string) schema: an optional false value used with \"validate\" keyword to not pass schema metaSchema: an optional meta-schema for keyword schema dependencies: an optional list of properties that must be present in the parent schema - it will be checked during schema compilation modifying: true MUST be passed if keyword modifies data statements: true can be passed in case inline keyword generates statements (as opposed to expression) valid: pass true/false to pre-define validation result, the result returned from validation function will be ignored. This option cannot be used with macro keywords. $data: an optional true value to support $data reference as the value of custom keyword. The reference will be resolved at validation time. If the keyword has meta-schema it would be extended to allow $data and it will be used to validate the resolved value. Supporting $data reference requires that keyword has validating function (as the only option or in addition to compile, macro or inline function). async: an optional true value if the validation function is asynchronous (whether it is compiled or passed in validate property); in this case it should return a promise that resolves with a value true or false. This option is ignored in case of \"macro\" and \"inline\" keywords. errors: an optional boolean or string \"full\" indicating whether keyword returns errors. If this property is not set Ajv will determine if the errors were set in case of failed validation. compile, macro and inline are mutually exclusive, only one should be used at a time. validate can be used separately or in addition to them to support $data reference. Please note: If the keyword is validating data type that is different from the type(s) in its definition, the validation function will not be called (and expanded macro will not be used), so there is no need to check for data type inside validation function or inside schema returned by macro function (unless you want to enforce a specific type and for some reason do not want to use a separate type keyword for that). In the same way as standard keywords work, if the keyword does not apply to the data type being validated, the validation of this keyword will succeed. See Defining custom keywords for more details. .getKeyword(String keyword) -> Object|Boolean Returns custom keyword definition, true for pre-defined keywords and false if the keyword is unknown. .removeKeyword(String keyword) -> Ajv Removes custom or pre-defined keyword so you can redefine them. While this method can be used to extend pre-defined keywords, it can also be used to completely change their meaning - it may lead to unexpected results. Please note: schemas compiled before the keyword is removed will continue to work without changes. To recompile schemas use removeSchema method and compile them again. .errorsText([Array<Object> errors [, Object options]]) -> String Returns the text with all errors in a String. Options can have properties separator (string used to separate errors, \", \" by default) and dataVar (the variable name that dataPaths are prefixed with, \"data\" by default). Options Defaults: { // validation and reporting options: $data: false, allErrors: false, verbose: false, $comment: false, // NEW in Ajv version 6.0 jsonPointers: false, uniqueItems: true, unicode: true, nullable: false, format: 'fast', formats: {}, unknownFormats: true, schemas: {}, logger: undefined, // referenced schema options: schemaId: '$id', missingRefs: true, extendRefs: 'ignore', // recommended 'fail' loadSchema: undefined, // function(uri: string): Promise {} // options to modify validated data: removeAdditional: false, useDefaults: false, coerceTypes: false, // strict mode options strictDefaults: false, strictKeywords: false, strictNumbers: false, // asynchronous validation options: transpile: undefined, // requires ajv-async package // advanced options: meta: true, validateSchema: true, addUsedSchema: true, inlineRefs: true, passContext: false, loopRequired: Infinity, ownProperties: false, multipleOfPrecision: false, errorDataPath: 'object', // deprecated messages: true, sourceCode: false, processCode: undefined, // function (str: string, schema: object): string {} cache: new Cache, serialize: undefined } Validation and reporting options $data: support $data references. Draft 6 meta-schema that is added by default will be extended to allow them. If you want to use another meta-schema you need to use $dataMetaSchema method to add support for $data reference. See API. allErrors: check all rules collecting all errors. Default is to return after the first error. verbose: include the reference to the part of the schema (schema and parentSchema) and validated data in errors (false by default). $comment (NEW in Ajv version 6.0): log or pass the value of $comment keyword to a function. Option values: false (default): ignore $comment keyword. true: log the keyword value to console. function: pass the keyword value, its schema path and root schema to the specified function jsonPointers: set dataPath property of errors using JSON Pointers instead of JavaScript property access notation. uniqueItems: validate uniqueItems keyword (true by default). unicode: calculate correct length of strings with unicode pairs (true by default). Pass false to use .length of strings that is faster, but gives \"incorrect\" lengths of strings with unicode pairs - each unicode pair is counted as two characters. nullable: support keyword \"nullable\" from Open API 3 specification. format: formats validation mode. Option values: \"fast\" (default) - simplified and fast validation (see Formats for details of which formats are available and affected by this option). \"full\" - more restrictive and slow validation. E.g., 25:00:00 and 2015/14/33 will be invalid time and date in 'full' mode but it will be valid in 'fast' mode. false - ignore all format keywords. formats: an object with custom formats. Keys and values will be passed to addFormat method. keywords: an object with custom keywords. Keys and values will be passed to addKeyword method. unknownFormats: handling of unknown formats. Option values: true (default) - if an unknown format is encountered the exception is thrown during schema compilation. If format keyword value is $data reference and it is unknown the validation will fail. [String] - an array of unknown format names that will be ignored. This option can be used to allow usage of third party schemas with format(s) for which you don't have definitions, but still fail if another unknown format is used. If format keyword value is $data reference and it is not in this array the validation will fail. \"ignore\" - to log warning during schema compilation and always pass validation (the default behaviour in versions before 5.0.0). This option is not recommended, as it allows to mistype format name and it won't be validated without any error message. This behaviour is required by JSON Schema specification. schemas: an array or object of schemas that will be added to the instance. In case you pass the array the schemas must have IDs in them. When the object is passed the method addSchema(value, key) will be called for each schema in this object. logger: sets the logging method. Default is the global console object that should have methods log, warn and error. See Error logging. Option values: custom logger - it should have methods log, warn and error. If any of these methods is missing an exception will be thrown. false - logging is disabled. Referenced schema options schemaId: this option defines which keywords are used as schema URI. Option value: \"$id\" (default) - only use $id keyword as schema URI (as specified in JSON Schema draft-06/07), ignore id keyword (if it is present a warning will be logged). \"id\" - only use id keyword as schema URI (as specified in JSON Schema draft-04), ignore $id keyword (if it is present a warning will be logged). \"auto\" - use both $id and id keywords as schema URI. If both are present (in the same schema object) and different the exception will be thrown during schema compilation. missingRefs: handling of missing referenced schemas. Option values: true (default) - if the reference cannot be resolved during compilation the exception is thrown. The thrown error has properties missingRef (with hash fragment) and missingSchema (without it). Both properties are resolved relative to the current base id (usually schema id, unless it was substituted). \"ignore\" - to log error during compilation and always pass validation. \"fail\" - to log error and successfully compile schema but fail validation if this rule is checked. extendRefs: validation of other keywords when $ref is present in the schema. Option values: \"ignore\" (default) - when $ref is used other keywords are ignored (as per JSON Reference standard). A warning will be logged during the schema compilation. \"fail\" (recommended) - if other validation keywords are used together with $ref the exception will be thrown when the schema is compiled. This option is recommended to make sure schema has no keywords that are ignored, which can be confusing. true - validate all keywords in the schemas with $ref (the default behaviour in versions before 5.0.0). loadSchema: asynchronous function that will be used to load remote schemas when compileAsync method is used and some reference is missing (option missingRefs should NOT be 'fail' or 'ignore'). This function should accept remote schema uri as a parameter and return a Promise that resolves to a schema. See example in Asynchronous compilation. Options to modify validated data removeAdditional: remove additional properties - see example in Filtering data. This option is not used if schema is added with addMetaSchema method. Option values: false (default) - not to remove additional properties \"all\" - all additional properties are removed, regardless of additionalProperties keyword in schema (and no validation is made for them). true - only additional properties with additionalProperties keyword equal to false are removed. \"failing\" - additional properties that fail schema validation will be removed (where additionalProperties keyword is false or schema). useDefaults: replace missing or undefined properties and items with the values from corresponding default keywords. Default behaviour is to ignore default keywords. This option is not used if schema is added with addMetaSchema method. See examples in Assigning defaults. Option values: false (default) - do not use defaults true - insert defaults by value (object literal is used). \"empty\" - in addition to missing or undefined, use defaults for properties and items that are equal to null or \"\" (an empty string). \"shared\" (deprecated) - insert defaults by reference. If the default is an object, it will be shared by all instances of validated data. If you modify the inserted default in the validated data, it will be modified in the schema as well. coerceTypes: change data type of data to match type keyword. See the example in Coercing data types and coercion rules. Option values: false (default) - no type coercion. true - coerce scalar data types. \"array\" - in addition to coercions between scalar types, coerce scalar data to an array with one element and vice versa (as required by the schema). Strict mode options strictDefaults: report ignored default keywords in schemas. Option values: false (default) - ignored defaults are not reported true - if an ignored default is present, throw an error \"log\" - if an ignored default is present, log warning strictKeywords: report unknown keywords in schemas. Option values: false (default) - unknown keywords are not reported true - if an unknown keyword is present, throw an error \"log\" - if an unknown keyword is present, log warning strictNumbers: validate numbers strictly, failing validation for NaN and Infinity. Option values: false (default) - NaN or Infinity will pass validation for numeric types true - NaN or Infinity will not pass validation for numeric types Asynchronous validation options transpile: Requires ajv-async package. It determines whether Ajv transpiles compiled asynchronous validation function. Option values: undefined (default) - transpile with nodent if async functions are not supported. true - always transpile with nodent. false - do not transpile; if async functions are not supported an exception will be thrown. Advanced options meta: add meta-schema so it can be used by other schemas (true by default). If an object is passed, it will be used as the default meta-schema for schemas that have no $schema keyword. This default meta-schema MUST have $schema keyword. validateSchema: validate added/compiled schemas against meta-schema (true by default). $schema property in the schema can be http://json-schema.org/draft-07/schema or absent (draft-07 meta-schema will be used) or can be a reference to the schema previously added with addMetaSchema method. Option values: true (default) - if the validation fails, throw the exception. \"log\" - if the validation fails, log error. false - skip schema validation. addUsedSchema: by default methods compile and validate add schemas to the instance if they have $id (or id) property that doesn't start with \"#\". If $id is present and it is not unique the exception will be thrown. Set this option to false to skip adding schemas to the instance and the $id uniqueness check when these methods are used. This option does not affect addSchema method. inlineRefs: Affects compilation of referenced schemas. Option values: true (default) - the referenced schemas that don't have refs in them are inlined, regardless of their size - that substantially improves performance at the cost of the bigger size of compiled schema functions. false - to not inline referenced schemas (they will be compiled as separate functions). integer number - to limit the maximum number of keywords of the schema that will be inlined. passContext: pass validation context to custom keyword functions. If this option is true and you pass some context to the compiled validation function with validate.call(context, data), the context will be available as this in your custom keywords. By default this is Ajv instance. loopRequired: by default required keyword is compiled into a single expression (or a sequence of statements in allErrors mode). In case of a very large number of properties in this keyword it may result in a very big validation function. Pass integer to set the number of properties above which required keyword will be validated in a loop - smaller validation function size but also worse performance. ownProperties: by default Ajv iterates over all enumerable object properties; when this option is true only own enumerable object properties (i.e. found directly on the object rather than on its prototype) are iterated. Contributed by @mbroadst. multipleOfPrecision: by default multipleOf keyword is validated by comparing the result of division with parseInt() of that result. It works for dividers that are bigger than 1. For small dividers such as 0.01 the result of the division is usually not integer (even when it should be integer, see issue #84). If you need to use fractional dividers set this option to some positive integer N to have multipleOf validated using this formula: Math.abs(Math.round(division) - division) < 1e-N (it is slower but allows for float arithmetics deviations). errorDataPath (deprecated): set dataPath to point to 'object' (default) or to 'property' when validating keywords required, additionalProperties and dependencies. messages: Include human-readable messages in errors. true by default. false can be passed when custom messages are used (e.g. with ajv-i18n). sourceCode: add sourceCode property to validating function (for debugging; this code can be different from the result of toString call). processCode: an optional function to process generated code before it is passed to Function constructor. It can be used to either beautify (the validating function is generated without line-breaks) or to transpile code. Starting from version 5.0.0 this option replaced options: beautify that formatted the generated function using js-beautify. If you want to beautify the generated code pass a function calling require('js-beautify').js_beautify as processCode: code => js_beautify(code). transpile that transpiled asynchronous validation function. You can still use transpile option with ajv-async package. See Asynchronous validation for more information. cache: an optional instance of cache to store compiled schemas using stable-stringified schema as a key. For example, set-associative cache sacjs can be used. If not passed then a simple hash is used which is good enough for the common use case (a limited number of statically defined schemas). Cache should have methods put(key, value), get(key), del(key) and clear(). serialize: an optional function to serialize schema to cache key. Pass false to use schema itself as a key (e.g., if WeakMap used as a cache). By default fast-json-stable-stringify is used. Validation errors In case of validation failure, Ajv assigns the array of errors to errors property of validation function (or to errors property of Ajv instance when validate or validateSchema methods were called). In case of asynchronous validation, the returned promise is rejected with exception Ajv.ValidationError that has errors property. Error objects Each error is an object with the following properties: keyword: validation keyword. dataPath: the path to the part of the data that was validated. By default dataPath uses JavaScript property access notation (e.g., \".prop[1].subProp\"). When the option jsonPointers is true (see Options) dataPath will be set using JSON pointer standard (e.g., \"/prop/1/subProp\"). schemaPath: the path (JSON-pointer as a URI fragment) to the schema of the keyword that failed validation. params: the object with the additional information about error that can be used to create custom error messages (e.g., using ajv-i18n package). See below for parameters set by all keywords. message: the standard error message (can be excluded with option messages set to false). schema: the schema of the keyword (added with verbose option). parentSchema: the schema containing the keyword (added with verbose option) data: the data validated by the keyword (added with verbose option). Please note: propertyNames keyword schema validation errors have an additional property propertyName, dataPath points to the object. After schema validation for each property name, if it is invalid an additional error is added with the property keyword equal to \"propertyNames\". Error parameters Properties of params object in errors depend on the keyword that failed validation. maxItems, minItems, maxLength, minLength, maxProperties, minProperties - property limit (number, the schema of the keyword). additionalItems - property limit (the maximum number of allowed items in case when items keyword is an array of schemas and additionalItems is false). additionalProperties - property additionalProperty (the property not used in properties and patternProperties keywords). dependencies - properties: property (dependent property), missingProperty (required missing dependency - only the first one is reported currently) deps (required dependencies, comma separated list as a string), depsCount (the number of required dependencies). format - property format (the schema of the keyword). maximum, minimum - properties: limit (number, the schema of the keyword), exclusive (boolean, the schema of exclusiveMaximum or exclusiveMinimum), comparison (string, comparison operation to compare the data to the limit, with the data on the left and the limit on the right; can be \"<\", \"<=\", \">\", \">=\") multipleOf - property multipleOf (the schema of the keyword) pattern - property pattern (the schema of the keyword) required - property missingProperty (required property that is missing). propertyNames - property propertyName (an invalid property name). patternRequired (in ajv-keywords) - property missingPattern (required pattern that did not match any property). type - property type (required type(s), a string, can be a comma-separated list) uniqueItems - properties i and j (indices of duplicate items). const - property allowedValue pointing to the value (the schema of the keyword). enum - property allowedValues pointing to the array of values (the schema of the keyword). $ref - property ref with the referenced schema URI. oneOf - property passingSchemas (array of indices of passing schemas, null if no schema passes). custom keywords (in case keyword definition doesn't create errors) - property keyword (the keyword name). Error logging Using the logger option when initiallizing Ajv will allow you to define custom logging. Here you can build upon the exisiting logging. The use of other logging packages is supported as long as the package or its associated wrapper exposes the required methods. If any of the required methods are missing an exception will be thrown. Required Methods: log, warn, error var otherLogger = new OtherLogger(); var ajv = new Ajv({ logger: { log: console.log.bind(console), warn: function warn() { otherLogger.logWarn.apply(otherLogger, arguments); }, error: function error() { otherLogger.logError.apply(otherLogger, arguments); console.error.apply(console, arguments); } } }); Plugins Ajv can be extended with plugins that add custom keywords, formats or functions to process generated code. When such plugin is published as npm package it is recommended that it follows these conventions: it exports a function this function accepts ajv instance as the first parameter and returns the same instance to allow chaining this function can accept an optional configuration as the second parameter If you have published a useful plugin please submit a PR to add it to the next section. Related packages ajv-async - plugin to configure async validation mode ajv-bsontype - plugin to validate mongodb's bsonType formats ajv-cli - command line interface ajv-errors - plugin for custom error messages ajv-i18n - internationalised error messages ajv-istanbul - plugin to instrument generated validation code to measure test coverage of your schemas ajv-keywords - plugin with custom validation keywords (select, typeof, etc.) ajv-merge-patch - plugin with keywords $merge and $patch ajv-pack - produces a compact module exporting validation functions ajv-formats-draft2019 - format validators for draft2019 that aren't already included in ajv (ie. idn-hostname, idn-email, iri, iri-reference and duration). Some packages using Ajv webpack - a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser jsonscript-js - the interpreter for JSONScript - scripted processing of existing endpoints and services osprey-method-handler - Express middleware for validating requests and responses based on a RAML method object, used in osprey - validating API proxy generated from a RAML definition har-validator - HTTP Archive (HAR) validator jsoneditor - a web-based tool to view, edit, format, and validate JSON http://jsoneditoronline.org JSON Schema Lint - a web tool to validate JSON/YAML document against a single JSON Schema http://jsonschemalint.com objection - SQL-friendly ORM for Node.js table - formats data into a string table ripple-lib - a JavaScript API for interacting with Ripple in Node.js and the browser restbase - distributed storage with REST API & dispatcher for backend services built to provide a low-latency & high-throughput API for Wikipedia / Wikimedia content hippie-swagger - Hippie wrapper that provides end to end API testing with swagger validation react-form-controlled - React controlled form components with validation rabbitmq-schema - a schema definition module for RabbitMQ graphs and messages @query/schema - stream filtering with a URI-safe query syntax parsing to JSON Schema chai-ajv-json-schema - chai plugin to us JSON Schema with expect in mocha tests grunt-jsonschema-ajv - Grunt plugin for validating files against JSON Schema extract-text-webpack-plugin - extract text from bundle into a file electron-builder - a solution to package and build a ready for distribution Electron app addons-linter - Mozilla Add-ons Linter gh-pages-generator - multi-page site generator converting markdown files to GitHub pages ESLint - the pluggable linting utility for JavaScript and JSX Tests npm install git submodule update --init npm test Contributing All validation functions are generated using doT templates in dot folder. Templates are precompiled so doT is not a run-time dependency. npm run build - compiles templates to dotjs folder. npm run watch - automatically compiles templates when files in dot folder change Please see Contributing guidelines Changes history See https://github.com/ajv-validator/ajv/releases Please note: Changes in version 7.0.0-beta Version 6.0.0. Code of conduct Please review and follow the Code of conduct. Please report any unacceptable behaviour to ajv.validator@gmail.com - it will be reviewed by the project team. Open-source software support Ajv is a part of Tidelift subscription - it provides a centralised support to open-source software users, in addition to the support provided by software maintainers. License MIT"
  },
  "Examiner-UI/node_modules/ajv/lib/dotjs/README.html": {
    "href": "Examiner-UI/node_modules/ajv/lib/dotjs/README.html",
    "title": "| Examiner",
    "summary": "These files are compiled dot templates from dot folder. Do NOT edit them directly, edit the templates and run npm run build from main ajv folder."
  },
  "Examiner-UI/node_modules/ansi-styles/readme.html": {
    "href": "Examiner-UI/node_modules/ansi-styles/readme.html",
    "title": "ansi-styles | Examiner",
    "summary": "ansi-styles ANSI escape codes for styling strings in the terminal You probably want the higher-level chalk module for styling your strings. Install $ npm install ansi-styles Usage const style = require('ansi-styles'); console.log(`${style.green.open}Hello world!${style.green.close}`); // Color conversion between 16/256/truecolor // NOTE: If conversion goes to 16 colors or 256 colors, the original color // may be degraded to fit that color palette. This means terminals // that do not support 16 million colors will best-match the // original color. console.log(style.bgColor.ansi.hsl(120, 80, 72) + 'Hello world!' + style.bgColor.close); console.log(style.color.ansi256.rgb(199, 20, 250) + 'Hello world!' + style.color.close); console.log(style.color.ansi16m.hex('#abcdef') + 'Hello world!' + style.color.close); API Each style has an open and close property. Styles Modifiers reset bold dim italic (Not widely supported) underline inverse hidden strikethrough (Not widely supported) Colors black red green yellow blue magenta cyan white blackBright (alias: gray, grey) redBright greenBright yellowBright blueBright magentaBright cyanBright whiteBright Background colors bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite bgBlackBright (alias: bgGray, bgGrey) bgRedBright bgGreenBright bgYellowBright bgBlueBright bgMagentaBright bgCyanBright bgWhiteBright Advanced usage By default, you get a map of styles, but the styles are also available as groups. They are non-enumerable so they don't show up unless you access them explicitly. This makes it easier to expose only a subset in a higher-level module. style.modifier style.color style.bgColor Example console.log(style.color.green.open); Raw escape codes (i.e. without the CSI escape prefix \\u001B[ and render mode postfix m) are available under style.codes, which returns a Map with the open codes as keys and close codes as values. Example console.log(style.codes.get(36)); //=> 39 256 / 16 million (TrueColor) support ansi-styles uses the color-convert package to allow for converting between various colors and ANSI escapes, with support for 256 and 16 million colors. The following color spaces from color-convert are supported: rgb hex keyword hsl hsv hwb ansi ansi256 To use these, call the associated conversion function with the intended output, for example: style.color.ansi.rgb(100, 200, 15); // RGB to 16 color ansi foreground code style.bgColor.ansi.rgb(100, 200, 15); // RGB to 16 color ansi background code style.color.ansi256.hsl(120, 100, 60); // HSL to 256 color ansi foreground code style.bgColor.ansi256.hsl(120, 100, 60); // HSL to 256 color ansi foreground code style.color.ansi16m.hex('#C0FFEE'); // Hex (RGB) to 16 million color foreground code style.bgColor.ansi16m.hex('#C0FFEE'); // Hex (RGB) to 16 million color background code Related ansi-escapes - ANSI escape codes for manipulating the terminal Maintainers Sindre Sorhus Josh Junon For enterprise Available as part of the Tidelift Subscription. The maintainers of ansi-styles and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more."
  },
  "Examiner-UI/node_modules/argparse/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/argparse/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. 2.0.1 - 2020-08-29 Fixed Fix issue with process.argv when used with interpreters (coffee, ts-node, etc.), #150. 2.0.0 - 2020-08-14 Changed Full rewrite. Now port from python 3.9.0 & more precise following. See doc for difference and migration info. node.js 10+ required Removed most of local docs in favour of original ones. 1.0.10 - 2018-02-15 Fixed Use .concat instead of + for arrays, #122. 1.0.9 - 2016-09-29 Changed Rerelease after 1.0.8 - deps cleanup. 1.0.8 - 2016-09-29 Changed Maintenance (deps bump, fix node 6.5+ tests, coverage report). 1.0.7 - 2016-03-17 Changed Teach addArgument to accept string arg names. #97, @tomxtobin. 1.0.6 - 2016-02-06 Changed Maintenance: moved to eslint & updated CS. 1.0.5 - 2016-02-05 Changed Removed lodash dependency to significantly reduce install size. Thanks to @mourner. 1.0.4 - 2016-01-17 Changed Maintenance: lodash update to 4.0.0. 1.0.3 - 2015-10-27 Fixed Fix parse = in args: --examplepath=\"C:\\myfolder\\env=x64\". #84, @CatWithApple. 1.0.2 - 2015-03-22 Changed Relaxed lodash version dependency. 1.0.1 - 2015-02-20 Changed Changed dependencies to be compatible with ancient nodejs. 1.0.0 - 2015-02-19 Changed Maintenance release. Replaced underscore with lodash. Bumped version to 1.0.0 to better reflect semver meaning. HISTORY.md -> CHANGELOG.md 0.1.16 - 2013-12-01 Changed Maintenance release. Updated dependencies and docs. 0.1.15 - 2013-05-13 Fixed Fixed #55, @trebor89 0.1.14 - 2013-05-12 Fixed Fixed #62, @maxtaco 0.1.13 - 2013-04-08 Changed Added .npmignore to reduce package size 0.1.12 - 2013-02-10 Fixed Fixed conflictHandler (#46), @hpaulj 0.1.11 - 2013-02-07 Added Added 70+ tests (ported from python), @hpaulj Added conflictHandler, @applepicke Added fromfilePrefixChar, @hpaulj Fixed Multiple bugfixes, @hpaulj 0.1.10 - 2012-12-30 Added Added mutual exclusion support, thanks to @hpaulj Fixed Fixed options check for storeConst & appendConst actions, thanks to @hpaulj 0.1.9 - 2012-12-27 Fixed Fixed option dest interferens with other options (issue #23), thanks to @hpaulj Fixed default value behavior with * positionals, thanks to @hpaulj Improve getDefault() behavior, thanks to @hpaulj Improve negative argument parsing, thanks to @hpaulj 0.1.8 - 2012-12-01 Fixed Fixed parser parents (issue #19), thanks to @hpaulj Fixed negative argument parse (issue #20), thanks to @hpaulj 0.1.7 - 2012-10-14 Fixed Fixed 'choices' argument parse (issue #16) Fixed stderr output (issue #15) 0.1.6 - 2012-09-09 Fixed Fixed check for conflict of options (thanks to @tomxtobin) 0.1.5 - 2012-09-03 Fixed Fix parser #setDefaults method (thanks to @tomxtobin) 0.1.4 - 2012-07-30 Fixed Fixed pseudo-argument support (thanks to @CGamesPlay) Fixed addHelp default (should be true), if not set (thanks to @benblank) 0.1.3 - 2012-06-27 Fixed Fixed formatter api name: Formatter -> HelpFormatter 0.1.2 - 2012-05-29 Fixed Removed excess whitespace in help Fixed error reporting, when parcer with subcommands called with empty arguments Added Added basic tests 0.1.1 - 2012-05-23 Fixed Fixed line wrapping in help formatter Added better error reporting on invalid arguments 0.1.0 - 2012-05-16 Added First release."
  },
  "Examiner-UI/node_modules/argparse/README.html": {
    "href": "Examiner-UI/node_modules/argparse/README.html",
    "title": "argparse | Examiner",
    "summary": "argparse CLI arguments parser for node.js, with sub-commands support. Port of python's argparse (version 3.9.0). Difference with original. JS has no keyword arguments support. Pass options instead: new ArgumentParser({ description: 'example', add_help: true }). JS has no python's types int, float, ... Use string-typed names: .add_argument('-b', { type: 'int', help: 'help' }). %r format specifier uses require('util').inspect(). More details in doc. Example test.js file: #!/usr/bin/env node 'use strict'; const { ArgumentParser } = require('argparse'); const { version } = require('./package.json'); const parser = new ArgumentParser({ description: 'Argparse example' }); parser.add_argument('-v', '--version', { action: 'version', version }); parser.add_argument('-f', '--foo', { help: 'foo bar' }); parser.add_argument('-b', '--bar', { help: 'bar foo' }); parser.add_argument('--baz', { help: 'baz bar' }); console.dir(parser.parse_args()); Display help: $ ./test.js -h usage: test.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ] Argparse example optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit -f FOO, --foo FOO foo bar -b BAR, --bar BAR bar foo --baz BAZ baz bar Parse arguments: $ ./test.js -f=3 --bar=4 --baz 5 { foo: '3', bar: '4', baz: '5' } API docs Since this is a port with minimal divergence, there's no separate documentation. Use original one instead, with notes about difference. Original doc. Original tutorial. Difference with python. argparse for enterprise Available as part of the Tidelift Subscription The maintainers of argparse and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more."
  },
  "Examiner-UI/node_modules/asynckit/README.html": {
    "href": "Examiner-UI/node_modules/asynckit/README.html",
    "title": "asynckit | Examiner",
    "summary": "asynckit Minimal async jobs utility library, with streams support. AsyncKit provides harness for parallel and serial iterators over list of items represented by arrays or objects. Optionally it accepts abort function (should be synchronously return by iterator for each item), and terminates left over jobs upon an error event. For specific iteration order built-in (ascending and descending) and custom sort helpers also supported, via asynckit.serialOrdered method. It ensures async operations to keep behavior more stable and prevent Maximum call stack size exceeded errors, from sync iterators. compression size asynckit.js 12.34 kB asynckit.min.js 4.11 kB asynckit.min.js.gz 1.47 kB Install $ npm install --save asynckit Examples Parallel Jobs Runs iterator over provided array in parallel. Stores output in the result array, on the matching positions. In unlikely event of an error from one of the jobs, will terminate rest of the active jobs (if abort function is provided) and return error along with salvaged data to the main callback function. Input Array var parallel = require('asynckit').parallel , assert = require('assert') ; var source = [ 1, 1, 4, 16, 64, 32, 8, 2 ] , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ] , expectedTarget = [ 1, 1, 2, 4, 8, 16, 32, 64 ] , target = [] ; parallel(source, asyncJob, function(err, result) { assert.deepEqual(result, expectedResult); assert.deepEqual(target, expectedTarget); }); // async job accepts one element from the array // and a callback function function asyncJob(item, cb) { // different delays (in ms) per item var delay = item * 25; // pretend different jobs take different time to finish // and not in consequential order var timeoutId = setTimeout(function() { target.push(item); cb(null, item * 2); }, delay); // allow to cancel \"leftover\" jobs upon error // return function, invoking of which will abort this job return clearTimeout.bind(null, timeoutId); } More examples could be found in test/test-parallel-array.js. Input Object Also it supports named jobs, listed via object. var parallel = require('asynckit/parallel') , assert = require('assert') ; var source = { first: 1, one: 1, four: 4, sixteen: 16, sixtyFour: 64, thirtyTwo: 32, eight: 8, two: 2 } , expectedResult = { first: 2, one: 2, four: 8, sixteen: 32, sixtyFour: 128, thirtyTwo: 64, eight: 16, two: 4 } , expectedTarget = [ 1, 1, 2, 4, 8, 16, 32, 64 ] , expectedKeys = [ 'first', 'one', 'two', 'four', 'eight', 'sixteen', 'thirtyTwo', 'sixtyFour' ] , target = [] , keys = [] ; parallel(source, asyncJob, function(err, result) { assert.deepEqual(result, expectedResult); assert.deepEqual(target, expectedTarget); assert.deepEqual(keys, expectedKeys); }); // supports full value, key, callback (shortcut) interface function asyncJob(item, key, cb) { // different delays (in ms) per item var delay = item * 25; // pretend different jobs take different time to finish // and not in consequential order var timeoutId = setTimeout(function() { keys.push(key); target.push(item); cb(null, item * 2); }, delay); // allow to cancel \"leftover\" jobs upon error // return function, invoking of which will abort this job return clearTimeout.bind(null, timeoutId); } More examples could be found in test/test-parallel-object.js. Serial Jobs Runs iterator over provided array sequentially. Stores output in the result array, on the matching positions. In unlikely event of an error from one of the jobs, will not proceed to the rest of the items in the list and return error along with salvaged data to the main callback function. Input Array var serial = require('asynckit/serial') , assert = require('assert') ; var source = [ 1, 1, 4, 16, 64, 32, 8, 2 ] , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ] , expectedTarget = [ 0, 1, 2, 3, 4, 5, 6, 7 ] , target = [] ; serial(source, asyncJob, function(err, result) { assert.deepEqual(result, expectedResult); assert.deepEqual(target, expectedTarget); }); // extended interface (item, key, callback) // also supported for arrays function asyncJob(item, key, cb) { target.push(key); // it will be automatically made async // even it iterator \"returns\" in the same event loop cb(null, item * 2); } More examples could be found in test/test-serial-array.js. Input Object Also it supports named jobs, listed via object. var serial = require('asynckit').serial , assert = require('assert') ; var source = [ 1, 1, 4, 16, 64, 32, 8, 2 ] , expectedResult = [ 2, 2, 8, 32, 128, 64, 16, 4 ] , expectedTarget = [ 0, 1, 2, 3, 4, 5, 6, 7 ] , target = [] ; var source = { first: 1, one: 1, four: 4, sixteen: 16, sixtyFour: 64, thirtyTwo: 32, eight: 8, two: 2 } , expectedResult = { first: 2, one: 2, four: 8, sixteen: 32, sixtyFour: 128, thirtyTwo: 64, eight: 16, two: 4 } , expectedTarget = [ 1, 1, 4, 16, 64, 32, 8, 2 ] , target = [] ; serial(source, asyncJob, function(err, result) { assert.deepEqual(result, expectedResult); assert.deepEqual(target, expectedTarget); }); // shortcut interface (item, callback) // works for object as well as for the arrays function asyncJob(item, cb) { target.push(item); // it will be automatically made async // even it iterator \"returns\" in the same event loop cb(null, item * 2); } More examples could be found in test/test-serial-object.js. Note: Since object is an unordered collection of properties, it may produce unexpected results with sequential iterations. Whenever order of the jobs' execution is important please use serialOrdered method. Ordered Serial Iterations TBD For example compare-property package. Streaming interface TBD Want to Know More? More examples can be found in test folder. Or open an issue with questions and/or suggestions. License AsyncKit is licensed under the MIT license."
  },
  "Examiner-UI/node_modules/axios/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/axios/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog 1.10.0 (2025-06-14) Bug Fixes adapter: pass fetchOptions to fetch function (#6883) (0f50af8) form-data: convert boolean values to strings in FormData serialization (#6917) (5064b10) package: add module entry point for React Native; (#6933) (3d343b8) Features types: improved fetchOptions interface (#6867) (63f1fce) Contributors to this release Dmitriy Mozgovoy Noritaka Kobayashi Dimitrios Lazanas Adrian Knapp Howie Zhao Uhyeon Park Sampo Silvennoinen 1.9.0 (2025-04-24) Bug Fixes core: fix the Axios constructor implementation to treat the config argument as optional; (#6881) (6c5d4cd) fetch: fixed ERR_NETWORK mapping for Safari browsers; (#6767) (dfe8411) headers: allow iterable objects to be a data source for the set method; (#6873) (1b1f9cc) headers: fix getSetCookie by using 'get' method for caseless access; (#6874) (d4f7df4) headers: fixed support for setting multiple header values from an iterated source; (#6885) (f7a3b5e) http: send minimal end multipart boundary (#6661) (987d2e2) types: fix autocomplete for adapter config (#6855) (e61a893) Features AxiosHeaders: add getSetCookie method to retrieve set-cookie headers values (#5707) (80ea756) Contributors to this release Dmitriy Mozgovoy Jay Willian Agostini George Cheng FatahChan Ionuț G. Stan 1.8.4 (2025-03-19) Bug Fixes buildFullPath: handle allowAbsoluteUrls: false without baseURL (#6833) (f10c2e0) Contributors to this release Marc Hassan 1.8.3 (2025-03-10) Bug Fixes add missing type for allowAbsoluteUrls (#6818) (10fa70e) xhr/fetch: pass allowAbsoluteUrls to buildFullPath in xhr and fetch adapters (#6814) (ec159e5) Contributors to this release Ashcon Partovi StefanBRas Marc Hassan 1.8.2 (2025-03-07) Bug Fixes http-adapter: add allowAbsoluteUrls to path building (#6810) (fb8eec2) Contributors to this release Fasoro-Joseph Alexander 1.8.1 (2025-02-26) Bug Fixes utils: move generateString to platform utils to avoid importing crypto module into client builds; (#6789) (36a5a62) Contributors to this release Dmitriy Mozgovoy 1.8.0 (2025-02-25) Bug Fixes examples: application crashed when navigating examples in browser (#5938) (1260ded) missing word in SUPPORT_QUESTION.yml (#6757) (1f890b1) utils: replace getRandomValues with crypto module (#6788) (23a25af) Features Add config for ignoring absolute URLs (#5902) (#6192) (32c7bcc) Reverts Revert \"chore: expose fromDataToStream to be consumable (#6731)\" (#6732) (1317261), closes #6731 #6732 BREAKING CHANGES code relying on the above will now combine the URLs instead of prefer request URL feat: add config option for allowing absolute URLs fix: add default value for allowAbsoluteUrls in buildFullPath fix: typo in flow control when setting allowAbsoluteUrls Contributors to this release Michael Toscano Willian Agostini Naron shravan || श्रvan Justin Dhillon yionr Shin'ya Ueoka Dan Dascalescu Nitin Ramnani Shay Molcho Jay fancy45daddy Habip Akyol Bailey Lissington Bernardo da Eira Duarte Shivam Batham Lipin Kariappa 1.7.9 (2024-12-04) Reverts Revert \"fix(types): export CJS types from ESM (#6218)\" (#6729) (c44d2f2), closes #6218 #6729 Contributors to this release Jay 1.7.8 (2024-11-25) Bug Fixes allow passing a callback as paramsSerializer to buildURL (#6680) (eac4619) core: fixed config merging bug (#6668) (5d99fe4) fixed width form to not shrink after 'Send Request' button is clicked (#6644) (7ccd5fd) http: add support for File objects as payload in http adapter (#6588) (#6605) (6841d8d) http: fixed proxy-from-env module import (#5222) (12b3295) http: use globalThis.TextEncoder when available (#6634) (df956d1) ios11 breaks when build (#6608) (7638952) types: add missing types for mergeConfig function (#6590) (00de614) types: export CJS types from ESM (#6218) (c71811b) updated stream aborted error message to be more clear (#6615) (cc3217a) use URL API instead of DOM to fix a potential vulnerability warning; (#6714) (0a8d6e1) Contributors to this release Remco Haszing Jay Aayush Yadav Dmitriy Mozgovoy Ell Bradshaw Amit Saini Tommaso Paulon Akki Sampo Silvennoinen Kasper Isager Dalsgarð Christian Clauss Pavan Welihinda Taylor Flatt Kenzo Wada Ngole Lawson Haven Shrivali Dutt Henco Appel 1.7.7 (2024-08-31) Bug Fixes fetch: fix stream handling in Safari by fallback to using a stream reader instead of an async iterator; (#6584) (d198085) http: fixed support for IPv6 literal strings in url (#5731) (364993f) Contributors to this release Rishi556 Dmitriy Mozgovoy 1.7.6 (2024-08-30) Bug Fixes fetch: fix content length calculation for FormData payload; (#6524) (085f568) fetch: optimize signals composing logic; (#6582) (df9889b) Contributors to this release Dmitriy Mozgovoy Jacques Germishuys kuroino721 1.7.5 (2024-08-23) Bug Fixes adapter: fix undefined reference to hasBrowserEnv (#6572) (7004707) core: add the missed implementation of AxiosError#status property; (#6573) (6700a8a) core: fix ReferenceError: navigator is not defined for custom environments; (#6567) (fed1a4b) fetch: fix credentials handling in Cloudflare workers (#6533) (550d885) Contributors to this release Dmitriy Mozgovoy Antonin Bas Hans Otto Wirtz 1.7.4 (2024-08-13) Bug Fixes sec: CVE-2024-39338 (#6539) (#6543) (6b6b605) sec: disregard protocol-relative URL to remediate SSRF (#6539) (07a661a) Contributors to this release Lev Pachmanov Đỗ Trọng Hải 1.7.3 (2024-08-01) Bug Fixes adapter: fix progress event emitting; (#6518) (e3c76fc) fetch: fix withCredentials request config (#6505) (85d4d0e) xhr: return original config on errors from XHR adapter (#6515) (8966ee7) Contributors to this release Dmitriy Mozgovoy Valerii Sidorenko prianYu 1.7.2 (2024-05-21) Bug Fixes fetch: enhance fetch API detection; (#6413) (4f79aef) Contributors to this release Dmitriy Mozgovoy 1.7.1 (2024-05-20) Bug Fixes fetch: fixed ReferenceError issue when TextEncoder is not available in the environment; (#6410) (733f15f) Contributors to this release Dmitriy Mozgovoy 1.7.0 (2024-05-19) Features adapter: add fetch adapter; (#6371) (a3ff99b) Bug Fixes core/axios: handle un-writable error stack (#6362) (81e0455) Contributors to this release Dmitriy Mozgovoy Jay Alexandre ABRIOUX 1.7.0-beta.2 (2024-05-19) Bug Fixes fetch: capitalize HTTP method names; (#6395) (ad3174a) fetch: fix & optimize progress capturing for cases when the request data has a nullish value or zero data length (#6400) (95a3e8e) fetch: fix headers getting from a stream response; (#6401) (870e0a7) Contributors to this release Dmitriy Mozgovoy 1.7.0-beta.1 (2024-05-07) Bug Fixes core/axios: handle un-writable error stack (#6362) (81e0455) fetch: fix cases when ReadableStream or Response.body are not available; (#6377) (d1d359d) fetch: treat fetch-related TypeError as an AxiosError.ERR_NETWORK error; (#6380) (bb5f9a5) Contributors to this release Alexandre ABRIOUX Dmitriy Mozgovoy 1.7.0-beta.0 (2024-04-28) Features adapter: add fetch adapter; (#6371) (a3ff99b) Contributors to this release Dmitriy Mozgovoy Jay 1.6.8 (2024-03-15) Bug Fixes AxiosHeaders: fix AxiosHeaders conversion to an object during config merging (#6243) (2656612) import: use named export for EventEmitter; (7320430) vulnerability: update follow-redirects to 1.15.6 (#6300) (8786e0f) Contributors to this release Jay Dmitriy Mozgovoy Mitchell Emmanuel Lucas Keller Aditya Mogili Miroslav Petrov 1.6.7 (2024-01-25) Bug Fixes capture async stack only for rejections with native error objects; (#6203) (1a08f90) Contributors to this release Dmitriy Mozgovoy zhoulixiang 1.6.6 (2024-01-24) Bug Fixes fixed missed dispatchBeforeRedirect argument (#5778) (a1938ff) wrap errors to improve async stack trace (#5987) (123f354) Contributors to this release Ilya Priven Zao Soula 1.6.5 (2024-01-05) Bug Fixes ci: refactor notify action as a job of publish action; (#6176) (0736f95) dns: fixed lookup error handling; (#6175) (f4f2b03) Contributors to this release Dmitriy Mozgovoy Jay 1.6.4 (2024-01-03) Bug Fixes security: fixed formToJSON prototype pollution vulnerability; (#6167) (3c0c11c) security: fixed security vulnerability in follow-redirects (#6163) (75af1cd) Contributors to this release Jay Dmitriy Mozgovoy Guy Nesher 1.6.3 (2023-12-26) Bug Fixes Regular Expression Denial of Service (ReDoS) (#6132) (5e7ad38) Contributors to this release Jay Willian Agostini Dmitriy Mozgovoy 1.6.2 (2023-11-14) Features withXSRFToken: added withXSRFToken option as a workaround to achieve the old withCredentials behavior; (#6046) (cff9967) PRs feat(withXSRFToken): added withXSRFToken option as a workaround to achieve the old `withCredentials` behavior; ( #6046 ) \uD83D\uDCE2 This PR added &#x27;withXSRFToken&#x27; option as a replacement for old withCredentials behaviour. You should now use withXSRFToken along with withCredential to get the old behavior. This functionality is considered as a fix. Contributors to this release Dmitriy Mozgovoy Ng Choon Khon (CK) Muhammad Noman 1.6.1 (2023-11-08) Bug Fixes formdata: fixed content-type header normalization for non-standard browser environments; (#6056) (dd465ab) platform: fixed emulated browser detection in node.js environment; (#6055) (3dc8369) Contributors to this release Dmitriy Mozgovoy Fabian Meyer PRs feat(withXSRFToken): added withXSRFToken option as a workaround to achieve the old `withCredentials` behavior; ( #6046 ) \uD83D\uDCE2 This PR added &#x27;withXSRFToken&#x27; option as a replacement for old withCredentials behaviour. You should now use withXSRFToken along with withCredential to get the old behavior. This functionality is considered as a fix. 1.6.0 (2023-10-26) Bug Fixes CSRF: fixed CSRF vulnerability CVE-2023-45857 (#6028) (96ee232) dns: fixed lookup function decorator to work properly in node v20; (#6011) (5aaff53) types: fix AxiosHeaders types; (#5931) (a1c8ad0) PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 Contributors to this release Dmitriy Mozgovoy Valentin Panov Rinku Chaudhari 1.5.1 (2023-09-26) Bug Fixes adapters: improved adapters loading logic to have clear error messages; (#5919) (e410779) formdata: fixed automatic addition of the Content-Type header for FormData in non-browser environments; (#5917) (bc9af51) headers: allow content-encoding header to handle case-insensitive values (#5890) (#5892) (4c89f25) types: removed duplicated code (9e62056) Contributors to this release Dmitriy Mozgovoy David Dallas Sean Sattler Mustafa Ateş Uzun Przemyslaw Motacki Michael Di Prisco PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.5.0 (2023-08-26) Bug Fixes adapter: make adapter loading error more clear by using platform-specific adapters explicitly (#5837) (9a414bb) dns: fixed cacheable-lookup integration; (#5836) (b3e327d) headers: added support for setting header names that overlap with class methods; (#5831) (d8b4ca0) headers: fixed common Content-Type header merging; (#5832) (8fda276) Features export getAdapter function (#5324) (ca73eb8) export: export adapters without unsafe prefix (#5839) (1601f4a) Contributors to this release Dmitriy Mozgovoy 夜葬 Jonathan Budiman Michael Di Prisco PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.4.0 (2023-04-27) Bug Fixes formdata: add multipart/form-data content type for FormData payload on custom client environments; (#5678) (bbb61e7) package: export package internals with unsafe path prefix; (#5677) (df38c94) Features dns: added support for a custom lookup function; (#5339) (2701911) types: export AxiosHeaderValue type. (#5525) (726f1c8) Performance Improvements merge-config: optimize mergeConfig performance by avoiding duplicate key visits; (#5679) (e6f7053) Contributors to this release Dmitriy Mozgovoy Arthur Fiorette PIYUSH NEGI PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.6 (2023-04-19) Bug Fixes types: added transport to RawAxiosRequestConfig (#5445) (6f360a2) utils: make isFormData detection logic stricter to avoid unnecessary calling of the toString method on the target; (#5661) (aa372f7) Contributors to this release Dmitriy Mozgovoy Michael Di Prisco PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.5 (2023-04-05) Bug Fixes headers: fixed isValidHeaderName to support full list of allowed characters; (#5584) (e7decef) params: re-added the ability to set the function as paramsSerializer config; (#5633) (a56c866) Contributors to this release Dmitriy Mozgovoy PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.4 (2023-02-22) Bug Fixes blob: added a check to make sure the Blob class is available in the browser's global scope; (#5548) (3772c8f) http: fixed regression bug when handling synchronous errors inside the adapter; (#5564) (a3b246c) Contributors to this release Dmitriy Mozgovoy lcysgsg Michael Di Prisco PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.3 (2023-02-13) Bug Fixes formdata: added a check to make sure the FormData class is available in the browser's global scope; (#5545) (a6dfa72) formdata: fixed setting NaN as Content-Length for form payload in some cases; (#5535) (c19f7bf) headers: fixed the filtering logic of the clear method; (#5542) (ea87ebf) Contributors to this release Dmitriy Mozgovoy 陈若枫 PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.2 (2023-02-03) Bug Fixes http: treat http://localhost as base URL for relative paths to avoid ERR_INVALID_URL error; (#5528) (128d56f) http: use explicit import instead of TextEncoder global; (#5530) (6b3c305) Contributors to this release Dmitriy Mozgovoy PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.1 (2023-02-01) Bug Fixes formdata: add hotfix to use the asynchronous API to compute the content-length header value; (#5521) (96d336f) serializer: fixed serialization of array-like objects; (#5518) (08104c0) Contributors to this release Dmitriy Mozgovoy PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.3.0 (2023-01-31) Bug Fixes headers: fixed & optimized clear method; (#5507) (9915635) http: add zlib headers if missing (#5497) (65e8d1e) Features fomdata: added support for spec-compliant FormData & Blob types; (#5316) (6ac574e) Contributors to this release Dmitriy Mozgovoy ItsNotGoodName PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.2.6 (2023-01-28) Bug Fixes headers: added missed Authorization accessor; (#5502) (342c0ba) types: fixed CommonRequestHeadersList & CommonResponseHeadersList types to be private in commonJS; (#5503) (5a3d0a3) Contributors to this release Dmitriy Mozgovoy PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.2.5 (2023-01-26) Bug Fixes types: fixed AxiosHeaders to handle spread syntax by making all methods non-enumerable; (#5499) (580f1e8) Contributors to this release Dmitriy Mozgovoy Elliot Ford PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.2.4 (2023-01-22) Bug Fixes types: renamed RawAxiosRequestConfig back to AxiosRequestConfig; (#5486) (2a71f49) types: fix AxiosRequestConfig generic; (#5478) (9bce81b) Contributors to this release Dmitriy Mozgovoy Daniel Hillmann PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 1.2.3 (2023-01-10) Bug Fixes types: fixed AxiosRequestConfig header interface by refactoring it to RawAxiosRequestConfig; (#5420) (0811963) Contributors to this release Dmitriy Mozgovoy PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.2.2] - 2022-12-29 Fixed fix(ci): fix release script inputs #5392 fix(ci): prerelease scipts #5377 fix(ci): release scripts #5376 fix(ci): typescript tests #5375 fix: Brotli decompression #5353 fix: add missing HttpStatusCode #5345 Chores chore(ci): set conventional-changelog header config #5406 chore(ci): fix automatic contributors resolving #5403 chore(ci): improved logging for the contributors list generator #5398 chore(ci): fix release action #5397 chore(ci): fix version bump script by adding bump argument for target version #5393 chore(deps): bump decode-uri-component from 0.2.0 to 0.2.2 #5342 chore(ci): GitHub Actions Release script #5384 chore(ci): release scripts #5364 Contributors to this release Dmitriy Mozgovoy Winnie [1.2.1] - 2022-12-05 Changed feat(exports): export mergeConfig #5151 Fixed fix(CancelledError): include config #4922 fix(general): removing multiple/trailing/leading whitespace #5022 fix(headers): decompression for responses without Content-Length header #5306 fix(webWorker): exception to sending form data in web worker #5139 Refactors refactor(types): AxiosProgressEvent.event type to any #5308 refactor(types): add missing types for static AxiosError.from method #4956 Chores chore(docs): remove README link to non-existent upgrade guide #5307 chore(docs): typo in issue template name #5159 Contributors to this release Dmitriy Mozgovoy Zachary Lysobey Kevin Ennis Philipp Loose secondl1ght wenzheng Ivan Barsukov Arthur Fiorette PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.2.0] - 2022-11-10 Changed changed: refactored module exports #5162 change: re-added support for loading Axios with require('axios').default #5225 Fixed fix: improve AxiosHeaders class #5224 fix: TypeScript type definitions for commonjs #5196 fix: type definition of use method on AxiosInterceptorManager to match the the README #5071 fix: __dirname is not defined in the sandbox #5269 fix: AxiosError.toJSON method to avoid circular references #5247 fix: Z_BUF_ERROR when content-encoding is set but the response body is empty #5250 Refactors refactor: allowing adapters to be loaded by name #5277 Chores chore: force CI restart #5243 chore: update ECOSYSTEM.md #5077 chore: update get/index.html #5116 chore: update Sandbox UI/UX #5205 chore:(actions): remove git credentials after checkout #5235 chore(actions): bump actions/dependency-review-action from 2 to 3 #5266 chore(packages): bump loader-utils from 1.4.1 to 1.4.2 #5295 chore(packages): bump engine.io from 6.2.0 to 6.2.1 #5294 chore(packages): bump socket.io-parser from 4.0.4 to 4.0.5 #5241 chore(packages): bump loader-utils from 1.4.0 to 1.4.1 #5245 chore(docs): update Resources links in README #5119 chore(docs): update the link for JSON url #5265 chore(docs): fix broken links #5218 chore(docs): update and rename UPGRADE_GUIDE.md to MIGRATION_GUIDE.md #5170 chore(docs): typo fix line #856 and #920 #5194 chore(docs): typo fix #800 #5193 chore(docs): fix typos #5184 chore(docs): fix punctuation in README.md #5197 chore(docs): update readme in the Handling Errors section - issue reference #5260 #5261 chore: remove \\b from filename #5207 chore(docs): update CHANGELOG.md #5137 chore: add sideEffects false to package.json #5025 Contributors to this release Maddy Miller Amit Saini ecyrbe Ikko Ashimine Geeth Gunnampalli Shreem Asati Frieder Bluemle 윤세영 Claudio Busatto Remco Haszing Dmitriy Mozgovoy Csaba Maulis MoPaMo Daniel Fjeldstad Adrien Brunet Frazer Smith HaiTao AZM relbns PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.1.3] - 2022-10-15 Added Added custom params serializer support #5113 Fixed Fixed top-level export to keep them in-line with static properties #5109 Stopped including null values to query string. #5108 Restored proxy config backwards compatibility with 0.x #5097 Added back AxiosHeaders in AxiosHeaderValue #5103 Pin CDN install instructions to a specific version #5060 Handling of array values fixed for AxiosHeaders #5085 Chores docs: match badge style, add link to them #5046 chore: fixing comments typo #5054 chore: update issue template #5061 chore: added progress capturing section to the docs; #5084 Contributors to this release Jason Saayman scarf Lenz Weber-Tronic Arvindh Félix Legrelle Patrick Petrovic Dmitriy Mozgovoy littledian ChronosMasterOfAllTime PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.1.2] - 2022-10-07 Fixed Fixed broken exports for UMD builds. Contributors to this release Jason Saayman PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.1.1] - 2022-10-07 Fixed Fixed broken exports for common js. This fix breaks a prior fix, I will fix both issues ASAP but the commonJS use is more impactful. Contributors to this release Jason Saayman PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.1.0] - 2022-10-06 Fixed Fixed missing exports in type definition index.d.ts #5003 Fixed query params composing #5018 Fixed GenericAbortSignal interface by making it more generic #5021 Fixed adding \"clear\" to AxiosInterceptorManager #5010 Fixed commonjs & umd exports #5030 Fixed inability to access response headers when using axios 1.x with Jest #5036 Contributors to this release Trim21 Dmitriy Mozgovoy shingo.sasaki Ivan Pepelko Richard Kořínek PRs CVE 2023 45857 ( #6028 ) ⚠️ Critical vulnerability fix. See https://security.snyk.io/vuln/SNYK-JS-AXIOS-6032459 [1.0.0] - 2022-10-04 Added Added stack trace to AxiosError #4624 Add AxiosError to AxiosStatic #4654 Replaced Rollup as our build runner #4596 Added generic TS types for the exposed toFormData helper #4668 Added listen callback function #4096 Added instructions for installing using PNPM #4207 Added generic AxiosAbortSignal TS interface to avoid importing AbortController polyfill #4229 Added axios-url-template in ECOSYSTEM.md #4238 Added a clear() function to the request and response interceptors object so a user can ensure that all interceptors have been removed from an axios instance #4248 Added react hook plugin #4319 Adding HTTP status code for transformResponse #4580 Added blob to the list of protocols supported by the browser #4678 Resolving proxy from env on redirect #4436 Added enhanced toFormData implementation with additional options 4704 Adding Canceler parameters config and request #4711 Added automatic payload serialization to application/x-www-form-urlencoded #4714 Added the ability for webpack users to overwrite built-ins #4715 Added string[] to AxiosRequestHeaders type #4322 Added the ability for the url-encoded-form serializer to respect the formSerializer config #4721 Added isCancel type assert #4293 Added data URL support for node.js #4725 Adding types for progress event callbacks #4675 URL params serializer #4734 Added axios.formToJSON method #4735 Bower platform add data protocol #4804 Use WHATWG URL API instead of url.parse() #4852 Add ENUM containing Http Status Codes to typings #4903 Improve typing of timeout in index.d.ts #4934 Changed Updated AxiosError.config to be optional in the type definition #4665 Updated README emphasizing the URLSearchParam built-in interface over other solutions #4590 Include request and config when creating a CanceledError instance #4659 Changed func-names eslint rule to as-needed #4492 Replacing deprecated substr() with slice() as substr() is deprecated #4468 Updating HTTP links in README.md to use HTTPS #4387 Updated to a better trim() polyfill #4072 Updated types to allow specifying partial default headers on instance create #4185 Expanded isAxiosError types #4344 Updated type definition for axios instance methods #4224 Updated eslint config #4722 Updated Docs #4742 Refactored Axios to use ES2017 #4787 Deprecated There are multiple deprecations, refactors and fixes provided in this release. Please read through the full release notes to see how this may impact your project and use case. Removed Removed incorrect argument for NetworkError constructor #4656 Removed Webpack #4596 Removed function that transform arguments to array #4544 Fixed Fixed grammar in README #4649 Fixed code error in README #4599 Optimized the code that checks cancellation #4587 Fix url pointing to defaults.js in README #4532 Use type alias instead of interface for AxiosPromise #4505 Fix some word spelling and lint style in code comments #4500 Edited readme with 3 updated browser icons of Chrome, FireFox and Safari #4414 Bump follow-redirects from 1.14.9 to 1.15.0 #4673 Fixing http tests to avoid hanging when assertions fail #4435 Fix TS definition for AxiosRequestTransformer #4201 Fix grammatical issues in README #4232 Fixing instance.defaults.headers type #4557 Fixed race condition on immediate requests cancellation #4261 Fixing Z_BUF_ERROR when no content #4701 Fixing proxy beforeRedirect regression #4708 Fixed AxiosError status code type #4717 Fixed AxiosError stack capturing #4718 Fixing AxiosRequestHeaders typings #4334 Fixed max body length defaults #4731 Fixed toFormData Blob issue on node>v17 #4728 Bump grunt from 1.5.2 to 1.5.3 #4743 Fixing content-type header repeated #4745 Fixed timeout error message for http 4738 Request ignores false, 0 and empty string as body values #4785 Added back missing minified builds #4805 Fixed a type error #4815 Fixed a regression bug with unsubscribing from cancel token; #4819 Remove repeated compression algorithm #4820 The error of calling extend to pass parameters #4857 SerializerOptions.indexes allows boolean | null | undefined #4862 Require interceptors to return values #4874 Removed unused imports #4949 Allow null indexes on formSerializer and paramsSerializer #4960 Chores Set permissions for GitHub actions #4765 Included githubactions in the dependabot config #4770 Included dependency review #4771 Update security.md #4784 Remove unnecessary spaces #4854 Simplify the import path of AxiosError #4875 Fix Gitpod dead link #4941 Enable syntax highlighting for a code block #4970 Using Logo Axios in Readme.md #4993 Fix markup for note in README #4825 Fix typo and formatting, add colons #4853 Fix typo in readme #4942 Security Update SECURITY.md #4687 Contributors to this release Bertrand Marron Dmitriy Mozgovoy Dan Mooney Michael Li aong Des Preston Ted Robertson zhoulixiang Arthur Fiorette Kumar Shanu JALAL Jingyi Lin Philipp Loose Alexander Shchukin Dave Cardwell Cat Scarlet Luca Pizzini Kai Maxime Bargiel Brian Helba reslear Jamie Slome Landro3 rafw87 Afzal Sayed Koki Oyatsu Dave 暴走老七 Spencer Adrian Wieprzkowicz Jamie Telin 毛呆 Kirill Shakirov Rraji Abdelbari Jelle Schutter Tom Ceuppens Johann Cooper Dimitris Halatsis chenjigeng João Gabriel Quaresma Victor Augusto neilnaveen Pavlos Kiryl Valkovich Naveen wenzheng hcwhan Bassel Rachid Grégoire Pineau felipedamin Karl Horky Yue JIN Usman Ali Siddiqui WD Günther Foidl Stephen Jennings C.T.Lin mia-z Parth Banathia parth0105pluang Marco Weber Luca Pizzini Willian Agostini Huyen Nguyen"
  },
  "Examiner-UI/node_modules/axios/MIGRATION_GUIDE.html": {
    "href": "Examiner-UI/node_modules/axios/MIGRATION_GUIDE.html",
    "title": "Migration Guide | Examiner",
    "summary": "Migration Guide 0.x.x -> 1.1.0"
  },
  "Examiner-UI/node_modules/axios/README.html": {
    "href": "Examiner-UI/node_modules/axios/README.html",
    "title": "| Examiner",
    "summary": "\uD83E\uDD47 Gold sponsors API-first authentication, authorization, and fraud prevention Website | Documentation | Node.js We’re bound by one common purpose: to give you the financial tools, resources and information you ne... www.principal.com Buy real Instagram followers from Twicsy starting at only $2.97. Twicsy has been voted the best site... twicsy.com Hi, we're Descope! We are building something in the authentication space for app developers and... Website | Docs | Community At Buzzoid, you can buy Instagram followers quickly, safely, and easily with just a few clicks. Rate... buzzoid.com At Famety, you can grow your social media following quickly, safely, and easily with just a few clic... www.famety.com Buy Instagram Likes poprey.com SS Market offers professional social media services that rapidly increase your YouTube subscriber co... ssmarket.net Recommend trusted and best sites to buy YouTube subscribers, likes and views www.reddit.com smmpanelserver - Best and Cheapest Smm Panel smmpanelserver.com \uD83D\uDC9C Become a sponsor \uD83D\uDC9C Become a sponsor Promise based HTTP client for the browser and node.js Website • Documentation Table of Contents Features Browser Support Installing Package manager CDN Example Axios API Request method aliases Concurrency \uD83D\uDC4E Creating an instance Instance methods Request Config Response Schema Config Defaults Global axios defaults Custom instance defaults Config order of precedence Interceptors Multiple Interceptors Handling Errors Cancellation AbortController CancelToken \uD83D\uDC4E Using application/x-www-form-urlencoded format URLSearchParams Query string \uD83C\uDD95 Automatic serialization Using multipart/form-data format FormData \uD83C\uDD95 Automatic serialization Files Posting HTML Form Posting \uD83C\uDD95 Progress capturing \uD83C\uDD95 Rate limiting \uD83C\uDD95 AxiosHeaders \uD83D\uDD25 Fetch adapter Semver Promises TypeScript Resources Credits License Features Make XMLHttpRequests from the browser Make http requests from node.js Supports the Promise API Intercept request and response Transform request and response data Cancel requests Automatic transforms for JSON data \uD83C\uDD95 Automatic data object serialization to multipart/form-data and x-www-form-urlencoded body encodings Client side support for protecting against XSRF Browser Support Latest ✔ Latest ✔ Latest ✔ Latest ✔ Latest ✔ 11 ✔ Installing Package manager Using npm: $ npm install axios Using bower: $ bower install axios Using yarn: $ yarn add axios Using pnpm: $ pnpm add axios Using bun: $ bun add axios Once the package is installed, you can import the library using import or require approach: import axios, {isCancel, AxiosError} from 'axios'; You can also use the default export, since the named export is just a re-export from the Axios factory: import axios from 'axios'; console.log(axios.isCancel('something')); If you use require for importing, only default export is available: const axios = require('axios'); console.log(axios.isCancel('something')); For some bundlers and some ES6 linters you may need to do the following: import { default as axios } from 'axios'; For cases where something went wrong when trying to import a module into a custom or legacy environment, you can try importing the module package directly: const axios = require('axios/dist/browser/axios.cjs'); // browser commonJS bundle (ES2017) // const axios = require('axios/dist/node/axios.cjs'); // node commonJS bundle (ES2017) CDN Using jsDelivr CDN (ES5 UMD browser module): <script src=\"https://cdn.jsdelivr.net/npm/axios@1.6.7/dist/axios.min.js\"></script> Using unpkg CDN: <script src=\"https://unpkg.com/axios@1.6.7/dist/axios.min.js\"></script> Example Note: CommonJS usage In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with require(), use the following approach: import axios from 'axios'; //const axios = require('axios'); // legacy way // Make a request for a user with a given ID axios.get('/user?ID=12345') .then(function (response) { // handle success console.log(response); }) .catch(function (error) { // handle error console.log(error); }) .finally(function () { // always executed }); // Optionally the request above could also be done as axios.get('/user', { params: { ID: 12345 } }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }) .finally(function () { // always executed }); // Want to use async/await? Add the `async` keyword to your outer function/method. async function getUser() { try { const response = await axios.get('/user?ID=12345'); console.log(response); } catch (error) { console.error(error); } } Note: async/await is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution. Performing a POST request axios.post('/user', { firstName: 'Fred', lastName: 'Flintstone' }) .then(function (response) { console.log(response); }) .catch(function (error) { console.log(error); }); Performing multiple concurrent requests function getUserAccount() { return axios.get('/user/12345'); } function getUserPermissions() { return axios.get('/user/12345/permissions'); } Promise.all([getUserAccount(), getUserPermissions()]) .then(function (results) { const acct = results[0]; const perm = results[1]; }); axios API Requests can be made by passing the relevant config to axios. axios(config) // Send a POST request axios({ method: 'post', url: '/user/12345', data: { firstName: 'Fred', lastName: 'Flintstone' } }); // GET request for remote image in node.js axios({ method: 'get', url: 'https://bit.ly/2mTM3nY', responseType: 'stream' }) .then(function (response) { response.data.pipe(fs.createWriteStream('ada_lovelace.jpg')) }); axios(url[, config]) // Send a GET request (default method) axios('/user/12345'); Request method aliases For convenience, aliases have been provided for all common request methods. axios.request(config) axios.get(url[, config]) axios.delete(url[, config]) axios.head(url[, config]) axios.options(url[, config]) axios.post(url[, data[, config]]) axios.put(url[, data[, config]]) axios.patch(url[, data[, config]]) NOTE When using the alias methods url, method, and data properties don't need to be specified in config. Concurrency (Deprecated) Please use Promise.all to replace the below functions. Helper functions for dealing with concurrent requests. axios.all(iterable) axios.spread(callback) Creating an instance You can create a new instance of axios with a custom config. axios.create([config]) const instance = axios.create({ baseURL: 'https://some-domain.com/api/', timeout: 1000, headers: {'X-Custom-Header': 'foobar'} }); Instance methods The available instance methods are listed below. The specified config will be merged with the instance config. axios#request(config) axios#get(url[, config]) axios#delete(url[, config]) axios#head(url[, config]) axios#options(url[, config]) axios#post(url[, data[, config]]) axios#put(url[, data[, config]]) axios#patch(url[, data[, config]]) axios#getUri([config]) Request Config These are the available config options for making requests. Only the url is required. Requests will default to GET if method is not specified. { // `url` is the server URL that will be used for the request url: '/user', // `method` is the request method to be used when making the request method: 'get', // default // `baseURL` will be prepended to `url` unless `url` is absolute and option `allowAbsoluteUrls` is set to true. // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs // to methods of that instance. baseURL: 'https://some-domain.com/api/', // `allowAbsoluteUrls` determines whether or not absolute URLs will override a configured `baseUrl`. // When set to true (default), absolute values for `url` will override `baseUrl`. // When set to false, absolute values for `url` will always be prepended by `baseUrl`. allowAbsoluteUrls: true, // `transformRequest` allows changes to the request data before it is sent to the server // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE' // The last function in the array must return a string or an instance of Buffer, ArrayBuffer, // FormData or Stream // You may modify the headers object. transformRequest: [function (data, headers) { // Do whatever you want to transform the data return data; }], // `transformResponse` allows changes to the response data to be made before // it is passed to then/catch transformResponse: [function (data) { // Do whatever you want to transform the data return data; }], // `headers` are custom headers to be sent headers: {'X-Requested-With': 'XMLHttpRequest'}, // `params` are the URL parameters to be sent with the request // Must be a plain object or a URLSearchParams object params: { ID: 12345 }, // `paramsSerializer` is an optional config that allows you to customize serializing `params`. paramsSerializer: { // Custom encoder function which sends key/value pairs in an iterative fashion. encode?: (param: string): string => { /* Do custom operations here and return transformed string */ }, // Custom serializer function for the entire parameter. Allows user to mimic pre 1.x behaviour. serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), // Configuration for formatting array indexes in the params. indexes: false // Three available options: (1) indexes: null (leads to no brackets), (2) (default) indexes: false (leads to empty brackets), (3) indexes: true (leads to brackets with indexes). }, // `data` is the data to be sent as the request body // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH' // When no `transformRequest` is set, must be of one of the following types: // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams // - Browser only: FormData, File, Blob // - Node only: Stream, Buffer, FormData (form-data package) data: { firstName: 'Fred' }, // syntax alternative to send data into the body // method post // only the value is sent, not the key data: 'Country=Brasil&City=Belo Horizonte', // `timeout` specifies the number of milliseconds before the request times out. // If the request takes longer than `timeout`, the request will be aborted. timeout: 1000, // default is `0` (no timeout) // `withCredentials` indicates whether or not cross-site Access-Control requests // should be made using credentials withCredentials: false, // default // `adapter` allows custom handling of requests which makes testing easier. // Return a promise and supply a valid response (see lib/adapters/README.md) adapter: function (config) { /* ... */ }, // Also, you can set the name of the built-in adapter, or provide an array with their names // to choose the first available in the environment adapter: 'xhr', // 'fetch' | 'http' | ['xhr', 'http', 'fetch'] // `auth` indicates that HTTP Basic auth should be used, and supplies credentials. // This will set an `Authorization` header, overwriting any existing // `Authorization` custom headers you have set using `headers`. // Please note that only HTTP Basic auth is configurable through this parameter. // For Bearer tokens and such, use `Authorization` custom headers instead. auth: { username: 'janedoe', password: 's00pers3cret' }, // `responseType` indicates the type of data that the server will respond with // options are: 'arraybuffer', 'document', 'json', 'text', 'stream' // browser only: 'blob' responseType: 'json', // default // `responseEncoding` indicates encoding to use for decoding responses (Node.js only) // Note: Ignored for `responseType` of 'stream' or client-side requests // options are: 'ascii', 'ASCII', 'ansi', 'ANSI', 'binary', 'BINARY', 'base64', 'BASE64', 'base64url', // 'BASE64URL', 'hex', 'HEX', 'latin1', 'LATIN1', 'ucs-2', 'UCS-2', 'ucs2', 'UCS2', 'utf-8', 'UTF-8', // 'utf8', 'UTF8', 'utf16le', 'UTF16LE' responseEncoding: 'utf8', // default // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token xsrfCookieName: 'XSRF-TOKEN', // default // `xsrfHeaderName` is the name of the http header that carries the xsrf token value xsrfHeaderName: 'X-XSRF-TOKEN', // default // `undefined` (default) - set XSRF header only for the same origin requests withXSRFToken: boolean | undefined | ((config: InternalAxiosRequestConfig) => boolean | undefined), // `onUploadProgress` allows handling of progress events for uploads // browser & node.js onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) { // Do whatever you want with the Axios progress event }, // `onDownloadProgress` allows handling of progress events for downloads // browser & node.js onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) { // Do whatever you want with the Axios progress event }, // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js maxContentLength: 2000, // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed maxBodyLength: 2000, // `validateStatus` defines whether to resolve or reject the promise for a given // HTTP response status code. If `validateStatus` returns `true` (or is set to `null` // or `undefined`), the promise will be resolved; otherwise, the promise will be // rejected. validateStatus: function (status) { return status >= 200 && status < 300; // default }, // `maxRedirects` defines the maximum number of redirects to follow in node.js. // If set to 0, no redirects will be followed. maxRedirects: 21, // default // `beforeRedirect` defines a function that will be called before redirect. // Use this to adjust the request options upon redirecting, // to inspect the latest response headers, // or to cancel the request by throwing an error // If maxRedirects is set to 0, `beforeRedirect` is not used. beforeRedirect: (options, { headers }) => { if (options.hostname === \"example.com\") { options.auth = \"user:password\"; } }, // `socketPath` defines a UNIX Socket to be used in node.js. // e.g. '/var/run/docker.sock' to send requests to the docker daemon. // Only either `socketPath` or `proxy` can be specified. // If both are specified, `socketPath` is used. socketPath: null, // default // `transport` determines the transport method that will be used to make the request. // If defined, it will be used. Otherwise, if `maxRedirects` is 0, // the default `http` or `https` library will be used, depending on the protocol specified in `protocol`. // Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol, // which can handle redirects. transport: undefined, // default // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http // and https requests, respectively, in node.js. This allows options to be added like // `keepAlive` that are not enabled by default before Node.js v19.0.0. After Node.js // v19.0.0, you no longer need to customize the agent to enable `keepAlive` because // `http.globalAgent` has `keepAlive` enabled by default. httpAgent: new http.Agent({ keepAlive: true }), httpsAgent: new https.Agent({ keepAlive: true }), // `proxy` defines the hostname, port, and protocol of the proxy server. // You can also define your proxy using the conventional `http_proxy` and // `https_proxy` environment variables. If you are using environment variables // for your proxy configuration, you can also define a `no_proxy` environment // variable as a comma-separated list of domains that should not be proxied. // Use `false` to disable proxies, ignoring environment variables. // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and // supplies credentials. // This will set an `Proxy-Authorization` header, overwriting any existing // `Proxy-Authorization` custom headers you have set using `headers`. // If the proxy server uses HTTPS, then you must set the protocol to `https`. proxy: { protocol: 'https', host: '127.0.0.1', // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined port: 9000, auth: { username: 'mikeymike', password: 'rapunz3l' } }, // `cancelToken` specifies a cancel token that can be used to cancel the request // (see Cancellation section below for details) cancelToken: new CancelToken(function (cancel) { }), // an alternative way to cancel Axios requests using AbortController signal: new AbortController().signal, // `decompress` indicates whether or not the response body should be decompressed // automatically. If set to `true` will also remove the 'content-encoding' header // from the responses objects of all decompressed responses // - Node only (XHR cannot turn off decompression) decompress: true, // default // `insecureHTTPParser` boolean. // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers. // This may allow interoperability with non-conformant HTTP implementations. // Using the insecure parser should be avoided. // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none insecureHTTPParser: undefined, // default // transitional options for backward compatibility that may be removed in the newer versions transitional: { // silent JSON parsing mode // `true` - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour) // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json') silentJSONParsing: true, // default value for the current Axios version // try to parse the response string as JSON even if `responseType` is not 'json' forcedJSONParsing: true, // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts clarifyTimeoutError: false, }, env: { // The FormData class to be used to automatically serialize the payload into a FormData object FormData: window?.FormData || global?.FormData }, formSerializer: { visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values dots: boolean; // use dots instead of brackets format metaTokens: boolean; // keep special endings like {} in parameter key indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes }, // http adapter only (node.js) maxRate: [ 100 * 1024, // 100KB/s upload limit, 100 * 1024 // 100KB/s download limit ] } Response Schema The response for a request contains the following information. { // `data` is the response that was provided by the server data: {}, // `status` is the HTTP status code from the server response status: 200, // `statusText` is the HTTP status message from the server response statusText: 'OK', // `headers` the HTTP headers that the server responded with // All header names are lowercase and can be accessed using the bracket notation. // Example: `response.headers['content-type']` headers: {}, // `config` is the config that was provided to `axios` for the request config: {}, // `request` is the request that generated this response // It is the last ClientRequest instance in node.js (in redirects) // and an XMLHttpRequest instance in the browser request: {} } When using then, you will receive the response as follows: axios.get('/user/12345') .then(function (response) { console.log(response.data); console.log(response.status); console.log(response.statusText); console.log(response.headers); console.log(response.config); }); When using catch, or passing a rejection callback as second parameter of then, the response will be available through the error object as explained in the Handling Errors section. Config Defaults You can specify config defaults that will be applied to every request. Global axios defaults axios.defaults.baseURL = 'https://api.example.com'; // Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them. // See below for an example using Custom instance defaults instead. axios.defaults.headers.common['Authorization'] = AUTH_TOKEN; axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; Custom instance defaults // Set config defaults when creating the instance const instance = axios.create({ baseURL: 'https://api.example.com' }); // Alter defaults after instance has been created instance.defaults.headers.common['Authorization'] = AUTH_TOKEN; Config order of precedence Config will be merged with an order of precedence. The order is library defaults found in lib/defaults/index.js, then defaults property of the instance, and finally config argument for the request. The latter will take precedence over the former. Here's an example. // Create an instance using the config defaults provided by the library // At this point the timeout config value is `0` as is the default for the library const instance = axios.create(); // Override timeout default for the library // Now all requests using this instance will wait 2.5 seconds before timing out instance.defaults.timeout = 2500; // Override timeout for this request as it's known to take a long time instance.get('/longRequest', { timeout: 5000 }); Interceptors You can intercept requests or responses before they are handled by then or catch. const instance = axios.create(); // Add a request interceptor instance.interceptors.request.use(function (config) { // Do something before request is sent return config; }, function (error) { // Do something with request error return Promise.reject(error); }); // Add a response interceptor instance.interceptors.response.use(function (response) { // Any status code that lie within the range of 2xx cause this function to trigger // Do something with response data return response; }, function (error) { // Any status codes that falls outside the range of 2xx cause this function to trigger // Do something with response error return Promise.reject(error); }); If you need to remove an interceptor later you can. const instance = axios.create(); const myInterceptor = instance.interceptors.request.use(function () {/*...*/}); axios.interceptors.request.eject(myInterceptor); You can also clear all interceptors for requests or responses. const instance = axios.create(); instance.interceptors.request.use(function () {/*...*/}); instance.interceptors.request.clear(); // Removes interceptors from requests instance.interceptors.response.use(function () {/*...*/}); instance.interceptors.response.clear(); // Removes interceptors from responses You can add interceptors to a custom instance of axios. const instance = axios.create(); instance.interceptors.request.use(function () {/*...*/}); When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution. axios.interceptors.request.use(function (config) { config.headers.test = 'I am only a header!'; return config; }, null, { synchronous: true }); If you want to execute a particular interceptor based on a runtime check, you can add a runWhen function to the options object. The request interceptor will not be executed if and only if the return of runWhen is false. The function will be called with the config object (don't forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times. function onGetCall(config) { return config.method === 'get'; } axios.interceptors.request.use(function (config) { config.headers.test = 'special get headers'; return config; }, null, { runWhen: onGetCall }); Note: options parameter(having synchronous and runWhen properties) is only supported for request interceptors at the moment. Multiple Interceptors Given you add multiple response interceptors and when the response was fulfilled then each interceptor is executed then they are executed in the order they were added then only the last interceptor's result is returned then every interceptor receives the result of its predecessor and when the fulfillment-interceptor throws then the following fulfillment-interceptor is not called then the following rejection-interceptor is called once caught, another following fulfill-interceptor is called again (just like in a promise chain). Read the interceptor tests for seeing all this in code. Error Types There are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging. The general structure of axios errors is as follows: | Property | Definition | | -------- | ---------- | | message | A quick summary of the error message and the status it failed with. | | name | This defines where the error originated from. For axios, it will always be an 'AxiosError'. | | stack | Provides the stack trace of the error. | | config | An axios config object with specific instance configurations defined by the user from when the request was made | | code | Represents an axios identified error. The table below lists out specific definitions for internal axios error. | | status | HTTP response status code. See here for common HTTP response status code meanings. Below is a list of potential axios identified error: Code Definition ERR_BAD_OPTION_VALUE Invalid value provided in axios configuration. ERR_BAD_OPTION Invalid option provided in axios configuration. ERR_NOT_SUPPORT Feature or method not supported in the current axios environment. ERR_DEPRECATED Deprecated feature or method used in axios. ERR_INVALID_URL Invalid URL provided for axios request. ECONNABORTED Typically indicates that the request has been timed out (unless transitional.clarifyTimeoutError is set) or aborted by the browser or its plugin. ERR_CANCELED Feature or method is canceled explicitly by the user using an AbortSignal (or a CancelToken). ETIMEDOUT Request timed out due to exceeding default axios timelimit. transitional.clarifyTimeoutError must be set to true, otherwise a generic ECONNABORTED error will be thrown instead. ERR_NETWORK Network-related issue. In the browser, this error can also be caused by a CORS or Mixed Content policy violation. The browser does not allow the JS code to clarify the real reason for the error caused by security issues, so please check the console. ERR_FR_TOO_MANY_REDIRECTS Request is redirected too many times; exceeds max redirects specified in axios configuration. ERR_BAD_RESPONSE Response cannot be parsed properly or is in an unexpected format. Usually related to a response with 5xx status code. ERR_BAD_REQUEST The request has an unexpected format or is missing required parameters. Usually related to a response with 4xx status code. Handling Errors the default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error. axios.get('/user/12345') .catch(function (error) { if (error.response) { // The request was made and the server responded with a status code // that falls out of the range of 2xx console.log(error.response.data); console.log(error.response.status); console.log(error.response.headers); } else if (error.request) { // The request was made but no response was received // `error.request` is an instance of XMLHttpRequest in the browser and an instance of // http.ClientRequest in node.js console.log(error.request); } else { // Something happened in setting up the request that triggered an Error console.log('Error', error.message); } console.log(error.config); }); Using the validateStatus config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error. axios.get('/user/12345', { validateStatus: function (status) { return status < 500; // Resolve only if the status code is less than 500 } }) Using toJSON you get an object with more information about the HTTP error. axios.get('/user/12345') .catch(function (error) { console.log(error.toJSON()); }); Cancellation AbortController Starting from v0.22.0 Axios supports AbortController to cancel requests in fetch API way: const controller = new AbortController(); axios.get('/foo/bar', { signal: controller.signal }).then(function(response) { //... }); // cancel the request controller.abort() CancelToken \uD83D\uDC4Edeprecated You can also cancel a request using a CancelToken. The axios cancel token API is based on the withdrawn cancellable promises proposal. This API is deprecated since v0.22.0 and shouldn't be used in new projects You can create a cancel token using the CancelToken.source factory as shown below: const CancelToken = axios.CancelToken; const source = CancelToken.source(); axios.get('/user/12345', { cancelToken: source.token }).catch(function (thrown) { if (axios.isCancel(thrown)) { console.log('Request canceled', thrown.message); } else { // handle error } }); axios.post('/user/12345', { name: 'new name' }, { cancelToken: source.token }) // cancel the request (the message parameter is optional) source.cancel('Operation canceled by the user.'); You can also create a cancel token by passing an executor function to the CancelToken constructor: const CancelToken = axios.CancelToken; let cancel; axios.get('/user/12345', { cancelToken: new CancelToken(function executor(c) { // An executor function receives a cancel function as a parameter cancel = c; }) }); // cancel the request cancel(); Note: you can cancel several requests with the same cancel token/abort controller. If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request. During the transition period, you can use both cancellation APIs, even for the same request: Using application/x-www-form-urlencoded format URLSearchParams By default, axios serializes JavaScript objects to JSON. To send data in the application/x-www-form-urlencoded format instead, you can use the URLSearchParams API, which is supported in the vast majority of browsers,and Node starting with v10 (released in 2018). const params = new URLSearchParams({ foo: 'bar' }); params.append('extraparam', 'value'); axios.post('/foo', params); Query string (Older browsers) For compatibility with very old browsers, there is a polyfill available (make sure to polyfill the global environment). Alternatively, you can encode data using the qs library: const qs = require('qs'); axios.post('/foo', qs.stringify({ 'bar': 123 })); Or in another way (ES6), import qs from 'qs'; const data = { 'bar': 123 }; const options = { method: 'POST', headers: { 'content-type': 'application/x-www-form-urlencoded' }, data: qs.stringify(data), url, }; axios(options); Older Node.js versions For older Node.js engines, you can use the querystring module as follows: const querystring = require('querystring'); axios.post('https://something.com/', querystring.stringify({ foo: 'bar' })); You can also use the qs library. Note: The qs library is preferable if you need to stringify nested objects, as the querystring method has known issues with that use case. \uD83C\uDD95 Automatic serialization to URLSearchParams Axios will automatically serialize the data object to urlencoded format if the content-type header is set to \"application/x-www-form-urlencoded\". const data = { x: 1, arr: [1, 2, 3], arr2: [1, [2], 3], users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}], }; await axios.postForm('https://postman-echo.com/post', data, {headers: {'content-type': 'application/x-www-form-urlencoded'}} ); The server will handle it as: { x: '1', 'arr[]': [ '1', '2', '3' ], 'arr2[0]': '1', 'arr2[1][0]': '2', 'arr2[2]': '3', 'arr3[]': [ '1', '2', '3' ], 'users[0][name]': 'Peter', 'users[0][surname]': 'griffin', 'users[1][name]': 'Thomas', 'users[1][surname]': 'Anderson' } If your backend body-parser (like body-parser of express.js) supports nested objects decoding, you will get the same object on the server-side automatically var app = express(); app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies app.post('/', function (req, res, next) { // echo body as JSON res.send(JSON.stringify(req.body)); }); server = app.listen(3000); Using multipart/form-data format FormData To send the data as a multipart/formdata you need to pass a formData instance as a payload. Setting the Content-Type header is not required as Axios guesses it based on the payload type. const formData = new FormData(); formData.append('foo', 'bar'); axios.post('https://httpbin.org/post', formData); In node.js, you can use the form-data library as follows: const FormData = require('form-data'); const form = new FormData(); form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_file', fs.createReadStream('/foo/bar.jpg')); axios.post('https://example.com', form) \uD83C\uDD95 Automatic serialization to FormData Starting from v0.27.0, Axios supports automatic object serialization to a FormData object if the request Content-Type header is set to multipart/form-data. The following request will submit the data in a FormData format (Browser & Node.js): import axios from 'axios'; axios.post('https://httpbin.org/post', {x: 1}, { headers: { 'Content-Type': 'multipart/form-data' } }).then(({data}) => console.log(data)); In the node.js build, the (form-data) polyfill is used by default. You can overload the FormData class by setting the env.FormData config variable, but you probably won't need it in most cases: const axios = require('axios'); var FormData = require('form-data'); axios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, { headers: { 'Content-Type': 'multipart/form-data' } }).then(({data}) => console.log(data)); Axios FormData serializer supports some special endings to perform the following operations: {} - serialize the value with JSON.stringify [] - unwrap the array-like object as separate fields with the same key Note: unwrap/expand operation will be used by default on arrays and FileList objects FormData serializer supports additional options via config.formSerializer: object property to handle rare cases: visitor: Function - user-defined visitor function that will be called recursively to serialize the data object to a FormData object by following custom rules. dots: boolean = false - use dot notation instead of brackets to serialize arrays and objects; metaTokens: boolean = true - add the special ending (e.g user{}: '{\"name\": \"John\"}') in the FormData key. The back-end body-parser could potentially use this meta-information to automatically parse the value as JSON. indexes: null|false|true = false - controls how indexes will be added to unwrapped keys of flat array-like objects. null - don't add brackets (arr: 1, arr: 2, arr: 3) false(default) - add empty brackets (arr[]: 1, arr[]: 2, arr[]: 3) true - add brackets with indexes (arr[0]: 1, arr[1]: 2, arr[2]: 3) Let's say we have an object like this one: const obj = { x: 1, arr: [1, 2, 3], arr2: [1, [2], 3], users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}], 'obj2{}': [{x:1}] }; The following steps will be executed by the Axios serializer internally: const formData = new FormData(); formData.append('x', '1'); formData.append('arr[]', '1'); formData.append('arr[]', '2'); formData.append('arr[]', '3'); formData.append('arr2[0]', '1'); formData.append('arr2[1][0]', '2'); formData.append('arr2[2]', '3'); formData.append('users[0][name]', 'Peter'); formData.append('users[0][surname]', 'Griffin'); formData.append('users[1][name]', 'Thomas'); formData.append('users[1][surname]', 'Anderson'); formData.append('obj2{}', '[{\"x\":1}]'); Axios supports the following shortcut methods: postForm, putForm, patchForm which are just the corresponding http methods with the Content-Type header preset to multipart/form-data. Files Posting You can easily submit a single file: await axios.postForm('https://httpbin.org/post', { 'myVar' : 'foo', 'file': document.querySelector('#fileInput').files[0] }); or multiple files as multipart/form-data: await axios.postForm('https://httpbin.org/post', { 'files[]': document.querySelector('#fileInput').files }); FileList object can be passed directly: await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files) All files will be sent with the same field names: files[]. \uD83C\uDD95 HTML Form Posting (browser) Pass HTML Form element as a payload to submit it as multipart/form-data content. await axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm')); FormData and HTMLForm objects can also be posted as JSON by explicitly setting the Content-Type header to application/json: await axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), { headers: { 'Content-Type': 'application/json' } }) For example, the Form <form id=\"form\"> <input type=\"text\" name=\"foo\" value=\"1\"> <input type=\"text\" name=\"deep.prop\" value=\"2\"> <input type=\"text\" name=\"deep prop spaced\" value=\"3\"> <input type=\"text\" name=\"baz\" value=\"4\"> <input type=\"text\" name=\"baz\" value=\"5\"> <select name=\"user.age\"> <option value=\"value1\">Value 1</option> <option value=\"value2\" selected>Value 2</option> <option value=\"value3\">Value 3</option> </select> <input type=\"submit\" value=\"Save\"> </form> will be submitted as the following JSON object: { \"foo\": \"1\", \"deep\": { \"prop\": { \"spaced\": \"3\" } }, \"baz\": [ \"4\", \"5\" ], \"user\": { \"age\": \"value2\" } } Sending Blobs/Files as JSON (base64) is not currently supported. \uD83C\uDD95 Progress capturing Axios supports both browser and node environments to capture request upload/download progress. The frequency of progress events is forced to be limited to 3 times per second. await axios.post(url, data, { onUploadProgress: function (axiosProgressEvent) { /*{ loaded: number; total?: number; progress?: number; // in range [0..1] bytes: number; // how many bytes have been transferred since the last trigger (delta) estimated?: number; // estimated time in seconds rate?: number; // upload speed in bytes upload: true; // upload sign }*/ }, onDownloadProgress: function (axiosProgressEvent) { /*{ loaded: number; total?: number; progress?: number; bytes: number; estimated?: number; rate?: number; // download speed in bytes download: true; // download sign }*/ } }); You can also track stream upload/download progress in node.js: const {data} = await axios.post(SERVER_URL, readableStream, { onUploadProgress: ({progress}) => { console.log((progress * 100).toFixed(2)); }, headers: { 'Content-Length': contentLength }, maxRedirects: 0 // avoid buffering the entire stream }); Note: Capturing FormData upload progress is not currently supported in node.js environments. ⚠️ Warning It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the node.js environment, as follow-redirects package will buffer the entire stream in RAM without following the \"backpressure\" algorithm. \uD83C\uDD95 Rate limiting Download and upload rate limits can only be set for the http adapter (node.js): const {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, { onUploadProgress: ({progress, rate}) => { console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`) }, maxRate: [100 * 1024], // 100KB/s limit }); \uD83C\uDD95 AxiosHeaders Axios has its own AxiosHeaders class to manipulate headers using a Map-like API that guarantees caseless work. Although HTTP is case-insensitive in headers, Axios will retain the case of the original header for stylistic reasons and for a workaround when servers mistakenly consider the header's case. The old approach of directly manipulating headers object is still available, but deprecated and not recommended for future usage. Working with headers An AxiosHeaders object instance can contain different types of internal values. that control setting and merging logic. The final headers object with string values is obtained by Axios by calling the toJSON method. Note: By JSON here we mean an object consisting only of string values intended to be sent over the network. The header value can be one of the following types: string - normal string value that will be sent to the server null - skip header when rendering to JSON false - skip header when rendering to JSON, additionally indicates that set method must be called with rewrite option set to true to overwrite this value (Axios uses this internally to allow users to opt out of installing certain headers like User-Agent or Content-Type) undefined - value is not set Note: The header value is considered set if it is not equal to undefined. The headers object is always initialized inside interceptors and transformers: axios.interceptors.request.use((request: InternalAxiosRequestConfig) => { request.headers.set('My-header', 'value'); request.headers.set({ \"My-set-header1\": \"my-set-value1\", \"My-set-header2\": \"my-set-value2\" }); request.headers.set('User-Agent', false); // disable subsequent setting the header by Axios request.headers.setContentType('text/plain'); request.headers['My-set-header2'] = 'newValue' // direct access is deprecated return request; } ); You can iterate over an AxiosHeaders instance using a for...of statement: const headers = new AxiosHeaders({ foo: '1', bar: '2', baz: '3' }); for(const [header, value] of headers) { console.log(header, value); } // foo 1 // bar 2 // baz 3 new AxiosHeaders(headers?) Constructs a new AxiosHeaders instance. constructor(headers?: RawAxiosHeaders | AxiosHeaders | string); If the headers object is a string, it will be parsed as RAW HTTP headers. const headers = new AxiosHeaders(` Host: www.bing.com User-Agent: curl/7.54.0 Accept: */*`); console.log(headers); // Object [AxiosHeaders] { // host: 'www.bing.com', // 'user-agent': 'curl/7.54.0', // accept: '*/*' // } AxiosHeaders#set set(headerName, value: Axios, rewrite?: boolean); set(headerName, value, rewrite?: (this: AxiosHeaders, value: string, name: string, headers: RawAxiosHeaders) => boolean); set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean); The rewrite argument controls the overwriting behavior: false - do not overwrite if header's value is set (is not undefined) undefined (default) - overwrite the header unless its value is set to false true - rewrite anyway The option can also accept a user-defined function that determines whether the value should be overwritten or not. Returns this. AxiosHeaders#get(header) get(headerName: string, matcher?: true | AxiosHeaderMatcher): AxiosHeaderValue; get(headerName: string, parser: RegExp): RegExpExecArray | null; Returns the internal value of the header. It can take an extra argument to parse the header's value with RegExp.exec, matcher function or internal key-value parser. const headers = new AxiosHeaders({ 'Content-Type': 'multipart/form-data; boundary=Asrf456BGe4h' }); console.log(headers.get('Content-Type')); // multipart/form-data; boundary=Asrf456BGe4h console.log(headers.get('Content-Type', true)); // parse key-value pairs from a string separated with \\s,;= delimiters: // [Object: null prototype] { // 'multipart/form-data': undefined, // boundary: 'Asrf456BGe4h' // } console.log(headers.get('Content-Type', (value, name, headers) => { return String(value).replace(/a/g, 'ZZZ'); })); // multipZZZrt/form-dZZZtZZZ; boundZZZry=Asrf456BGe4h console.log(headers.get('Content-Type', /boundary=(\\w+)/)?.[0]); // boundary=Asrf456BGe4h Returns the value of the header. AxiosHeaders#has(header, matcher?) has(header: string, matcher?: AxiosHeaderMatcher): boolean; Returns true if the header is set (has no undefined value). AxiosHeaders#delete(header, matcher?) delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean; Returns true if at least one header has been removed. AxiosHeaders#clear(matcher?) clear(matcher?: AxiosHeaderMatcher): boolean; Removes all headers. Unlike the delete method matcher, this optional matcher will be used to match against the header name rather than the value. const headers = new AxiosHeaders({ 'foo': '1', 'x-foo': '2', 'x-bar': '3', }); console.log(headers.clear(/^x-/)); // true console.log(headers.toJSON()); // [Object: null prototype] { foo: '1' } Returns true if at least one header has been cleared. AxiosHeaders#normalize(format); If the headers object was changed directly, it can have duplicates with the same name but in different cases. This method normalizes the headers object by combining duplicate keys into one. Axios uses this method internally after calling each interceptor. Set format to true for converting headers name to lowercase and capitalize the initial letters (cOntEnt-type => Content-Type) const headers = new AxiosHeaders({ 'foo': '1', }); headers.Foo = '2'; headers.FOO = '3'; console.log(headers.toJSON()); // [Object: null prototype] { foo: '1', Foo: '2', FOO: '3' } console.log(headers.normalize().toJSON()); // [Object: null prototype] { foo: '3' } console.log(headers.normalize(true).toJSON()); // [Object: null prototype] { Foo: '3' } Returns this. AxiosHeaders#concat(...targets) concat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders; Merges the instance with targets into a new AxiosHeaders instance. If the target is a string, it will be parsed as RAW HTTP headers. Returns a new AxiosHeaders instance. AxiosHeaders#toJSON(asStrings?) toJSON(asStrings?: boolean): RawAxiosHeaders; Resolve all internal headers values into a new null prototype object. Set asStrings to true to resolve arrays as a string containing all elements, separated by commas. AxiosHeaders.from(thing?) from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders; Returns a new AxiosHeaders instance created from the raw headers passed in, or simply returns the given headers object if it's an AxiosHeaders instance. AxiosHeaders.concat(...targets) concat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders; Returns a new AxiosHeaders instance created by merging the target objects. Shortcuts The following shortcuts are available: setContentType, getContentType, hasContentType setContentLength, getContentLength, hasContentLength setAccept, getAccept, hasAccept setUserAgent, getUserAgent, hasUserAgent setContentEncoding, getContentEncoding, hasContentEncoding \uD83D\uDD25 Fetch adapter Fetch adapter was introduced in v1.7.0. By default, it will be used if xhr and http adapters are not available in the build, or not supported by the environment. To use it by default, it must be selected explicitly: const {data} = axios.get(url, { adapter: 'fetch' // by default ['xhr', 'http', 'fetch'] }) You can create a separate instance for this: const fetchAxios = axios.create({ adapter: 'fetch' }); const {data} = fetchAxios.get(url); The adapter supports the same functionality as xhr adapter, including upload and download progress capturing. Also, it supports additional response types such as stream and formdata (if supported by the environment). Semver Until axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1, and 0.5.4 will have the same API, but 0.6.0 will have breaking changes. Promises axios depends on a native ES6 Promise implementation to be supported. If your environment doesn't support ES6 Promises, you can polyfill. TypeScript axios includes TypeScript definitions and a type guard for axios errors. let user: User = null; try { const { data } = await axios.get('/user?ID=12345'); user = data.userDetails; } catch (error) { if (axios.isAxiosError(error)) { handleAxiosError(error); } else { handleUnexpectedError(error); } } Because axios dual publishes with an ESM default export and a CJS module.exports, there are some caveats. The recommended setting is to use \"moduleResolution\": \"node16\" (this is implied by \"module\": \"node16\"). Note that this requires TypeScript 4.7 or greater. If use ESM, your settings should be fine. If you compile TypeScript to CJS and you can’t use \"moduleResolution\": \"node 16\", you have to enable esModuleInterop. If you use TypeScript to type check CJS JavaScript code, your only option is to use \"moduleResolution\": \"node16\". Online one-click setup You can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online. Resources Changelog Ecosystem Contributing Guide Code of Conduct Credits axios is heavily inspired by the $http service provided in AngularJS. Ultimately axios is an effort to provide a standalone $http-like service for use outside of AngularJS. License MIT"
  },
  "Examiner-UI/node_modules/axios/lib/adapters/README.html": {
    "href": "Examiner-UI/node_modules/axios/lib/adapters/README.html",
    "title": "axios // adapters | Examiner",
    "summary": "axios // adapters The modules under adapters/ are modules that handle dispatching a request and settling a returned Promise once a response is received. Example var settle = require('./../core/settle'); module.exports = function myAdapter(config) { // At this point: // - config has been merged with defaults // - request transformers have already run // - request interceptors have already run // Make the request using config provided // Upon response settle the Promise return new Promise(function(resolve, reject) { var response = { data: responseData, status: request.status, statusText: request.statusText, headers: responseHeaders, config: config, request: request }; settle(resolve, reject, response); // From here: // - response transformers will run // - response interceptors will run }); }"
  },
  "Examiner-UI/node_modules/axios/lib/core/README.html": {
    "href": "Examiner-UI/node_modules/axios/lib/core/README.html",
    "title": "axios // core | Examiner",
    "summary": "axios // core The modules found in core/ should be modules that are specific to the domain logic of axios. These modules would most likely not make sense to be consumed outside of the axios module, as their logic is too specific. Some examples of core modules are: Dispatching requests Requests sent via adapters/ (see lib/adapters/README.md) Managing interceptors Handling config"
  },
  "Examiner-UI/node_modules/axios/lib/env/README.html": {
    "href": "Examiner-UI/node_modules/axios/lib/env/README.html",
    "title": "axios // env | Examiner",
    "summary": "axios // env The data.js file is updated automatically when the package version is upgrading. Please do not edit it manually."
  },
  "Examiner-UI/node_modules/axios/lib/helpers/README.html": {
    "href": "Examiner-UI/node_modules/axios/lib/helpers/README.html",
    "title": "axios // helpers | Examiner",
    "summary": "axios // helpers The modules found in helpers/ should be generic modules that are not specific to the domain logic of axios. These modules could theoretically be published to npm on their own and consumed by other modules or apps. Some examples of generic modules are things like: Browser polyfills Managing cookies Parsing HTTP headers"
  },
  "Examiner-UI/node_modules/balanced-match/LICENSE.html": {
    "href": "Examiner-UI/node_modules/balanced-match/LICENSE.html",
    "title": "| Examiner",
    "summary": "(MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/balanced-match/README.html": {
    "href": "Examiner-UI/node_modules/balanced-match/README.html",
    "title": "balanced-match | Examiner",
    "summary": "balanced-match Match balanced string pairs, like { and } or <b> and </b>. Supports regular expressions as well! Example Get the first matching pair of braces: var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); The matches are: $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } API var m = balanced(a, b, str) For the first non-nested matching pair of a and b in str, return an object with those keys: start the index of the first match of a end the index of the matching b pre the preamble, a and b not included body the match, a and b not included post the postscript, a and b not included If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match ['{', 'a', ''] and {a}} will match ['', 'a', '}']. var r = balanced.range(a, b, str) For the first non-nested matching pair of a and b in str, return an array with indexes: [ <a index>, <b index> ]. If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match [ 1, 3 ] and {a}} will match [0, 2]. Installation With npm do: npm install balanced-match Security contact information To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/brace-expansion/README.html": {
    "href": "Examiner-UI/node_modules/brace-expansion/README.html",
    "title": "brace-expansion | Examiner",
    "summary": "brace-expansion Brace expansion, as known from sh/bash, in JavaScript. Example var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] API var expand = require('brace-expansion'); var expanded = expand(str) Return an array of all possible and valid expansions of str. If none are found, [str] is returned. Valid expansions are: /^(.*,)+(.+)?$/ // {a,b,...} A comma separated list of options, like {a,b} or {a,{b,c}} or {,a,}. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} A numeric sequence from x to y inclusive, with optional increment. If x or y start with a leading 0, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} An alphabetic sequence from x to y inclusive, with optional increment. x and y must be exactly one character, and if given, incr must be a number. For compatibility reasons, the string ${ is not eligible for brace expansion. Installation With npm do: npm install brace-expansion Contributors Julian Gruber Isaac Z. Schlueter Sponsors This module is proudly supported by my Sponsors! Do you want to support modules like this to improve their quality, stability and weigh in on new features? Then please consider donating to my Patreon. Not sure how much of my modules you're using? Try feross/thanks! License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/braces/README.html": {
    "href": "Examiner-UI/node_modules/braces/README.html",
    "title": "braces | Examiner",
    "summary": "braces Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Install Install with npm: $ npm install --save braces v3.0.0 Released!! See the changelog for details. Why use braces? Brace patterns make globs more powerful by adding the ability to match specific ranges and sequences of characters. Accurate - complete support for the Bash 4.3 Brace Expansion specification (passes all of the Bash braces tests) fast and performant - Starts fast, runs fast and scales well as patterns increase in complexity. Organized code base - The parser and compiler are easy to maintain and update when edge cases crop up. Well-tested - Thousands of test assertions, and passes all of the Bash, minimatch, and brace-expansion unit tests (as of the date this was written). Safer - You shouldn't have to worry about users defining aggressive or malicious brace patterns that can break your application. Braces takes measures to prevent malicious regex that can be used for DDoS attacks (see catastrophic backtracking). Supports lists - (aka \"sets\") a/{b,c}/d => ['a/b/d', 'a/c/d'] Supports sequences - (aka \"ranges\") {01..03} => ['01', '02', '03'] Supports steps - (aka \"increments\") {2..10..2} => ['2', '4', '6', '8', '10'] Supports escaping - To prevent evaluation of special characters. Usage The main export is a function that takes one or more brace patterns and options. const braces = require('braces'); // braces(patterns[, options]); console.log(braces(['{01..05}', '{a..e}'])); //=> ['(0[1-5])', '([a-e])'] console.log(braces(['{01..05}', '{a..e}'], { expand: true })); //=> ['01', '02', '03', '04', '05', 'a', 'b', 'c', 'd', 'e'] Brace Expansion vs. Compilation By default, brace patterns are compiled into strings that are optimized for creating regular expressions and matching. Compiled console.log(braces('a/{x,y,z}/b')); //=> ['a/(x|y|z)/b'] console.log(braces(['a/{01..20}/b', 'a/{1..5}/b'])); //=> [ 'a/(0[1-9]|1[0-9]|20)/b', 'a/([1-5])/b' ] Expanded Enable brace expansion by setting the expand option to true, or by using braces.expand() (returns an array similar to what you'd expect from Bash, or echo {1..5}, or minimatch): console.log(braces('a/{x,y,z}/b', { expand: true })); //=> ['a/x/b', 'a/y/b', 'a/z/b'] console.log(braces.expand('{01..10}')); //=> ['01','02','03','04','05','06','07','08','09','10'] Lists Expand lists (like Bash \"sets\"): console.log(braces('a/{foo,bar,baz}/*.js')); //=> ['a/(foo|bar|baz)/*.js'] console.log(braces.expand('a/{foo,bar,baz}/*.js')); //=> ['a/foo/*.js', 'a/bar/*.js', 'a/baz/*.js'] Sequences Expand ranges of characters (like Bash \"sequences\"): console.log(braces.expand('{1..3}')); // ['1', '2', '3'] console.log(braces.expand('a/{1..3}/b')); // ['a/1/b', 'a/2/b', 'a/3/b'] console.log(braces('{a..c}', { expand: true })); // ['a', 'b', 'c'] console.log(braces('foo/{a..c}', { expand: true })); // ['foo/a', 'foo/b', 'foo/c'] // supports zero-padded ranges console.log(braces('a/{01..03}/b')); //=> ['a/(0[1-3])/b'] console.log(braces('a/{001..300}/b')); //=> ['a/(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)/b'] See fill-range for all available range-expansion options. Steppped ranges Steps, or increments, may be used with ranges: console.log(braces.expand('{2..10..2}')); //=> ['2', '4', '6', '8', '10'] console.log(braces('{2..10..2}')); //=> ['(2|4|6|8|10)'] When the .optimize method is used, or options.optimize is set to true, sequences are passed to to-regex-range for expansion. Nesting Brace patterns may be nested. The results of each expanded string are not sorted, and left to right order is preserved. \"Expanded\" braces console.log(braces.expand('a{b,c,/{x,y}}/e')); //=> ['ab/e', 'ac/e', 'a/x/e', 'a/y/e'] console.log(braces.expand('a/{x,{1..5},y}/c')); //=> ['a/x/c', 'a/1/c', 'a/2/c', 'a/3/c', 'a/4/c', 'a/5/c', 'a/y/c'] \"Optimized\" braces console.log(braces('a{b,c,/{x,y}}/e')); //=> ['a(b|c|/(x|y))/e'] console.log(braces('a/{x,{1..5},y}/c')); //=> ['a/(x|([1-5])|y)/c'] Escaping Escaping braces A brace pattern will not be expanded or evaluted if either the opening or closing brace is escaped: console.log(braces.expand('a\\\\{d,c,b}e')); //=> ['a{d,c,b}e'] console.log(braces.expand('a{d,c,b\\\\}e')); //=> ['a{d,c,b}e'] Escaping commas Commas inside braces may also be escaped: console.log(braces.expand('a{b\\\\,c}d')); //=> ['a{b,c}d'] console.log(braces.expand('a{d\\\\,c,b}e')); //=> ['ad,ce', 'abe'] Single items Following bash conventions, a brace pattern is also not expanded when it contains a single character: console.log(braces.expand('a{b}c')); //=> ['a{b}c'] Options options.maxLength Type: Number Default: 10,000 Description: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera. console.log(braces('a/{b,c}/d', { maxLength: 3 })); //=> throws an error options.expand Type: Boolean Default: undefined Description: Generate an \"expanded\" brace pattern (alternatively you can use the braces.expand() method, which does the same thing). console.log(braces('a/{b,c}/d', { expand: true })); //=> [ 'a/b/d', 'a/c/d' ] options.nodupes Type: Boolean Default: undefined Description: Remove duplicates from the returned array. options.rangeLimit Type: Number Default: 1000 Description: To prevent malicious patterns from being passed by users, an error is thrown when braces.expand() is used or options.expand is true and the generated range will exceed the rangeLimit. You can customize options.rangeLimit or set it to Inifinity to disable this altogether. Examples // pattern exceeds the \"rangeLimit\", so it's optimized automatically console.log(braces.expand('{1..1000}')); //=> ['([1-9]|[1-9][0-9]{1,2}|1000)'] // pattern does not exceed \"rangeLimit\", so it's NOT optimized console.log(braces.expand('{1..100}')); //=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'] options.transform Type: Function Default: undefined Description: Customize range expansion. Example: Transforming non-numeric values const alpha = braces.expand('x/{a..e}/y', { transform(value, index) { // When non-numeric values are passed, \"value\" is a character code. return 'foo/' + String.fromCharCode(value) + '-' + index; }, }); console.log(alpha); //=> [ 'x/foo/a-0/y', 'x/foo/b-1/y', 'x/foo/c-2/y', 'x/foo/d-3/y', 'x/foo/e-4/y' ] Example: Transforming numeric values const numeric = braces.expand('{1..5}', { transform(value) { // when numeric values are passed, \"value\" is a number return 'foo/' + value * 2; }, }); console.log(numeric); //=> [ 'foo/2', 'foo/4', 'foo/6', 'foo/8', 'foo/10' ] options.quantifiers Type: Boolean Default: undefined Description: In regular expressions, quanitifiers can be used to specify how many times a token can be repeated. For example, a{1,3} will match the letter a one to three times. Unfortunately, regex quantifiers happen to share the same syntax as Bash lists The quantifiers option tells braces to detect when regex quantifiers are defined in the given pattern, and not to try to expand them as lists. Examples const braces = require('braces'); console.log(braces('a/b{1,3}/{x,y,z}')); //=> [ 'a/b(1|3)/(x|y|z)' ] console.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true })); //=> [ 'a/b{1,3}/(x|y|z)' ] console.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true, expand: true })); //=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ] options.keepEscaping Type: Boolean Default: undefined Description: Do not strip backslashes that were used for escaping from the result. What is \"brace expansion\"? Brace expansion is a type of parameter expansion that was made popular by unix shells for generating lists of strings, as well as regex-like matching when used alongside wildcards (globs). In addition to \"expansion\", braces are also used for matching. In other words: brace expansion is for generating new lists brace matching is for filtering existing lists More about brace expansion (click to expand) There are two main types of brace expansion: lists: which are defined using comma-separated values inside curly braces: {a,b,c} sequences: which are defined using a starting value and an ending value, separated by two dots: a{1..3}b. Optionally, a third argument may be passed to define a \"step\" or increment to use: a{1..100..10}b. These are also sometimes referred to as \"ranges\". Here are some example brace patterns to illustrate how they work: Sets {a,b,c} => a b c {a,b,c}{1,2} => a1 a2 b1 b2 c1 c2 Sequences {1..9} => 1 2 3 4 5 6 7 8 9 {4..-4} => 4 3 2 1 0 -1 -2 -3 -4 {1..20..3} => 1 4 7 10 13 16 19 {a..j} => a b c d e f g h i j {j..a} => j i h g f e d c b a {a..z..3} => a d g j m p s v y Combination Sets and sequences can be mixed together or used along with any other strings. {a,b,c}{1..3} => a1 a2 a3 b1 b2 b3 c1 c2 c3 foo/{a,b,c}/bar => foo/a/bar foo/b/bar foo/c/bar The fact that braces can be \"expanded\" from relatively simple patterns makes them ideal for quickly generating test fixtures, file paths, and similar use cases. Brace matching In addition to expansion, brace patterns are also useful for performing regular-expression-like matching. For example, the pattern foo/{1..3}/bar would match any of following strings: foo/1/bar foo/2/bar foo/3/bar But not: baz/1/qux baz/2/qux baz/3/qux Braces can also be combined with glob patterns to perform more advanced wildcard matching. For example, the pattern */{1..3}/* would match any of following strings: foo/1/bar foo/2/bar foo/3/bar baz/1/qux baz/2/qux baz/3/qux Brace matching pitfalls Although brace patterns offer a user-friendly way of matching ranges or sets of strings, there are also some major disadvantages and potential risks you should be aware of. tldr \"brace bombs\" brace expansion can eat up a huge amount of processing resources as brace patterns increase linearly in size, the system resources required to expand the pattern increase exponentially users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!) For a more detailed explanation with examples, see the geometric complexity section. The solution Jump to the performance section to see how Braces solves this problem in comparison to other libraries. Geometric complexity At minimum, brace patterns with sets limited to two elements have quadradic or O(n^2) complexity. But the complexity of the algorithm increases exponentially as the number of sets, and elements per set, increases, which is O(n^c). For example, the following sets demonstrate quadratic (O(n^2)) complexity: {1,2}{3,4} => (2X2) => 13 14 23 24 {1,2}{3,4}{5,6} => (2X2X2) => 135 136 145 146 235 236 245 246 But add an element to a set, and we get a n-fold Cartesian product with O(n^c) complexity: {1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248 249 257 258 259 267 268 269 347 348 349 357 358 359 367 368 369 Now, imagine how this complexity grows given that each element is a n-tuple: {1..100}{1..100} => (100X100) => 10,000 elements (38.4 kB) {1..100}{1..100}{1..100} => (100X100X100) => 1,000,000 elements (5.76 MB) Although these examples are clearly contrived, they demonstrate how brace patterns can quickly grow out of control. More information Interested in learning more about brace expansion? linuxjournal/bash-brace-expansion rosettacode/Brace_expansion cartesian product Performance Braces is not only screaming fast, it's also more accurate the other brace expansion libraries. Better algorithms Fortunately there is a solution to the \"brace bomb\" problem: don't expand brace patterns into an array when they're used for matching. Instead, convert the pattern into an optimized regular expression. This is easier said than done, and braces is the only library that does this currently. The proof is in the numbers Minimatch gets exponentially slower as patterns increase in complexity, braces does not. The following results were generated using braces() and minimatch.braceExpand(), respectively. Pattern braces [minimatch][] {1..9007199254740991}[^1] 298 B (5ms 459μs) N/A (freezes) {1..1000000000000000} 41 B (1ms 15μs) N/A (freezes) {1..100000000000000} 40 B (890μs) N/A (freezes) {1..10000000000000} 39 B (2ms 49μs) N/A (freezes) {1..1000000000000} 38 B (608μs) N/A (freezes) {1..100000000000} 37 B (397μs) N/A (freezes) {1..10000000000} 35 B (983μs) N/A (freezes) {1..1000000000} 34 B (798μs) N/A (freezes) {1..100000000} 33 B (733μs) N/A (freezes) {1..10000000} 32 B (5ms 632μs) 78.89 MB (16s 388ms 569μs) {1..1000000} 31 B (1ms 381μs) 6.89 MB (1s 496ms 887μs) {1..100000} 30 B (950μs) 588.89 kB (146ms 921μs) {1..10000} 29 B (1ms 114μs) 48.89 kB (14ms 187μs) {1..1000} 28 B (760μs) 3.89 kB (1ms 453μs) {1..100} 22 B (345μs) 291 B (196μs) {1..10} 10 B (533μs) 20 B (37μs) {1..3} 7 B (190μs) 5 B (27μs) Faster algorithms When you need expansion, braces is still much faster. (the following results were generated using braces.expand() and minimatch.braceExpand(), respectively) Pattern braces [minimatch][] {1..10000000} 78.89 MB (2s 698ms 642μs) 78.89 MB (18s 601ms 974μs) {1..1000000} 6.89 MB (458ms 576μs) 6.89 MB (1s 491ms 621μs) {1..100000} 588.89 kB (20ms 728μs) 588.89 kB (156ms 919μs) {1..10000} 48.89 kB (2ms 202μs) 48.89 kB (13ms 641μs) {1..1000} 3.89 kB (1ms 796μs) 3.89 kB (1ms 958μs) {1..100} 291 B (424μs) 291 B (211μs) {1..10} 20 B (487μs) 20 B (72μs) {1..3} 5 B (166μs) 5 B (27μs) If you'd like to run these comparisons yourself, see test/support/generate.js. Benchmarks Running benchmarks Install dev dependencies: npm i -d && npm benchmark Latest results Braces is more accurate, without sacrificing performance. ● expand - range (expanded) braces x 53,167 ops/sec ±0.12% (102 runs sampled) minimatch x 11,378 ops/sec ±0.10% (102 runs sampled) ● expand - range (optimized for regex) braces x 373,442 ops/sec ±0.04% (100 runs sampled) minimatch x 3,262 ops/sec ±0.18% (100 runs sampled) ● expand - nested ranges (expanded) braces x 33,921 ops/sec ±0.09% (99 runs sampled) minimatch x 10,855 ops/sec ±0.28% (100 runs sampled) ● expand - nested ranges (optimized for regex) braces x 287,479 ops/sec ±0.52% (98 runs sampled) minimatch x 3,219 ops/sec ±0.28% (101 runs sampled) ● expand - set (expanded) braces x 238,243 ops/sec ±0.19% (97 runs sampled) minimatch x 538,268 ops/sec ±0.31% (96 runs sampled) ● expand - set (optimized for regex) braces x 321,844 ops/sec ±0.10% (97 runs sampled) minimatch x 140,600 ops/sec ±0.15% (100 runs sampled) ● expand - nested sets (expanded) braces x 165,371 ops/sec ±0.42% (96 runs sampled) minimatch x 337,720 ops/sec ±0.28% (100 runs sampled) ● expand - nested sets (optimized for regex) braces x 242,948 ops/sec ±0.12% (99 runs sampled) minimatch x 87,403 ops/sec ±0.79% (96 runs sampled) About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Contributors Commits Contributor 197 jonschlinkert 4 doowb 1 es128 1 eush77 1 hemanth 1 wtgtybhertgeghgtwtg Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on April 08, 2019."
  },
  "Examiner-UI/node_modules/call-bind-apply-helpers/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/call-bind-apply-helpers/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.0.2 - 2025-02-12 Commits [types] improve inferred types e6f9586 [Dev Deps] update @arethetypeswrong/cli, @ljharb/tsconfig, @types/tape, es-value-fixtures, for-each, has-strict-mode, object-inspect e43d540 v1.0.1 - 2024-12-08 Commits [types] reflectApply: fix types 4efc396 [Fix] reflectApply: oops, Reflect is not a function 83cc739 [Dev Deps] update @arethetypeswrong/cli 80bd5d3 v1.0.0 - 2024-12-05 Commits Initial implementation, tests, readme 7879629 Initial commit 3f1dc16 npm init 081df04 Only apps should have lockfiles 5b9ca0f"
  },
  "Examiner-UI/node_modules/call-bind-apply-helpers/README.html": {
    "href": "Examiner-UI/node_modules/call-bind-apply-helpers/README.html",
    "title": "call-bind-apply-helpers | Examiner",
    "summary": "call-bind-apply-helpers Helper functions around Function call/apply/bind, for use in call-bind. The only packages that should likely ever use this package directly are call-bind and get-intrinsic. Please use call-bind unless you have a very good reason not to. Getting started npm install --save call-bind-apply-helpers Usage/Examples const assert = require('assert'); const callBindBasic = require('call-bind-apply-helpers'); function f(a, b) { assert.equal(this, 1); assert.equal(a, 2); assert.equal(b, 3); assert.equal(arguments.length, 2); } const fBound = callBindBasic([f, 1]); delete Function.prototype.call; delete Function.prototype.bind; fBound(2, 3); Tests Clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/callsites/readme.html": {
    "href": "Examiner-UI/node_modules/callsites/readme.html",
    "title": "callsites | Examiner",
    "summary": "callsites Get callsites from the V8 stack trace API Install $ npm install callsites Usage const callsites = require('callsites'); function unicorn() { console.log(callsites()[0].getFileName()); //=> '/Users/sindresorhus/dev/callsites/test.js' } unicorn(); API Returns an array of callsite objects with the following methods: getThis: returns the value of this. getTypeName: returns the type of this as a string. This is the name of the function stored in the constructor field of this, if available, otherwise the object's [[Class]] internal property. getFunction: returns the current function. getFunctionName: returns the name of the current function, typically its name property. If a name property is not available an attempt will be made to try to infer a name from the function's context. getMethodName: returns the name of the property of this or one of its prototypes that holds the current function. getFileName: if this function was defined in a script returns the name of the script. getLineNumber: if this function was defined in a script returns the current line number. getColumnNumber: if this function was defined in a script returns the current column number getEvalOrigin: if this function was created using a call to eval returns a string representing the location where eval was called. isToplevel: is this a top-level invocation, that is, is this the global object? isEval: does this call take place in code defined by a call to eval? isNative: is this call in native V8 code? isConstructor: is this a constructor call? License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/chalk/readme.html": {
    "href": "Examiner-UI/node_modules/chalk/readme.html",
    "title": "| Examiner",
    "summary": "Terminal string styling done right Sindre Sorhus' open source work is supported by the community on GitHub Sponsors and Dev Special thanks to: All your environment variables, in one place Stop struggling with scattered API keys, hacking together home-brewed tools, and avoiding access controls. Keep your team and servers in sync with Doppler. Highlights Expressive API Highly performant Ability to nest styles 256/Truecolor color support Auto-detects color support Doesn't extend String.prototype Clean and focused Actively maintained Used by ~50,000 packages as of January 1, 2020 Install $ npm install chalk Usage const chalk = require('chalk'); console.log(chalk.blue('Hello world!')); Chalk comes with an easy to use composable API where you just chain and nest the styles you want. const chalk = require('chalk'); const log = console.log; // Combine styled and normal strings log(chalk.blue('Hello') + ' World' + chalk.red('!')); // Compose multiple styles using the chainable API log(chalk.blue.bgRed.bold('Hello world!')); // Pass in multiple arguments log(chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz')); // Nest styles log(chalk.red('Hello', chalk.underline.bgBlue('world') + '!')); // Nest styles of the same type even (color, underline, background) log(chalk.green( 'I am a green line ' + chalk.blue.underline.bold('with a blue substring') + ' that becomes green again!' )); // ES2015 template literal log(` CPU: ${chalk.red('90%')} RAM: ${chalk.green('40%')} DISK: ${chalk.yellow('70%')} `); // ES2015 tagged template literal log(chalk` CPU: {red ${cpu.totalPercent}%} RAM: {green ${ram.used / ram.total * 100}%} DISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%} `); // Use RGB colors in terminal emulators that support it. log(chalk.keyword('orange')('Yay for orange colored text!')); log(chalk.rgb(123, 45, 67).underline('Underlined reddish color')); log(chalk.hex('#DEADED').bold('Bold gray!')); Easily define your own themes: const chalk = require('chalk'); const error = chalk.bold.red; const warning = chalk.keyword('orange'); console.log(error('Error!')); console.log(warning('Warning!')); Take advantage of console.log string substitution: const name = 'Sindre'; console.log(chalk.green('Hello %s'), name); //=> 'Hello Sindre' API chalk.<style>[.<style>...](string, [string...]) Example: chalk.red.bold.underline('Hello', 'world'); Chain styles and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that chalk.red.yellow.green is equivalent to chalk.green. Multiple arguments will be separated by space. chalk.level Specifies the level of color support. Color support is automatically detected, but you can override it by setting the level property. You should however only do this in your own code as it applies globally to all Chalk consumers. If you need to change this in a reusable module, create a new instance: const ctx = new chalk.Instance({level: 0}); Level Description 0 All colors disabled 1 Basic color support (16 colors) 2 256 color support 3 Truecolor support (16 million colors) chalk.supportsColor Detect whether the terminal supports color. Used internally and handled for you, but exposed for convenience. Can be overridden by the user with the flags --color and --no-color. For situations where using --color is not possible, use the environment variable FORCE_COLOR=1 (level 1), FORCE_COLOR=2 (level 2), or FORCE_COLOR=3 (level 3) to forcefully enable color, or FORCE_COLOR=0 to forcefully disable. The use of FORCE_COLOR overrides all other color support checks. Explicit 256/Truecolor mode can be enabled using the --color=256 and --color=16m flags, respectively. chalk.stderr and chalk.stderr.supportsColor chalk.stderr contains a separate instance configured with color support detected for stderr stream instead of stdout. Override rules from chalk.supportsColor apply to this too. chalk.stderr.supportsColor is exposed for convenience. Styles Modifiers reset - Resets the current color chain. bold - Make text bold. dim - Emitting only a small amount of light. italic - Make text italic. (Not widely supported) underline - Make text underline. (Not widely supported) inverse- Inverse background and foreground colors. hidden - Prints the text, but makes it invisible. strikethrough - Puts a horizontal line through the center of the text. (Not widely supported) visible- Prints the text only when Chalk has a color level > 0. Can be useful for things that are purely cosmetic. Colors black red green yellow blue magenta cyan white blackBright (alias: gray, grey) redBright greenBright yellowBright blueBright magentaBright cyanBright whiteBright Background colors bgBlack bgRed bgGreen bgYellow bgBlue bgMagenta bgCyan bgWhite bgBlackBright (alias: bgGray, bgGrey) bgRedBright bgGreenBright bgYellowBright bgBlueBright bgMagentaBright bgCyanBright bgWhiteBright Tagged template literal Chalk can be used as a tagged template literal. const chalk = require('chalk'); const miles = 18; const calculateFeet = miles => miles * 5280; console.log(chalk` There are {bold 5280 feet} in a mile. In {bold ${miles} miles}, there are {green.bold ${calculateFeet(miles)} feet}. `); Blocks are delimited by an opening curly brace ({), a style, some content, and a closing curly brace (}). Template styles are chained exactly like normal Chalk styles. The following three statements are equivalent: console.log(chalk.bold.rgb(10, 100, 200)('Hello!')); console.log(chalk.bold.rgb(10, 100, 200)`Hello!`); console.log(chalk`{bold.rgb(10,100,200) Hello!}`); Note that function styles (rgb(), hsl(), keyword(), etc.) may not contain spaces between parameters. All interpolated values (chalk`${foo}`) are converted to strings via the .toString() method. All curly braces ({ and }) in interpolated value strings are escaped. 256 and Truecolor color support Chalk supports 256 colors and Truecolor (16 million colors) on supported terminal apps. Colors are downsampled from 16 million RGB values to an ANSI color format that is supported by the terminal emulator (or by specifying {level: n} as a Chalk option). For example, Chalk configured to run at level 1 (basic color support) will downsample an RGB value of #FF0000 (red) to 31 (ANSI escape for red). Examples: chalk.hex('#DEADED').underline('Hello, world!') chalk.keyword('orange')('Some orange text') chalk.rgb(15, 100, 204).inverse('Hello!') Background versions of these models are prefixed with bg and the first level of the module capitalized (e.g. keyword for foreground colors and bgKeyword for background colors). chalk.bgHex('#DEADED').underline('Hello, world!') chalk.bgKeyword('orange')('Some orange text') chalk.bgRgb(15, 100, 204).inverse('Hello!') The following color models can be used: rgb - Example: chalk.rgb(255, 136, 0).bold('Orange!') hex - Example: chalk.hex('#FF8800').bold('Orange!') keyword (CSS keywords) - Example: chalk.keyword('orange').bold('Orange!') hsl - Example: chalk.hsl(32, 100, 50).bold('Orange!') hsv - Example: chalk.hsv(32, 100, 100).bold('Orange!') hwb - Example: chalk.hwb(32, 0, 50).bold('Orange!') ansi - Example: chalk.ansi(31).bgAnsi(93)('red on yellowBright') ansi256 - Example: chalk.bgAnsi256(194)('Honeydew, more or less') Windows If you're on Windows, do yourself a favor and use Windows Terminal instead of cmd.exe. Origin story colors.js used to be the most popular string styling module, but it has serious deficiencies like extending String.prototype which causes all kinds of problems and the package is unmaintained. Although there are other packages, they either do too much or not enough. Chalk is a clean and focused alternative. chalk for enterprise Available as part of the Tidelift Subscription. The maintainers of chalk and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more. Related chalk-cli - CLI for this module ansi-styles - ANSI escape codes for styling strings in the terminal supports-color - Detect whether a terminal supports color strip-ansi - Strip ANSI escape codes strip-ansi-stream - Strip ANSI escape codes from a stream has-ansi - Check if a string has ANSI escape codes ansi-regex - Regular expression for matching ANSI escape codes wrap-ansi - Wordwrap a string with ANSI escape codes slice-ansi - Slice a string with ANSI escape codes color-convert - Converts colors between different models chalk-animation - Animate strings in the terminal gradient-string - Apply color gradients to strings chalk-pipe - Create chalk style schemes with simpler style strings terminal-link - Create clickable links in the terminal Maintainers Sindre Sorhus Josh Junon"
  },
  "Examiner-UI/node_modules/color-convert/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/color-convert/CHANGELOG.html",
    "title": "1.0.0 - 2016-01-07 | Examiner",
    "summary": "1.0.0 - 2016-01-07 Removed: unused speed test Added: Automatic routing between previously unsupported conversions (#27) Removed: xxx2xxx() and xxx2xxxRaw() functions (#27) Removed: convert() class (#27) Changed: all functions to lookup dictionary (#27) Changed: ansi to ansi256 (#27) Fixed: argument grouping for functions requiring only one argument (#27) 0.6.0 - 2015-07-23 Added: methods to handle ANSI 16/256 colors: rgb2ansi16 rgb2ansi hsl2ansi16 hsl2ansi hsv2ansi16 hsv2ansi hwb2ansi16 hwb2ansi cmyk2ansi16 cmyk2ansi keyword2ansi16 keyword2ansi ansi162rgb ansi162hsl ansi162hsv ansi162hwb ansi162cmyk ansi162keyword ansi2rgb ansi2hsl ansi2hsv ansi2hwb ansi2cmyk ansi2keyword (#18) 0.5.3 - 2015-06-02 Fixed: hsl2hsv does not return NaN anymore when using [0,0,0] (#15) Check out commit logs for older releases"
  },
  "Examiner-UI/node_modules/color-convert/README.html": {
    "href": "Examiner-UI/node_modules/color-convert/README.html",
    "title": "color-convert | Examiner",
    "summary": "color-convert Color-convert is a color conversion library for JavaScript and node. It converts all ways between rgb, hsl, hsv, hwb, cmyk, ansi, ansi16, hex strings, and CSS keywords (will round to closest): var convert = require('color-convert'); convert.rgb.hsl(140, 200, 100); // [96, 48, 59] convert.keyword.rgb('blue'); // [0, 0, 255] var rgbChannels = convert.rgb.channels; // 3 var cmykChannels = convert.cmyk.channels; // 4 var ansiChannels = convert.ansi16.channels; // 1 Install $ npm install color-convert API Simply get the property of the from and to conversion that you're looking for. All functions have a rounded and unrounded variant. By default, return values are rounded. To get the unrounded (raw) results, simply tack on .raw to the function. All 'from' functions have a hidden property called .channels that indicates the number of channels the function expects (not including alpha). var convert = require('color-convert'); // Hex to LAB convert.hex.lab('DEADBF'); // [ 76, 21, -2 ] convert.hex.lab.raw('DEADBF'); // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ] // RGB to CMYK convert.rgb.cmyk(167, 255, 4); // [ 35, 0, 98, 0 ] convert.rgb.cmyk.raw(167, 255, 4); // [ 34.509803921568626, 0, 98.43137254901961, 0 ] Arrays All functions that accept multiple arguments also support passing an array. Note that this does not apply to functions that convert from a color that only requires one value (e.g. keyword, ansi256, hex, etc.) var convert = require('color-convert'); convert.rgb.hex(123, 45, 67); // '7B2D43' convert.rgb.hex([123, 45, 67]); // '7B2D43' Routing Conversions that don't have an explicitly defined conversion (in conversions.js), but can be converted by means of sub-conversions (e.g. XYZ -> RGB -> CMYK), are automatically routed together. This allows just about any color model supported by color-convert to be converted to any other model, so long as a sub-conversion path exists. This is also true for conversions requiring more than one step in between (e.g. LCH -> LAB -> XYZ -> RGB -> Hex). Keep in mind that extensive conversions may result in a loss of precision, and exist only to be complete. For a list of \"direct\" (single-step) conversions, see conversions.js. Contribute If there is a new model you would like to support, or want to add a direct conversion between two existing models, please send us a pull request. License Copyright © 2011-2016, Heather Arthur and Josh Junon. Licensed under the MIT License."
  },
  "Examiner-UI/node_modules/color-name/README.html": {
    "href": "Examiner-UI/node_modules/color-name/README.html",
    "title": "| Examiner",
    "summary": "A JSON with color names and its values. Based on http://dev.w3.org/csswg/css-color/#named-colors. var colors = require('color-name'); colors.red //[255,0,0]"
  },
  "Examiner-UI/node_modules/combined-stream/Readme.html": {
    "href": "Examiner-UI/node_modules/combined-stream/Readme.html",
    "title": "combined-stream | Examiner",
    "summary": "combined-stream A stream that emits multiple other streams one after another. NB Currently combined-stream works with streams version 1 only. There is ongoing effort to switch this library to streams version 2. Any help is welcome. :) Meanwhile you can explore other libraries that provide streams2 support with more or less compatibility with combined-stream. combined-stream2: A drop-in streams2-compatible replacement for the combined-stream module. multistream: A stream that emits multiple other streams one after another. Installation npm install combined-stream Usage Here is a simple example that shows how you can use combined-stream to combine two files into one: var CombinedStream = require('combined-stream'); var fs = require('fs'); var combinedStream = CombinedStream.create(); combinedStream.append(fs.createReadStream('file1.txt')); combinedStream.append(fs.createReadStream('file2.txt')); combinedStream.pipe(fs.createWriteStream('combined.txt')); While the example above works great, it will pause all source streams until they are needed. If you don't want that to happen, you can set pauseStreams to false: var CombinedStream = require('combined-stream'); var fs = require('fs'); var combinedStream = CombinedStream.create({pauseStreams: false}); combinedStream.append(fs.createReadStream('file1.txt')); combinedStream.append(fs.createReadStream('file2.txt')); combinedStream.pipe(fs.createWriteStream('combined.txt')); However, what if you don't have all the source streams yet, or you don't want to allocate the resources (file descriptors, memory, etc.) for them right away? Well, in that case you can simply provide a callback that supplies the stream by calling a next() function: var CombinedStream = require('combined-stream'); var fs = require('fs'); var combinedStream = CombinedStream.create(); combinedStream.append(function(next) { next(fs.createReadStream('file1.txt')); }); combinedStream.append(function(next) { next(fs.createReadStream('file2.txt')); }); combinedStream.pipe(fs.createWriteStream('combined.txt')); API CombinedStream.create([options]) Returns a new combined stream object. Available options are: maxDataSize pauseStreams The effect of those options is described below. combinedStream.pauseStreams = true Whether to apply back pressure to the underlaying streams. If set to false, the underlaying streams will never be paused. If set to true, the underlaying streams will be paused right after being appended, as well as when delayedStream.pipe() wants to throttle. combinedStream.maxDataSize = 2 * 1024 * 1024 The maximum amount of bytes (or characters) to buffer for all source streams. If this value is exceeded, combinedStream emits an 'error' event. combinedStream.dataSize = 0 The amount of bytes (or characters) currently buffered by combinedStream. combinedStream.append(stream) Appends the given stream to the combinedStream object. If pauseStreams is set to `true, this stream will also be paused right away. streams can also be a function that takes one parameter called next. next is a function that must be invoked in order to provide the next stream, see example above. Regardless of how the stream is appended, combined-stream always attaches an 'error' listener to it, so you don't have to do that manually. Special case: stream can also be a String or Buffer. combinedStream.write(data) You should not call this, combinedStream takes care of piping the appended streams into itself for you. combinedStream.resume() Causes combinedStream to start drain the streams it manages. The function is idempotent, and also emits a 'resume' event each time which usually goes to the stream that is currently being drained. combinedStream.pause(); If combinedStream.pauseStreams is set to false, this does nothing. Otherwise a 'pause' event is emitted, this goes to the stream that is currently being drained, so you can use it to apply back pressure. combinedStream.end(); Sets combinedStream.writable to false, emits an 'end' event, and removes all streams from the queue. combinedStream.destroy(); Same as combinedStream.end(), except it emits a 'close' event instead of 'end'. License combined-stream is licensed under the MIT license."
  },
  "Examiner-UI/node_modules/cookie/README.html": {
    "href": "Examiner-UI/node_modules/cookie/README.html",
    "title": "cookie | Examiner",
    "summary": "cookie Basic HTTP cookie parser and serializer for HTTP servers. Installation $ npm install cookie API const cookie = require(\"cookie\"); // import * as cookie from 'cookie'; cookie.parse(str, options) Parse a HTTP Cookie header string and returning an object of all cookie name-value pairs. The str argument is the string representing a Cookie header value and options is an optional object containing additional parsing options. const cookies = cookie.parse(\"foo=bar; equation=E%3Dmc%5E2\"); // { foo: 'bar', equation: 'E=mc^2' } Options cookie.parse accepts these properties in the options object. decode Specifies a function that will be used to decode a cookie-value. Since the value of a cookie has a limited character set (and must be a simple string), this function can be used to decode a previously-encoded cookie value into a JavaScript string. The default function is the global decodeURIComponent, wrapped in a try..catch. If an error is thrown it will return the cookie's original value. If you provide your own encode/decode scheme you must ensure errors are appropriately handled. cookie.serialize(name, value, options) Serialize a cookie name-value pair into a Set-Cookie header string. The name argument is the name for the cookie, the value argument is the value to set the cookie to, and the options argument is an optional object containing additional serialization options. const setCookie = cookie.serialize(\"foo\", \"bar\"); // foo=bar Options cookie.serialize accepts these properties in the options object. encode Specifies a function that will be used to encode a cookie-value. Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode a value into a string suited for a cookie's value, and should mirror decode when parsing. The default function is the global encodeURIComponent. maxAge Specifies the number (in seconds) to be the value for the Max-Age Set-Cookie attribute. The cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. expires Specifies the Date object to be the value for the Expires Set-Cookie attribute. When no expiration is set clients consider this a \"non-persistent cookie\" and delete it the current session is over. The cookie storage model specification states that if both expires and maxAge are set, then maxAge takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time. domain Specifies the value for the Domain Set-Cookie attribute. When no domain is set clients consider the cookie to apply to the current domain only. path Specifies the value for the Path Set-Cookie attribute. When no path is set, the path is considered the \"default path\". httpOnly Enables the HttpOnly Set-Cookie attribute. When enabled, clients will not allow client-side JavaScript to see the cookie in document.cookie. secure Enables the Secure Set-Cookie attribute. When enabled, clients will only send the cookie back if the browser has a HTTPS connection. partitioned Enables the Partitioned Set-Cookie attribute. When enabled, clients will only send the cookie back when the current domain and top-level domain matches. This is an attribute that has not yet been fully standardized, and may change in the future. This also means clients may ignore this attribute until they understand it. More information about can be found in the proposal. priority Specifies the value for the Priority Set-Cookie attribute. 'low' will set the Priority attribute to Low. 'medium' will set the Priority attribute to Medium, the default priority when not set. 'high' will set the Priority attribute to High. More information about priority levels can be found in the specification. sameSite Specifies the value for the SameSite Set-Cookie attribute. true will set the SameSite attribute to Strict for strict same site enforcement. 'lax' will set the SameSite attribute to Lax for lax same site enforcement. 'none' will set the SameSite attribute to None for an explicit cross-site cookie. 'strict' will set the SameSite attribute to Strict for strict same site enforcement. More information about enforcement levels can be found in the specification. Example The following example uses this module in conjunction with the Node.js core HTTP server to prompt a user for their name and display it back on future visits. var cookie = require(\"cookie\"); var escapeHtml = require(\"escape-html\"); var http = require(\"http\"); var url = require(\"url\"); function onRequest(req, res) { // Parse the query string var query = url.parse(req.url, true, true).query; if (query && query.name) { // Set a new cookie with the name res.setHeader( \"Set-Cookie\", cookie.serialize(\"name\", String(query.name), { httpOnly: true, maxAge: 60 * 60 * 24 * 7, // 1 week }), ); // Redirect back after setting cookie res.statusCode = 302; res.setHeader(\"Location\", req.headers.referer || \"/\"); res.end(); return; } // Parse the cookies on the request var cookies = cookie.parse(req.headers.cookie || \"\"); // Get the visitor name set in the cookie var name = cookies.name; res.setHeader(\"Content-Type\", \"text/html; charset=UTF-8\"); if (name) { res.write(\"<p>Welcome back, <b>\" + escapeHtml(name) + \"</b>!</p>\"); } else { res.write(\"<p>Hello, new visitor!</p>\"); } res.write('<form method=\"GET\">'); res.write( '<input placeholder=\"enter your name\" name=\"name\"> <input type=\"submit\" value=\"Set Name\">', ); res.end(\"</form>\"); } http.createServer(onRequest).listen(3000); Testing npm test Benchmark npm run bench name hz min max mean p75 p99 p995 p999 rme samples · simple 8,566,313.09 0.0000 0.3694 0.0001 0.0001 0.0002 0.0002 0.0003 ±0.64% 4283157 fastest · decode 3,834,348.85 0.0001 0.2465 0.0003 0.0003 0.0003 0.0004 0.0006 ±0.38% 1917175 · unquote 8,315,355.96 0.0000 0.3824 0.0001 0.0001 0.0002 0.0002 0.0003 ±0.72% 4157880 · duplicates 1,944,765.97 0.0004 0.2959 0.0005 0.0005 0.0006 0.0006 0.0008 ±0.24% 972384 · 10 cookies 675,345.67 0.0012 0.4328 0.0015 0.0015 0.0019 0.0020 0.0058 ±0.75% 337673 · 100 cookies 61,040.71 0.0152 0.4092 0.0164 0.0160 0.0196 0.0228 0.2260 ±0.71% 30521 slowest ✓ parse top-sites (15) 22945ms name hz min max mean p75 p99 p995 p999 rme samples · parse accounts.google.com 7,164,349.17 0.0000 0.0929 0.0001 0.0002 0.0002 0.0002 0.0003 ±0.09% 3582184 · parse apple.com 7,817,686.84 0.0000 0.6048 0.0001 0.0001 0.0002 0.0002 0.0003 ±1.05% 3908844 · parse cloudflare.com 7,189,841.70 0.0000 0.0390 0.0001 0.0002 0.0002 0.0002 0.0003 ±0.06% 3594921 · parse docs.google.com 7,051,765.61 0.0000 0.0296 0.0001 0.0002 0.0002 0.0002 0.0003 ±0.06% 3525883 · parse drive.google.com 7,349,104.77 0.0000 0.0368 0.0001 0.0001 0.0002 0.0002 0.0003 ±0.05% 3674553 · parse en.wikipedia.org 1,929,909.49 0.0004 0.3598 0.0005 0.0005 0.0007 0.0007 0.0012 ±0.16% 964955 · parse linkedin.com 2,225,658.01 0.0003 0.0595 0.0004 0.0005 0.0005 0.0005 0.0006 ±0.06% 1112830 · parse maps.google.com 4,423,511.68 0.0001 0.0942 0.0002 0.0003 0.0003 0.0003 0.0005 ±0.08% 2211756 · parse microsoft.com 3,387,601.88 0.0002 0.0725 0.0003 0.0003 0.0004 0.0004 0.0005 ±0.09% 1693801 · parse play.google.com 7,375,980.86 0.0000 0.1994 0.0001 0.0001 0.0002 0.0002 0.0003 ±0.12% 3687991 · parse support.google.com 4,912,267.94 0.0001 2.8958 0.0002 0.0002 0.0003 0.0003 0.0005 ±1.28% 2456134 · parse www.google.com 3,443,035.87 0.0002 0.2783 0.0003 0.0003 0.0004 0.0004 0.0007 ±0.51% 1721518 · parse youtu.be 1,910,492.87 0.0004 0.3490 0.0005 0.0005 0.0007 0.0007 0.0011 ±0.46% 955247 · parse youtube.com 1,895,082.62 0.0004 0.7454 0.0005 0.0005 0.0006 0.0007 0.0013 ±0.64% 947542 slowest · parse example.com 21,582,835.27 0.0000 0.1095 0.0000 0.0000 0.0001 0.0001 0.0001 ±0.13% 10791418 References RFC 6265: HTTP State Management Mechanism Same-site Cookies License MIT"
  },
  "Examiner-UI/node_modules/cross-spawn/README.html": {
    "href": "Examiner-UI/node_modules/cross-spawn/README.html",
    "title": "cross-spawn | Examiner",
    "summary": "cross-spawn A cross platform solution to node's spawn and spawnSync. Installation Node.js version 8 and up: $ npm install cross-spawn Node.js version 7 and under: $ npm install cross-spawn@6 Why Node has issues when using spawn on Windows: It ignores PATHEXT It does not support shebangs Has problems running commands with spaces Has problems running commands with posix relative paths (e.g.: ./my-folder/my-executable) Has an issue with command shims (files in node_modules/.bin/), where arguments with quotes and parenthesis would result in invalid syntax error No options.shell support on node <v4.8 All these issues are handled correctly by cross-spawn. There are some known modules, such as win-spawn, that try to solve this but they are either broken or provide faulty escaping of shell arguments. Usage Exactly the same way as node's spawn or spawnSync, so it's a drop in replacement. const spawn = require('cross-spawn'); // Spawn NPM asynchronously const child = spawn('npm', ['list', '-g', '-depth', '0'], { stdio: 'inherit' }); // Spawn NPM synchronously const result = spawn.sync('npm', ['list', '-g', '-depth', '0'], { stdio: 'inherit' }); Caveats Using options.shell as an alternative to cross-spawn Starting from node v4.8, spawn has a shell option that allows you run commands from within a shell. This new option solves the PATHEXT issue but: It's not supported in node <v4.8 You must manually escape the command and arguments which is very error prone, specially when passing user input There are a lot of other unresolved issues from the Why section that you must take into account If you are using the shell option to spawn a command in a cross platform way, consider using cross-spawn instead. You have been warned. options.shell support While cross-spawn adds support for options.shell in node <v4.8, all of its enhancements are disabled. This mimics the Node.js behavior. More specifically, the command and its arguments will not be automatically escaped nor shebang support will be offered. This is by design because if you are using options.shell you are probably targeting a specific platform anyway and you don't want things to get into your way. Shebangs support While cross-spawn handles shebangs on Windows, its support is limited. More specifically, it just supports #!/usr/bin/env <program> where <program> must not contain any arguments. If you would like to have the shebang support improved, feel free to contribute via a pull-request. Remember to always test your code on Windows! Tests $ npm test $ npm test -- --watch during development License Released under the MIT License."
  },
  "Examiner-UI/node_modules/csstype/README.html": {
    "href": "Examiner-UI/node_modules/csstype/README.html",
    "title": "CSSType | Examiner",
    "summary": "CSSType TypeScript and Flow definitions for CSS, generated by data from MDN. It provides autocompletion and type checking for CSS properties and values. TypeScript import type * as CSS from 'csstype'; const style: CSS.Properties = { colour: 'white', // Type error on property textAlign: 'middle', // Type error on value }; Flow // @flow strict import * as CSS from 'csstype'; const style: CSS.Properties<> = { colour: 'white', // Type error on property textAlign: 'middle', // Type error on value }; Further examples below will be in TypeScript! Getting started $ npm install csstype Table of content Style types At-rule types Pseudo types Generics Usage What should I do when I get type errors? Version 3.0 Contributing Style types Properties are categorized in different uses and in several technical variations to provide typings that suits as many as possible. Default Hyphen Fallback HyphenFallback All Properties PropertiesHyphen PropertiesFallback PropertiesHyphenFallback Standard StandardProperties StandardPropertiesHyphen StandardPropertiesFallback StandardPropertiesHyphenFallback Vendor VendorProperties VendorPropertiesHyphen VendorPropertiesFallback VendorPropertiesHyphenFallback Obsolete ObsoleteProperties ObsoletePropertiesHyphen ObsoletePropertiesFallback ObsoletePropertiesHyphenFallback Svg SvgProperties SvgPropertiesHyphen SvgPropertiesFallback SvgPropertiesHyphenFallback Categories: All - Includes Standard, Vendor, Obsolete and Svg Standard - Current properties and extends subcategories StandardLonghand and StandardShorthand (e.g. StandardShorthandProperties) Vendor - Vendor prefixed properties and extends subcategories VendorLonghand and VendorShorthand (e.g. VendorShorthandProperties) Obsolete - Removed or deprecated properties Svg - SVG-specific properties Variations: Default - JavaScript (camel) cased property names Hyphen - CSS (kebab) cased property names Fallback - Also accepts array of values e.g. string | string[] At-rule types At-rule interfaces with descriptors. TypeScript: These will be found in the AtRule namespace, e.g. AtRule.Viewport. Flow: These will be prefixed with AtRule$, e.g. AtRule$Viewport. Default Hyphen Fallback HyphenFallback @counter-style CounterStyle CounterStyleHyphen CounterStyleFallback CounterStyleHyphenFallback @font-face FontFace FontFaceHyphen FontFaceFallback FontFaceHyphenFallback @viewport Viewport ViewportHyphen ViewportFallback ViewportHyphenFallback Pseudo types String literals of pseudo classes and pseudo elements Pseudos Extends: AdvancedPseudos Function-like pseudos e.g. :not(:first-child). The string literal contains the value excluding the parenthesis: :not. These are separated because they require an argument that results in infinite number of variations. SimplePseudos Plain pseudos e.g. :hover that can only be one variation. Generics All interfaces has two optional generic argument to define length and time: CSS.Properties<TLength = string | 0, TTime = string> Length is the first generic parameter and defaults to string | 0 because 0 is the only length where the unit identifier is optional. You can specify this, e.g. string | number, for platforms and libraries that accepts any numeric value as length with a specific unit. const style: CSS.Properties<string | number> = { width: 100, }; Time is the second generic argument and defaults to string. You can specify this, e.g. string | number, for platforms and libraries that accepts any numeric value as length with a specific unit. const style: CSS.Properties<string | number, number> = { transitionDuration: 1000, }; Usage import type * as CSS from 'csstype'; const style: CSS.Properties = { width: '10px', margin: '1em', }; In some cases, like for CSS-in-JS libraries, an array of values is a way to provide fallback values in CSS. Using CSS.PropertiesFallback instead of CSS.Properties will add the possibility to use any property value as an array of values. import type * as CSS from 'csstype'; const style: CSS.PropertiesFallback = { display: ['-webkit-flex', 'flex'], color: 'white', }; There's even string literals for pseudo selectors and elements. import type * as CSS from 'csstype'; const pseudos: { [P in CSS.SimplePseudos]?: CSS.Properties } = { ':hover': { display: 'flex', }, }; Hyphen cased (kebab cased) properties are provided in CSS.PropertiesHyphen and CSS.PropertiesHyphenFallback. It's not not added by default in CSS.Properties. To allow both of them, you can simply extend with CSS.PropertiesHyphen or/and CSS.PropertiesHyphenFallback. import type * as CSS from 'csstype'; interface Style extends CSS.Properties, CSS.PropertiesHyphen {} const style: Style = { 'flex-grow': 1, 'flex-shrink': 0, 'font-weight': 'normal', backgroundColor: 'white', }; Adding type checked CSS properties to a HTMLElement. import type * as CSS from 'csstype'; const style: CSS.Properties = { color: 'red', margin: '1em', }; let button = document.createElement('button'); Object.assign(button.style, style); What should I do when I get type errors? The goal is to have as perfect types as possible and we're trying to do our best. But with CSS Custom Properties, the CSS specification changing frequently and vendors implementing their own specifications with new releases sometimes causes type errors even if it should work. Here's some steps you could take to get it fixed: If you're using CSS Custom Properties you can step directly to step 3. First of all, make sure you're doing it right. A type error could also indicate that you're not \uD83D\uDE09 Some CSS specs that some vendors has implemented could have been officially rejected or haven't yet received any official acceptance and are therefor not included If you're using TypeScript, type widening could be the reason you get Type 'string' is not assignable to... errors Have a look in issues to see if an issue already has been filed. If not, create a new one. To help us out, please refer to any information you have found. Fix the issue locally with TypeScript (Flow further down): The recommended way is to use module augmentation. Here's a few examples: // My css.d.ts file import type * as CSS from 'csstype'; declare module 'csstype' { interface Properties { // Add a missing property WebkitRocketLauncher?: string; // Add a CSS Custom Property '--theme-color'?: 'black' | 'white'; // Allow namespaced CSS Custom Properties [index: `--theme-${string}`]: any; // Allow any CSS Custom Properties [index: `--${string}`]: any; // ...or allow any other property [index: string]: any; } } The alternative way is to use type assertion. Here's a few examples: const style: CSS.Properties = { // Add a missing property ['WebkitRocketLauncher' as any]: 'launching', // Add a CSS Custom Property ['--theme-color' as any]: 'black', }; Fix the issue locally with Flow: Use type assertion. Here's a few examples: const style: $Exact<CSS.Properties<*>> = { // Add a missing property [('WebkitRocketLauncher': any)]: 'launching', // Add a CSS Custom Property [('--theme-color': any)]: 'black', }; Version 3.0 All property types are exposed with namespace TypeScript: Property.AlignContent (was AlignContentProperty before) Flow: Property$AlignContent All at-rules are exposed with namespace TypeScript: AtRule.FontFace (was FontFace before) Flow: AtRule$FontFace Data types are NOT exposed E.g. Color and Box. Because the generation of data types may suddenly be removed or renamed. TypeScript hack for autocompletion Uses (string & {}) for literal string unions and (number & {}) for literal number unions (related issue). Utilize PropertyValue<T> to unpack types from e.g. (string & {}) to string. New generic for time Read more on the \"Generics\" section. Flow types improvements Flow Strict enabled and exact types are used. Contributing Never modify index.d.ts and index.js.flow directly. They are generated automatically and committed so that we can easily follow any change it results in. Therefor it's important that you run $ git config merge.ours.driver true after you've forked and cloned. That setting prevents merge conflicts when doing rebase. Commands npm run build Generates typings and type checks them npm run watch Runs build on each save npm run test Runs the tests npm run lazy Type checks, lints and formats everything"
  },
  "Examiner-UI/node_modules/debug/README.html": {
    "href": "Examiner-UI/node_modules/debug/README.html",
    "title": "debug | Examiner",
    "summary": "debug A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers. Installation $ npm install debug Usage debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. Example app.js: var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %o', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); Example worker.js: var a = require('debug')('worker:a') , b = require('debug')('worker:b'); function work() { a('doing lots of uninteresting work'); setTimeout(work, Math.random() * 1000); } work(); function workb() { b('doing some work'); setTimeout(workb, Math.random() * 2000); } workb(); The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: Windows command prompt notes CMD On Windows the environment variable is set using the set command. set DEBUG=*,-not_this Example: set DEBUG=* & node app.js PowerShell (VS Code default) PowerShell uses different syntax to set environment variables. $env:DEBUG = \"*,-not_this\" Example: $env:DEBUG='app';node app.js Then, run the program to be debugged as usual. npm script example: \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\", Namespace Colors Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to. Node.js In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors. Web Browser Colors are also enabled on \"Web Inspectors\" that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). Millisecond diff When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below: Conventions If you're using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". If you append a \"*\" to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output. Wildcards The * character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with \"connect:\". Environment Variables When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: Name Purpose DEBUG Enables/disables specific debugging namespaces. DEBUG_HIDE_DATE Hide date from debug output (non-TTY). DEBUG_COLORS Whether or not to use colors in the debug output. DEBUG_DEPTH Object inspection depth. DEBUG_SHOW_HIDDEN Shows hidden properties on inspected objects. Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. Formatters Debug uses printf-style formatting. Below are the officially supported formatters: Formatter Representation %O Pretty-print an Object on multiple lines. %o Pretty-print an Object all on a single line. %s String. %d Number (both integer and float). %j JSON. Replaced with the string '[Circular]' if the argument contains circular references. %% Single percent sign ('%'). This does not consume an argument. Custom formatters You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: const createDebug = require('debug') createDebug.formatters.h = (v) => { return v.toString('hex') } // …elsewhere const debug = createDebug('foo') debug('this is hex: %h', new Buffer('hello world')) // foo this is hex: 68656c6c6f20776f726c6421 +0ms Browser Support You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don't want to build it yourself. Debug's enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: localStorage.debug = 'worker:*' And then refresh the page. a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); In Chromium-based web browsers (e.g. Brave, Chrome, and Electron), the JavaScript console will—by default—only show messages logged by debug if the \"Verbose\" log level is enabled. Output streams By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: Example stdout.js: var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); Extend You can simply extend debugger const log = require('debug')('auth'); //creates new debug instance with extended namespace const logSign = log.extend('sign'); const logLogin = log.extend('login'); log('hello'); // auth hello logSign('hello'); //auth:sign hello logLogin('hello'); //auth:login hello Set dynamically You can also enable debug dynamically by calling the enable() method : let debug = require('debug'); console.log(1, debug.enabled('test')); debug.enable('test'); console.log(2, debug.enabled('test')); debug.disable(); console.log(3, debug.enabled('test')); print : 1 false 2 true 3 false Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. Note that calling enable() completely overrides previously set DEBUG variable : $ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))' => false disable() Will disable all namespaces. The functions returns the namespaces currently enabled (and skipped). This can be useful if you want to disable debugging temporarily without knowing what was enabled to begin with. For example: let debug = require('debug'); debug.enable('foo:*,-foo:bar'); let namespaces = debug.disable(); debug.enable(namespaces); Note: There is no guarantee that the string will be identical to the initial enable string, but semantically they will be identical. Checking whether a debug target is enabled After you've created a debug instance, you can determine whether or not it is enabled by checking the enabled property: const debug = require('debug')('http'); if (debug.enabled) { // do stuff... } You can also manually toggle this property to force the debug instance to be enabled or disabled. Usage in child processes Due to the way debug detects if the output is a TTY or not, colors are not shown in child processes when stderr is piped. A solution is to pass the DEBUG_COLORS=1 environment variable to the child process. For example: worker = fork(WORKER_WRAP_PATH, [workerPath], { stdio: [ /* stdin: */ 0, /* stdout: */ 'pipe', /* stderr: */ 'pipe', 'ipc', ], env: Object.assign({}, process.env, { DEBUG_COLORS: 1 // without this settings, colors won't be shown }), }); worker.stderr.pipe(process.stderr, { end: false }); Authors TJ Holowaychuk Nathan Rajlich Andrew Rhyne Josh Junon Backers Support us with a monthly donation and help us continue our activities. [Become a backer] Sponsors Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] License (The MIT License) Copyright (c) 2014-2017 TJ Holowaychuk <tj@vision-media.ca&gt; Copyright (c) 2018-2021 Josh Junon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/delayed-stream/Readme.html": {
    "href": "Examiner-UI/node_modules/delayed-stream/Readme.html",
    "title": "delayed-stream | Examiner",
    "summary": "delayed-stream Buffers events from a stream until you are ready to handle them. Installation npm install delayed-stream Usage The following example shows how to write a http echo server that delays its response by 1000 ms. var DelayedStream = require('delayed-stream'); var http = require('http'); http.createServer(function(req, res) { var delayed = DelayedStream.create(req); setTimeout(function() { res.writeHead(200); delayed.pipe(res); }, 1000); }); If you are not using Stream#pipe, you can also manually release the buffered events by calling delayedStream.resume(): var delayed = DelayedStream.create(req); setTimeout(function() { // Emit all buffered events and resume underlaying source delayed.resume(); }, 1000); Implementation In order to use this meta stream properly, here are a few things you should know about the implementation. Event Buffering / Proxying All events of the source stream are hijacked by overwriting the source.emit method. Until node implements a catch-all event listener, this is the only way. However, delayed-stream still continues to emit all events it captures on the source, regardless of whether you have released the delayed stream yet or not. Upon creation, delayed-stream captures all source events and stores them in an internal event buffer. Once delayedStream.release() is called, all buffered events are emitted on the delayedStream, and the event buffer is cleared. After that, delayed-stream merely acts as a proxy for the underlaying source. Error handling Error events on source are buffered / proxied just like any other events. However, delayedStream.create attaches a no-op 'error' listener to the source. This way you only have to handle errors on the delayedStream object, rather than in two places. Buffer limits delayed-stream provides a maxDataSize property that can be used to limit the amount of data being buffered. In order to protect you from bad source streams that don't react to source.pause(), this feature is enabled by default. API DelayedStream.create(source, [options]) Returns a new delayedStream. Available options are: pauseStream maxDataSize The description for those properties can be found below. delayedStream.source The source stream managed by this object. This is useful if you are passing your delayedStream around, and you still want to access properties on the source object. delayedStream.pauseStream = true Whether to pause the underlaying source when calling DelayedStream.create(). Modifying this property afterwards has no effect. delayedStream.maxDataSize = 1024 * 1024 The amount of data to buffer before emitting an error. If the underlaying source is emitting Buffer objects, the maxDataSize refers to bytes. If the underlaying source is emitting JavaScript strings, the size refers to characters. If you know what you are doing, you can set this property to Infinity to disable this feature. You can also modify this property during runtime. delayedStream.dataSize = 0 The amount of data buffered so far. delayedStream.readable An ECMA5 getter that returns the value of source.readable. delayedStream.resume() If the delayedStream has not been released so far, delayedStream.release() is called. In either case, source.resume() is called. delayedStream.pause() Calls source.pause(). delayedStream.pipe(dest) Calls delayedStream.resume() and then proxies the arguments to source.pipe. delayedStream.release() Emits and clears all events that have been buffered up so far. This does not resume the underlaying source, use delayedStream.resume() instead. License delayed-stream is licensed under the MIT license."
  },
  "Examiner-UI/node_modules/dunder-proto/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/dunder-proto/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.0.1 - 2024-12-16 Commits [Fix] do not crash when --disable-proto=throw 6c367d9 [Tests] ensure noproto tests only use the current version of dunder-proto b02365b [Dev Deps] update @arethetypeswrong/cli, @types/tape e3c5c3b [Deps] update call-bind-apply-helpers 19f1da0 v1.0.0 - 2024-12-06 Commits Initial implementation, tests, readme, types a5b74b0 Initial commit 73fb5a3 npm init 80152dc Only apps should have lockfiles 03e6660"
  },
  "Examiner-UI/node_modules/dunder-proto/README.html": {
    "href": "Examiner-UI/node_modules/dunder-proto/README.html",
    "title": "dunder-proto | Examiner",
    "summary": "dunder-proto If available, the Object.prototype.__proto__ accessor and mutator, call-bound. Getting started npm install --save dunder-proto Usage/Examples const assert = require('assert'); const getDunder = require('dunder-proto/get'); const setDunder = require('dunder-proto/set'); const obj = {}; assert.equal('toString' in obj, true); assert.equal(getDunder(obj), Object.prototype); setDunder(obj, null); assert.equal('toString' in obj, false); assert.equal(getDunder(obj), null); Tests Clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/es-define-property/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/es-define-property/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.0.1 - 2024-12-06 Commits [types] use shared tsconfig 954a663 [actions] split out node 10-20, and 20+ 3a8e84b [Dev Deps] update @ljharb/eslint-config, @ljharb/tsconfig, @types/get-intrinsic, @types/tape, auto-changelog, gopd, tape 86ae27b [Refactor] avoid using get-intrinsic 02480c0 [Tests] replace aud with npm audit f6093ff [Tests] configure testling 7139e66 [Dev Deps] update tape b901b51 [Tests] fix types in tests 469d269 [Dev Deps] add missing peer dep 733acfb v1.0.0 - 2024-02-12 Commits Initial implementation, tests, readme, types 3e154e1 Initial commit 07d98de npm init c4eb634 Only apps should have lockfiles 7af86ec"
  },
  "Examiner-UI/node_modules/es-define-property/README.html": {
    "href": "Examiner-UI/node_modules/es-define-property/README.html",
    "title": "es-define-property | Examiner",
    "summary": "es-define-property Object.defineProperty, but not IE 8's broken one. Example const assert = require('assert'); const $defineProperty = require('es-define-property'); if ($defineProperty) { assert.equal($defineProperty, Object.defineProperty); } else if (Object.defineProperty) { assert.equal($defineProperty, false, 'this is IE 8'); } else { assert.equal($defineProperty, false, 'this is an ES3 engine'); } Tests Simply clone the repo, npm install, and run npm test Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report."
  },
  "Examiner-UI/node_modules/es-errors/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/es-errors/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.3.0 - 2024-02-05 Commits [New] add EvalError and URIError 1927627 v1.2.1 - 2024-02-04 Commits [Fix] add missing exports entry 5bb5f28 v1.2.0 - 2024-02-04 Commits [New] add ReferenceError 6d8cf5b v1.1.0 - 2024-02-04 Commits [New] add base Error 2983ab6 v1.0.0 - 2024-02-03 Commits Initial implementation, tests, readme, type 8f47631 Initial commit ea5d099 npm init 6f5ebf9 Only apps should have lockfiles e1a0aeb [meta] add sideEffects flag a9c7d46"
  },
  "Examiner-UI/node_modules/es-errors/README.html": {
    "href": "Examiner-UI/node_modules/es-errors/README.html",
    "title": "es-errors | Examiner",
    "summary": "es-errors A simple cache for a few of the JS Error constructors. Example const assert = require('assert'); const Base = require('es-errors'); const Eval = require('es-errors/eval'); const Range = require('es-errors/range'); const Ref = require('es-errors/ref'); const Syntax = require('es-errors/syntax'); const Type = require('es-errors/type'); const URI = require('es-errors/uri'); assert.equal(Base, Error); assert.equal(Eval, EvalError); assert.equal(Range, RangeError); assert.equal(Ref, ReferenceError); assert.equal(Syntax, SyntaxError); assert.equal(Type, TypeError); assert.equal(URI, URIError); Tests Simply clone the repo, npm install, and run npm test Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report."
  },
  "Examiner-UI/node_modules/es-object-atoms/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/es-object-atoms/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.1.1 - 2025-01-14 Commits [types] ToObject: improve types cfe8c8a v1.1.0 - 2025-01-14 Commits [New] add isObject 51e4042 v1.0.1 - 2025-01-13 Commits [Dev Deps] update @ljharb/eslint-config, @ljharb/tsconfig, @types/tape, auto-changelog, tape 38ab9eb [types] improve types 7d1beb8 [Tests] replace aud with npm audit 25863ba [Dev Deps] add missing peer dep c012309 v1.0.0 - 2024-03-16 Commits Initial implementation, tests, readme, types f1499db Initial commit 99eedc7 [meta] rename repo fc851fa npm init b909377 Only apps should have lockfiles 7249edd"
  },
  "Examiner-UI/node_modules/es-object-atoms/README.html": {
    "href": "Examiner-UI/node_modules/es-object-atoms/README.html",
    "title": "es-object-atoms | Examiner",
    "summary": "es-object-atoms ES Object-related atoms: Object, ToObject, RequireObjectCoercible. Example const assert = require('assert'); const $Object = require('es-object-atoms'); const isObject = require('es-object-atoms/isObject'); const ToObject = require('es-object-atoms/ToObject'); const RequireObjectCoercible = require('es-object-atoms/RequireObjectCoercible'); assert.equal($Object, Object); assert.throws(() => ToObject(null), TypeError); assert.throws(() => ToObject(undefined), TypeError); assert.throws(() => RequireObjectCoercible(null), TypeError); assert.throws(() => RequireObjectCoercible(undefined), TypeError); assert.equal(isObject(undefined), false); assert.equal(isObject(null), false); assert.equal(isObject({}), true); assert.equal(isObject([]), true); assert.equal(isObject(function () {}), true); assert.deepEqual(RequireObjectCoercible(true), true); assert.deepEqual(ToObject(true), Object(true)); const obj = {}; assert.equal(RequireObjectCoercible(obj), obj); assert.equal(ToObject(obj), obj); Tests Simply clone the repo, npm install, and run npm test Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report."
  },
  "Examiner-UI/node_modules/es-set-tostringtag/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/es-set-tostringtag/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v2.1.0 - 2025-01-01 Commits [actions] split out node 10-20, and 20+ ede033c [types] use shared config 28ef164 [New] add nonConfigurable option 3bee3f0 [Fix] validate boolean option argument 3c8a609 [Dev Deps] update @arethetypeswrong/cli, @ljharb/eslint-config, @ljharb/tsconfig, @types/get-intrinsic, @types/tape, auto-changelog, tape 501a969 [Tests] add coverage 18af289 [readme] document force option bd446a1 [Tests] use @arethetypeswrong/cli 7c2c2fa [Tests] replace aud with npm audit 9e372d7 [Deps] update get-intrinsic 7df1216 [Deps] update hasown 993a7d2 [Dev Deps] add missing peer dep 148ed8d v2.0.3 - 2024-02-20 Commits add types d538513 [Deps] update get-intrinsic, has-tostringtag, hasown d129b29 [Dev Deps] update aud, npmignore, tape 132ed23 [Tests] fix hasOwn require f89c831 v2.0.2 - 2023-10-20 Commits [Refactor] use hasown instead of has 0cc6c4e [Dev Deps] update @ljharb/eslint-config, aud, tape 70e447c [Deps] update get-intrinsic 826aab7 v2.0.1 - 2023-01-05 Fixed [Fix] move has to prod deps #2 Commits [Dev Deps] update @ljharb/eslint-config b9eecd2 v2.0.0 - 2022-12-21 Commits [Tests] refactor tests 168dcfb [Breaking] do not set toStringTag if it is already set 226ab87 [New] add force option to set even if already set 1abd4ec v1.0.0 - 2022-12-21 Commits Initial implementation, tests, readme a0e1147 Initial commit ffd4aff npm init fffe5bd Only apps should have lockfiles d363871"
  },
  "Examiner-UI/node_modules/es-set-tostringtag/README.html": {
    "href": "Examiner-UI/node_modules/es-set-tostringtag/README.html",
    "title": "es-set-tostringtag | Examiner",
    "summary": "es-set-tostringtag A helper to optimistically set Symbol.toStringTag, when possible. Example Most common usage: var assert = require('assert'); var setToStringTag = require('es-set-tostringtag'); var obj = {}; assert.equal(Object.prototype.toString.call(obj), '[object Object]'); setToStringTag(obj, 'tagged!'); assert.equal(Object.prototype.toString.call(obj), '[object tagged!]'); Options An optional options argument can be provided as the third argument. The available options are: force If the force option is set to true, the toStringTag will be set even if it is already set. nonConfigurable If the nonConfigurable option is set to true, the toStringTag will be defined as non-configurable when possible. Tests Simply clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/esbuild/LICENSE.html": {
    "href": "Examiner-UI/node_modules/esbuild/LICENSE.html",
    "title": "| Examiner",
    "summary": "MIT License Copyright (c) 2020 Evan Wallace Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/esbuild/README.html": {
    "href": "Examiner-UI/node_modules/esbuild/README.html",
    "title": "esbuild | Examiner",
    "summary": "esbuild This is a JavaScript bundler and minifier. See https://github.com/evanw/esbuild and the JavaScript API documentation for details."
  },
  "Examiner-UI/node_modules/escape-string-regexp/readme.html": {
    "href": "Examiner-UI/node_modules/escape-string-regexp/readme.html",
    "title": "escape-string-regexp | Examiner",
    "summary": "escape-string-regexp Escape RegExp special characters Install $ npm install escape-string-regexp Usage const escapeStringRegexp = require('escape-string-regexp'); const escapedString = escapeStringRegexp('How much $ for a \uD83E\uDD84?'); //=> 'How much \\\\$ for a \uD83E\uDD84\\\\?' new RegExp(escapedString); You can also use this to escape a string that is inserted into the middle of a regex, for example, into a character class. Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/eslint-plugin-react-hooks/README.html": {
    "href": "Examiner-UI/node_modules/eslint-plugin-react-hooks/README.html",
    "title": "eslint-plugin-react-hooks | Examiner",
    "summary": "eslint-plugin-react-hooks This ESLint plugin enforces the Rules of Hooks. It is a part of the Hooks API for React. Installation Note: If you're using Create React App, please use react-scripts >= 3 instead of adding it directly. Assuming you already have ESLint installed, run: # npm npm install eslint-plugin-react-hooks --save-dev # yarn yarn add eslint-plugin-react-hooks --dev Legacy Config (.eslintrc) If you are still using ESLint below 9.0.0, please continue to use recommended-legacy. To avoid breaking changes, we still support recommended as well, but note that this will be changed to alias the flat recommended config in v6. { \"extends\": [ // ... \"plugin:react-hooks/recommended-legacy\" ] } Flat Config (eslint.config.js) For ESLint 9.0.0 and above users, add the recommended-latest config. import reactHooks from 'eslint-plugin-react-hooks'; export default [ // ... reactHooks.configs['recommended-latest'], ]; Custom Configuration If you want more fine-grained configuration, you can instead add a snippet like this to your ESLint configuration file: Legacy Config (.eslintrc) { \"plugins\": [ // ... \"react-hooks\" ], \"rules\": { // ... \"react-hooks/rules-of-hooks\": \"error\", \"react-hooks/exhaustive-deps\": \"warn\" } } Flat Config (eslint.config.js) import reactHooks from 'eslint-plugin-react-hooks'; export default [ { files: ['**/*.{js,jsx}'], plugins: { 'react-hooks': reactHooks }, // ... rules: { 'react-hooks/rules-of-hooks': 'error', 'react-hooks/exhaustive-deps': 'warn', } }, ]; Advanced Configuration exhaustive-deps can be configured to validate dependencies of custom Hooks with the additionalHooks option. This option accepts a regex to match the names of custom Hooks that have dependencies. { \"rules\": { // ... \"react-hooks/exhaustive-deps\": [\"warn\", { \"additionalHooks\": \"(useMyCustomHook|useMyOtherCustomHook)\" }] } } We suggest to use this option very sparingly, if at all. Generally saying, we recommend most custom Hooks to not use the dependencies argument, and instead provide a higher-level API that is more focused around a specific use case. Valid and Invalid Examples Please refer to the Rules of Hooks documentation to learn more about this rule. License MIT"
  },
  "Examiner-UI/node_modules/eslint-plugin-react-refresh/README.html": {
    "href": "Examiner-UI/node_modules/eslint-plugin-react-refresh/README.html",
    "title": "eslint-plugin-react-refresh | Examiner",
    "summary": "eslint-plugin-react-refresh Validate that your components can safely be updated with Fast Refresh. Explainer \"Fast Refresh\", also known as \"hot reloading\", is a feature in many modern bundlers. If you update some React component(s) on disk, then the bundler will know to update only the impacted parts of your page -- without a full page reload. eslint-plugin-react-refresh enforces that your components are structured in a way that integrations such as react-refresh expect. Limitations ⚠️ To avoid false positives, by default this plugin is only applied on tsx & jsx files. See Options to run on JS files. ⚠️ The plugin relies on naming conventions (i.e. use PascalCase for components, camelCase for util functions). This is why there are some limitations: export * are not supported and will be reported as an error Anonymous function are not supported (i.e export default function() {}) Class components are not supported All-uppercase function export is considered an error when not using direct named export (ex const CMS = () => <></>; export { CMS }) Installation npm i -D eslint-plugin-react-refresh Usage This plugin provides a single rule, react-refresh/only-export-components. There are multiple ways to enable it. Recommended config import reactRefresh from \"eslint-plugin-react-refresh\"; export default [ /* Main config */ reactRefresh.configs.recommended, ]; Vite config This enables the allowConstantExport option which is supported by Vite React plugins. import reactRefresh from \"eslint-plugin-react-refresh\"; export default [ /* Main config */ reactRefresh.configs.vite, ]; Without config import reactRefresh from \"eslint-plugin-react-refresh\"; export default [ { // in main config for TSX/JSX source files plugins: { \"react-refresh\": reactRefresh, }, rules: { \"react-refresh/only-export-components\": \"error\", }, }, ]; Legacy config { \"plugins\": [\"react-refresh\"], \"rules\": { \"react-refresh/only-export-components\": \"error\" } } Examples These examples are from enabling react-refresh/only-exports-components. Fail export const foo = () => {}; export const Bar = () => <></>; export default function () {} export default compose()(MainComponent) export * from \"./foo\"; const Tab = () => {}; export const tabs = [<Tab />, <Tab />]; const App = () => {}; createRoot(document.getElementById(\"root\")).render(<App />); Pass export default function Foo() { return <></>; } const foo = () => {}; export const Bar = () => <></>; import { App } from \"./App\"; createRoot(document.getElementById(\"root\")).render(<App />); Options These options are all present on react-refresh/only-exports-components. interface Options { allowExportNames?: string[]; allowConstantExport?: boolean; customHOCs?: string[]; checkJS?: boolean; } const defaultOptions: Options = { allowExportNames: [], allowConstantExport: false, customHOCs: [], checkJS: false, }; allowExportNames (v0.4.4) Default: [] If you use a framework that handles HMR of some specific exports, you can use this option to avoid warning for them. Example for Remix: { \"react-refresh/only-export-components\": [ \"error\", { \"allowExportNames\": [\"meta\", \"links\", \"headers\", \"loader\", \"action\"] } ] } allowConstantExport (v0.4.0) Default: false (true in vite config) Don't warn when a constant (string, number, boolean, templateLiteral) is exported aside one or more components. This should be enabled if the fast refresh implementation correctly handles this case (HMR when the constant doesn't change, propagate update to importers when the constant changes.). Vite supports it, PR welcome if you notice other integrations works well. { \"react-refresh/only-export-components\": [ \"error\", { \"allowConstantExport\": true } ] } Enabling this option allows code such as the following: export const CONSTANT = 3; export const Foo = () => <></>; checkJS (v0.3.3) Default: false If you're using JSX inside .js files (which I don't recommend because it forces you to configure every tool you use to switch the parser), you can still use the plugin by enabling this option. To reduce the number of false positive, only files importing react are checked. { \"react-refresh/only-export-components\": [\"error\", { \"checkJS\": true }] } customHOCs (v0.4.15) If you're exporting a component wrapped in a custom HOC, you can use this option to avoid false positives. { \"react-refresh/only-export-components\": [ \"error\", { \"customHOCs\": [\"observer\", \"withAuth\"] } ] }"
  },
  "Examiner-UI/node_modules/eslint-scope/README.html": {
    "href": "Examiner-UI/node_modules/eslint-scope/README.html",
    "title": "ESLint Scope | Examiner",
    "summary": "ESLint Scope ESLint Scope is the ECMAScript scope analyzer used in ESLint. It is a fork of escope. Install npm i eslint-scope --save \uD83D\uDCD6 Usage To use in an ESM file: import * as eslintScope from 'eslint-scope'; To use in a CommonJS file: const eslintScope = require('eslint-scope'); In order to analyze scope, you'll need to have an ESTree compliant AST structure to run it on. The primary method is eslintScope.analyze(), which takes two arguments: ast - the ESTree-compliant AST structure to analyze. options (optional) - Options to adjust how the scope is analyzed, including: ignoreEval (default: false) - Set to true to ignore all eval() calls (which would normally create scopes). nodejsScope (default: false) - Set to true to create a top-level function scope needed for CommonJS evaluation. impliedStrict (default: false) - Set to true to evaluate the code in strict mode even outside of modules and without \"use strict\". ecmaVersion (default: 5) - The version of ECMAScript to use to evaluate the code. sourceType (default: \"script\") - The type of JavaScript file to evaluate. Change to \"module\" for ECMAScript module code. childVisitorKeys (default: null) - An object with visitor key information (like eslint-visitor-keys). Without this, eslint-scope finds child nodes to visit algorithmically. Providing this option is a performance enhancement. fallback (default: \"iteration\") - The strategy to use when childVisitorKeys is not specified. May be a function. jsx (default: false) - Enables the tracking of JSX components as variable references. Example: import * as eslintScope from 'eslint-scope'; import * as espree from 'espree'; import estraverse from 'estraverse'; const options = { ecmaVersion: 2022, sourceType: \"module\" }; const ast = espree.parse(code, { range: true, ...options }); const scopeManager = eslintScope.analyze(ast, options); const currentScope = scopeManager.acquire(ast); // global scope estraverse.traverse(ast, { enter (node, parent) { // do stuff if (/Function/.test(node.type)) { currentScope = scopeManager.acquire(node); // get current function scope } }, leave(node, parent) { if (/Function/.test(node.type)) { currentScope = currentScope.upper; // set to parent scope } // do stuff } }); API The following section describes the API for this package. You can also read the docs. ScopeManager The ScopeManager class is at the core of eslint-scope and is returned when you call eslintScope.analyze(). It manages all scopes in a given AST. Properties scopes - An array of all scopes. globalScope - Reference to the global scope. Methods acquire(node, inner) Acquires the appropriate scope for a given node. node - The AST node to acquire the scope from. inner - Optional boolean. When true, returns the innermost scope, otherwise returns the outermost scope. Default is false. Returns: The acquired scope or null if no scope is found. acquireAll(node) Acquires all scopes for a given node. node - The AST node to acquire scopes from. Returns: An array of scopes or undefined if none are found. release(node, inner) Returns the upper scope for a given node. node - The AST node to release. inner - Optional boolean. When true, returns the innermost upper scope, otherwise returns the outermost upper scope. Default is false. Returns: The upper scope or null if no upper scope exists. getDeclaredVariables(node) Get variables that are declared by the node. node - The AST node to get declarations from. Returns: An array of variable objects declared by the node. If the node doesn't declare any variables, it returns an empty array. isGlobalReturn() Determines if the global return statement should be allowed. Returns: true if the global return is enabled. isModule() Checks if the code should be handled as an ECMAScript module. Returns: true if the sourceType is \"module\". isImpliedStrict() Checks if implied strict mode is enabled. Returns: true if implied strict mode is enabled. isStrictModeSupported() Checks if strict mode is supported based on ECMAScript version. Returns: true if the ECMAScript version supports strict mode. Scope Objects Scopes returned by the ScopeManager methods have the following properties: type - The type of scope (e.g., \"function\", \"block\", \"global\"). variables - Array of variables declared in this scope. set - A Map of variable names to Variable objects for variables declared in this scope. references - Array of references in this scope. through - Array of references in this scope and its child scopes that aren't resolved in this scope or its child scopes. variableScope - Reference to the closest variable scope. upper - Reference to the parent scope. childScopes - Array of child scopes. block - The AST node that created this scope. GlobalScope The GlobalScope class is a specialized scope representing the global execution context. It extends the base Scope class with additional functionality for handling implicitly defined global variables. Properties implicit - Tracks implicitly defined global variables (those used without declaration). set - A Map of variable names to Variable objects for implicitly defined globals. variables - Array of implicit global Variable objects. left - Array of References that need to be linked to the variable they refer to. Variable Objects Each variable object has the following properties: name - The variable name. identifiers - Array of identifier nodes declaring this variable. references - Array of references to this variable. defs - Array of definition objects for this variable. scope - The scope object where this variable is defined. Contributing Issues and pull requests will be triaged and responded to as quickly as possible. We operate under the ESLint Contributor Guidelines, so please be sure to read them before contributing. If you're not sure where to dig in, check out the issues. Security Policy We work hard to ensure that ESLint Scope is safe for everyone and that security issues are addressed quickly and responsibly. Read the full security policy. Build Commands npm test - run all linting and tests npm run lint - run all linting License ESLint Scope is licensed under a permissive BSD 2-clause license. Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/eslint-visitor-keys/README.html": {
    "href": "Examiner-UI/node_modules/eslint-visitor-keys/README.html",
    "title": "eslint-visitor-keys | Examiner",
    "summary": "eslint-visitor-keys Constants and utilities about visitor keys to traverse AST. \uD83D\uDCBF Installation Use npm to install. $ npm install eslint-visitor-keys Requirements Node.js ^18.18.0, ^20.9.0, or >=21.1.0 \uD83D\uDCD6 Usage To use in an ESM file: import * as evk from \"eslint-visitor-keys\" To use in a CommonJS file: const evk = require(\"eslint-visitor-keys\") evk.KEYS type: { [type: string]: string[] | undefined } Visitor keys. This keys are frozen. This is an object. Keys are the type of ESTree nodes. Their values are an array of property names which have child nodes. For example: console.log(evk.KEYS.AssignmentExpression) // → [\"left\", \"right\"] evk.getKeys(node) type: (node: object) => string[] Get the visitor keys of a given AST node. This is similar to Object.keys(node) of ES Standard, but some keys are excluded: parent, leadingComments, trailingComments, and names which start with _. This will be used to traverse unknown nodes. For example: const node = { type: \"AssignmentExpression\", left: { type: \"Identifier\", name: \"foo\" }, right: { type: \"Literal\", value: 0 } } console.log(evk.getKeys(node)) // → [\"type\", \"left\", \"right\"] evk.unionWith(additionalKeys) type: (additionalKeys: object) => { [type: string]: string[] | undefined } Make the union set with evk.KEYS and the given keys. The order of keys is, additionalKeys is at first, then evk.KEYS is concatenated after that. It removes duplicated keys as keeping the first one. For example: console.log(evk.unionWith({ MethodDefinition: [\"decorators\"] })) // → { ..., MethodDefinition: [\"decorators\", \"key\", \"value\"], ... } \uD83D\uDCF0 Change log See GitHub releases. \uD83C\uDF7B Contributing Welcome. See ESLint contribution guidelines. Development commands npm test runs tests and measures code coverage. npm run lint checks source codes with ESLint. npm run test:open-coverage opens the code coverage report of the previous test with your default browser. Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/eslint/README.html": {
    "href": "Examiner-UI/node_modules/eslint/README.html",
    "title": "ESLint | Examiner",
    "summary": "ESLint Website | Configure ESLint | Rules | Contribute to ESLint | Report Bugs | Code of Conduct | Twitter | Discord | Mastodon | Bluesky ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions: ESLint uses Espree for JavaScript parsing. ESLint uses an AST to evaluate patterns in code. ESLint is completely pluggable, every single rule is a plugin and you can add more at runtime. Table of Contents Installation and Usage Configuration Version Support Code of Conduct Filing Issues Frequently Asked Questions Releases Security Policy Semantic Versioning Policy License Team Sponsors Technology Sponsors Installation and Usage Prerequisites: Node.js (^18.18.0, ^20.9.0, or >=21.1.0) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.) You can install and configure ESLint using this command: npm init @eslint/config@latest After that, you can run ESLint on any file or directory like this: npx eslint yourfile.js pnpm Installation To use ESLint with pnpm, we recommend setting up a .npmrc file with at least the following settings: auto-install-peers=true node-linker=hoisted This ensures that pnpm installs dependencies in a way that is more compatible with npm and is less likely to produce errors. Configuration You can configure rules in your eslint.config.js files as in this example: import { defineConfig } from \"eslint/config\"; export default defineConfig([ { files: [\"**/*.js\", \"**/*.cjs\", \"**/*.mjs\"], rules: { \"prefer-const\": \"warn\", \"no-constant-binary-expression\": \"error\", }, }, ]); The names \"prefer-const\" and \"no-constant-binary-expression\" are the names of rules in ESLint. The first value is the error level of the rule and can be one of these values: \"off\" or 0 - turn the rule off \"warn\" or 1 - turn the rule on as a warning (doesn't affect exit code) \"error\" or 2 - turn the rule on as an error (exit code will be 1) The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the configuration docs). Version Support The ESLint team provides ongoing support for the current version and six months of limited support for the previous version. Limited support includes critical bug fixes, security issues, and compatibility issues only. ESLint offers commercial support for both current and previous versions through our partners, Tidelift and HeroDevs. See Version Support for more details. Code of Conduct ESLint adheres to the OpenJS Foundation Code of Conduct. Filing Issues Before filing an issue, please be sure to read the guidelines for what you're reporting: Bug Report Propose a New Rule Proposing a Rule Change Request a Change Frequently Asked Questions Does ESLint support JSX? Yes, ESLint natively supports parsing JSX syntax (this must be enabled in configuration). Please note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using eslint-plugin-react if you are using React and want React semantics. Does Prettier replace ESLint? No, ESLint and Prettier have different jobs: ESLint is a linter (looking for problematic patterns) and Prettier is a code formatter. Using both tools is common, refer to Prettier's documentation to learn how to configure them to work well with each other. What ECMAScript versions does ESLint support? ESLint has full support for ECMAScript 3, 5, and every year from 2015 up until the most recent stage 4 specification (the default). You can set your desired ECMAScript syntax and other settings (like global variables) through configuration. What about experimental features? ESLint's parser only officially supports the latest final ECMAScript standard. We will make changes to core rules in order to avoid crashes on stage 3 ECMAScript syntax proposals (as long as they are implemented using the correct experimental ESTree syntax). We may make changes to core rules to better work with language extensions (such as JSX, Flow, and TypeScript) on a case-by-case basis. In other cases (including if rules need to warn on more or fewer cases due to new syntax, rather than just not crashing), we recommend you use other parsers and/or rule plugins. If you are using Babel, you can use @babel/eslint-parser and @babel/eslint-plugin to use any option available in Babel. Once a language feature has been adopted into the ECMAScript standard (stage 4 according to the TC39 process), we will accept issues and pull requests related to the new feature, subject to our contributing guidelines. Until then, please use the appropriate parser and plugin(s) for your experimental feature. Which Node.js versions does ESLint support? ESLint updates the supported Node.js versions with each major release of ESLint. At that time, ESLint's supported Node.js versions are updated to be: The most recent maintenance release of Node.js The lowest minor version of the Node.js LTS release that includes the features the ESLint team wants to use. The Node.js Current release ESLint is also expected to work with Node.js versions released after the Node.js Current release. Refer to the Quick Start Guide for the officially supported Node.js versions for a given ESLint release. Where to ask for help? Open a discussion or stop by our Discord server. Why doesn't ESLint lock dependency versions? Lock files like package-lock.json are helpful for deployed applications. They ensure that dependencies are consistent between environments and across deployments. Packages like eslint that get published to the npm registry do not include lock files. npm install eslint as a user will respect version constraints in ESLint's package.json. ESLint and its dependencies will be included in the user's lock file if one exists, but ESLint's own lock file would not be used. We intentionally don't lock dependency versions so that we have the latest compatible dependency versions in development and CI that our users get when installing ESLint in a project. The Twilio blog has a deeper dive to learn more. Releases We have scheduled releases every two weeks on Friday or Saturday. You can follow a release issue for updates about the scheduling of any particular release. Security Policy ESLint takes security seriously. We work hard to ensure that ESLint is safe for everyone and that security issues are addressed quickly and responsibly. Read the full security policy. Semantic Versioning Policy ESLint follows semantic versioning. However, due to the nature of ESLint as a code quality tool, it's not always clear when a minor or major version bump occurs. To help clarify this for everyone, we've defined the following semantic versioning policy for ESLint: Patch release (intended to not break your lint build) A bug fix in a rule that results in ESLint reporting fewer linting errors. A bug fix to the CLI or core (including formatters). Improvements to documentation. Non-user-facing changes such as refactoring code, adding, deleting, or modifying tests, and increasing test coverage. Re-releasing after a failed release (i.e., publishing a release that doesn't work for anyone). Minor release (might break your lint build) A bug fix in a rule that results in ESLint reporting more linting errors. A new rule is created. A new option to an existing rule that does not result in ESLint reporting more linting errors by default. A new addition to an existing rule to support a newly-added language feature (within the last 12 months) that will result in ESLint reporting more linting errors by default. An existing rule is deprecated. A new CLI capability is created. New capabilities to the public API are added (new classes, new methods, new arguments to existing methods, etc.). A new formatter is created. eslint:recommended is updated and will result in strictly fewer linting errors (e.g., rule removals). Major release (likely to break your lint build) eslint:recommended is updated and may result in new linting errors (e.g., rule additions, most rule option updates). A new option to an existing rule that results in ESLint reporting more linting errors by default. An existing formatter is removed. Part of the public API is removed or changed in an incompatible way. The public API includes: Rule schemas Configuration schema Command-line options Node.js API Rule, formatter, parser, plugin APIs According to our policy, any minor update may report more linting errors than the previous release (ex: from a bug fix). As such, we recommend using the tilde (~) in package.json e.g. \"eslint\": \"~3.1.0\" to guarantee the results of your builds. License MIT License Copyright OpenJS Foundation and other contributors, <www.openjsf.org> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Team These folks keep the project moving and are resources for help. Technical Steering Committee (TSC) The people who manage releases, review feature requests, and meet regularly to ensure ESLint is properly maintained. Nicholas C. Zakas Francesco Trotta Milos Djermanovic Reviewers The people who review and implement new features. 唯然 Nitin Kumar Committers The people who review and fix bugs and help triage issues. Josh Goldberg ✨ Tanuj Kanti 루밀LuMir Website Team Team members who focus specifically on eslint.org Amaresh S M Harish Percy Ma Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/espree/README.html": {
    "href": "Examiner-UI/node_modules/espree/README.html",
    "title": "Espree | Examiner",
    "summary": "Espree Espree started out as a fork of Esprima v1.2.2, the last stable published released of Esprima before work on ECMAScript 6 began. Espree is now built on top of Acorn, which has a modular architecture that allows extension of core functionality. The goal of Espree is to produce output that is similar to Esprima with a similar API so that it can be used in place of Esprima. Usage Install: npm i espree To use in an ESM file: import * as espree from \"espree\"; const ast = espree.parse(code); To use in a Common JS file: const espree = require(\"espree\"); const ast = espree.parse(code); API parse() parse parses the given code and returns a abstract syntax tree (AST). It takes two parameters. code string - the code which needs to be parsed. options (Optional) Object - read more about this here. import * as espree from \"espree\"; const ast = espree.parse(code); Example : const ast = espree.parse('let foo = \"bar\"', { ecmaVersion: 6 }); console.log(ast); Output Node { type: 'Program', start: 0, end: 15, body: [ Node { type: 'VariableDeclaration', start: 0, end: 15, declarations: [Array], kind: 'let' } ], sourceType: 'script' } tokenize() tokenize returns the tokens of a given code. It takes two parameters. code string - the code which needs to be parsed. options (Optional) Object - read more about this here. Even if options is empty or undefined or options.tokens is false, it assigns it to true in order to get the tokens array Example : import * as espree from \"espree\"; const tokens = espree.tokenize('let foo = \"bar\"', { ecmaVersion: 6 }); console.log(tokens); Output Token { type: 'Keyword', value: 'let', start: 0, end: 3 }, Token { type: 'Identifier', value: 'foo', start: 4, end: 7 }, Token { type: 'Punctuator', value: '=', start: 8, end: 9 }, Token { type: 'String', value: '\"bar\"', start: 10, end: 15 } version Returns the current espree version VisitorKeys Returns all visitor keys for traversing the AST from eslint-visitor-keys latestEcmaVersion Returns the latest ECMAScript supported by espree supportedEcmaVersions Returns an array of all supported ECMAScript versions Options const options = { // attach range information to each node range: false, // attach line/column location information to each node loc: false, // create a top-level comments array containing all comments comment: false, // create a top-level tokens array containing all tokens tokens: false, // Set to 3, 5 (the default), 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 or 17 to specify the version of ECMAScript syntax you want to use. // You can also set to 2015 (same as 6), 2016 (same as 7), 2017 (same as 8), 2018 (same as 9), 2019 (same as 10), 2020 (same as 11), 2021 (same as 12), 2022 (same as 13), 2023 (same as 14), 2024 (same as 15), 2025 (same as 16) or 2026 (same as 17) to use the year-based naming. // You can also set \"latest\" to use the most recently supported version. ecmaVersion: 3, allowReserved: true, // only allowed when ecmaVersion is 3 // specify which type of script you're parsing (\"script\", \"module\", or \"commonjs\") sourceType: \"script\", // specify additional language features ecmaFeatures: { // enable JSX parsing jsx: false, // enable return in global scope (set to true automatically when sourceType is \"commonjs\") globalReturn: false, // enable implied strict mode (if ecmaVersion >= 5) impliedStrict: false } } Esprima Compatibility Going Forward The primary goal is to produce the exact same AST structure and tokens as Esprima, and that takes precedence over anything else. (The AST structure being the ESTree API with JSX extensions.) Separate from that, Espree may deviate from what Esprima outputs in terms of where and how comments are attached, as well as what additional information is available on AST nodes. That is to say, Espree may add more things to the AST nodes than Esprima does but the overall AST structure produced will be the same. Espree may also deviate from Esprima in the interface it exposes. Contributing Issues and pull requests will be triaged and responded to as quickly as possible. We operate under the ESLint Contributor Guidelines, so please be sure to read them before contributing. If you're not sure where to dig in, check out the issues. Espree is licensed under a permissive BSD 2-clause license. Security Policy We work hard to ensure that Espree is safe for everyone and that security issues are addressed quickly and responsibly. Read the full security policy. Build Commands npm test - run all tests npm run lint - run all linting Differences from Espree 2.x The tokenize() method does not use ecmaFeatures. Any string will be tokenized completely based on ECMAScript 6 semantics. Trailing whitespace no longer is counted as part of a node. let and const declarations are no longer parsed by default. You must opt-in by using an ecmaVersion newer than 5 or setting sourceType to module. The esparse and esvalidate binary scripts have been removed. There is no tolerant option. We will investigate adding this back in the future. Known Incompatibilities In an effort to help those wanting to transition from other parsers to Espree, the following is a list of noteworthy incompatibilities with other parsers. These are known differences that we do not intend to change. Esprima 1.2.2 Esprima counts trailing whitespace as part of each AST node while Espree does not. In Espree, the end of a node is where the last token occurs. Espree does not parse let and const declarations by default. Error messages returned for parsing errors are different. There are two addition properties on every node and token: start and end. These represent the same data as range and are used internally by Acorn. Esprima 2.x Esprima 2.x uses a different comment attachment algorithm that results in some comments being added in different places than Espree. The algorithm Espree uses is the same one used in Esprima 1.2.2. Frequently Asked Questions Why another parser ESLint had been relying on Esprima as its parser from the beginning. While that was fine when the JavaScript language was evolving slowly, the pace of development increased dramatically and Esprima had fallen behind. ESLint, like many other tools reliant on Esprima, has been stuck in using new JavaScript language features until Esprima updates, and that caused our users frustration. We decided the only way for us to move forward was to create our own parser, bringing us inline with JSHint and JSLint, and allowing us to keep implementing new features as we need them. We chose to fork Esprima instead of starting from scratch in order to move as quickly as possible with a compatible API. With Espree 2.0.0, we are no longer a fork of Esprima but rather a translation layer between Acorn and Esprima syntax. This allows us to put work back into a community-supported parser (Acorn) that is continuing to grow and evolve while maintaining an Esprima-compatible parser for those utilities still built on Esprima. Have you tried working with Esprima? Yes. Since the start of ESLint, we've regularly filed bugs and feature requests with Esprima and will continue to do so. However, there are some different philosophies around how the projects work that need to be worked through. The initial goal was to have Espree track Esprima and eventually merge the two back together, but we ultimately decided that building on top of Acorn was a better choice due to Acorn's plugin support. Why don't you just use Acorn? Acorn is a great JavaScript parser that produces an AST that is compatible with Esprima. Unfortunately, ESLint relies on more than just the AST to do its job. It relies on Esprima's tokens and comment attachment features to get a complete picture of the source code. We investigated switching to Acorn, but the inconsistencies between Esprima and Acorn created too much work for a project like ESLint. We are building on top of Acorn, however, so that we can contribute back and help make Acorn even better. What ECMAScript features do you support? Espree supports all ECMAScript 2025 features and partially supports ECMAScript 2026 features. Because ECMAScript 2026 is still under development, we are implementing features as they are finalized. Currently, Espree supports: Explicit Resource Management See finished-proposals.md to know what features are finalized. How do you determine which experimental features to support? In general, we do not support experimental JavaScript features. We may make exceptions from time to time depending on the maturity of the features. Sponsors The following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our READMEs and website. Diamond Sponsors Platinum Sponsors Gold Sponsors Silver Sponsors Bronze Sponsors Technology Sponsors Technology sponsors allow us to use their products and services for free as part of a contribution to the open source ecosystem and our work."
  },
  "Examiner-UI/node_modules/esquery/README.html": {
    "href": "Examiner-UI/node_modules/esquery/README.html",
    "title": "| Examiner",
    "summary": "ESQuery is a library for querying the AST output by Esprima for patterns of syntax using a CSS style selector system. Check out the demo: demo The following selectors are supported: AST node type: ForStatement wildcard: * attribute existence: [attr] attribute value: [attr=\"foo\"] or [attr=123] attribute regex: [attr=/foo.*/] or (with flags) [attr=/foo.*/is] attribute conditions: [attr!=\"foo\"], [attr>2], [attr<3], [attr>=2], or [attr<=3] nested attribute: [attr.level2=\"foo\"] field: FunctionDeclaration > Identifier.id First or last child: :first-child or :last-child nth-child (no ax+b support): :nth-child(2) nth-last-child (no ax+b support): :nth-last-child(1) descendant: ancestor descendant child: parent > child following sibling: node ~ sibling adjacent sibling: node + adjacent negation: :not(ForStatement) has: :has(ForStatement), :has(> ForStatement) matches-any: :matches([attr] > :first-child, :last-child) subject indicator: !IfStatement > [name=\"foo\"] class of AST node: :statement, :expression, :declaration, :function, or :pattern"
  },
  "Examiner-UI/node_modules/esrecurse/README.html": {
    "href": "Examiner-UI/node_modules/esrecurse/README.html",
    "title": "| Examiner",
    "summary": "Esrecurse Esrecurse (esrecurse) is ECMAScript recursive traversing functionality. Example Usage The following code will output all variables declared at the root of a file. esrecurse.visit(ast, { XXXStatement: function (node) { this.visit(node.left); // do something... this.visit(node.right); } }); We can use Visitor instance. var visitor = new esrecurse.Visitor({ XXXStatement: function (node) { this.visit(node.left); // do something... this.visit(node.right); } }); visitor.visit(ast); We can inherit Visitor instance easily. class Derived extends esrecurse.Visitor { constructor() { super(null); } XXXStatement(node) { } } function DerivedVisitor() { esrecurse.Visitor.call(/* this for constructor */ this /* visitor object automatically becomes this. */); } util.inherits(DerivedVisitor, esrecurse.Visitor); DerivedVisitor.prototype.XXXStatement = function (node) { this.visit(node.left); // do something... this.visit(node.right); }; And you can invoke default visiting operation inside custom visit operation. function DerivedVisitor() { esrecurse.Visitor.call(/* this for constructor */ this /* visitor object automatically becomes this. */); } util.inherits(DerivedVisitor, esrecurse.Visitor); DerivedVisitor.prototype.XXXStatement = function (node) { // do something... this.visitChildren(node); }; The childVisitorKeys option does customize the behaviour of this.visitChildren(node). We can use user-defined node types. // This tree contains a user-defined `TestExpression` node. var tree = { type: 'TestExpression', // This 'argument' is the property containing the other **node**. argument: { type: 'Literal', value: 20 }, // This 'extended' is the property not containing the other **node**. extended: true }; esrecurse.visit( ast, { Literal: function (node) { // do something... } }, { // Extending the existing traversing rules. childVisitorKeys: { // TargetNodeName: [ 'keys', 'containing', 'the', 'other', '**node**' ] TestExpression: ['argument'] } } ); We can use the fallback option as well. If the fallback option is \"iteration\", esrecurse would visit all enumerable properties of unknown nodes. Please note circular references cause the stack overflow. AST might have circular references in additional properties for some purpose (e.g. node.parent). esrecurse.visit( ast, { Literal: function (node) { // do something... } }, { fallback: 'iteration' } ); If the fallback option is a function, esrecurse calls this function to determine the enumerable properties of unknown nodes. Please note circular references cause the stack overflow. AST might have circular references in additional properties for some purpose (e.g. node.parent). esrecurse.visit( ast, { Literal: function (node) { // do something... } }, { fallback: function (node) { return Object.keys(node).filter(function(key) { return key !== 'argument' }); } } ); License Copyright (C) 2014 Yusuke Suzuki (twitter: @Constellation) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "Examiner-UI/node_modules/estraverse/README.html": {
    "href": "Examiner-UI/node_modules/estraverse/README.html",
    "title": "| Examiner",
    "summary": "Estraverse Estraverse (estraverse) is ECMAScript traversal functions from esmangle project. Documentation You can find usage docs at wiki page. Example Usage The following code will output all variables declared at the root of a file. estraverse.traverse(ast, { enter: function (node, parent) { if (node.type == 'FunctionExpression' || node.type == 'FunctionDeclaration') return estraverse.VisitorOption.Skip; }, leave: function (node, parent) { if (node.type == 'VariableDeclarator') console.log(node.id.name); } }); We can use this.skip, this.remove and this.break functions instead of using Skip, Remove and Break. estraverse.traverse(ast, { enter: function (node) { this.break(); } }); And estraverse provides estraverse.replace function. When returning node from enter/leave, current node is replaced with it. result = estraverse.replace(tree, { enter: function (node) { // Replace it with replaced. if (node.type === 'Literal') return replaced; } }); By passing visitor.keys mapping, we can extend estraverse traversing functionality. // This tree contains a user-defined `TestExpression` node. var tree = { type: 'TestExpression', // This 'argument' is the property containing the other **node**. argument: { type: 'Literal', value: 20 }, // This 'extended' is the property not containing the other **node**. extended: true }; estraverse.traverse(tree, { enter: function (node) { }, // Extending the existing traversing rules. keys: { // TargetNodeName: [ 'keys', 'containing', 'the', 'other', '**node**' ] TestExpression: ['argument'] } }); By passing visitor.fallback option, we can control the behavior when encountering unknown nodes. // This tree contains a user-defined `TestExpression` node. var tree = { type: 'TestExpression', // This 'argument' is the property containing the other **node**. argument: { type: 'Literal', value: 20 }, // This 'extended' is the property not containing the other **node**. extended: true }; estraverse.traverse(tree, { enter: function (node) { }, // Iterating the child **nodes** of unknown nodes. fallback: 'iteration' }); When visitor.fallback is a function, we can determine which keys to visit on each node. // This tree contains a user-defined `TestExpression` node. var tree = { type: 'TestExpression', // This 'argument' is the property containing the other **node**. argument: { type: 'Literal', value: 20 }, // This 'extended' is the property not containing the other **node**. extended: true }; estraverse.traverse(tree, { enter: function (node) { }, // Skip the `argument` property of each node fallback: function(node) { return Object.keys(node).filter(function(key) { return key !== 'argument'; }); } }); License Copyright (C) 2012-2016 Yusuke Suzuki (twitter: @Constellation) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "Examiner-UI/node_modules/esutils/README.html": {
    "href": "Examiner-UI/node_modules/esutils/README.html",
    "title": "| Examiner",
    "summary": "esutils esutils (esutils) is utility box for ECMAScript language tools. API ast ast.isExpression(node) Returns true if node is an Expression as defined in ECMA262 edition 5.1 section 11. ast.isStatement(node) Returns true if node is a Statement as defined in ECMA262 edition 5.1 section 12. ast.isIterationStatement(node) Returns true if node is an IterationStatement as defined in ECMA262 edition 5.1 section 12.6. ast.isSourceElement(node) Returns true if node is a SourceElement as defined in ECMA262 edition 5.1 section 14. ast.trailingStatement(node) Returns Statement? if node has trailing Statement. if (cond) consequent; When taking this IfStatement, returns consequent; statement. ast.isProblematicIfStatement(node) Returns true if node is a problematic IfStatement. If node is a problematic IfStatement, node cannot be represented as an one on one JavaScript code. { type: 'IfStatement', consequent: { type: 'WithStatement', body: { type: 'IfStatement', consequent: {type: 'EmptyStatement'} } }, alternate: {type: 'EmptyStatement'} } The above node cannot be represented as a JavaScript code, since the top level else alternate belongs to an inner IfStatement. code code.isDecimalDigit(code) Return true if provided code is decimal digit. code.isHexDigit(code) Return true if provided code is hexadecimal digit. code.isOctalDigit(code) Return true if provided code is octal digit. code.isWhiteSpace(code) Return true if provided code is white space. White space characters are formally defined in ECMA262. code.isLineTerminator(code) Return true if provided code is line terminator. Line terminator characters are formally defined in ECMA262. code.isIdentifierStart(code) Return true if provided code can be the first character of ECMA262 Identifier. They are formally defined in ECMA262. code.isIdentifierPart(code) Return true if provided code can be the trailing character of ECMA262 Identifier. They are formally defined in ECMA262. keyword keyword.isKeywordES5(id, strict) Returns true if provided identifier string is a Keyword or Future Reserved Word in ECMA262 edition 5.1. They are formally defined in ECMA262 sections 7.6.1.1 and 7.6.1.2, respectively. If the strict flag is truthy, this function additionally checks whether id is a Keyword or Future Reserved Word under strict mode. keyword.isKeywordES6(id, strict) Returns true if provided identifier string is a Keyword or Future Reserved Word in ECMA262 edition 6. They are formally defined in ECMA262 sections 11.6.2.1 and 11.6.2.2, respectively. If the strict flag is truthy, this function additionally checks whether id is a Keyword or Future Reserved Word under strict mode. keyword.isReservedWordES5(id, strict) Returns true if provided identifier string is a Reserved Word in ECMA262 edition 5.1. They are formally defined in ECMA262 section 7.6.1. If the strict flag is truthy, this function additionally checks whether id is a Reserved Word under strict mode. keyword.isReservedWordES6(id, strict) Returns true if provided identifier string is a Reserved Word in ECMA262 edition 6. They are formally defined in ECMA262 section 11.6.2. If the strict flag is truthy, this function additionally checks whether id is a Reserved Word under strict mode. keyword.isRestrictedWord(id) Returns true if provided identifier string is one of eval or arguments. They are restricted in strict mode code throughout ECMA262 edition 5.1 and in ECMA262 edition 6 section 12.1.1. keyword.isIdentifierNameES5(id) Return true if provided identifier string is an IdentifierName as specified in ECMA262 edition 5.1 section 7.6. keyword.isIdentifierNameES6(id) Return true if provided identifier string is an IdentifierName as specified in ECMA262 edition 6 section 11.6. keyword.isIdentifierES5(id, strict) Return true if provided identifier string is an Identifier as specified in ECMA262 edition 5.1 section 7.6. If the strict flag is truthy, this function additionally checks whether id is an Identifier under strict mode. keyword.isIdentifierES6(id, strict) Return true if provided identifier string is an Identifier as specified in ECMA262 edition 6 section 12.1. If the strict flag is truthy, this function additionally checks whether id is an Identifier under strict mode. License Copyright (C) 2013 Yusuke Suzuki (twitter: @Constellation) and other contributors. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "Examiner-UI/node_modules/fast-deep-equal/README.html": {
    "href": "Examiner-UI/node_modules/fast-deep-equal/README.html",
    "title": "fast-deep-equal | Examiner",
    "summary": "fast-deep-equal The fastest deep equal with ES6 Map, Set and Typed arrays support. Install npm install fast-deep-equal Features ES5 compatible works in node.js (8+) and browsers (IE9+) checks equality of Date and RegExp objects by value. ES6 equal (require('fast-deep-equal/es6')) also supports: Maps Sets Typed arrays Usage var equal = require('fast-deep-equal'); console.log(equal({foo: 'bar'}, {foo: 'bar'})); // true To support ES6 Maps, Sets and Typed arrays equality use: var equal = require('fast-deep-equal/es6'); console.log(equal(Int16Array([1, 2]), Int16Array([1, 2]))); // true To use with React (avoiding the traversal of React elements' _owner property that contains circular references and is not needed when comparing the elements - borrowed from react-fast-compare): var equal = require('fast-deep-equal/react'); var equal = require('fast-deep-equal/es6/react'); Performance benchmark Node.js v12.6.0: fast-deep-equal x 261,950 ops/sec ±0.52% (89 runs sampled) fast-deep-equal/es6 x 212,991 ops/sec ±0.34% (92 runs sampled) fast-equals x 230,957 ops/sec ±0.83% (85 runs sampled) nano-equal x 187,995 ops/sec ±0.53% (88 runs sampled) shallow-equal-fuzzy x 138,302 ops/sec ±0.49% (90 runs sampled) underscore.isEqual x 74,423 ops/sec ±0.38% (89 runs sampled) lodash.isEqual x 36,637 ops/sec ±0.72% (90 runs sampled) deep-equal x 2,310 ops/sec ±0.37% (90 runs sampled) deep-eql x 35,312 ops/sec ±0.67% (91 runs sampled) ramda.equals x 12,054 ops/sec ±0.40% (91 runs sampled) util.isDeepStrictEqual x 46,440 ops/sec ±0.43% (90 runs sampled) assert.deepStrictEqual x 456 ops/sec ±0.71% (88 runs sampled) The fastest is fast-deep-equal To run benchmark (requires node.js 6+): npm run benchmark Please note: this benchmark runs against the available test cases. To choose the most performant library for your application, it is recommended to benchmark against your data and to NOT expect this benchmark to reflect the performance difference in your application. Enterprise support fast-deep-equal package is a part of Tidelift enterprise subscription - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers. Security contact To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues. License MIT"
  },
  "Examiner-UI/node_modules/fast-glob/README.html": {
    "href": "Examiner-UI/node_modules/fast-glob/README.html",
    "title": "fast-glob | Examiner",
    "summary": "fast-glob It's a very fast and efficient glob library for Node.js. This package provides methods for traversing the file system and returning pathnames that matched a defined set of a specified pattern according to the rules used by the Unix Bash shell with some simplifications, meanwhile results are returned in arbitrary order. Quick, simple, effective. Table of Contents Details Highlights Old and modern mode Pattern syntax Basic syntax Advanced syntax Installation API Asynchronous Synchronous Stream patterns [options] Helpers generateTasks isDynamicPattern escapePath convertPathToPattern Options Common concurrency cwd deep followSymbolicLinks fs ignore suppressErrors throwErrorOnBrokenSymbolicLink Output control absolute markDirectories objectMode onlyDirectories onlyFiles stats unique Matching control braceExpansion caseSensitiveMatch dot extglob globstar baseNameMatch FAQ What is a static or dynamic pattern? How to write patterns on Windows? Why are parentheses match wrong? How to exclude directory from reading? How to use UNC path? Compatible with node-glob? Benchmarks Server Nettop Changelog License Highlights Fast. Probably the fastest. Supports multiple and negative patterns. Synchronous, Promise and Stream API. Object mode. Can return more than just strings. Error-tolerant. Old and modern mode This package works in two modes, depending on the environment in which it is used. Old mode. Node.js below 10.10 or when the stats option is enabled. Modern mode. Node.js 10.10+ and the stats option is disabled. The modern mode is faster. Learn more about the internal mechanism. Pattern syntax ⚠️ Always use forward-slashes in glob expressions (patterns and ignore option). Use backslashes for escaping characters. There is more than one form of syntax: basic and advanced. Below is a brief overview of the supported features. Also pay attention to our FAQ. \uD83D\uDCD6 This package uses micromatch as a library for pattern matching. Basic syntax An asterisk (*) — matches everything except slashes (path separators), hidden files (names starting with .). A double star or globstar (**) — matches zero or more directories. Question mark (?) – matches any single character except slashes (path separators). Sequence ([seq]) — matches any character in sequence. \uD83D\uDCD6 A few additional words about the basic matching behavior. Some examples: src/**/*.js — matches all files in the src directory (any level of nesting) that have the .js extension. src/*.?? — matches all files in the src directory (only first level of nesting) that have a two-character extension. file-[01].js — matches files: file-0.js, file-1.js. Advanced syntax Escapes characters (\\\\) — matching special characters ($^*+?()[]) as literals. POSIX character classes ([[:digit:]]). Extended globs (?(pattern-list)). Bash style brace expansions ({}). Regexp character classes ([1-5]). Regex groups ((a|b)). \uD83D\uDCD6 A few additional words about the advanced matching behavior. Some examples: src/**/*.{css,scss} — matches all files in the src directory (any level of nesting) that have the .css or .scss extension. file-[[:digit:]].js — matches files: file-0.js, file-1.js, …, file-9.js. file-{1..3}.js — matches files: file-1.js, file-2.js, file-3.js. file-(1|2) — matches files: file-1.js, file-2.js. Installation npm install fast-glob API Asynchronous fg(patterns, [options]) fg.async(patterns, [options]) fg.glob(patterns, [options]) Returns a Promise with an array of matching entries. const fg = require('fast-glob'); const entries = await fg(['.editorconfig', '**/index.js'], { dot: true }); // ['.editorconfig', 'services/index.js'] Synchronous fg.sync(patterns, [options]) fg.globSync(patterns, [options]) Returns an array of matching entries. const fg = require('fast-glob'); const entries = fg.sync(['.editorconfig', '**/index.js'], { dot: true }); // ['.editorconfig', 'services/index.js'] Stream fg.stream(patterns, [options]) fg.globStream(patterns, [options]) Returns a ReadableStream when the data event will be emitted with matching entry. const fg = require('fast-glob'); const stream = fg.stream(['.editorconfig', '**/index.js'], { dot: true }); for await (const entry of stream) { // .editorconfig // services/index.js } patterns Required: true Type: string | string[] Any correct pattern(s). \uD83D\uDD22 Pattern syntax ⚠️ This package does not respect the order of patterns. First, all the negative patterns are applied, and only then the positive patterns. If you want to get a certain order of records, use sorting or split calls. [options] Required: false Type: Options See Options section. Helpers generateTasks(patterns, [options]) Returns the internal representation of patterns (Task is a combining patterns by base directory). fg.generateTasks('*'); [{ base: '.', // Parent directory for all patterns inside this task dynamic: true, // Dynamic or static patterns are in this task patterns: ['*'], positive: ['*'], negative: [] }] patterns Required: true Type: string | string[] Any correct pattern(s). [options] Required: false Type: Options See Options section. isDynamicPattern(pattern, [options]) Returns true if the passed pattern is a dynamic pattern. \uD83D\uDD22 What is a static or dynamic pattern? fg.isDynamicPattern('*'); // true fg.isDynamicPattern('abc'); // false pattern Required: true Type: string Any correct pattern. [options] Required: false Type: Options See Options section. escapePath(path) Returns the path with escaped special characters depending on the platform. Posix: *?|(){}[]; ! at the beginning of line; @+! before the opening parenthesis; \\\\ before non-special characters; Windows: (){}[] ! at the beginning of line; @+! before the opening parenthesis; Characters like *?| cannot be used in the path (windows_naming_conventions), so they will not be escaped; fg.escapePath('!abc'); // \\\\!abc fg.escapePath('[OpenSource] mrmlnc – fast-glob (Deluxe Edition) 2014') + '/*.flac' // \\\\[OpenSource\\\\] mrmlnc – fast-glob \\\\(Deluxe Edition\\\\) 2014/*.flac fg.posix.escapePath('C:\\\\Program Files (x86)\\\\**\\\\*'); // C:\\\\\\\\Program Files \\\\(x86\\\\)\\\\*\\\\*\\\\* fg.win32.escapePath('C:\\\\Program Files (x86)\\\\**\\\\*'); // Windows: C:\\\\Program Files \\\\(x86\\\\)\\\\**\\\\* convertPathToPattern(path) Converts a path to a pattern depending on the platform, including special character escaping. Posix. Works similarly to the fg.posix.escapePath method. Windows. Works similarly to the fg.win32.escapePath method, additionally converting backslashes to forward slashes in cases where they are not escape characters (!()+@{}[]). fg.convertPathToPattern('[OpenSource] mrmlnc – fast-glob (Deluxe Edition) 2014') + '/*.flac'; // \\\\[OpenSource\\\\] mrmlnc – fast-glob \\\\(Deluxe Edition\\\\) 2014/*.flac fg.convertPathToPattern('C:/Program Files (x86)/**/*'); // Posix: C:/Program Files \\\\(x86\\\\)/\\\\*\\\\*/\\\\* // Windows: C:/Program Files \\\\(x86\\\\)/**/* fg.convertPathToPattern('C:\\\\Program Files (x86)\\\\**\\\\*'); // Posix: C:\\\\\\\\Program Files \\\\(x86\\\\)\\\\*\\\\*\\\\* // Windows: C:/Program Files \\\\(x86\\\\)/**/* fg.posix.convertPathToPattern('\\\\\\\\?\\\\c:\\\\Program Files (x86)') + '/**/*'; // Posix: \\\\\\\\\\\\?\\\\\\\\c:\\\\\\\\Program Files \\\\(x86\\\\)/**/* (broken pattern) fg.win32.convertPathToPattern('\\\\\\\\?\\\\c:\\\\Program Files (x86)') + '/**/*'; // Windows: //?/c:/Program Files \\\\(x86\\\\)/**/* Options Common options concurrency Type: number Default: os.cpus().length Specifies the maximum number of concurrent requests from a reader to read directories. \uD83D\uDCD6 The higher the number, the higher the performance and load on the file system. If you want to read in quiet mode, set the value to a comfortable number or 1. More details In Node, there are two types of threads: Event Loop (code) and a Thread Pool (fs, dns, …). The thread pool size controlled by the UV_THREADPOOL_SIZE environment variable. Its default size is 4 (documentation). The pool is one for all tasks within a single Node process. Any code can make 4 real concurrent accesses to the file system. The rest of the FS requests will wait in the queue. \uD83D\uDCD6 Each new instance of FG in the same Node process will use the same Thread pool. But this package also has the concurrency option. This option allows you to control the number of concurrent accesses to the FS at the package level. By default, this package has a value equal to the number of cores available for the current Node process. This allows you to set a value smaller than the pool size (concurrency: 1) or, conversely, to prepare tasks for the pool queue more quickly (concurrency: Number.POSITIVE_INFINITY). So, in fact, this package can only make 4 concurrent requests to the FS. You can increase this value by using an environment variable (UV_THREADPOOL_SIZE), but in practice this does not give a multiple advantage. cwd Type: string Default: process.cwd() The current working directory in which to search. deep Type: number Default: Infinity Specifies the maximum depth of a read directory relative to the start directory. For example, you have the following tree: dir/ └── one/ // 1 └── two/ // 2 └── file.js // 3 // With base directory fg.sync('dir/**', { onlyFiles: false, deep: 1 }); // ['dir/one'] fg.sync('dir/**', { onlyFiles: false, deep: 2 }); // ['dir/one', 'dir/one/two'] // With cwd option fg.sync('**', { onlyFiles: false, cwd: 'dir', deep: 1 }); // ['one'] fg.sync('**', { onlyFiles: false, cwd: 'dir', deep: 2 }); // ['one', 'one/two'] \uD83D\uDCD6 If you specify a pattern with some base directory, this directory will not participate in the calculation of the depth of the found directories. Think of it as a cwd option. followSymbolicLinks Type: boolean Default: true Indicates whether to traverse descendants of symbolic link directories when expanding ** patterns. \uD83D\uDCD6 Note that this option does not affect the base directory of the pattern. For example, if ./a is a symlink to directory ./b and you specified ['./a**', './b/**'] patterns, then directory ./a will still be read. \uD83D\uDCD6 If the stats option is specified, the information about the symbolic link (fs.lstat) will be replaced with information about the entry (fs.stat) behind it. fs Type: FileSystemAdapter Default: fs.* Custom implementation of methods for working with the file system. Supports objects with enumerable properties only. export interface FileSystemAdapter { lstat?: typeof fs.lstat; stat?: typeof fs.stat; lstatSync?: typeof fs.lstatSync; statSync?: typeof fs.statSync; readdir?: typeof fs.readdir; readdirSync?: typeof fs.readdirSync; } ignore Type: string[] Default: [] An array of glob patterns to exclude matches. This is an alternative way to use negative patterns. dir/ ├── package-lock.json └── package.json fg.sync(['*.json', '!package-lock.json']); // ['package.json'] fg.sync('*.json', { ignore: ['package-lock.json'] }); // ['package.json'] suppressErrors Type: boolean Default: false By default this package suppress only ENOENT errors. Set to true to suppress any error. \uD83D\uDCD6 Can be useful when the directory has entries with a special level of access. throwErrorOnBrokenSymbolicLink Type: boolean Default: false Throw an error when symbolic link is broken if true or safely return lstat call if false. \uD83D\uDCD6 This option has no effect on errors when reading the symbolic link directory. Output control absolute Type: boolean Default: false Return the absolute path for entries. fg.sync('*.js', { absolute: false }); // ['index.js'] fg.sync('*.js', { absolute: true }); // ['/home/user/index.js'] \uD83D\uDCD6 This option is required if you want to use negative patterns with absolute path, for example, !${__dirname}/*.js. markDirectories Type: boolean Default: false Mark the directory path with the final slash. fg.sync('*', { onlyFiles: false, markDirectories: false }); // ['index.js', 'controllers'] fg.sync('*', { onlyFiles: false, markDirectories: true }); // ['index.js', 'controllers/'] objectMode Type: boolean Default: false Returns objects (instead of strings) describing entries. fg.sync('*', { objectMode: false }); // ['src/index.js'] fg.sync('*', { objectMode: true }); // [{ name: 'index.js', path: 'src/index.js', dirent: <fs.Dirent> }] The object has the following fields: name (string) — the last part of the path (basename) path (string) — full path relative to the pattern base directory dirent (fs.Dirent) — instance of fs.Dirent \uD83D\uDCD6 An object is an internal representation of entry, so getting it does not affect performance. onlyDirectories Type: boolean Default: false Return only directories. fg.sync('*', { onlyDirectories: false }); // ['index.js', 'src'] fg.sync('*', { onlyDirectories: true }); // ['src'] \uD83D\uDCD6 If true, the onlyFiles option is automatically false. onlyFiles Type: boolean Default: true Return only files. fg.sync('*', { onlyFiles: false }); // ['index.js', 'src'] fg.sync('*', { onlyFiles: true }); // ['index.js'] stats Type: boolean Default: false Enables an object mode with an additional field: stats (fs.Stats) — instance of fs.Stats fg.sync('*', { stats: false }); // ['src/index.js'] fg.sync('*', { stats: true }); // [{ name: 'index.js', path: 'src/index.js', dirent: <fs.Dirent>, stats: <fs.Stats> }] \uD83D\uDCD6 Returns fs.stat instead of fs.lstat for symbolic links when the followSymbolicLinks option is specified. ⚠️ Unlike object mode this mode requires additional calls to the file system. On average, this mode is slower at least twice. See old and modern mode for more details. unique Type: boolean Default: true Ensures that the returned entries are unique. fg.sync(['*.json', 'package.json'], { unique: false }); // ['package.json', 'package.json'] fg.sync(['*.json', 'package.json'], { unique: true }); // ['package.json'] If true and similar entries are found, the result is the first found. Matching control braceExpansion Type: boolean Default: true Enables Bash-like brace expansion. \uD83D\uDD22 Syntax description or more detailed description. dir/ ├── abd ├── acd └── a{b,c}d fg.sync('a{b,c}d', { braceExpansion: false }); // ['a{b,c}d'] fg.sync('a{b,c}d', { braceExpansion: true }); // ['abd', 'acd'] caseSensitiveMatch Type: boolean Default: true Enables a case-sensitive mode for matching files. dir/ ├── file.txt └── File.txt fg.sync('file.txt', { caseSensitiveMatch: false }); // ['file.txt', 'File.txt'] fg.sync('file.txt', { caseSensitiveMatch: true }); // ['file.txt'] dot Type: boolean Default: false Allow patterns to match entries that begin with a period (.). \uD83D\uDCD6 Note that an explicit dot in a portion of the pattern will always match dot files. dir/ ├── .editorconfig └── package.json fg.sync('*', { dot: false }); // ['package.json'] fg.sync('*', { dot: true }); // ['.editorconfig', 'package.json'] extglob Type: boolean Default: true Enables Bash-like extglob functionality. \uD83D\uDD22 Syntax description. dir/ ├── README.md └── package.json fg.sync('*.+(json|md)', { extglob: false }); // [] fg.sync('*.+(json|md)', { extglob: true }); // ['README.md', 'package.json'] globstar Type: boolean Default: true Enables recursively repeats a pattern containing **. If false, ** behaves exactly like *. dir/ └── a └── b fg.sync('**', { onlyFiles: false, globstar: false }); // ['a'] fg.sync('**', { onlyFiles: false, globstar: true }); // ['a', 'a/b'] baseNameMatch Type: boolean Default: false If set to true, then patterns without slashes will be matched against the basename of the path if it contains slashes. dir/ └── one/ └── file.md fg.sync('*.md', { baseNameMatch: false }); // [] fg.sync('*.md', { baseNameMatch: true }); // ['one/file.md'] FAQ What is a static or dynamic pattern? All patterns can be divided into two types: static. A pattern is considered static if it can be used to get an entry on the file system without using matching mechanisms. For example, the file.js pattern is a static pattern because we can just verify that it exists on the file system. dynamic. A pattern is considered dynamic if it cannot be used directly to find occurrences without using a matching mechanisms. For example, the * pattern is a dynamic pattern because we cannot use this pattern directly. A pattern is considered dynamic if it contains the following characters (… — any characters or their absence) or options: The caseSensitiveMatch option is disabled \\\\ (the escape character) *, ?, ! (at the beginning of line) […] (…|…) @(…), !(…), *(…), ?(…), +(…) (respects the extglob option) {…,…}, {…..…} (respects the braceExpansion option) How to write patterns on Windows? Always use forward-slashes in glob expressions (patterns and ignore option). Use backslashes for escaping characters. With the cwd option use a convenient format. Bad [ 'directory\\\\*', path.join(process.cwd(), '**') ] Good [ 'directory/*', fg.convertPathToPattern(process.cwd()) + '/**' ] \uD83D\uDCD6 Use the .convertPathToPattern package to convert Windows-style path to a Unix-style path. Read more about matching with backslashes. Why are parentheses match wrong? dir/ └── (special-*file).txt fg.sync(['(special-*file).txt']) // [] Refers to Bash. You need to escape special characters: fg.sync(['\\\\(special-*file\\\\).txt']) // ['(special-*file).txt'] Read more about matching special characters as literals. Or use the .escapePath. How to exclude directory from reading? You can use a negative pattern like this: !**/node_modules or !**/node_modules/**. Also you can use ignore option. Just look at the example below. first/ ├── file.md └── second/ └── file.txt If you don't want to read the second directory, you must write the following pattern: !**/second or !**/second/**. fg.sync(['**/*.md', '!**/second']); // ['first/file.md'] fg.sync(['**/*.md'], { ignore: ['**/second/**'] }); // ['first/file.md'] ⚠️ When you write !**/second/**/* it means that the directory will be read, but all the entries will not be included in the results. You have to understand that if you write the pattern to exclude directories, then the directory will not be read under any circumstances. How to use UNC path? You cannot use Uniform Naming Convention (UNC) paths as patterns (due to syntax) directly, but you can use them as cwd directory or use the fg.convertPathToPattern method. // cwd fg.sync('*', { cwd: '\\\\\\\\?\\\\C:\\\\Python27' /* or //?/C:/Python27 */ }); fg.sync('Python27/*', { cwd: '\\\\\\\\?\\\\C:\\\\' /* or //?/C:/ */ }); // .convertPathToPattern fg.sync(fg.convertPathToPattern('\\\\\\\\?\\\\c:\\\\Python27') + '/*'); Compatible with node-glob? node-glob fast-glob cwd cwd root – dot dot nomount – mark markDirectories nosort – nounique unique nobrace braceExpansion noglobstar globstar noext extglob nocase caseSensitiveMatch matchBase baseNameMatch nodir onlyFiles ignore ignore follow followSymbolicLinks realpath – absolute absolute Benchmarks You can see results here for every commit into the main branch. Product benchmark – comparison with the main competitors. Regress benchmark – regression between the current version and the version from the npm registry. Changelog See the Releases section of our GitHub project for changelog for each release version. License This software is released under the terms of the MIT license."
  },
  "Examiner-UI/node_modules/fast-glob/node_modules/glob-parent/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/fast-glob/node_modules/glob-parent/CHANGELOG.html",
    "title": "| Examiner",
    "summary": "5.1.2 (2021-03-06) Bug Fixes eliminate ReDoS (#36) (f923116) 5.1.1 (2021-01-27) Bug Fixes unescape exclamation mark (#26) (a98874f) 5.1.0 (2021-01-27) Features add flipBackslashes option to disable auto conversion of slashes (closes #24) (#25) (eecf91d) 5.0.0 (2021-01-27) ⚠ BREAKING CHANGES Drop support for node <6 & bump dependencies Miscellaneous Chores Drop support for node <6 & bump dependencies (896c0c0) 4.0.0 (2021-01-27) ⚠ BREAKING CHANGES question marks are valid path characters on Windows so avoid flagging as a glob when alone Update is-glob dependency Features hoist regexps and strings for performance gains (4a80667) question marks are valid path characters on Windows so avoid flagging as a glob when alone (2a551dd) Update is-glob dependency (e41fcd8) 3.1.0 (2021-01-27) Features allow basic win32 backslash use (272afa5) handle extglobs (parentheses) containing separators (7db1bdb) new approach to braces/brackets handling (8269bd8) pre-process braces/brackets sections (9ef8a87) preserve escaped brace/bracket at end of string (8cfb0ba) Bug Fixes trailing escaped square brackets (99ec9fe) 3.0.1 (2021-01-27) Features use path-dirname ponyfill (cdbea5f) Bug Fixes unescape glob-escaped dirnames on output (598c533) 3.0.0 (2021-01-27) ⚠ BREAKING CHANGES update is-glob dependency Features update is-glob dependency (5c5f8ef) 2.0.0 (2021-01-27) Features move up to dirname regardless of glob characters (f97fb83) 1.3.0 (2021-01-27) 1.2.0 (2021-01-27) Reverts feat: make regex test strings smaller (dc80fa9) 1.1.0 (2021-01-27) Features make regex test strings smaller (cd83220) 1.0.0 (2021-01-27)"
  },
  "Examiner-UI/node_modules/fast-glob/node_modules/glob-parent/README.html": {
    "href": "Examiner-UI/node_modules/fast-glob/node_modules/glob-parent/README.html",
    "title": "glob-parent | Examiner",
    "summary": "glob-parent Extract the non-magic parent path from a glob string. Usage var globParent = require('glob-parent'); globParent('path/to/*.js'); // 'path/to' globParent('/root/path/to/*.js'); // '/root/path/to' globParent('/*.js'); // '/' globParent('*.js'); // '.' globParent('**/*.js'); // '.' globParent('path/{to,from}'); // 'path' globParent('path/!(to|from)'); // 'path' globParent('path/?(to|from)'); // 'path' globParent('path/+(to|from)'); // 'path' globParent('path/*(to|from)'); // 'path' globParent('path/@(to|from)'); // 'path' globParent('path/**/*'); // 'path' // if provided a non-glob path, returns the nearest dir globParent('path/foo/bar.js'); // 'path/foo' globParent('path/foo/'); // 'path/foo' globParent('path/foo'); // 'path' (see issue #3 for details) API globParent(maybeGlobString, [options]) Takes a string and returns the part of the path before the glob begins. Be aware of Escaping rules and Limitations below. options { // Disables the automatic conversion of slashes for Windows flipBackslashes: true } Escaping The following characters have special significance in glob patterns and must be escaped if you want them to be treated as regular path characters: ? (question mark) unless used as a path segment alone * (asterisk) | (pipe) ( (opening parenthesis) ) (closing parenthesis) { (opening curly brace) } (closing curly brace) [ (opening bracket) ] (closing bracket) Example globParent('foo/[bar]/') // 'foo' globParent('foo/\\\\[bar]/') // 'foo/[bar]' Limitations Braces & Brackets This library attempts a quick and imperfect method of determining which path parts have glob magic without fully parsing/lexing the pattern. There are some advanced use cases that can trip it up, such as nested braces where the outer pair is escaped and the inner one contains a path separator. If you find yourself in the unlikely circumstance of being affected by this or need to ensure higher-fidelity glob handling in your library, it is recommended that you pre-process your input with expand-braces and/or expand-brackets. Windows Backslashes are not valid path separators for globs. If a path with backslashes is provided anyway, for simple cases, glob-parent will replace the path separator for you and return the non-glob parent path (now with forward-slashes, which are still valid as Windows path separators). This cannot be used in conjunction with escape characters. // BAD globParent('C:\\\\Program Files \\\\(x86\\\\)\\\\*.ext') // 'C:/Program Files /(x86/)' // GOOD globParent('C:/Program Files\\\\(x86\\\\)/*.ext') // 'C:/Program Files (x86)' If you are using escape characters for a pattern without path parts (i.e. relative to cwd), prefix with ./ to avoid confusing glob-parent. // BAD globParent('foo \\\\[bar]') // 'foo ' globParent('foo \\\\[bar]*') // 'foo ' // GOOD globParent('./foo \\\\[bar]') // 'foo [bar]' globParent('./foo \\\\[bar]*') // '.' License ISC"
  },
  "Examiner-UI/node_modules/fast-json-stable-stringify/README.html": {
    "href": "Examiner-UI/node_modules/fast-json-stable-stringify/README.html",
    "title": "fast-json-stable-stringify | Examiner",
    "summary": "fast-json-stable-stringify Deterministic JSON.stringify() - a faster version of @substack's json-stable-strigify without jsonify. You can also pass in a custom comparison function. example var stringify = require('fast-json-stable-stringify'); var obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 }; console.log(stringify(obj)); output: {\"a\":3,\"b\":[{\"x\":4,\"y\":5,\"z\":6},7],\"c\":8} methods var stringify = require('fast-json-stable-stringify') var str = stringify(obj, opts) Return a deterministic stringified string str from the object obj. options cmp If opts is given, you can supply an opts.cmp to have a custom comparison function for object keys. Your function opts.cmp is called with these parameters: opts.cmp({ key: akey, value: avalue }, { key: bkey, value: bvalue }) For example, to sort on the object key names in reverse order you could write: var stringify = require('fast-json-stable-stringify'); var obj = { c: 8, b: [{z:6,y:5,x:4},7], a: 3 }; var s = stringify(obj, function (a, b) { return a.key < b.key ? 1 : -1; }); console.log(s); which results in the output string: {\"c\":8,\"b\":[{\"z\":6,\"y\":5,\"x\":4},7],\"a\":3} Or if you wanted to sort on the object values in reverse order, you could write: var stringify = require('fast-json-stable-stringify'); var obj = { d: 6, c: 5, b: [{z:3,y:2,x:1},9], a: 10 }; var s = stringify(obj, function (a, b) { return a.value < b.value ? 1 : -1; }); console.log(s); which outputs: {\"d\":6,\"c\":5,\"b\":[{\"z\":3,\"y\":2,\"x\":1},9],\"a\":10} cycles Pass true in opts.cycles to stringify circular property as __cycle__ - the result will not be a valid JSON string in this case. TypeError will be thrown in case of circular object without this option. install With npm do: npm install fast-json-stable-stringify benchmark To run benchmark (requires Node.js 6+): node benchmark Results: fast-json-stable-stringify x 17,189 ops/sec ±1.43% (83 runs sampled) json-stable-stringify x 13,634 ops/sec ±1.39% (85 runs sampled) fast-stable-stringify x 20,212 ops/sec ±1.20% (84 runs sampled) faster-stable-stringify x 15,549 ops/sec ±1.12% (84 runs sampled) The fastest is fast-stable-stringify Enterprise support fast-json-stable-stringify package is a part of Tidelift enterprise subscription - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers. Security contact To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues. license MIT"
  },
  "Examiner-UI/node_modules/fast-levenshtein/LICENSE.html": {
    "href": "Examiner-UI/node_modules/fast-levenshtein/LICENSE.html",
    "title": "| Examiner",
    "summary": "(MIT License) Copyright (c) 2013 Ramesh Nair Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/fast-levenshtein/README.html": {
    "href": "Examiner-UI/node_modules/fast-levenshtein/README.html",
    "title": "fast-levenshtein - Levenshtein algorithm in Javascript | Examiner",
    "summary": "fast-levenshtein - Levenshtein algorithm in Javascript An efficient Javascript implementation of the Levenshtein algorithm with locale-specific collator support. Features Works in node.js and in the browser. Better performance than other implementations by not needing to store the whole matrix (more info). Locale-sensitive string comparisions if needed. Comprehensive test suite and performance benchmark. Small: <1 KB minified and gzipped Installation node.js Install using npm: $ npm install fast-levenshtein Browser Using bower: $ bower install fast-levenshtein If you are not using any module loader system then the API will then be accessible via the window.Levenshtein object. Examples Default usage var levenshtein = require('fast-levenshtein'); var distance = levenshtein.get('back', 'book'); // 2 var distance = levenshtein.get('我愛你', '我叫你'); // 1 Locale-sensitive string comparisons It supports using Intl.Collator for locale-sensitive string comparisons: var levenshtein = require('fast-levenshtein'); levenshtein.get('mikailovitch', 'Mikhaïlovitch', { useCollator: true}); // 1 Building and Testing To build the code and run the tests: $ npm install -g grunt-cli $ npm install $ npm run build Performance Thanks to Titus Wormer for encouraging me to do this. Benchmarked against other node.js levenshtein distance modules (on Macbook Air 2012, Core i7, 8GB RAM): Running suite Implementation comparison [benchmark/speed.js]... >> levenshtein-edit-distance x 234 ops/sec ±3.02% (73 runs sampled) >> levenshtein-component x 422 ops/sec ±4.38% (83 runs sampled) >> levenshtein-deltas x 283 ops/sec ±3.83% (78 runs sampled) >> natural x 255 ops/sec ±0.76% (88 runs sampled) >> levenshtein x 180 ops/sec ±3.55% (86 runs sampled) >> fast-levenshtein x 1,792 ops/sec ±2.72% (95 runs sampled) Benchmark done. Fastest test is fast-levenshtein at 4.2x faster than levenshtein-component You can run this benchmark yourself by doing: $ npm install $ npm run build $ npm run benchmark Contributing If you wish to submit a pull request please update and/or create new tests for any changes you make and ensure the grunt build passes. See CONTRIBUTING.md for details. License MIT - see LICENSE.md"
  },
  "Examiner-UI/node_modules/fastq/README.html": {
    "href": "Examiner-UI/node_modules/fastq/README.html",
    "title": "fastq | Examiner",
    "summary": "fastq Fast, in memory work queue. Benchmarks (1 million tasks): setImmediate: 812ms fastq: 854ms async.queue: 1298ms neoAsync.queue: 1249ms Obtained on node 12.16.1, on a dedicated server. If you need zero-overhead series function call, check out fastseries. For zero-overhead parallel function call, check out fastparallel. Installation Usage API Licence & copyright Install npm i fastq --save Usage (callback API) 'use strict' const queue = require('fastq')(worker, 1) queue.push(42, function (err, result) { if (err) { throw err } console.log('the result is', result) }) function worker (arg, cb) { cb(null, arg * 2) } Usage (promise API) const queue = require('fastq').promise(worker, 1) async function worker (arg) { return arg * 2 } async function run () { const result = await queue.push(42) console.log('the result is', result) } run() Setting \"this\" 'use strict' const that = { hello: 'world' } const queue = require('fastq')(that, worker, 1) queue.push(42, function (err, result) { if (err) { throw err } console.log(this) console.log('the result is', result) }) function worker (arg, cb) { console.log(this) cb(null, arg * 2) } Using with TypeScript (callback API) 'use strict' import * as fastq from \"fastq\"; import type { queue, done } from \"fastq\"; type Task = { id: number } const q: queue<Task> = fastq(worker, 1) q.push({ id: 42}) function worker (arg: Task, cb: done) { console.log(arg.id) cb(null) } Using with TypeScript (promise API) 'use strict' import * as fastq from \"fastq\"; import type { queueAsPromised } from \"fastq\"; type Task = { id: number } const q: queueAsPromised<Task> = fastq.promise(asyncWorker, 1) q.push({ id: 42}).catch((err) => console.error(err)) async function asyncWorker (arg: Task): Promise<void> { // No need for a try-catch block, fastq handles errors automatically console.log(arg.id) } API fastqueue() queue#push() queue#unshift() queue#pause() queue#resume() queue#idle() queue#length() queue#getQueue() queue#kill() queue#killAndDrain() queue#error() queue#concurrency queue#drain queue#empty queue#saturated fastqueue.promise() fastqueue([that], worker, concurrency) Creates a new queue. Arguments: that, optional context of the worker function. worker, worker function, it would be called with that as this, if that is specified. concurrency, number of concurrent tasks that could be executed in parallel. queue.push(task, done) Add a task at the end of the queue. done(err, result) will be called when the task was processed. queue.unshift(task, done) Add a task at the beginning of the queue. done(err, result) will be called when the task was processed. queue.pause() Pause the processing of tasks. Currently worked tasks are not stopped. queue.resume() Resume the processing of tasks. queue.idle() Returns false if there are tasks being processed or waiting to be processed. true otherwise. queue.length() Returns the number of tasks waiting to be processed (in the queue). queue.getQueue() Returns all the tasks be processed (in the queue). Returns empty array when there are no tasks queue.kill() Removes all tasks waiting to be processed, and reset drain to an empty function. queue.killAndDrain() Same than kill but the drain function will be called before reset to empty. queue.error(handler) Set a global error handler. handler(err, task) will be called each time a task is completed, err will be not null if the task has thrown an error. queue.concurrency Property that returns the number of concurrent tasks that could be executed in parallel. It can be altered at runtime. queue.paused Property (Read-Only) that returns true when the queue is in a paused state. queue.drain Function that will be called when the last item from the queue has been processed by a worker. It can be altered at runtime. queue.empty Function that will be called when the last item from the queue has been assigned to a worker. It can be altered at runtime. queue.saturated Function that will be called when the queue hits the concurrency limit. It can be altered at runtime. fastqueue.promise([that], worker(arg), concurrency) Creates a new queue with Promise apis. It also offers all the methods and properties of the object returned by fastqueue with the modified push and unshift methods. Node v10+ is required to use the promisified version. Arguments: that, optional context of the worker function. worker, worker function, it would be called with that as this, if that is specified. It MUST return a Promise. concurrency, number of concurrent tasks that could be executed in parallel. queue.push(task) => Promise Add a task at the end of the queue. The returned Promise will be fulfilled (rejected) when the task is completed successfully (unsuccessfully). This promise could be ignored as it will not lead to a 'unhandledRejection'. queue.unshift(task) => Promise Add a task at the beginning of the queue. The returned Promise will be fulfilled (rejected) when the task is completed successfully (unsuccessfully). This promise could be ignored as it will not lead to a 'unhandledRejection'. queue.drained() => Promise Wait for the queue to be drained. The returned Promise will be resolved when all tasks in the queue have been processed by a worker. This promise could be ignored as it will not lead to a 'unhandledRejection'. License ISC"
  },
  "Examiner-UI/node_modules/fastq/SECURITY.html": {
    "href": "Examiner-UI/node_modules/fastq/SECURITY.html",
    "title": "Security Policy | Examiner",
    "summary": "Security Policy Supported Versions Use this section to tell people about which versions of your project are currently being supported with security updates. Version Supported 1.x ✅ < 1.0 ❌ Reporting a Vulnerability Please report all vulnerabilities at https://github.com/mcollina/fastq/security."
  },
  "Examiner-UI/node_modules/file-entry-cache/README.html": {
    "href": "Examiner-UI/node_modules/file-entry-cache/README.html",
    "title": "file-entry-cache | Examiner",
    "summary": "file-entry-cache Super simple cache for file metadata, useful for process that work on a given series of files and that only need to repeat the job on the changed ones since the previous run of the process — Edit install npm i --save file-entry-cache Usage The module exposes two functions create and createFromFile. create(cacheName, [directory, useCheckSum]) cacheName: the name of the cache to be created directory: Optional the directory to load the cache from usecheckSum: Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file. createFromFile(pathToCache, [useCheckSum]) pathToCache: the path to the cache file (this combines the cache name and directory) useCheckSum: Whether to use md5 checksum to verify if file changed. If false the default will be to use the mtime and size of the file. // loads the cache, if one does not exists for the given // Id a new one will be prepared to be created var fileEntryCache = require('file-entry-cache'); var cache = fileEntryCache.create('testCache'); var files = expand('../fixtures/*.txt'); // the first time this method is called, will return all the files var oFiles = cache.getUpdatedFiles(files); // this will persist this to disk checking each file stats and // updating the meta attributes `size` and `mtime`. // custom fields could also be added to the meta object and will be persisted // in order to retrieve them later cache.reconcile(); // use this if you want the non visited file entries to be kept in the cache // for more than one execution // // cache.reconcile( true /* noPrune */) // on a second run var cache2 = fileEntryCache.create('testCache'); // will return now only the files that were modified or none // if no files were modified previous to the execution of this function var oFiles = cache.getUpdatedFiles(files); // if you want to prevent a file from being considered non modified // something useful if a file failed some sort of validation // you can then remove the entry from the cache doing cache.removeEntry('path/to/file'); // path to file should be the same path of the file received on `getUpdatedFiles` // that will effectively make the file to appear again as modified until the validation is passed. In that // case you should not remove it from the cache // if you need all the files, so you can determine what to do with the changed ones // you can call var oFiles = cache.normalizeEntries(files); // oFiles will be an array of objects like the following entry = { key: 'some/name/file', the path to the file changed: true, // if the file was changed since previous run meta: { size: 3242, // the size of the file mtime: 231231231, // the modification time of the file data: {} // some extra field stored for this file (useful to save the result of a transformation on the file } } Motivation for this module I needed a super simple and dumb in-memory cache with optional disk persistence (write-back cache) in order to make a script that will beautify files with esformatter to execute only on the files that were changed since the last run. In doing so the process of beautifying files was reduced from several seconds to a small fraction of a second. This module uses flat-cache a super simple key/value cache storage with optional file persistance. The main idea is to read the files when the task begins, apply the transforms required, and if the process succeed, then store the new state of the files. The next time this module request for getChangedFiles will return only the files that were modified. Making the process to end faster. This module could also be used by processes that modify the files applying a transform, in that case the result of the transform could be stored in the meta field, of the entries. Anything added to the meta field will be persisted. Those processes won't need to call getChangedFiles they will instead call normalizeEntries that will return the entries with a changed field that can be used to determine if the file was changed or not. If it was not changed the transformed stored data could be used instead of actually applying the transformation, saving time in case of only a few files changed. In the worst case scenario all the files will be processed. In the best case scenario only a few of them will be processed. Important notes The values set on the meta attribute of the entries should be stringify-able ones if possible, flat-cache uses circular-json to try to persist circular structures, but this should be considered experimental. The best results are always obtained with non circular values All the changes to the cache state are done to memory first and only persisted after reconcile. License MIT"
  },
  "Examiner-UI/node_modules/fill-range/README.html": {
    "href": "Examiner-UI/node_modules/fill-range/README.html",
    "title": "fill-range | Examiner",
    "summary": "fill-range Fill in a range of numbers or letters, optionally passing an increment or step to use, or create a regex-compatible range with options.toRegex Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Install Install with npm: $ npm install --save fill-range Usage Expands numbers and letters, optionally using a step as the last argument. (Numbers may be defined as JavaScript numbers or strings). const fill = require('fill-range'); // fill(from, to[, step, options]); console.log(fill('1', '10')); //=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] console.log(fill('1', '10', { toRegex: true })); //=> [1-9]|10 Params from: {String|Number} the number or letter to start with to: {String|Number} the number or letter to end with step: {String|Number|Object|Function} Optionally pass a step to use. options: {Object|Function}: See all available options Examples By default, an array of values is returned. Alphabetical ranges console.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e'] console.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ] Numerical ranges Numbers can be defined as actual numbers or strings. console.log(fill(1, 5)); //=> [ 1, 2, 3, 4, 5 ] console.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ] Negative ranges Numbers can be defined as actual numbers or strings. console.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ] console.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ] Steps (increments) // numerical ranges with increments console.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ] console.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ] console.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ] // alphabetical ranges with increments console.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ] console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ] console.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ] Options options.step Type: number (formatted as a string or number) Default: undefined Description: The increment to use for the range. Can be used with letters or numbers. Example(s) // numbers console.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ] console.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ] console.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ] // letters console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ] console.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ] console.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ] options.strictRanges Type: boolean Default: false Description: By default, null is returned when an invalid range is passed. Enable this option to throw a RangeError on invalid ranges. Example(s) The following are all invalid: fill('1.1', '2'); // decimals not supported in ranges fill('a', '2'); // incompatible range values fill(1, 10, 'foo'); // invalid \"step\" argument options.stringify Type: boolean Default: undefined Description: Cast all returned values to strings. By default, integers are returned as numbers. Example(s) console.log(fill(1, 5)); //=> [ 1, 2, 3, 4, 5 ] console.log(fill(1, 5, { stringify: true })); //=> [ '1', '2', '3', '4', '5' ] options.toRegex Type: boolean Default: undefined Description: Create a regex-compatible source string, instead of expanding values to an array. Example(s) // alphabetical range console.log(fill('a', 'e', { toRegex: true })); //=> '[a-e]' // alphabetical with step console.log(fill('a', 'z', 3, { toRegex: true })); //=> 'a|d|g|j|m|p|s|v|y' // numerical range console.log(fill('1', '100', { toRegex: true })); //=> '[1-9]|[1-9][0-9]|100' // numerical range with zero padding console.log(fill('000001', '100000', { toRegex: true })); //=> '0{5}[1-9]|0{4}[1-9][0-9]|0{3}[1-9][0-9]{2}|0{2}[1-9][0-9]{3}|0[1-9][0-9]{4}|100000' options.transform Type: function Default: undefined Description: Customize each value in the returned array (or string). (you can also pass this function as the last argument to fill()). Example(s) // add zero padding console.log(fill(1, 5, value => String(value).padStart(4, '0'))); //=> ['0001', '0002', '0003', '0004', '0005'] About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Contributors Commits Contributor 116 jonschlinkert 4 paulmillr 2 realityking 2 bluelovers 1 edorivai 1 wtgtybhertgeghgtwtg Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile Please consider supporting me on Patreon, or start your own Patreon page! License Copyright © 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on April 08, 2019."
  },
  "Examiner-UI/node_modules/find-up/readme.html": {
    "href": "Examiner-UI/node_modules/find-up/readme.html",
    "title": "find-up | Examiner",
    "summary": "find-up Find a file or directory by walking up parent directories Install $ npm install find-up Usage / └── Users └── sindresorhus ├── unicorn.png └── foo └── bar ├── baz └── example.js example.js const path = require('path'); const findUp = require('find-up'); (async () => { console.log(await findUp('unicorn.png')); //=> '/Users/sindresorhus/unicorn.png' console.log(await findUp(['rainbow.png', 'unicorn.png'])); //=> '/Users/sindresorhus/unicorn.png' console.log(await findUp(async directory => { const hasUnicorns = await findUp.exists(path.join(directory, 'unicorn.png')); return hasUnicorns && directory; }, {type: 'directory'})); //=> '/Users/sindresorhus' })(); API findUp(name, options?) findUp(matcher, options?) Returns a Promise for either the path or undefined if it couldn't be found. findUp([...name], options?) Returns a Promise for either the first path found (by respecting the order of the array) or undefined if none could be found. findUp.sync(name, options?) findUp.sync(matcher, options?) Returns a path or undefined if it couldn't be found. findUp.sync([...name], options?) Returns the first path found (by respecting the order of the array) or undefined if none could be found. name Type: string Name of the file or directory to find. matcher Type: Function A function that will be called with each directory until it returns a string with the path, which stops the search, or the root directory has been reached and nothing was found. Useful if you want to match files with certain patterns, set of permissions, or other advanced use-cases. When using async mode, the matcher may optionally be an async or promise-returning function that returns the path. options Type: object cwd Type: string Default: process.cwd() Directory to start from. type Type: string Default: 'file' Values: 'file' 'directory' The type of paths that can match. allowSymlinks Type: boolean Default: true Allow symbolic links to match if they point to the chosen path type. findUp.exists(path) Returns a Promise<boolean> of whether the path exists. findUp.sync.exists(path) Returns a boolean of whether the path exists. path Type: string Path to a file or directory. findUp.stop A Symbol that can be returned by a matcher function to stop the search and cause findUp to immediately return undefined. Useful as a performance optimization in case the current working directory is deeply nested in the filesystem. const path = require('path'); const findUp = require('find-up'); (async () => { await findUp(directory => { return path.basename(directory) === 'work' ? findUp.stop : 'logo.png'; }); })(); Related find-up-cli - CLI for this module pkg-up - Find the closest package.json file pkg-dir - Find the root directory of an npm package resolve-from - Resolve the path of a module like require.resolve() but from a given path Get professional support for 'find-up' with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/flat-cache/README.html": {
    "href": "Examiner-UI/node_modules/flat-cache/README.html",
    "title": "flat-cache | Examiner",
    "summary": "flat-cache A stupidly simple key/value storage using files to persist the data install npm i --save flat-cache Usage const flatCache = require('flat-cache'); // loads the cache, if one does not exists for the given // Id a new one will be prepared to be created const cache = flatCache.load('cacheId'); // sets a key on the cache cache.setKey('key', { foo: 'var' }); // get a key from the cache cache.getKey('key'); // { foo: 'var' } // fetch the entire persisted object cache.all(); // { 'key': { foo: 'var' } } // remove a key cache.removeKey('key'); // removes a key from the cache // save it to disk cache.save(); // very important, if you don't save no changes will be persisted. // cache.save( true /* noPrune */) // can be used to prevent the removal of non visited keys // loads the cache from a given directory, if one does // not exists for the given Id a new one will be prepared to be created const cache = flatCache.load('cacheId', path.resolve('./path/to/folder')); // The following methods are useful to clear the cache // delete a given cache flatCache.clearCacheById('cacheId'); // removes the cacheId document if one exists. // delete all cache flatCache.clearAll(); // remove the cache directory Motivation for this module I needed a super simple and dumb in-memory cache with optional disk persistance in order to make a script that will beutify files with esformatter only execute on the files that were changed since the last run. To make that possible we need to store the fileSize and modificationTime of the files. So a simple key/value storage was needed and Bam! this module was born. Important notes If no directory is especified when the load method is called, a folder named .cache will be created inside the module directory when cache.save is called. If you're committing your node_modules to any vcs, you might want to ignore the default .cache folder, or specify a custom directory. The values set on the keys of the cache should be stringify-able ones, meaning no circular references All the changes to the cache state are done to memory I could have used a timer or Object.observe to deliver the changes to disk, but I wanted to keep this module intentionally dumb and simple Non visited keys are removed when cache.save() is called. If this is not desired, you can pass true to the save call like: cache.save( true /* noPrune */ ). License MIT Changelog changelog"
  },
  "Examiner-UI/node_modules/flat-cache/changelog.html": {
    "href": "Examiner-UI/node_modules/flat-cache/changelog.html",
    "title": "flat-cache - Changelog | Examiner",
    "summary": "flat-cache - Changelog v3.0.4 Refactoring add files by name to the list of exported files - 89a2698, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 02:35:39 v3.0.3 Bug Fixes Fix wrong eslint command - f268e42, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 02:15:04 v3.0.2 Refactoring Update the files paths - 6983a80, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 01:58:39 Move code to src/ - 18ed6e8, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 01:57:17 Change eslint-cache location - beed74c, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 01:48:32 v3.0.1 Refactoring Remove unused deps - 8c6d9dc, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 01:43:29 v3.0.0 Refactoring Fix engines - 52b824c, [Roy Riojas](https://github.com/Roy Riojas), 08/11/2020 01:01:52 Other changes Replace write with combination of mkdir and writeFile (#49) - ef48276, [Bogdan Chadkin](https://github.com/Bogdan Chadkin), 08/11/2020 00:17:15 Node v10 introduced a great \"recursive\" option for mkdir which allows to get rid from mkdirp package and easily rewrite \"write\" package usage with two function calls. https://nodejs.org/api/fs.html#fs_fs_mkdir_path_options_callback Added a testcase for clearAll (#48) - 45b51ca, [Aaron Chen](https://github.com/Aaron Chen), 21/05/2020 08:40:03 requet node>=10 - a5c482c, yumetodo, 10/04/2020 23:14:53 thanks @SuperITMan Update README.md - 29fe40b, [Roy Riojas](https://github.com/Roy Riojas), 10/04/2020 20:08:05 reduce vulnerability to 1 - e9db1b2, yumetodo, 30/03/2020 11:10:43 reduce vulnerabilities dependencies to 8 - b58d196, yumetodo, 30/03/2020 10:54:56 use prettier instead of esbeautifier - 03b1db7, yumetodo, 30/03/2020 10:27:14 update proxyquire - c2f048d, yumetodo, 30/03/2020 10:16:16 update flatted and mocha - a0e56da, yumetodo, 30/03/2020 09:46:45 mocha > mkdirp is updated istanble >>> optimist > minimist is not updated drop support node.js < 10 in develop - beba691, yumetodo, 18/03/2020 01:31:09 see mkdirp npm aufit fix(still remains) - ce166cb, yumetodo, 18/03/2020 01:18:08 37 vulnerabilities required manual review and could not be updated updtate sinon - 9f2d1b6, yumetodo, 18/03/2020 01:17:51 apply eslint-plugin-mocha - 07343b5, yumetodo, 13/03/2020 22:17:21 Less strint version check (#44) - 92aca1c, [Wojciech Maj](https://github.com/Wojciech Maj), 13/11/2019 16:18:25 Use ^ version matching for production dependencies Run npm audit fix Bug Fixes update dependencies and use eslint directly - 73fbed2, yumetodo, 18/03/2020 01:17:27 v2.0.1 Refactoring upgrade node modules to latest versions - 6402ed3, [Roy Riojas](https://github.com/Roy Riojas), 08/01/2019 18:47:05 v2.0.0 Bug Fixes upgrade package.json lock file - 8d21c7b, [Roy Riojas](https://github.com/Roy Riojas), 08/01/2019 17:03:13 Use the same versions of node_js that eslint use - 8d23379, [Roy Riojas](https://github.com/Roy Riojas), 08/01/2019 16:25:11 Other changes Replace circular-json with flatted (#36) - b93aced, [C. K. Tang](https://github.com/C. K. Tang), 08/01/2019 17:03:01 Change JSON parser from circular-json to flatted & 1 more changes (#37) - 745e65a, [Andy Chen](https://github.com/Andy Chen), 08/01/2019 16:17:20 Change JSON parser from circular-json to flatted & 1 more changes Change JSON parser from circular-json Audited 2 vulnerabilities Update package.json Update Engine require There's a bunch of dependencies in this pkg requires node >=4, so I changed it to 4 Remove and add node versions I have seen this pkg is not available with node 0.12 so I removed it I have added a popular used LTS version of node - 10 v1.3.4 Refactoring Add del.js and utils.js to the list of files to be beautified - 9d0ca9b, [Roy Riojas](https://github.com/Roy Riojas), 14/11/2018 12:19:02 v1.3.3 Refactoring Make sure package-lock.json is up to date - a7d2598, [Roy Riojas](https://github.com/Roy Riojas), 14/11/2018 11:36:08 Other changes Removed the need for del (#33) - c429012, [S. Gilroy](https://github.com/S. Gilroy), 13/11/2018 13:56:37 Removed the need for del Removed the need for del as newer versions have broken backwards compatibility. del mainly uses rimraf for deleting folders and files, replaceing it with rimraf only is a minimal change. Disable glob on rimraf calls Added glob disable to wrong call Wrapped rimraf to simplify solution v1.3.2 Refactoring remove yarn.lock file - 704c6c4, [Roy Riojas](https://github.com/Roy Riojas), 07/11/2018 15:41:08 Other changes replace circular-json with flatted (#23)\" - db12d74, [Roy Riojas](https://github.com/Roy Riojas), 07/11/2018 15:40:39 This reverts commit 00f689277a75e85fef28e6a048fad227afc525e6. v1.3.1 Refactoring upgrade deps to remove some security warnings - f405719, [Roy Riojas](https://github.com/Roy Riojas), 06/11/2018 12:07:31 Bug Fixes replace circular-json with flatted (#23) - 00f6892, Terry, 05/11/2018 18:44:16 Other changes update del to v3.0.0 (#26) - d42883f, [Patrick Silva](https://github.com/Patrick Silva), 03/11/2018 01:00:44 Closes #25 v1.3.0 Other changes Added #all method (#16) - 12293be, [Ozair Patel](https://github.com/Ozair Patel), 25/09/2017 14:46:38 Added #all method Added #all method test Updated readme Added yarn.lock Added more keys for #all test Beautified file fix changelog title style (#14) - af8338a, 前端小武, 19/12/2016 20:34:48 v1.2.2 Bug Fixes Do not crash if cache file is invalid JSON. (#13) - 87beaa6, [Roy Riojas](https://github.com/Roy Riojas), 19/12/2016 18:03:35 Fixes #12 Not sure under which situations a cache file might exist that does not contain a valid JSON structure, but just in case to cover the possibility of this happening a try catch block has been added If the cache is somehow not valid the cache will be discarded an a a new cache will be stored instead Other changes Added travis ci support for modern node versions (#11) - 1c2b1f7, [Amila Welihinda](https://github.com/Amila Welihinda), 10/11/2016 23:47:52 Bumping circular-son version (#10) - 4d5e861, [Andrea Giammarchi](https://github.com/Andrea Giammarchi), 02/08/2016 07:13:52 As mentioned in https://github.com/WebReflection/circular-json/issues/25 circular-json wan't rightly implementing the license field. Latest version bump changed only that bit so that ESLint should now be happy. v1.2.1 Bug Fixes Add missing utils.js file to the package. closes #8 - ec10cf2, [Roy Riojas](https://github.com/Roy Riojas), 01/08/2016 02:18:57 v1.2.0 Documentation Add documentation about noPrune option - 23e11f9, [Roy Riojas](https://github.com/Roy Riojas), 01/08/2016 02:06:49 v1.0.11 Features Add noPrune option to cache.save() method. closes #7 - 2c8016a, [Roy Riojas](https://github.com/Roy Riojas), 01/08/2016 02:00:29 Add json read and write utility based on circular-json - c31081e, [Jean Ponchon](https://github.com/Jean Ponchon), 28/07/2016 08:58:17 Bug Fixes Remove UTF16 BOM stripping - 4a41e22, [Jean Ponchon](https://github.com/Jean Ponchon), 29/07/2016 02:18:06 Since we control both writing and reading of JSON stream, there no needs to handle unicode BOM. Use circular-json to handle circular references (fix #5) - cd7aeed, [Jean Ponchon](https://github.com/Jean Ponchon), 25/07/2016 11:11:59 Tests Related fixes Add missing file from eslint test - d6fa3c3, [Jean Ponchon](https://github.com/Jean Ponchon), 29/07/2016 02:15:51 Add test for circular json serialization / deserialization - 07d2ddd, [Jean Ponchon](https://github.com/Jean Ponchon), 28/07/2016 08:59:36 Refactoring Remove unused read-json-sync - 2be1c24, [Jean Ponchon](https://github.com/Jean Ponchon), 28/07/2016 08:59:18 Build Scripts Changes travis tests on 0.12 and 4x - 3a613fd, royriojas, 15/11/2015 14:34:40 v1.0.10 Build Scripts Changes add eslint-fix task - fd29e52, royriojas, 01/11/2015 15:04:08 make sure the test script also verify beautification and linting of files before running tests - e94e176, royriojas, 01/11/2015 11:54:48 Other changes add clearAll for cacheDir - 97383d9, xieyaowu, 31/10/2015 21:02:18 v1.0.9 Bug Fixes wrong default values for changelogx user repo name - 7bb52d1, royriojas, 11/09/2015 15:59:30 v1.0.8 Build Scripts Changes test against node 4 - c395b66, royriojas, 11/09/2015 15:51:39 v1.0.7 Other changes Move dependencies into devDep - 7e47099, [Bogdan Chadkin](https://github.com/Bogdan Chadkin), 11/09/2015 15:10:57 Documentation Add missing changelog link - f51197a, royriojas, 11/09/2015 14:48:05 v1.0.6 Build Scripts Changes Add helpers/code check scripts - bdb82f3, royriojas, 11/09/2015 14:44:31 v1.0.5 Documentation better description for the module - 436817f, royriojas, 11/09/2015 14:35:33 Other changes Update dependencies - be88aa3, [Bogdan Chadkin](https://github.com/Bogdan Chadkin), 11/09/2015 13:47:41 v1.0.4 Refactoring load a cache file using the full filepath - b8f68c2, [Roy Riojas](https://github.com/Roy Riojas), 30/08/2015 04:19:14 Documentation Add documentation about clearAll and clearCacheById - 13947c1, [Roy Riojas](https://github.com/Roy Riojas), 01/03/2015 23:44:05 Features Add methods to remove the cache documents created - af40443, [Roy Riojas](https://github.com/Roy Riojas), 01/03/2015 23:39:27 v1.0.1 Other changes Update README.md - c2b6805, [Roy Riojas](https://github.com/Roy Riojas), 26/02/2015 04:28:07 v1.0.0 Refactoring flat-cache v.1.0.0 - c984274, [Roy Riojas](https://github.com/Roy Riojas), 26/02/2015 04:11:50 Other changes Initial commit - d43cccf, [Roy Riojas](https://github.com/Roy Riojas), 26/02/2015 01:12:16"
  },
  "Examiner-UI/node_modules/flatted/README.html": {
    "href": "Examiner-UI/node_modules/flatted/README.html",
    "title": "flatted | Examiner",
    "summary": "flatted Social Media Photo by Matt Seymour on Unsplash A super light (0.5K) and fast circular JSON parser, directly from the creator of CircularJSON. Available also for PHP. Available also for Python. Announcement \uD83D\uDCE3 There is a standard approach to recursion and more data-types than what JSON allows, and it's part of the Structured Clone polyfill. Beside acting as a polyfill, its @ungap/structured-clone/json export provides both stringify and parse, and it's been tested for being faster than flatted, but its produced output is also smaller than flatted in general. The *@ungap/structured-clone* module is, in short, a drop in replacement for flatted, but it's not compatible with flatted specialized syntax. However, if recursion, as well as more data-types, are what you are after, or interesting for your projects/use cases, consider switching to this new module whenever you can \uD83D\uDC4D npm i flatted Usable via CDN or as regular module. // ESM import {parse, stringify, toJSON, fromJSON} from 'flatted'; // CJS const {parse, stringify, toJSON, fromJSON} = require('flatted'); const a = [{}]; a[0].a = a; a.push(a); stringify(a); // [[\"1\",\"0\"],{\"a\":\"0\"}] toJSON and fromJSON If you'd like to implicitly survive JSON serialization, these two helpers helps: import {toJSON, fromJSON} from 'flatted'; class RecursiveMap extends Map { static fromJSON(any) { return new this(fromJSON(any)); } toJSON() { return toJSON([...this.entries()]); } } const recursive = new RecursiveMap; const same = {}; same.same = same; recursive.set('same', same); const asString = JSON.stringify(recursive); const asMap = RecursiveMap.fromJSON(JSON.parse(asString)); asMap.get('same') === asMap.get('same').same; // true Flatted VS JSON As it is for every other specialized format capable of serializing and deserializing circular data, you should never JSON.parse(Flatted.stringify(data)), and you should never Flatted.parse(JSON.stringify(data)). The only way this could work is to Flatted.parse(Flatted.stringify(data)), as it is also for CircularJSON or any other, otherwise there's no granted data integrity. Also please note this project serializes and deserializes only data compatible with JSON, so that sockets, or anything else with internal classes different from those allowed by JSON standard, won't be serialized and unserialized as expected. New in V1: Exact same JSON API Added a reviver parameter to .parse(string, reviver) and revive your own objects. Added a replacer and a space parameter to .stringify(object, replacer, space) for feature parity with JSON signature. Compatibility All ECMAScript engines compatible with Map, Set, Object.keys, and Array.prototype.reduce will work, even if polyfilled. How does it work ? While stringifying, all Objects, including Arrays, and strings, are flattened out and replaced as unique index. * Once parsed, all indexes will be replaced through the flattened collection. * represented as string to avoid conflicts with numbers // logic example var a = [{one: 1}, {two: '2'}]; a[0].a = a; // a is the main object, will be at index '0' // {one: 1} is the second object, index '1' // {two: '2'} the third, in '2', and it has a string // which will be found at index '3' Flatted.stringify(a); // [[\"1\",\"2\"],{\"one\":1,\"a\":\"0\"},{\"two\":\"3\"},\"2\"] // a[one,two] {one: 1, a} {two: '2'} '2'"
  },
  "Examiner-UI/node_modules/follow-redirects/README.html": {
    "href": "Examiner-UI/node_modules/follow-redirects/README.html",
    "title": "| Examiner",
    "summary": "Follow Redirects Drop-in replacement for Node's http and https modules that automatically follows redirects. follow-redirects provides request and get methods that behave identically to those found on the native http and https modules, with the exception that they will seamlessly follow redirects. const { http, https } = require('follow-redirects'); http.get('http://bit.ly/900913', response => { response.on('data', chunk => { console.log(chunk); }); }).on('error', err => { console.error(err); }); You can inspect the final redirected URL through the responseUrl property on the response. If no redirection happened, responseUrl is the original request URL. const request = https.request({ host: 'bitly.com', path: '/UHfDGO', }, response => { console.log(response.responseUrl); // 'http://duckduckgo.com/robots.txt' }); request.end(); Options Global options Global options are set directly on the follow-redirects module: const followRedirects = require('follow-redirects'); followRedirects.maxRedirects = 10; followRedirects.maxBodyLength = 20 * 1024 * 1024; // 20 MB The following global options are supported: maxRedirects (default: 21) – sets the maximum number of allowed redirects; if exceeded, an error will be emitted. maxBodyLength (default: 10MB) – sets the maximum size of the request body; if exceeded, an error will be emitted. Per-request options Per-request options are set by passing an options object: const url = require('url'); const { http, https } = require('follow-redirects'); const options = url.parse('http://bit.ly/900913'); options.maxRedirects = 10; options.beforeRedirect = (options, response, request) => { // Use this to adjust the request options upon redirecting, // to inspect the latest response headers, // or to cancel the request by throwing an error // response.headers = the redirect response headers // response.statusCode = the redirect response code (eg. 301, 307, etc.) // request.url = the requested URL that resulted in a redirect // request.headers = the headers in the request that resulted in a redirect // request.method = the method of the request that resulted in a redirect if (options.hostname === \"example.com\") { options.auth = \"user:password\"; } }; http.request(options); In addition to the standard HTTP and HTTPS options, the following per-request options are supported: followRedirects (default: true) – whether redirects should be followed. maxRedirects (default: 21) – sets the maximum number of allowed redirects; if exceeded, an error will be emitted. maxBodyLength (default: 10MB) – sets the maximum size of the request body; if exceeded, an error will be emitted. beforeRedirect (default: undefined) – optionally change the request options on redirects, or abort the request by throwing an error. agents (default: undefined) – sets the agent option per protocol, since HTTP and HTTPS use different agents. Example value: { http: new http.Agent(), https: new https.Agent() } trackRedirects (default: false) – whether to store the redirected response details into the redirects array on the response object. Advanced usage By default, follow-redirects will use the Node.js default implementations of http and https. To enable features such as caching and/or intermediate request tracking, you might instead want to wrap follow-redirects around custom protocol implementations: const { http, https } = require('follow-redirects').wrap({ http: require('your-custom-http'), https: require('your-custom-https'), }); Such custom protocols only need an implementation of the request method. Browser Usage Due to the way the browser works, the http and https browser equivalents perform redirects by default. By requiring follow-redirects this way: const http = require('follow-redirects/http'); const https = require('follow-redirects/https'); you can easily tell webpack and friends to replace follow-redirect by the built-in versions: { \"follow-redirects/http\" : \"http\", \"follow-redirects/https\" : \"https\" } Contributing Pull Requests are always welcome. Please file an issue detailing your proposal before you invest your valuable time. Additional features and bug fixes should be accompanied by tests. You can run the test suite locally with a simple npm test command. Debug Logging follow-redirects uses the excellent debug for logging. To turn on logging set the environment variable DEBUG=follow-redirects for debug output from just this module. When running the test suite it is sometimes advantageous to set DEBUG=* to see output from the express server as well. Authors Ruben Verborgh Olivier Lalonde James Talmage License MIT License"
  },
  "Examiner-UI/node_modules/form-data/Readme.html": {
    "href": "Examiner-UI/node_modules/form-data/Readme.html",
    "title": "Form-Data | Examiner",
    "summary": "Form-Data A library to create readable \"multipart/form-data\" streams. Can be used to submit forms and file uploads to other web applications. The API of this library is inspired by the XMLHttpRequest-2 FormData Interface. Install npm install --save form-data Usage In this example we are constructing a form with 3 fields that contain a string, a buffer and a file stream. var FormData = require('form-data'); var fs = require('fs'); var form = new FormData(); form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_file', fs.createReadStream('/foo/bar.jpg')); Also you can use http-response stream: var FormData = require('form-data'); var http = require('http'); var form = new FormData(); http.request('http://nodejs.org/images/logo.png', function (response) { form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_logo', response); }); Or @mikeal's request stream: var FormData = require('form-data'); var request = require('request'); var form = new FormData(); form.append('my_field', 'my value'); form.append('my_buffer', new Buffer(10)); form.append('my_logo', request('http://nodejs.org/images/logo.png')); In order to submit this form to a web application, call submit(url, [callback]) method: form.submit('http://example.org/', function (err, res) { // res – response object (http.IncomingMessage) // res.resume(); }); For more advanced request manipulations submit() method returns http.ClientRequest object, or you can choose from one of the alternative submission methods. Custom options You can provide custom options, such as maxDataSize: var FormData = require('form-data'); var form = new FormData({ maxDataSize: 20971520 }); form.append('my_field', 'my value'); form.append('my_buffer', /* something big */); List of available options could be found in combined-stream Alternative submission methods You can use node's http client interface: var http = require('http'); var request = http.request({ method: 'post', host: 'example.org', path: '/upload', headers: form.getHeaders() }); form.pipe(request); request.on('response', function (res) { console.log(res.statusCode); }); Or if you would prefer the 'Content-Length' header to be set for you: form.submit('example.org/upload', function (err, res) { console.log(res.statusCode); }); To use custom headers and pre-known length in parts: var CRLF = '\\r\\n'; var form = new FormData(); var options = { header: CRLF + '--' + form.getBoundary() + CRLF + 'X-Custom-Header: 123' + CRLF + CRLF, knownLength: 1 }; form.append('my_buffer', buffer, options); form.submit('http://example.com/', function (err, res) { if (err) throw err; console.log('Done'); }); Form-Data can recognize and fetch all the required information from common types of streams (fs.readStream, http.response and mikeal's request), for some other types of streams you'd need to provide \"file\"-related information manually: someModule.stream(function (err, stdout, stderr) { if (err) throw err; var form = new FormData(); form.append('file', stdout, { filename: 'unicycle.jpg', // ... or: filepath: 'photos/toys/unicycle.jpg', contentType: 'image/jpeg', knownLength: 19806 }); form.submit('http://example.com/', function (err, res) { if (err) throw err; console.log('Done'); }); }); The filepath property overrides filename and may contain a relative path. This is typically used when uploading multiple files from a directory. For edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to form.submit() as first parameter: form.submit({ host: 'example.com', path: '/probably.php?extra=params', auth: 'username:password' }, function (err, res) { console.log(res.statusCode); }); In case you need to also send custom HTTP headers with the POST request, you can use the headers key in first parameter of form.submit(): form.submit({ host: 'example.com', path: '/surelynot.php', headers: { 'x-test-header': 'test-header-value' } }, function (err, res) { console.log(res.statusCode); }); Methods Void append( String field, Mixed value [, Mixed options] ). Headers getHeaders( [Headers userHeaders] ) String getBoundary() Void setBoundary() Buffer getBuffer() Integer getLengthSync() Integer getLength( function callback ) Boolean hasKnownLength() Request submit( params, function callback ) String toString() Void append( String field, Mixed value [, Mixed options] ) Append data to the form. You can submit about any format (string, integer, boolean, buffer, etc.). However, Arrays are not supported and need to be turned into strings by the user. var form = new FormData(); form.append('my_string', 'my value'); form.append('my_integer', 1); form.append('my_boolean', true); form.append('my_buffer', new Buffer(10)); form.append('my_array_as_json', JSON.stringify(['bird', 'cute'])); You may provide a string for options, or an object. // Set filename by providing a string for options form.append('my_file', fs.createReadStream('/foo/bar.jpg'), 'bar.jpg'); // provide an object. form.append('my_file', fs.createReadStream('/foo/bar.jpg'), { filename: 'bar.jpg', contentType: 'image/jpeg', knownLength: 19806 }); Headers getHeaders( [Headers userHeaders] ) This method adds the correct content-type header to the provided array of userHeaders. String getBoundary() Return the boundary of the formData. By default, the boundary consists of 26 - followed by 24 numbers for example: --------------------------515890814546601021194782 Void setBoundary(String boundary) Set the boundary string, overriding the default behavior described above. Note: The boundary must be unique and may not appear in the data. Buffer getBuffer() Return the full formdata request package, as a Buffer. You can insert this Buffer in e.g. Axios to send multipart data. var form = new FormData(); form.append('my_buffer', Buffer.from([0x4a,0x42,0x20,0x52,0x6f,0x63,0x6b,0x73])); form.append('my_file', fs.readFileSync('/foo/bar.jpg')); axios.post('https://example.com/path/to/api', form.getBuffer(), form.getHeaders()); Note: Because the output is of type Buffer, you can only append types that are accepted by Buffer: string, Buffer, ArrayBuffer, Array, or Array-like Object. A ReadStream for example will result in an error. Integer getLengthSync() Same as getLength but synchronous. Note: getLengthSync doesn't calculate streams length. Integer getLength(function callback ) Returns the Content-Length async. The callback is used to handle errors and continue once the length has been calculated this.getLength(function (err, length) { if (err) { this._error(err); return; } // add content length request.setHeader('Content-Length', length); ... }.bind(this)); Boolean hasKnownLength() Checks if the length of added values is known. Request submit(params, function callback ) Submit the form to a web application. var form = new FormData(); form.append('my_string', 'Hello World'); form.submit('http://example.com/', function (err, res) { // res – response object (http.IncomingMessage) // res.resume(); } ); String toString() Returns the form data as a string. Don't use this if you are sending files or buffers, use getBuffer() instead. Integration with other libraries Request Form submission using request: var formData = { my_field: 'my_value', my_file: fs.createReadStream(__dirname + '/unicycle.jpg'), }; request.post({url:'http://service.com/upload', formData: formData}, function (err, httpResponse, body) { if (err) { return console.error('upload failed:', err); } console.log('Upload successful! Server responded with:', body); }); For more details see request readme. node-fetch You can also submit a form using node-fetch: var form = new FormData(); form.append('a', 1); fetch('http://example.com', { method: 'POST', body: form }) .then(function (res) { return res.json(); }).then(function (json) { console.log(json); }); axios In Node.js you can post a file using axios: const form = new FormData(); const stream = fs.createReadStream(PATH_TO_FILE); form.append('image', stream); // In Node.js environment you need to set boundary in the header field 'Content-Type' by calling method `getHeaders` const formHeaders = form.getHeaders(); axios.post('http://example.com', form, { headers: { ...formHeaders, }, }) .then(response => response) .catch(error => error) Notes getLengthSync() method DOESN'T calculate length for streams, use knownLength options as workaround. getLength(cb) will send an error as first parameter of callback if stream length cannot be calculated (e.g. send in custom streams w/o using knownLength). submit will not add content-length if form length is unknown or not calculable. Starting version 2.x FormData has dropped support for node@0.10.x. Starting version 3.x FormData has dropped support for node@4.x. License Form-Data is released under the MIT license."
  },
  "Examiner-UI/node_modules/function-bind/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/function-bind/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.1.2 - 2023-10-12 Merged Point to the correct file #16 Commits [Tests] migrate tests to Github Actions 4f8b57c [Tests] remove jscs 90eb2ed [meta] update .gitignore 53fcdc3 [Tests] up to node v11.10, v10.15, v9.11, v8.15, v6.16, v4.9; use nvm install-latest-npm; run audit script in tests 1fe8f6e [meta] add auto-changelog 1921fcb [Robustness] remove runtime dependency on all builtins except .apply f743e61 Docs: enable badges; update wording 503cb12 [readme] update badges 290c5db [Tests] switch to nyc for coverage ea360ba [Dev Deps] update eslint, @ljharb/eslint-config, tape cae5e9e [meta] add funding field; create FUNDING.yml c9f4274 [Tests] fix eslint errors from #15 f69aaa2 [actions] fix permissions 99a0cd9 [meta] use npmignore to autogenerate an npmignore file f03b524 [Dev Deps] update @ljharb/eslint‑config, eslint, tape 7af9300 [Dev Deps] update eslint, @ljharb/eslint-config, covert, tape 64a9127 [Tests] use aud instead of npm audit e75069c [Dev Deps] update @ljharb/eslint-config, aud, tape d03555c [meta] add safe-publish-latest 9c8f809 [Dev Deps] update @ljharb/eslint-config, tape baf6893 [meta] create SECURITY.md 4db1779 [Tests] add npm run audit c8b38ec Revert \"Point to the correct file\" 05cdf0f v1.1.1 - 2017-08-28 Commits [Tests] up to node v8; newer npm breaks on older node; fix scripts 817f7d2 [Dev Deps] update eslint, jscs, tape, @ljharb/eslint-config 854288b [Dev Deps] update tape, jscs, eslint, @ljharb/eslint-config 83e639f Only apps should have lockfiles 5ed97f5 Use a SPDX-compliant “license” field. 5feefea v1.1.0 - 2016-02-14 Commits Update eslint, tape; use my personal shared eslint config 9c9062a Add npm run eslint dd96c56 [New] return the native bind when available. 82186e0 [Dev Deps] update tape, jscs, eslint, @ljharb/eslint-config a3dd767 Update eslint 3dae2f7 Update tape, covert, jscs a181eee [Tests] up to node v5.6, v4.3 964929a Test up to io.js v2.1 2be7310 Update tape, jscs, eslint, @ljharb/eslint-config 45f3d68 [Dev Deps] update tape, jscs 6e1340d [Tests] up to io.js v3.3, node v4.1 d9bad2b Update eslint 935590c [Dev Deps] update jscs, eslint, @ljharb/eslint-config 8c9a1ef Test on io.js v2.2 9a3a38c Run travis-ci tests on iojs and node v0.12; speed up builds; allow 0.8 failures. 69afc26 [Dev Deps] Update tape, eslint 36c1be0 Update tape, jscs 98d8303 Update jscs 9633a4e Update tape, jscs c80ef0f Test up to io.js v3.0 7e2c853 Test on io.js v2.4 5a199a2 Test on io.js v2.3 a511b88 Fixing a typo from 822b4e1938db02dc9584aa434fd3a45cb20caf43 732d6b6 Update jscs da52a48 Lock covert to v1.0.0. d6150fd v1.0.2 - 2014-10-04 v1.0.1 - 2014-10-03 Merged make CI build faster #3 Commits Using my standard jscs.json d8ee94c Adding npm run lint 7571ab7 Using consistent indentation e91a1b1 Updating jscs 7e17892 Using consistent quotes c50b57f Adding keywords cb94631 Directly export a function expression instead of using a declaration, and relying on hoisting. 5a33c5f Naming npm URL and badge in README; use SVG 2aef8fc Naming deps URLs in README 04228d7 Naming travis-ci URLs in README; using SVG 62c810c Make sure functions are invoked correctly (also passing coverage tests) 2b289b4 Removing the strict mode pragmas; they make tests fail. 1aa701d Adding myself as a contributor 85fd57b Adding strict mode pragmas 915b08e Adding devDeps URLs to README 4ccc731 Fixing the description. a7a472c Using a function expression instead of a function declaration. b5d3e4e Updating tape f086be6 Updating jscs 5f9bdb3 Updating jscs 9b409ba Run coverage as part of tests. 8e1b6d4 Run linter as part of tests c1ca83f Updating covert 701e837 v1.0.0 - 2014-08-09 Commits Make sure old and unstable nodes don't fail Travis 27adca3 Fixing an issue when the bound function is called as a constructor in ES3. e20122d Adding npm run coverage a2e29c4 Updating tape b741168 Upgrading tape 63631a0 Updating tape 363cb46 v0.2.0 - 2014-03-23 Commits Updating test coverage to match es5-shim. aa94d44 initial 942ee07 Setting the bound function's length properly. 079f46a Ensuring that some older browsers will throw when given a regex. 36ac55b Removing npm scripts that don't have dependencies 9d2be60 Updating tape 297a4ac Skipping length tests for now. d9891ea don't take my tea dccd930"
  },
  "Examiner-UI/node_modules/function-bind/README.html": {
    "href": "Examiner-UI/node_modules/function-bind/README.html",
    "title": "function-bind | Examiner",
    "summary": "function-bind Implementation of function.prototype.bind Old versions of phantomjs, Internet Explorer < 9, and node < 0.6 don't support Function.prototype.bind. Example Function.prototype.bind = require(\"function-bind\") Installation npm install function-bind Contributors Raynos MIT Licenced"
  },
  "Examiner-UI/node_modules/get-intrinsic/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/get-intrinsic/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.3.0 - 2025-02-22 Commits [Dev Deps] update es-abstract, es-value-fixtures, for-each, object-inspect 9b61553 [Deps] update call-bind-apply-helpers, es-object-atoms, get-proto a341fee [New] add Float16Array de22116 v1.2.7 - 2025-01-02 Commits [Refactor] use get-proto directly 00ab955 [Deps] update math-intrinsics c716cdd [Dev Deps] update call-bound, es-abstract dc648a6 v1.2.6 - 2024-12-11 Commits [Refactor] use math-intrinsics 841be86 [Refactor] use es-object-atoms 42057df [Deps] update call-bind-apply-helpers 45afa24 [Dev Deps] update call-bound 9cba9c6 v1.2.5 - 2024-12-06 Commits [actions] split out node 10-20, and 20+ 6e2b9dd [Refactor] use dunder-proto and call-bind-apply-helpers instead of has-proto c095d17 [Refactor] use gopd 9841d5b [Dev Deps] update @ljharb/eslint-config, auto-changelog, es-abstract, es-value-fixtures, gopd, mock-property, object-inspect, tape 2d07e01 [Deps] update gopd, has-proto, has-symbols, hasown 974d8bf [Dev Deps] update call-bind, es-abstract, tape df9dde1 [Refactor] cache es-define-property as well 43ef543 [Deps] update has-proto, has-symbols, hasown ad4949d [Tests] use call-bound directly ad5c406 [Deps] update has-proto, hasown 45414ca [Tests] replace aud with npm audit 18d3509 [Deps] update es-define-property aadaa3b [Dev Deps] add missing peer dep c296a16 v1.2.4 - 2024-02-05 Commits [Refactor] use all 7 <+ ES6 Errors from es-errors bcac811 v1.2.3 - 2024-02-03 Commits [Refactor] use es-errors, so things that only need those do not need get-intrinsic f11db9c [Dev Deps] update aud, es-abstract, mock-property, npmignore b7ac7d1 [meta] simplify exports faa0cc6 [meta] add missing engines.node 774dd0b [Dev Deps] update tape 5828e8e [Robustness] use null objects for lookups eb9a11f [meta] add sideEffects flag 89bcc7a v1.2.2 - 2023-10-20 Commits [Dev Deps] update @ljharb/eslint-config, aud, call-bind, es-abstract, mock-property, object-inspect, tape f51bcf2 [Refactor] use hasown instead of has 18d14b7 [Deps] update function-bind 6e109c8 v1.2.1 - 2023-05-13 Commits [Fix] avoid a crash in envs without __proto__ 7bad8d0 [Dev Deps] update es-abstract c60e6b7 v1.2.0 - 2023-01-19 Commits [actions] update checkout action ca6b12f [Dev Deps] update @ljharb/eslint-config, es-abstract, object-inspect, tape 41a3727 [Fix] ensure Error.prototype is undeniable c511e97 [Dev Deps] update aud, es-abstract, tape 1bef8a8 [Dev Deps] update aud, es-abstract 0d41f16 [New] add BigInt64Array and BigUint64Array a6cca25 [Tests] use gopd ecf7722 v1.1.3 - 2022-09-12 Commits [Dev Deps] update es-abstract, es-value-fixtures, tape 07ff291 [Fix] properly check for % signs 50ac176 v1.1.2 - 2022-06-08 Fixed [Fix] properly validate against extra % signs #16 Commits [actions] reuse common workflows 0972547 [meta] use npmignore to autogenerate an npmignore file 5ba0b51 [actions] use node/install instead of node/run; use codecov action c364492 [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, es-abstract, object-inspect, tape dc04dad [Dev Deps] update eslint, @ljharb/eslint-config, es-abstract, object-inspect, safe-publish-latest, tape 1c14059 [Tests] use mock-property b396ef0 [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, object-inspect, tape c2c758d [Dev Deps] update eslint, @ljharb/eslint-config, aud, es-abstract, es-value-fixtures, object-inspect, tape 29e3c09 [actions] update codecov uploader 8cbc141 [Dev Deps] update @ljharb/eslint-config, es-abstract, es-value-fixtures, object-inspect, tape 10b6f5c [readme] add github actions/codecov badges 4e25400 [Tests] use for-each instead of foreach c05b957 [Dev Deps] update es-abstract 29b05ae [meta] use prepublishOnly script for npm 7+ 95c285d [Deps] update has-symbols 593cb4f [readme] fix repo URLs 1c8305b [Deps] update has-symbols c7138b6 [Dev Deps] remove unused has-bigints bd63aff v1.1.1 - 2021-02-03 Fixed [meta] export ./package.json #9 Commits [readme] flesh out the readme; use evalmd d12f12c [eslint] set up proper globals config 5a8c098 [Dev Deps] update eslint 7b9a5c0 v1.1.0 - 2021-01-25 Fixed [Refactor] delay Function eval until syntax-derived values are requested #3 Commits [Tests] migrate tests to Github Actions 2ab762b [meta] do not publish github action workflow files 5e7108e [Tests] add some coverage 01ac7a8 [Dev Deps] update eslint, @ljharb/eslint-config, call-bind, es-abstract, tape; add call-bind 911b672 [Refactor] rearrange evalled constructors a bit 7e7e4bf [meta] add Automatic Rebase and Require Allow Edits workflows 0199968 v1.0.2 - 2020-12-17 Commits [Fix] Throw for non‑existent intrinsics 68f873b [Fix] Throw for non‑existent segments in the intrinsic path 8325dee [Dev Deps] update eslint, @ljharb/eslint-config, aud, has-bigints, object-inspect 0c227a7 [meta] do not lint coverage output 70d2419 v1.0.1 - 2020-10-30 Commits [Tests] gather coverage data on every job d1d280d [Fix] add missing dependencies 5031771 [Tests] use es-value-fixtures af48765 v1.0.0 - 2020-10-29 Commits Implementation bbce57c Tests 17b4f0d Initial commit 3153294 npm init fb326c4 [meta] add Automatic Rebase and Require Allow Edits workflows 48862fb [meta] add auto-changelog 5f28ad0 [meta] add \"funding\"; create FUNDING.yml c2bbdde [Tests] add npm run lint 0a84b98 Only apps should have lockfiles 9586c75"
  },
  "Examiner-UI/node_modules/get-intrinsic/README.html": {
    "href": "Examiner-UI/node_modules/get-intrinsic/README.html",
    "title": "get-intrinsic | Examiner",
    "summary": "get-intrinsic Get and robustly cache all JS language-level intrinsics at first require time. See the syntax described in the JS spec for reference. Example var GetIntrinsic = require('get-intrinsic'); var assert = require('assert'); // static methods assert.equal(GetIntrinsic('%Math.pow%'), Math.pow); assert.equal(Math.pow(2, 3), 8); assert.equal(GetIntrinsic('%Math.pow%')(2, 3), 8); delete Math.pow; assert.equal(GetIntrinsic('%Math.pow%')(2, 3), 8); // instance methods var arr = [1]; assert.equal(GetIntrinsic('%Array.prototype.push%'), Array.prototype.push); assert.deepEqual(arr, [1]); arr.push(2); assert.deepEqual(arr, [1, 2]); GetIntrinsic('%Array.prototype.push%').call(arr, 3); assert.deepEqual(arr, [1, 2, 3]); delete Array.prototype.push; GetIntrinsic('%Array.prototype.push%').call(arr, 4); assert.deepEqual(arr, [1, 2, 3, 4]); // missing features delete JSON.parse; // to simulate a real intrinsic that is missing in the environment assert.throws(() => GetIntrinsic('%JSON.parse%')); assert.equal(undefined, GetIntrinsic('%JSON.parse%', true)); Tests Simply clone the repo, npm install, and run npm test Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report."
  },
  "Examiner-UI/node_modules/get-proto/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/get-proto/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.0.1 - 2025-01-02 Commits [Fix] for the Object.getPrototypeOf window, throw for non-objects 7fe6508 v1.0.0 - 2025-01-01 Commits Initial implementation, tests, readme, types 5c70775 Initial commit 7c65c2a npm init 0b8cf82 Only apps should have lockfiles a6d1bff"
  },
  "Examiner-UI/node_modules/get-proto/README.html": {
    "href": "Examiner-UI/node_modules/get-proto/README.html",
    "title": "get-proto | Examiner",
    "summary": "get-proto Robustly get the [[Prototype]] of an object. Uses the best available method. Getting started npm install --save get-proto Usage/Examples const assert = require('assert'); const getProto = require('get-proto'); const a = { a: 1, b: 2, [Symbol.toStringTag]: 'foo' }; const b = { c: 3, __proto__: a }; assert.equal(getProto(b), a); assert.equal(getProto(a), Object.prototype); assert.equal(getProto({ __proto__: null }), null); Tests Clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/glob-parent/README.html": {
    "href": "Examiner-UI/node_modules/glob-parent/README.html",
    "title": "glob-parent | Examiner",
    "summary": "glob-parent Extract the non-magic parent path from a glob string. Usage var globParent = require('glob-parent'); globParent('path/to/*.js'); // 'path/to' globParent('/root/path/to/*.js'); // '/root/path/to' globParent('/*.js'); // '/' globParent('*.js'); // '.' globParent('**/*.js'); // '.' globParent('path/{to,from}'); // 'path' globParent('path/!(to|from)'); // 'path' globParent('path/?(to|from)'); // 'path' globParent('path/+(to|from)'); // 'path' globParent('path/*(to|from)'); // 'path' globParent('path/@(to|from)'); // 'path' globParent('path/**/*'); // 'path' // if provided a non-glob path, returns the nearest dir globParent('path/foo/bar.js'); // 'path/foo' globParent('path/foo/'); // 'path/foo' globParent('path/foo'); // 'path' (see issue #3 for details) API globParent(maybeGlobString, [options]) Takes a string and returns the part of the path before the glob begins. Be aware of Escaping rules and Limitations below. options { // Disables the automatic conversion of slashes for Windows flipBackslashes: true; } Escaping The following characters have special significance in glob patterns and must be escaped if you want them to be treated as regular path characters: ? (question mark) unless used as a path segment alone * (asterisk) | (pipe) ( (opening parenthesis) ) (closing parenthesis) { (opening curly brace) } (closing curly brace) [ (opening bracket) ] (closing bracket) Example globParent('foo/[bar]/'); // 'foo' globParent('foo/\\\\[bar]/'); // 'foo/[bar]' Limitations Braces & Brackets This library attempts a quick and imperfect method of determining which path parts have glob magic without fully parsing/lexing the pattern. There are some advanced use cases that can trip it up, such as nested braces where the outer pair is escaped and the inner one contains a path separator. If you find yourself in the unlikely circumstance of being affected by this or need to ensure higher-fidelity glob handling in your library, it is recommended that you pre-process your input with expand-braces and/or expand-brackets. Windows Backslashes are not valid path separators for globs. If a path with backslashes is provided anyway, for simple cases, glob-parent will replace the path separator for you and return the non-glob parent path (now with forward-slashes, which are still valid as Windows path separators). This cannot be used in conjunction with escape characters. // BAD globParent('C:\\\\Program Files \\\\(x86\\\\)\\\\*.ext'); // 'C:/Program Files /(x86/)' // GOOD globParent('C:/Program Files\\\\(x86\\\\)/*.ext'); // 'C:/Program Files (x86)' If you are using escape characters for a pattern without path parts (i.e. relative to cwd), prefix with ./ to avoid confusing glob-parent. // BAD globParent('foo \\\\[bar]'); // 'foo ' globParent('foo \\\\[bar]*'); // 'foo ' // GOOD globParent('./foo \\\\[bar]'); // 'foo [bar]' globParent('./foo \\\\[bar]*'); // '.' License ISC"
  },
  "Examiner-UI/node_modules/globals/readme.html": {
    "href": "Examiner-UI/node_modules/globals/readme.html",
    "title": "globals | Examiner",
    "summary": "globals Global identifiers from different JavaScript environments It's just a JSON file, so you can use it in any environment. This package is used by ESLint 8 and earlier. For ESLint 9 and later, you should depend on this package directly in your ESLint config. Install npm install globals Usage import globals from 'globals'; console.log(globals.browser); /* { addEventListener: false, applicationCache: false, ArrayBuffer: false, atob: false, … } */ Each global is given a value of true or false. A value of true indicates that the variable may be overwritten. A value of false indicates that the variable should be considered read-only. This information is used by static analysis tools to flag incorrect behavior. We assume all variables should be false unless we hear otherwise. For Node.js this package provides two sets of globals: globals.nodeBuiltin: Globals available to all code running in Node.js. These will usually be available as properties on the globalThis object and include process, Buffer, but not CommonJS arguments like require. See: https://nodejs.org/api/globals.html globals.node: A combination of the globals from nodeBuiltin plus all CommonJS arguments (\"CommonJS module scope\"). See: https://nodejs.org/api/modules.html#modules_the_module_scope When analyzing code that is known to run outside of a CommonJS wrapper, for example, JavaScript modules, nodeBuiltin can find accidental CommonJS references."
  },
  "Examiner-UI/node_modules/gopd/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/gopd/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.2.0 - 2024-12-03 Commits [New] add gOPD entry point; remove get-intrinsic 5b61232 v1.1.0 - 2024-11-29 Commits [New] add types f585e39 [Dev Deps] update @ljharb/eslint-config, auto-changelog, tape 0b8e4fd [Dev Deps] update aud, npmignore, tape 48378b2 [Dev Deps] update @ljharb/eslint-config, aud, tape 78099ee [Tests] replace aud with npm audit 4e0d0ac [meta] add missing engines.node 1443316 [Deps] update get-intrinsic eee5f51 [Deps] update get-intrinsic 550c378 [Dev Deps] add missing peer dep 8c2ecf8 v1.0.1 - 2022-11-01 Commits [Fix] actually export gOPD instead of dP 4b624bf v1.0.0 - 2022-11-01 Commits Initial implementation, tests, readme 0911e01 Initial commit b84e33f [actions] add reusable workflows 12ae28a npm init 280118b [meta] add auto-changelog bb78de5 [meta] create FUNDING.yml; add funding in package.json 11c22e6 [meta] use npmignore to autogenerate an npmignore file 4f4537a Only apps should have lockfiles c567022"
  },
  "Examiner-UI/node_modules/gopd/README.html": {
    "href": "Examiner-UI/node_modules/gopd/README.html",
    "title": "gopd | Examiner",
    "summary": "gopd Object.getOwnPropertyDescriptor, but accounts for IE's broken implementation. Usage var gOPD = require('gopd'); var assert = require('assert'); if (gOPD) { assert.equal(typeof gOPD, 'function', 'descriptors supported'); // use gOPD like Object.getOwnPropertyDescriptor here } else { assert.ok(!gOPD, 'descriptors not supported'); }"
  },
  "Examiner-UI/node_modules/graphemer/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/graphemer/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [1.3.0] - 2021-12-13 Added Updated to include support for Unicode 14 [1.2.0] - 2021-01-29 Updated Refactored to increase speed [1.1.0] - 2020-09-14 Added Updated to include support for Unicode 13 [1.0.0] - 2020-09-13 Forked from work by @JLHwung on original Grapheme-Splitter library: https://github.com/JLHwung/grapheme-splitter/tree/next Converted to Typescript Added development and build tooling"
  },
  "Examiner-UI/node_modules/graphemer/README.html": {
    "href": "Examiner-UI/node_modules/graphemer/README.html",
    "title": "Graphemer: Unicode Character Splitter \uD83E\uDE93 | Examiner",
    "summary": "Graphemer: Unicode Character Splitter \uD83E\uDE93 Introduction This library continues the work of Grapheme Splitter and supports the following unicode versions: Unicode 15 and below [v1.4.0] Unicode 14 and below [v1.3.0] Unicode 13 and below [v1.1.0] Unicode 11 and below [v1.0.0] (Unicode 10 supported by grapheme-splitter) In JavaScript there is not always a one-to-one relationship between string characters and what a user would call a separate visual \"letter\". Some symbols are represented by several characters. This can cause issues when splitting strings and inadvertently cutting a multi-char letter in half, or when you need the actual number of letters in a string. For example, emoji characters like \"\uD83C\uDF37\",\"\uD83C\uDF81\",\"\uD83D\uDCA9\",\"\uD83D\uDE1C\" and \"\uD83D\uDC4D\" are represented by two JavaScript characters each (high surrogate and low surrogate). That is, '\uD83C\uDF37'.length == 2; The combined emoji are even longer: '\uD83C\uDFF3️‍\uD83C\uDF08'.length == 6; What's more, some languages often include combining marks - characters that are used to modify the letters before them. Common examples are the German letter ü and the Spanish letter ñ. Sometimes they can be represented alternatively both as a single character and as a letter + combining mark, with both forms equally valid: var two = 'ñ'; // unnormalized two-char n+◌̃, i.e. \"\\u006E\\u0303\"; var one = 'ñ'; // normalized single-char, i.e. \"\\u00F1\" console.log(one != two); // prints 'true' Unicode normalization, as performed by the popular punycode.js library or ECMAScript 6's String.normalize, can sometimes fix those differences and turn two-char sequences into single characters. But it is not enough in all cases. Some languages like Hindi make extensive use of combining marks on their letters, that have no dedicated single-codepoint Unicode sequences, due to the sheer number of possible combinations. For example, the Hindi word \"अनुच्छेद\" is comprised of 5 letters and 3 combining marks: अ + न + ु + च + ् + छ + े + द which is in fact just 5 user-perceived letters: अ + नु + च् + छे + द and which Unicode normalization would not combine properly. There are also the unusual letter+combining mark combinations which have no dedicated Unicode codepoint. The string Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢L̠ͨͧͩ͘G̴̻͈͍͔̹̑͗̎̅͛́Ǫ̵̹̻̝̳͂̌̌͘ obviously has 5 separate letters, but is in fact comprised of 58 JavaScript characters, most of which are combining marks. Enter the graphemer library. It can be used to properly split JavaScript strings into what a human user would call separate letters (or \"extended grapheme clusters\" in Unicode terminology), no matter what their internal representation is. It is an implementation on the Default Grapheme Cluster Boundary of UAX #29. Installation Install graphemer using the NPM command below: $ npm i graphemer Usage If you're using Typescript or a compiler like Babel (or something like Create React App) things are pretty simple; just import, initialize and use! import Graphemer from 'graphemer'; const splitter = new Graphemer(); // split the string to an array of grapheme clusters (one string each) const graphemes = splitter.splitGraphemes(string); // iterate the string to an iterable iterator of grapheme clusters (one string each) const graphemeIterator = splitter.iterateGraphemes(string); // or do this if you just need their number const graphemeCount = splitter.countGraphemes(string); If you're using vanilla Node you can use the require() method. const Graphemer = require('graphemer').default; const splitter = new Graphemer(); const graphemes = splitter.splitGraphemes(string); Examples import Graphemer from 'graphemer'; const splitter = new Graphemer(); // plain latin alphabet - nothing spectacular splitter.splitGraphemes('abcd'); // returns [\"a\", \"b\", \"c\", \"d\"] // two-char emojis and six-char combined emoji splitter.splitGraphemes('\uD83C\uDF37\uD83C\uDF81\uD83D\uDCA9\uD83D\uDE1C\uD83D\uDC4D\uD83C\uDFF3️‍\uD83C\uDF08'); // returns [\"\uD83C\uDF37\",\"\uD83C\uDF81\",\"\uD83D\uDCA9\",\"\uD83D\uDE1C\",\"\uD83D\uDC4D\",\"\uD83C\uDFF3️‍\uD83C\uDF08\"] // diacritics as combining marks, 10 JavaScript chars splitter.splitGraphemes('Ĺo͂řȩm̅'); // returns [\"Ĺ\",\"o͂\",\"ř\",\"ȩ\",\"m̅\"] // individual Korean characters (Jamo), 4 JavaScript chars splitter.splitGraphemes('뎌쉐'); // returns [\"뎌\",\"쉐\"] // Hindi text with combining marks, 8 JavaScript chars splitter.splitGraphemes('अनुच्छेद'); // returns [\"अ\",\"नु\",\"च्\",\"छे\",\"द\"] // demonic multiple combining marks, 75 JavaScript chars splitter.splitGraphemes('Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢L̠ͨͧͩ͘G̴̻͈͍͔̹̑͗̎̅͛́Ǫ̵̹̻̝̳͂̌̌͘!͖̬̰̙̗̿̋ͥͥ̂ͣ̐́́͜͞'); // returns [\"Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍\",\"A̴̵̜̰͔ͫ͗͢\",\"L̠ͨͧͩ͘\",\"G̴̻͈͍͔̹̑͗̎̅͛́\",\"Ǫ̵̹̻̝̳͂̌̌͘\",\"!͖̬̰̙̗̿̋ͥͥ̂ͣ̐́́͜͞\"] TypeScript Graphemer is built with TypeScript and, of course, includes type declarations. import Graphemer from 'graphemer'; const splitter = new Graphemer(); const split: string[] = splitter.splitGraphemes('Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢L̠ͨͧͩ͘G̴̻͈͍͔̹̑͗̎̅͛́Ǫ̵̹̻̝̳͂̌̌͘!͖̬̰̙̗̿̋ͥͥ̂ͣ̐́́͜͞'); Contributing See Contribution Guide. Acknowledgements This library is a fork of the incredible work done by Orlin Georgiev and Huáng Jùnliàng at https://github.com/orling/grapheme-splitter. The original library was heavily influenced by Devon Govett's excellent grapheme-breaker CoffeeScript library."
  },
  "Examiner-UI/node_modules/has-flag/readme.html": {
    "href": "Examiner-UI/node_modules/has-flag/readme.html",
    "title": "has-flag | Examiner",
    "summary": "has-flag Check if argv has a specific flag Correctly stops looking after an -- argument terminator. Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies. Install $ npm install has-flag Usage // foo.js const hasFlag = require('has-flag'); hasFlag('unicorn'); //=> true hasFlag('--unicorn'); //=> true hasFlag('f'); //=> true hasFlag('-f'); //=> true hasFlag('foo=bar'); //=> true hasFlag('foo'); //=> false hasFlag('rainbow'); //=> false $ node foo.js -f --unicorn --foo=bar -- --rainbow API hasFlag(flag, [argv]) Returns a boolean for whether the flag exists. flag Type: string CLI flag to look for. The -- prefix is optional. argv Type: string[] Default: process.argv CLI arguments. Security To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/has-symbols/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/has-symbols/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.1.0 - 2024-12-02 Commits [actions] update workflows 548c0bf [actions] further shard; update action deps bec56bb [meta] use npmignore to autogenerate an npmignore file ac81032 [New] add types 6469cbf [actions] update rebase action to use reusable workflow 9c9d4d0 [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape adb5887 [Dev Deps] update @ljharb/eslint-config, aud, tape 13ec198 [Dev Deps] update auto-changelog, core-js, tape 941be52 [Tests] replace aud with npm audit 74f49e9 [Dev Deps] update npmignore 9c0ac04 [Dev Deps] add missing peer dep 52337a5 v1.0.3 - 2022-03-01 Commits [actions] use node/install instead of node/run; use codecov action 518b28f [meta] add bugs and homepage fields; reorder package.json c480b13 [actions] reuse common workflows 01d0ee0 [actions] update codecov uploader 6424ebe [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, tape dfa7e7f [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, tape 0c8d436 [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 9026554 [readme] add actions and codecov badges eaa9682 [Dev Deps] update eslint, tape bc7a3ba [Dev Deps] update eslint, auto-changelog 0ace00a [meta] use prepublishOnly script for npm 7+ 093f72b [Tests] test on all 16 minors 9b80d3d v1.0.2 - 2021-02-27 Fixed [Fix] use a universal way to get the original Symbol #11 Commits [Tests] migrate tests to Github Actions 90ae798 [meta] do not publish github action workflow files 29e60a1 [Tests] run nyc on all tests 8476b91 [readme] fix repo URLs, remove defunct badges 126288e [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, core-js, get-own-property-symbols d84bdfa [Tests] fix linting errors 0df3070 [actions] add \"Allow Edits\" workflow 1e6bc29 [Dev Deps] update eslint, @ljharb/eslint-config, tape 36cea2a [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 1278338 [Dev Deps] update eslint, @ljharb/eslint-config, aud, tape 1493254 [Dev Deps] update eslint, @ljharb/eslint-config, core-js b090bf2 [actions] switch Automatic Rebase workflow to pull_request_target event 4addb7a [Dev Deps] update auto-changelog, tape 81d0baf [Dev Deps] update auto-changelog; add aud 1a4e561 [readme] remove unused testling URLs 3000941 [Tests] only audit prod deps 692e974 [Dev Deps] update @ljharb/eslint-config 51c946c v1.0.1 - 2019-11-16 Commits [Tests] use shared travis-ci configs ce396c9 [Tests] up to node v12.4, v11.15, v10.15, v9.11, v8.15, v7.10, v6.17, v4.9; use nvm install-latest-npm 0690732 [meta] add auto-changelog 2163d0b [Dev Deps] update eslint, @ljharb/eslint-config, core-js, safe-publish-latest, tape 8e0951f [actions] add automatic rebasing / merge commit blocking b09cdb7 [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, core-js, get-own-property-symbols, tape 1dd42cd [meta] create FUNDING.yml aa57a17 Only apps should have lockfiles a2d8bea [Tests] use npx aud instead of nsp or npm audit with hoops 9e96cb7 [meta] add funding field a0b32cf [Dev Deps] update safe-publish-latest cb9f0a5 v1.0.0 - 2016-09-19 Commits Tests. ecb6eb9 package.json 88a337c Initial commit 42e1e55 Initial implementation. 33f5cc6 read me 01f1170"
  },
  "Examiner-UI/node_modules/has-symbols/README.html": {
    "href": "Examiner-UI/node_modules/has-symbols/README.html",
    "title": "has-symbols | Examiner",
    "summary": "has-symbols Determine if the JS environment has Symbol support. Supports spec, or shams. Example var hasSymbols = require('has-symbols'); hasSymbols() === true; // if the environment has native Symbol support. Not polyfillable, not forgeable. var hasSymbolsKinda = require('has-symbols/shams'); hasSymbolsKinda() === true; // if the environment has a Symbol sham that mostly follows the spec. Supported Symbol shams get-own-property-symbols npm | github core-js npm | github Tests Simply clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/has-tostringtag/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/has-tostringtag/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.0.2 - 2024-02-01 Fixed [Fix] move has-symbols back to prod deps #3 v1.0.1 - 2024-02-01 Commits [patch] add types 9276414 [meta] use npmignore to autogenerate an npmignore file 5c0dcd1 [actions] reuse common workflows dee9509 [actions] update codecov uploader b8cb3a0 [Tests] generate coverage be5b288 [Dev Deps] update eslint, @ljharb/eslint-config, safe-publish-latest, tape 69a0827 [Dev Deps] update eslint, @ljharb/eslint-config, aud, auto-changelog, tape 4c9e210 [actions] update rebase action to use reusable workflow ca8dcd3 [Dev Deps] update @ljharb/eslint-config, aud, npmignore, tape 07f3eaf [Deps] update has-symbols 999e009 [Tests] remove staging tests since they fail on modern node 9d9526b v1.0.0 - 2021-08-05 Commits Tests 6b6f573 Initial commit 2f8190e [meta] do not publish github action workflow files 6e08cc4 readme 94bed6c npm init be67840 Implementation c4914ec [meta] use auto-changelog 4aaf768 Only apps should have lockfiles bc4d99e [meta] add safe-publish-latest 6523c05"
  },
  "Examiner-UI/node_modules/has-tostringtag/README.html": {
    "href": "Examiner-UI/node_modules/has-tostringtag/README.html",
    "title": "has-tostringtag | Examiner",
    "summary": "has-tostringtag Determine if the JS environment has Symbol.toStringTag support. Supports spec, or shams. Example var hasSymbolToStringTag = require('has-tostringtag'); hasSymbolToStringTag() === true; // if the environment has native Symbol.toStringTag support. Not polyfillable, not forgeable. var hasSymbolToStringTagKinda = require('has-tostringtag/shams'); hasSymbolToStringTagKinda() === true; // if the environment has a Symbol.toStringTag sham that mostly follows the spec. Supported Symbol shams get-own-property-symbols npm | github core-js npm | github Tests Simply clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/hasown/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/hasown/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v2.0.2 - 2024-03-10 Commits [types] use shared config 68e9d4d [actions] remove redundant finisher; use reusable workflow 241a68e [Tests] increase coverage 4125c0d [Tests] skip npm ls in old node due to TS 01b9282 [types] improve predicate type d340f85 [Dev Deps] update tape 70089fc [Tests] use @arethetypeswrong/cli 50b272c v2.0.1 - 2024-02-10 Commits [types] use a handwritten d.ts file; fix exported type 012b989 [Dev Deps] update @types/function-bind, @types/mock-property, @types/tape, aud, mock-property, npmignore, tape, typescript 977a56f [meta] add sideEffects flag 3a60b7b v2.0.0 - 2023-10-19 Commits revamped implementation, tests, readme 72bf8b3 [meta] revamp package.json 079775f Only apps should have lockfiles 6640e23 v1.0.1 - 2023-10-10 Commits Initial commit 8dbfde6"
  },
  "Examiner-UI/node_modules/hasown/README.html": {
    "href": "Examiner-UI/node_modules/hasown/README.html",
    "title": "hasown | Examiner",
    "summary": "hasown A robust, ES3 compatible, \"has own property\" predicate. Example const assert = require('assert'); const hasOwn = require('hasown'); assert.equal(hasOwn({}, 'toString'), false); assert.equal(hasOwn([], 'length'), true); assert.equal(hasOwn({ a: 42 }, 'a'), true); Tests Simply clone the repo, npm install, and run npm test"
  },
  "Examiner-UI/node_modules/ignore/README.html": {
    "href": "Examiner-UI/node_modules/ignore/README.html",
    "title": "ignore | Examiner",
    "summary": "Linux OS X Windows Coverage Downloads ignore ignore is a manager, filter and parser which implemented in pure JavaScript according to the .gitignore spec 2.22.1. ignore is used by eslint, gitbook and many others. Pay ATTENTION that minimatch (which used by fstream-ignore) does not follow the gitignore spec. To filter filenames according to a .gitignore file, I recommend this npm package, ignore. To parse an .npmignore file, you should use minimatch, because an .npmignore file is parsed by npm using minimatch and it does not work in the .gitignore way. Tested on ignore is fully tested, and has more than five hundreds of unit tests. Linux + Node: 0.8 - 7.x Windows + Node: 0.10 - 7.x, node < 0.10 is not tested due to the lack of support of appveyor. Actually, ignore does not rely on any versions of node specially. Since 4.0.0, ignore will no longer support node < 6 by default, to use in node < 6, require('ignore/legacy'). For details, see CHANGELOG. Table Of Main Contents Usage Pathname Conventions See Also: glob-gitignore matches files using patterns and filters them according to gitignore rules. Upgrade Guide Install npm i ignore Usage import ignore from 'ignore' const ig = ignore().add(['.abc/*', '!.abc/d/']) Filter the given paths const paths = [ '.abc/a.js', // filtered out '.abc/d/e.js' // included ] ig.filter(paths) // ['.abc/d/e.js'] ig.ignores('.abc/a.js') // true As the filter function paths.filter(ig.createFilter()); // ['.abc/d/e.js'] Win32 paths will be handled ig.filter(['.abc\\\\a.js', '.abc\\\\d\\\\e.js']) // if the code above runs on windows, the result will be // ['.abc\\\\d\\\\e.js'] Why another ignore? ignore is a standalone module, and is much simpler so that it could easy work with other programs, unlike isaacs's fstream-ignore which must work with the modules of the fstream family. ignore only contains utility methods to filter paths according to the specified ignore rules, so ignore never try to find out ignore rules by traversing directories or fetching from git configurations. ignore don't cares about sub-modules of git projects. Exactly according to gitignore man page, fixes some known matching issues of fstream-ignore, such as: '/*.js' should only match 'a.js', but not 'abc/a.js'. '**/foo' should match 'foo' anywhere. Prevent re-including a file if a parent directory of that file is excluded. Handle trailing whitespaces: 'a '(one space) should not match 'a '(two spaces). 'a \\ ' matches 'a ' All test cases are verified with the result of git check-ignore. Methods .add(pattern: string | Ignore): this .add(patterns: Array<string | Ignore>): this pattern String | Ignore An ignore pattern string, or the Ignore instance patterns Array<String | Ignore> Array of ignore patterns. Adds a rule or several rules to the current manager. Returns this Notice that a line starting with '#'(hash) is treated as a comment. Put a backslash ('\\') in front of the first hash for patterns that begin with a hash, if you want to ignore a file with a hash at the beginning of the filename. ignore().add('#abc').ignores('#abc') // false ignore().add('\\\\#abc').ignores('#abc') // true pattern could either be a line of ignore pattern or a string of multiple ignore patterns, which means we could just ignore().add() the content of a ignore file: ignore() .add(fs.readFileSync(filenameOfGitignore).toString()) .filter(filenames) pattern could also be an ignore instance, so that we could easily inherit the rules of another Ignore instance. .addIgnoreFile(path) REMOVED in 3.x for now. To upgrade ignore@2.x up to 3.x, use import fs from 'fs' if (fs.existsSync(filename)) { ignore().add(fs.readFileSync(filename).toString()) } instead. .filter(paths: Array<Pathname>): Array<Pathname> type Pathname = string Filters the given array of pathnames, and returns the filtered array. paths Array.<Pathname> The array of pathnames to be filtered. Pathname Conventions: 1. Pathname should be a path.relative()d pathname Pathname should be a string that have been path.join()ed, or the return value of path.relative() to the current directory, // WRONG, an error will be thrown ig.ignores('./abc') // WRONG, for it will never happen, and an error will be thrown // If the gitignore rule locates at the root directory, // `'/abc'` should be changed to `'abc'`. // ``` // path.relative('/', '/abc') -> 'abc' // ``` ig.ignores('/abc') // WRONG, that it is an absolute path on Windows, an error will be thrown ig.ignores('C:\\\\abc') // Right ig.ignores('abc') // Right ig.ignores(path.join('./abc')) // path.join('./abc') -> 'abc' In other words, each Pathname here should be a relative path to the directory of the gitignore rules. Suppose the dir structure is: /path/to/your/repo |-- a | |-- a.js | |-- .b | |-- .c |-- .DS_store Then the paths might be like this: [ 'a/a.js' '.b', '.c/.DS_store' ] 2. filenames and dirnames node-ignore does NO fs.stat during path matching, so for the example below: // First, we add a ignore pattern to ignore a directory ig.add('config/') // `ig` does NOT know if 'config', in the real world, // is a normal file, directory or something. ig.ignores('config') // `ig` treats `config` as a file, so it returns `false` ig.ignores('config/') // returns `true` Specially for people who develop some library based on node-ignore, it is important to understand that. Usually, you could use glob with option.mark = true to fetch the structure of the current directory: import glob from 'glob' glob('**', { // Adds a / character to directory matches. mark: true }, (err, files) => { if (err) { return console.error(err) } let filtered = ignore().add(patterns).filter(files) console.log(filtered) }) .ignores(pathname: Pathname): boolean new in 3.2.0 Returns Boolean whether pathname should be ignored. ig.ignores('.abc/a.js') // true .createFilter() Creates a filter function which could filter an array of paths with Array.prototype.filter. Returns function(path) the filter function. .test(pathname: Pathname) since 5.0.0 Returns TestResult interface TestResult { ignored: boolean // true if the `pathname` is finally unignored by some negative pattern unignored: boolean } {ignored: true, unignored: false}: the pathname is ignored {ignored: false, unignored: true}: the pathname is unignored {ignored: false, unignored: false}: the pathname is never matched by any ignore rules. static ignore.isPathValid(pathname): boolean since 5.0.0 Check whether the pathname is an valid path.relative()d path according to the convention. This method is NOT used to check if an ignore pattern is valid. ignore.isPathValid('./foo') // false ignore(options) options.ignorecase since 4.0.0 Similar as the core.ignorecase option of git-config, node-ignore will be case insensitive if options.ignorecase is set to true (the default value), otherwise case sensitive. const ig = ignore({ ignorecase: false }) ig.add('*.png') ig.ignores('*.PNG') // false options.ignoreCase?: boolean since 5.2.0 Which is alternative to options.ignoreCase options.allowRelativePaths?: boolean since 5.2.0 This option brings backward compatibility with projects which based on ignore@4.x. If options.allowRelativePaths is true, ignore will not check whether the given path to be tested is path.relative()d. However, passing a relative path, such as './foo' or '../foo', to test if it is ignored or not is not a good practise, which might lead to unexpected behavior ignore({ allowRelativePaths: true }).ignores('../foo/bar.js') // And it will not throw Upgrade Guide Upgrade 4.x -> 5.x Since 5.0.0, if an invalid Pathname passed into ig.ignores(), an error will be thrown, unless options.allowRelative = true is passed to the Ignore factory. While ignore < 5.0.0 did not make sure what the return value was, as well as .ignores(pathname: Pathname): boolean .filter(pathnames: Array<Pathname>): Array<Pathname> .createFilter(): (pathname: Pathname) => boolean .test(pathname: Pathname): {ignored: boolean, unignored: boolean} See the convention here for details. If there are invalid pathnames, the conversion and filtration should be done by users. import {isPathValid} from 'ignore' // introduced in 5.0.0 const paths = [ // invalid ////////////////// '', false, '../foo', '.', ////////////////// // valid 'foo' ] .filter(isValidPath) ig.filter(paths) Upgrade 3.x -> 4.x Since 4.0.0, ignore will no longer support node < 6, to use ignore in node < 6: var ignore = require('ignore/legacy') Upgrade 2.x -> 3.x All options of 2.x are unnecessary and removed, so just remove them. ignore() instance is no longer an EventEmitter, and all events are unnecessary and removed. .addIgnoreFile() is removed, see the .addIgnoreFile section for details. Collaborators @whitecolor Alex @SamyPesse Samy Pessé @azproduction Mikhail Davydov @TrySound Bogdan Chadkin @JanMattner Jan Mattner @ntwb Stephen Edgar @kasperisager Kasper Isager @sandersn Nathan Shively-Sanders"
  },
  "Examiner-UI/node_modules/import-fresh/readme.html": {
    "href": "Examiner-UI/node_modules/import-fresh/readme.html",
    "title": "import-fresh | Examiner",
    "summary": "import-fresh Import a module while bypassing the cache Useful for testing purposes when you need to freshly import a module. ESM For ESM, you can use this snippet: const importFresh = moduleName => import(`${moduleName}?${Date.now()}`); const {default: foo} = await importFresh('foo'); This snippet causes a memory leak, so only use it for short-lived tests. Install npm install import-fresh Usage // foo.js let i = 0; module.exports = () => ++i; const importFresh = require('import-fresh'); require('./foo')(); //=> 1 require('./foo')(); //=> 2 importFresh('./foo')(); //=> 1 importFresh('./foo')(); //=> 1 Related clear-module - Clear a module from the import cache import-from - Import a module from a given path import-cwd - Import a module from the current working directory import-lazy - Import modules lazily"
  },
  "Examiner-UI/node_modules/imurmurhash/README.html": {
    "href": "Examiner-UI/node_modules/imurmurhash/README.html",
    "title": "iMurmurHash.js | Examiner",
    "summary": "iMurmurHash.js An incremental implementation of the MurmurHash3 (32-bit) hashing algorithm for JavaScript based on Gary Court's implementation with kazuyukitanimura's modifications. This version works significantly faster than the non-incremental version if you need to hash many small strings into a single hash, since string concatenation (to build the single string to pass the non-incremental version) is fairly costly. In one case tested, using the incremental version was about 50% faster than concatenating 5-10 strings and then hashing. Installation To use iMurmurHash in the browser, download the latest version and include it as a script on your site. <script type=\"text/javascript\" src=\"/scripts/imurmurhash.min.js\"></script> <script> // Your code here, access iMurmurHash using the global object MurmurHash3 </script> To use iMurmurHash in Node.js, install the module using NPM: npm install imurmurhash Then simply include it in your scripts: MurmurHash3 = require('imurmurhash'); Quick Example // Create the initial hash var hashState = MurmurHash3('string'); // Incrementally add text hashState.hash('more strings'); hashState.hash('even more strings'); // All calls can be chained if desired hashState.hash('and').hash('some').hash('more'); // Get a result hashState.result(); // returns 0xe4ccfe6b Functions MurmurHash3 ([string], [seed]) Get a hash state object, optionally initialized with the given string and seed. Seed must be a positive integer if provided. Calling this function without the new keyword will return a cached state object that has been reset. This is safe to use as long as the object is only used from a single thread and no other hashes are created while operating on this one. If this constraint cannot be met, you can use new to create a new state object. For example: // Use the cached object, calling the function again will return the same // object (but reset, so the current state would be lost) hashState = MurmurHash3(); ... // Create a new object that can be safely used however you wish. Calling the // function again will simply return a new state object, and no state loss // will occur, at the cost of creating more objects. hashState = new MurmurHash3(); Both methods can be mixed however you like if you have different use cases. MurmurHash3.prototype.hash (string) Incrementally add string to the hash. This can be called as many times as you want for the hash state object, including after a call to result(). Returns this so calls can be chained. MurmurHash3.prototype.result () Get the result of the hash as a 32-bit positive integer. This performs the tail and finalizer portions of the algorithm, but does not store the result in the state object. This means that it is perfectly safe to get results and then continue adding strings via hash. // Do the whole string at once MurmurHash3('this is a test string').result(); // 0x70529328 // Do part of the string, get a result, then the other part var m = MurmurHash3('this is a'); m.result(); // 0xbfc4f834 m.hash(' test string').result(); // 0x70529328 (same as above) MurmurHash3.prototype.reset ([seed]) Reset the state object for reuse, optionally using the given seed (defaults to 0 like the constructor). Returns this so calls can be chained. License (MIT) Copyright (c) 2013 Gary Court, Jens Taylor Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/is-extglob/README.html": {
    "href": "Examiner-UI/node_modules/is-extglob/README.html",
    "title": "is-extglob | Examiner",
    "summary": "is-extglob Returns true if a string has an extglob. Install Install with npm: $ npm install --save is-extglob Usage var isExtglob = require('is-extglob'); True isExtglob('?(abc)'); isExtglob('@(abc)'); isExtglob('!(abc)'); isExtglob('*(abc)'); isExtglob('+(abc)'); False Escaped extglobs: isExtglob('\\\\?(abc)'); isExtglob('\\\\@(abc)'); isExtglob('\\\\!(abc)'); isExtglob('\\\\*(abc)'); isExtglob('\\\\+(abc)'); Everything else... isExtglob('foo.js'); isExtglob('!foo.js'); isExtglob('*.js'); isExtglob('**/abc.js'); isExtglob('abc/*.js'); isExtglob('abc/(aaa|bbb).js'); isExtglob('abc/[a-z].js'); isExtglob('abc/{a,b}.js'); isExtglob('abc/?.js'); isExtglob('abc.js'); isExtglob('abc/def/ghi.js'); History v2.0 Adds support for escaping. Escaped exglobs no longer return true. About Related projects has-glob: Returns true if an array has a glob pattern. | homepage is-glob: Returns true if the given string looks like a glob pattern or an extglob pattern… more | homepage micromatch: Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | homepage Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Building docs (This document was generated by verb-generate-readme (a verb generator), please don't edit the readme directly. Any changes to the readme must be made in .verb.md.) To generate the readme and API documentation with verb: $ npm install -g verb verb-generate-readme && verb Running tests Install dev dependencies: $ npm install -d && npm test Author Jon Schlinkert github/jonschlinkert twitter/jonschlinkert License Copyright © 2016, Jon Schlinkert. Released under the MIT license. This file was generated by verb-generate-readme, v0.1.31, on October 12, 2016."
  },
  "Examiner-UI/node_modules/is-glob/README.html": {
    "href": "Examiner-UI/node_modules/is-glob/README.html",
    "title": "is-glob | Examiner",
    "summary": "is-glob Returns true if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Install Install with npm: $ npm install --save is-glob You might also be interested in is-valid-glob and has-glob. Usage var isGlob = require('is-glob'); Default behavior True Patterns that have glob characters or regex patterns will return true: isGlob('!foo.js'); isGlob('*.js'); isGlob('**/abc.js'); isGlob('abc/*.js'); isGlob('abc/(aaa|bbb).js'); isGlob('abc/[a-z].js'); isGlob('abc/{a,b}.js'); //=> true Extglobs isGlob('abc/@(a).js'); isGlob('abc/!(a).js'); isGlob('abc/+(a).js'); isGlob('abc/*(a).js'); isGlob('abc/?(a).js'); //=> true False Escaped globs or extglobs return false: isGlob('abc/\\\\@(a).js'); isGlob('abc/\\\\!(a).js'); isGlob('abc/\\\\+(a).js'); isGlob('abc/\\\\*(a).js'); isGlob('abc/\\\\?(a).js'); isGlob('\\\\!foo.js'); isGlob('\\\\*.js'); isGlob('\\\\*\\\\*/abc.js'); isGlob('abc/\\\\*.js'); isGlob('abc/\\\\(aaa|bbb).js'); isGlob('abc/\\\\[a-z].js'); isGlob('abc/\\\\{a,b}.js'); //=> false Patterns that do not have glob patterns return false: isGlob('abc.js'); isGlob('abc/def/ghi.js'); isGlob('foo.js'); isGlob('abc/@.js'); isGlob('abc/+.js'); isGlob('abc/?.js'); isGlob(); isGlob(null); //=> false Arrays are also false (If you want to check if an array has a glob pattern, use has-glob): isGlob(['**/*.js']); isGlob(['foo.js']); //=> false Option strict When options.strict === false the behavior is less strict in determining if a pattern is a glob. Meaning that some patterns that would return false may return true. This is done so that matching libraries like micromatch have a chance at determining if the pattern is a glob or not. True Patterns that have glob characters or regex patterns will return true: isGlob('!foo.js', {strict: false}); isGlob('*.js', {strict: false}); isGlob('**/abc.js', {strict: false}); isGlob('abc/*.js', {strict: false}); isGlob('abc/(aaa|bbb).js', {strict: false}); isGlob('abc/[a-z].js', {strict: false}); isGlob('abc/{a,b}.js', {strict: false}); //=> true Extglobs isGlob('abc/@(a).js', {strict: false}); isGlob('abc/!(a).js', {strict: false}); isGlob('abc/+(a).js', {strict: false}); isGlob('abc/*(a).js', {strict: false}); isGlob('abc/?(a).js', {strict: false}); //=> true False Escaped globs or extglobs return false: isGlob('\\\\!foo.js', {strict: false}); isGlob('\\\\*.js', {strict: false}); isGlob('\\\\*\\\\*/abc.js', {strict: false}); isGlob('abc/\\\\*.js', {strict: false}); isGlob('abc/\\\\(aaa|bbb).js', {strict: false}); isGlob('abc/\\\\[a-z].js', {strict: false}); isGlob('abc/\\\\{a,b}.js', {strict: false}); //=> false About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: assemble: Get the rocks out of your socks! Assemble makes you fast at creating web projects… more | homepage base: Framework for rapidly creating high quality, server-side node.js applications, using plugins like building blocks | homepage update: Be scalable! Update is a new, open source developer framework and CLI for automating updates… more | homepage verb: Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used… more | homepage Contributors Commits Contributor 47 jonschlinkert 5 doowb 1 phated 1 danhper 1 paulmillr Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on March 27, 2019."
  },
  "Examiner-UI/node_modules/is-number/README.html": {
    "href": "Examiner-UI/node_modules/is-number/README.html",
    "title": "is-number | Examiner",
    "summary": "is-number Returns true if the value is a finite number. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Install Install with npm: $ npm install --save is-number Why is this needed? In JavaScript, it's not always as straightforward as it should be to reliably check if a value is a number. It's common for devs to use +, -, or Number() to cast a string value to a number (for example, when values are returned from user input, regex matches, parsers, etc). But there are many non-intuitive edge cases that yield unexpected results: console.log(+[]); //=> 0 console.log(+''); //=> 0 console.log(+' '); //=> 0 console.log(typeof NaN); //=> 'number' This library offers a performant way to smooth out edge cases like these. Usage const isNumber = require('is-number'); See the tests for more examples. true isNumber(5e3); // true isNumber(0xff); // true isNumber(-1.1); // true isNumber(0); // true isNumber(1); // true isNumber(1.1); // true isNumber(10); // true isNumber(10.10); // true isNumber(100); // true isNumber('-1.1'); // true isNumber('0'); // true isNumber('012'); // true isNumber('0xff'); // true isNumber('1'); // true isNumber('1.1'); // true isNumber('10'); // true isNumber('10.10'); // true isNumber('100'); // true isNumber('5e3'); // true isNumber(parseInt('012')); // true isNumber(parseFloat('012')); // true False Everything else is false, as you would expect: isNumber(Infinity); // false isNumber(NaN); // false isNumber(null); // false isNumber(undefined); // false isNumber(''); // false isNumber(' '); // false isNumber('foo'); // false isNumber([1]); // false isNumber([]); // false isNumber(function () {}); // false isNumber({}); // false Release history 7.0.0 Refactor. Now uses .isFinite if it exists. Performance is about the same as v6.0 when the value is a string or number. But it's now 3x-4x faster when the value is not a string or number. 6.0.0 Optimizations, thanks to @benaadams. 5.0.0 Breaking changes removed support for instanceof Number and instanceof String Benchmarks As with all benchmarks, take these with a grain of salt. See the benchmarks for more detail. # all v7.0 x 413,222 ops/sec ±2.02% (86 runs sampled) v6.0 x 111,061 ops/sec ±1.29% (85 runs sampled) parseFloat x 317,596 ops/sec ±1.36% (86 runs sampled) fastest is 'v7.0' # string v7.0 x 3,054,496 ops/sec ±1.05% (89 runs sampled) v6.0 x 2,957,781 ops/sec ±0.98% (88 runs sampled) parseFloat x 3,071,060 ops/sec ±1.13% (88 runs sampled) fastest is 'parseFloat,v7.0' # number v7.0 x 3,146,895 ops/sec ±0.89% (89 runs sampled) v6.0 x 3,214,038 ops/sec ±1.07% (89 runs sampled) parseFloat x 3,077,588 ops/sec ±1.07% (87 runs sampled) fastest is 'v6.0' About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: is-plain-object: Returns true if an object was created by the Object constructor. | homepage is-primitive: Returns true if the value is a primitive. | homepage isobject: Returns true if the value is an object and not an array or null. | homepage kind-of: Get the native type of a value. | homepage Contributors Commits Contributor 49 jonschlinkert 5 charlike-old 1 benaadams 1 realityking Author Jon Schlinkert LinkedIn Profile GitHub Profile Twitter Profile License Copyright © 2018, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.6.0, on June 15, 2018."
  },
  "Examiner-UI/node_modules/isexe/README.html": {
    "href": "Examiner-UI/node_modules/isexe/README.html",
    "title": "isexe | Examiner",
    "summary": "isexe Minimal module to check if a file is executable, and a normal file. Uses fs.stat and tests against the PATHEXT environment variable on Windows. USAGE var isexe = require('isexe') isexe('some-file-name', function (err, isExe) { if (err) { console.error('probably file does not exist or something', err) } else if (isExe) { console.error('this thing can be run') } else { console.error('cannot be run') } }) // same thing but synchronous, throws errors var isExe = isexe.sync('some-file-name') // treat errors as just \"not executable\" isexe('maybe-missing-file', { ignoreErrors: true }, callback) var isExe = isexe.sync('maybe-missing-file', { ignoreErrors: true }) API isexe(path, [options], [callback]) Check if the path is executable. If no callback provided, and a global Promise object is available, then a Promise will be returned. Will raise whatever errors may be raised by fs.stat, unless options.ignoreErrors is set to true. isexe.sync(path, [options]) Same as isexe but returns the value and throws any errors raised. Options ignoreErrors Treat all errors as \"no, this is not executable\", but don't raise them. uid Number to use as the user id gid Number to use as the group id pathExt List of path extensions to use instead of PATHEXT environment variable on Windows."
  },
  "Examiner-UI/node_modules/js-tokens/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/js-tokens/CHANGELOG.html",
    "title": "| Examiner",
    "summary": "Version 4.0.0 (2018-01-28) Added: Support for ES2018. The only change needed was recognizing the s regex flag. Changed: All tokens returned by the matchToToken function now have a closed property. It is set to undefined for the tokens where “closed” doesn’t make sense. This means that all tokens objects have the same shape, which might improve performance. These are the breaking changes: '/a/s'.match(jsTokens) no longer returns ['/', 'a', '/', 's'], but ['/a/s']. (There are of course other variations of this.) Code that rely on some token objects not having the closed property could now behave differently. Version 3.0.2 (2017-06-28) No code changes. Just updates to the readme. Version 3.0.1 (2017-01-30) Fixed: ES2015 unicode escapes with more than 6 hex digits are now matched correctly. Version 3.0.0 (2017-01-11) This release contains one breaking change, that should improve performance in V8: So how can you, as a JavaScript developer, ensure that your RegExps are fast? If you are not interested in hooking into RegExp internals, make sure that neither the RegExp instance, nor its prototype is modified in order to get the best performance: var re = /./g; re.exec(''); // Fast path. re.new_property = 'slow'; This module used to export a single regex, with .matchToToken bolted on, just like in the above example. This release changes the exports of the module to avoid this issue. Before: import jsTokens from \"js-tokens\" // or: var jsTokens = require(\"js-tokens\") var matchToToken = jsTokens.matchToToken After: import jsTokens, {matchToToken} from \"js-tokens\" // or: var jsTokens = require(\"js-tokens\").default var matchToToken = require(\"js-tokens\").matchToToken Version 2.0.0 (2016-06-19) Added: Support for ES2016. In other words, support for the ** exponentiation operator. These are the breaking changes: '**'.match(jsTokens) no longer returns ['*', '*'], but ['**']. '**='.match(jsTokens) no longer returns ['*', '*='], but ['**=']. Version 1.0.3 (2016-03-27) Improved: Made the regex ever so slightly smaller. Updated: The readme. Version 1.0.2 (2015-10-18) Improved: Limited npm package contents for a smaller download. Thanks to @zertosh! Version 1.0.1 (2015-06-20) Fixed: Declared an undeclared variable. Version 1.0.0 (2015-02-26) Changed: Merged the 'operator' and 'punctuation' types into 'punctuator'. That type is now equivalent to the Punctuator token in the ECMAScript specification. (Backwards-incompatible change.) Fixed: A - followed by a number is now correctly matched as a punctuator followed by a number. It used to be matched as just a number, but there is no such thing as negative number literals. (Possibly backwards-incompatible change.) Version 0.4.1 (2015-02-21) Added: Support for the regex u flag. Version 0.4.0 (2015-02-21) Improved: jsTokens.matchToToken performance. Added: Support for octal and binary number literals. Added: Support for template strings. Version 0.3.1 (2015-01-06) Fixed: Support for unicode spaces. They used to be allowed in names (which is very confusing), and some unicode newlines were wrongly allowed in strings and regexes. Version 0.3.0 (2014-12-19) Changed: The jsTokens.names array has been replaced with the jsTokens.matchToToken function. The capturing groups of jsTokens are no longer part of the public API; instead use said function. See this gist for an example. (Backwards-incompatible change.) Changed: The empty string is now considered an “invalid” token, instead an “empty” token (its own group). (Backwards-incompatible change.) Removed: component support. (Backwards-incompatible change.) Version 0.2.0 (2014-06-19) Changed: Match ES6 function arrows (=>) as an operator, instead of its own category (“functionArrow”), for simplicity. (Backwards-incompatible change.) Added: ES6 splats (...) are now matched as an operator (instead of three punctuations). (Backwards-incompatible change.) Version 0.1.0 (2014-03-08) Initial release."
  },
  "Examiner-UI/node_modules/js-tokens/README.html": {
    "href": "Examiner-UI/node_modules/js-tokens/README.html",
    "title": "Overview | Examiner",
    "summary": "Overview A regex that tokenizes JavaScript. var jsTokens = require(\"js-tokens\").default var jsString = \"var foo=opts.foo;\\n...\" jsString.match(jsTokens) // [\"var\", \" \", \"foo\", \"=\", \"opts\", \".\", \"foo\", \";\", \"\\n\", ...] Installation npm install js-tokens import jsTokens from \"js-tokens\" // or: var jsTokens = require(\"js-tokens\").default Usage jsTokens A regex with the g flag that matches JavaScript tokens. The regex always matches, even invalid JavaScript and the empty string. The next match is always directly after the previous. var token = matchToToken(match) import {matchToToken} from \"js-tokens\" // or: var matchToToken = require(\"js-tokens\").matchToToken Takes a match returned by jsTokens.exec(string), and returns a {type: String, value: String} object. The following types are available: string comment regex number name punctuator whitespace invalid Multi-line comments and strings also have a closed property indicating if the token was closed or not (see below). Comments and strings both come in several flavors. To distinguish them, check if the token starts with //, /*, ', \" or `. Names are ECMAScript IdentifierNames, that is, including both identifiers and keywords. You may use is-keyword-js to tell them apart. Whitespace includes both line terminators and other whitespace. ECMAScript support The intention is to always support the latest ECMAScript version whose feature set has been finalized. If adding support for a newer version requires changes, a new version with a major verion bump will be released. Currently, ECMAScript 2018 is supported. Invalid code handling Unterminated strings are still matched as strings. JavaScript strings cannot contain (unescaped) newlines, so unterminated strings simply end at the end of the line. Unterminated template strings can contain unescaped newlines, though, so they go on to the end of input. Unterminated multi-line comments are also still matched as comments. They simply go on to the end of the input. Unterminated regex literals are likely matched as division and whatever is inside the regex. Invalid ASCII characters have their own capturing group. Invalid non-ASCII characters are treated as names, to simplify the matching of names (except unicode spaces which are treated as whitespace). Note: See also the ES2018 section. Regex literals may contain invalid regex syntax. They are still matched as regex literals. They may also contain repeated regex flags, to keep the regex simple. Strings may contain invalid escape sequences. Limitations Tokenizing JavaScript using regexes—in fact, one single regex—won’t be perfect. But that’s not the point either. You may compare jsTokens with esprima by using esprima-compare.js. See npm run esprima-compare! Template string interpolation Template strings are matched as single tokens, from the starting ` to the ending `, including interpolations (whose tokens are not matched individually). Matching template string interpolations requires recursive balancing of { and }—something that JavaScript regexes cannot do. Only one level of nesting is supported. Division and regex literals collision Consider this example: var g = 9.82 var number = bar / 2/g var regex = / 2/g A human can easily understand that in the number line we’re dealing with division, and in the regex line we’re dealing with a regex literal. How come? Because humans can look at the whole code to put the / characters in context. A JavaScript regex cannot. It only sees forwards. (Well, ES2018 regexes can also look backwards. See the ES2018 section). When the jsTokens regex scans throught the above, it will see the following at the end of both the number and regex rows: / 2/g It is then impossible to know if that is a regex literal, or part of an expression dealing with division. Here is a similar case: foo /= 2/g foo(/= 2/g) The first line divides the foo variable with 2/g. The second line calls the foo function with the regex literal /= 2/g. Again, since jsTokens only sees forwards, it cannot tell the two cases apart. There are some cases where we can tell division and regex literals apart, though. First off, we have the simple cases where there’s only one slash in the line: var foo = 2/g foo /= 2 Regex literals cannot contain newlines, so the above cases are correctly identified as division. Things are only problematic when there are more than one non-comment slash in a single line. Secondly, not every character is a valid regex flag. var number = bar / 2/e The above example is also correctly identified as division, because e is not a valid regex flag. I initially wanted to future-proof by allowing [a-zA-Z]* (any letter) as flags, but it is not worth it since it increases the amount of ambigous cases. So only the standard g, m, i, y and u flags are allowed. This means that the above example will be identified as division as long as you don’t rename the e variable to some permutation of gmiyus 1 to 6 characters long. Lastly, we can look forward for information. If the token following what looks like a regex literal is not valid after a regex literal, but is valid in a division expression, then the regex literal is treated as division instead. For example, a flagless regex cannot be followed by a string, number or name, but all of those three can be the denominator of a division. Generally, if what looks like a regex literal is followed by an operator, the regex literal is treated as division instead. This is because regexes are seldomly used with operators (such as +, *, && and ==), but division could likely be part of such an expression. Please consult the regex source and the test cases for precise information on when regex or division is matched (should you need to know). In short, you could sum it up as: If the end of a statement looks like a regex literal (even if it isn’t), it will be treated as one. Otherwise it should work as expected (if you write sane code). ES2018 ES2018 added some nice regex improvements to the language. Unicode property escapes should allow telling names and invalid non-ASCII characters apart without blowing up the regex size. Lookbehind assertions should allow matching telling division and regex literals apart in more cases. Named capture groups might simplify some things. These things would be nice to do, but are not critical. They probably have to wait until the oldest maintained Node.js LTS release supports those features. License MIT."
  },
  "Examiner-UI/node_modules/js-yaml/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/js-yaml/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. 4.1.0 - 2021-04-15 Added Types are now exported as yaml.types.XXX. Every type now has options property with original arguments kept as they were (see yaml.types.int.options as an example). Changed Schema.extend() now keeps old type order in case of conflicts (e.g. Schema.extend([ a, b, c ]).extend([ b, a, d ]) is now ordered as abcd instead of cbad). 4.0.0 - 2021-01-03 Changed Check migration guide to see details for all breaking changes. Breaking: \"unsafe\" tags !!js/function, !!js/regexp, !!js/undefined are moved to js-yaml-js-types package. Breaking: removed safe* functions. Use load, loadAll, dump instead which are all now safe by default. yaml.DEFAULT_SAFE_SCHEMA and yaml.DEFAULT_FULL_SCHEMA are removed, use yaml.DEFAULT_SCHEMA instead. yaml.Schema.create(schema, tags) is removed, use schema.extend(tags) instead. !!binary now always mapped to Uint8Array on load. Reduced nesting of /lib folder. Parse numbers according to YAML 1.2 instead of YAML 1.1 (01234 is now decimal, 0o1234 is octal, 1:23 is parsed as string instead of base60). dump() no longer quotes :, [, ], (, ) except when necessary, #470, #557. Line and column in exceptions are now formatted as (X:Y) instead of at line X, column Y (also present in compact format), #332. Code snippet created in exceptions now contains multiple lines with line numbers. dump() now serializes undefined as null in collections and removes keys with undefined in mappings, #571. dump() with skipInvalid=true now serializes invalid items in collections as null. Custom tags starting with ! are now dumped as !tag instead of !<!tag>, #576. Custom tags starting with tag:yaml.org,2002: are now shorthanded using !!, #258. Added Added .mjs (es modules) support. Added quotingType and forceQuotes options for dumper to configure string literal style, #290, #529. Added styles: { '!!null': 'empty' } option for dumper (serializes { foo: null } as \"foo: \"), #570. Added replacer option (similar to option in JSON.stringify), #339. Custom Tag can now handle all tags or multiple tags with the same prefix, #385. Fixed Astral characters are no longer encoded by dump(), #587. \"duplicate mapping key\" exception now points at the correct column, #452. Extra commas in flow collections (e.g. [foo,,bar]) now throw an exception instead of producing null, #321. __proto__ key no longer overrides object prototype, #164. Removed bower.json. Tags are now url-decoded in load() and url-encoded in dump() (previously usage of custom non-ascii tags may have led to invalid YAML that can't be parsed). Anchors now work correctly with empty nodes, #301. Fix incorrect parsing of invalid block mapping syntax, #418. Throw an error if block sequence/mapping indent contains a tab, #80. [3.14.1] - 2020-12-07 Security Fix possible code execution in (already unsafe) .load() (in &anchor). 3.14.0 - 2020-05-22 Changed Support safe/loadAll(input, options) variant of call. CI: drop outdated nodejs versions. Dev deps bump. Fixed Quote = in plain scalars #519. Check the node type for !<?> tag in case user manually specifies it. Verify that there are no null-bytes in input. Fix wrong quote position when writing condensed flow, #526. 3.13.1 - 2019-04-05 Security Fix possible code execution in (already unsafe) .load(), #480. 3.13.0 - 2019-03-20 Security Security fix: safeLoad() can hang when arrays with nested refs used as key. Now throws exception for nested arrays. #475. 3.12.2 - 2019-02-26 Fixed Fix noArrayIndent option for root level, #468. 3.12.1 - 2019-01-05 Added Added noArrayIndent option, #432. 3.12.0 - 2018-06-02 Changed Support arrow functions without a block statement, #421. 3.11.0 - 2018-03-05 Added Add arrow functions suport for !!js/function. Fixed Fix dump in bin/octal/hex formats for negative integers, #399. 3.10.0 - 2017-09-10 Fixed Fix condenseFlow output (quote keys for sure, instead of spaces), #371, #370. Dump astrals as codepoints instead of surrogate pair, #368. 3.9.1 - 2017-07-08 Fixed Ensure stack is present for custom errors in node 7.+, #351. 3.9.0 - 2017-07-08 Added Add condenseFlow option (to create pretty URL query params), #346. Fixed Support array return from safeLoadAll/loadAll, #350. 3.8.4 - 2017-05-08 Fixed Dumper: prevent space after dash for arrays that wrap, #343. 3.8.3 - 2017-04-05 Fixed Should not allow numbers to begin and end with underscore, #335. 3.8.2 - 2017-03-02 Fixed Fix !!float 123 (integers) parse, #333. Don't allow leading zeros in floats (except 0, 0.xxx). Allow positive exponent without sign in floats. 3.8.1 - 2017-02-07 Changed Maintenance: update browserified build. 3.8.0 - 2017-02-07 Fixed Fix reported position for duplicated mapping key errors. Now points to block start instead of block end. (#243, thanks to @shockey). 3.7.0 - 2016-11-12 Added Support polymorphism for tags (#300, thanks to @monken). Fixed Fix parsing of quotes followed by newlines (#304, thanks to @dplepage). 3.6.1 - 2016-05-11 Fixed Fix output cut on a pipe, #286. 3.6.0 - 2016-04-16 Fixed Dumper rewrite, fix multiple bugs with trailing \\n. Big thanks to @aepsilon! Loader: fix leading/trailing newlines in block scalars, @aepsilon. 3.5.5 - 2016-03-17 Fixed Date parse fix: don't allow dates with on digit in month and day, #268. 3.5.4 - 2016-03-09 Added noCompatMode for dumper, to disable quoting YAML 1.1 values. 3.5.3 - 2016-02-11 Changed Maintenance release. 3.5.2 - 2016-01-11 Changed Maintenance: missed comma in bower config. 3.5.1 - 2016-01-11 Changed Removed inherit dependency, #239. Better browserify workaround for esprima load. Demo rewrite. 3.5.0 - 2016-01-10 Fixed Dumper. Fold strings only, #217. Dumper. norefs option, to clone linked objects, #229. Loader. Throw a warning for duplicate keys, #166. Improved browserify support (mark esprima & Buffer excluded). 3.4.6 - 2015-11-26 Changed Use standalone inherit to keep browserified files clear. 3.4.5 - 2015-11-23 Added Added lineWidth option to dumper. 3.4.4 - 2015-11-21 Fixed Fixed floats dump (missed dot for scientific format), #220. Allow non-printable characters inside quoted scalars, #192. 3.4.3 - 2015-10-10 Changed Maintenance release - deps bump (esprima, argparse). 3.4.2 - 2015-09-09 Fixed Fixed serialization of duplicated entries in sequences, #205. Thanks to @vogelsgesang. 3.4.1 - 2015-09-05 Fixed Fixed stacktrace handling in generated errors, for browsers (FF/IE). 3.4.0 - 2015-08-23 Changed Don't throw on warnings anymore. Use onWarning option to catch. Throw error on unknown tags (was warning before). Reworked internals of error class. Fixed Fixed multiline keys dump, #197. Thanks to @tcr. Fixed heading line breaks in some scalars (regression). 3.3.1 - 2015-05-13 Added Added .sortKeys dumper option, thanks to @rjmunro. Fixed Fixed astral characters support, #191. 3.3.0 - 2015-04-26 Changed Significantly improved long strings formatting in dumper, thanks to @isaacs. Strip BOM if exists. 3.2.7 - 2015-02-19 Changed Maintenance release. Updated dependencies. HISTORY.md -> CHANGELOG.md 3.2.6 - 2015-02-07 Fixed Fixed encoding of UTF-16 surrogate pairs. (e.g. \"\\U0001F431\" CAT FACE). Fixed demo dates dump (#113, thanks to @Hypercubed). 3.2.5 - 2014-12-28 Fixed Fixed resolving of all built-in types on empty nodes. Fixed invalid warning on empty lines within quoted scalars and flow collections. Fixed bug: Tag on an empty node didn't resolve in some cases. 3.2.4 - 2014-12-19 Fixed Fixed resolving of !!null tag on an empty node. 3.2.3 - 2014-11-08 Fixed Implemented dumping of objects with circular and cross references. Partially fixed aliasing of constructed objects. (see issue #141 for details) 3.2.2 - 2014-09-07 Fixed Fixed infinite loop on unindented block scalars. Rewritten base64 encode/decode in binary type, to keep code licence clear. 3.2.1 - 2014-08-24 Fixed Nothig new. Just fix npm publish error. 3.2.0 - 2014-08-24 Added Added input piping support to CLI. Fixed Fixed typo, that could cause hand on initial indent (#139). 3.1.0 - 2014-07-07 Changed 1.5x-2x speed boost. Removed deprecated require('xxx.yml') support. Significant code cleanup and refactoring. Internal API changed. If you used custom types - see updated examples. Others are not affected. Even if the input string has no trailing line break character, it will be parsed as if it has one. Added benchmark scripts. Moved bower files to /dist folder Bugfixes. 3.0.2 - 2014-02-27 Fixed Fixed bug: \"constructor\" string parsed as null. 3.0.1 - 2013-12-22 Fixed Fixed parsing of literal scalars. (issue #108) Prevented adding unnecessary spaces in object dumps. (issue #68) Fixed dumping of objects with very long (> 1024 in length) keys. 3.0.0 - 2013-12-16 Changed Refactored code. Changed API for custom types. Removed output colors in CLI, dump json by default. Removed big dependencies from browser version (esprima, buffer). Load esprima manually, if !!js/function needed. !!bin now returns Array in browser AMD support. Don't quote dumped strings because of - & ? (if not first char). Deprecated loading yaml files via require(), as not recommended behaviour for node. 2.1.3 - 2013-10-16 Fixed Fix wrong loading of empty block scalars. 2.1.2 - 2013-10-07 Fixed Fix unwanted line breaks in folded scalars. 2.1.1 - 2013-10-02 Fixed Dumper now respects deprecated booleans syntax from YAML 1.0/1.1 Fixed reader bug in JSON-like sequences/mappings. 2.1.0 - 2013-06-05 Added Add standard YAML schemas: Failsafe (FAILSAFE_SCHEMA), JSON (JSON_SCHEMA) and Core (CORE_SCHEMA). Add skipInvalid dumper option. Changed Rename DEFAULT_SCHEMA to DEFAULT_FULL_SCHEMA and SAFE_SCHEMA to DEFAULT_SAFE_SCHEMA. Use safeLoad for require extension. Fixed Bug fix: export NIL constant from the public interface. 2.0.5 - 2013-04-26 Security Close security issue in !!js/function constructor. Big thanks to @nealpoole for security audit. 2.0.4 - 2013-04-08 Changed Updated .npmignore to reduce package size 2.0.3 - 2013-02-26 Fixed Fixed dumping of empty arrays ans objects. ([] and {} instead of null) 2.0.2 - 2013-02-15 Fixed Fixed input validation: tabs are printable characters. 2.0.1 - 2013-02-09 Fixed Fixed error, when options not passed to function cass 2.0.0 - 2013-02-09 Changed Full rewrite. New architecture. Fast one-stage parsing. Changed custom types API. Added YAML dumper. 1.0.3 - 2012-11-05 Fixed Fixed utf-8 files loading. 1.0.2 - 2012-08-02 Fixed Pull out hand-written shims. Use ES5-Shims for old browsers support. See #44. Fix timstamps incorectly parsed in local time when no time part specified. 1.0.1 - 2012-07-07 Fixed Fixes TypeError: 'undefined' is not an object under Safari. Thanks Phuong. Fix timestamps incorrectly parsed in local time. Thanks @caolan. Closes #46. 1.0.0 - 2012-07-01 Changed y, yes, n, no, on, off are not converted to Booleans anymore. Fixes #42. require(filename) now returns a single document and throws an Error if file contains more than one document. CLI was merged back from js-yaml.bin 0.3.7 - 2012-02-28 Fixed Fix export of addConstructor(). Closes #39. 0.3.6 - 2012-02-22 Changed Removed AMD parts - too buggy to use. Need help to rewrite from scratch Fixed Removed YUI compressor warning (renamed double variable). Closes #40. 0.3.5 - 2012-01-10 Fixed Workagound for .npmignore fuckup under windows. Thanks to airportyh. 0.3.4 - 2011-12-24 Fixed Fixes str[] for oldIEs support. Adds better has change support for browserified demo. improves compact output of Error. Closes #33. 0.3.3 - 2011-12-20 Added adds compact stringification of Errors. Changed jsyaml executable moved to separate module. 0.3.2 - 2011-12-16 Added Added jsyaml executable. Added !!js/function support. Closes #12. Fixed Fixes ug with block style scalars. Closes #26. All sources are passing JSLint now. Fixes bug in Safari. Closes #28. Fixes bug in Opers. Closes #29. Improves browser support. Closes #20. 0.3.1 - 2011-11-18 Added Added AMD support for browserified version. Added permalinks for online demo YAML snippets. Now we have YPaste service, lol. Added !!js/regexp and !!js/undefined types. Partially solves #12. Changed Wrapped browserified js-yaml into closure. Fixed Fixed the resolvement of non-specific tags. Closes #17. Fixed !!set mapping. Fixed month parse in dates. Closes #19. 0.3.0 - 2011-11-09 Added Added browserified version. Closes #13. Added live demo of browserified version. Ported some of the PyYAML tests. See #14. Fixed Removed JS.Class dependency. Closes #3. Fixed timestamp bug when fraction was given. 0.2.2 - 2011-11-06 Fixed Fixed crash on docs without ---. Closes #8. Fixed multiline string parse Fixed tests/comments for using array as key 0.2.1 - 2011-11-02 Fixed Fixed short file read (<4k). Closes #9. 0.2.0 - 2011-11-02 Changed First public release"
  },
  "Examiner-UI/node_modules/js-yaml/README.html": {
    "href": "Examiner-UI/node_modules/js-yaml/README.html",
    "title": "JS-YAML - YAML 1.2 parser / writer for JavaScript | Examiner",
    "summary": "JS-YAML - YAML 1.2 parser / writer for JavaScript Online Demo This is an implementation of YAML, a human-friendly data serialization language. Started as PyYAML port, it was completely rewritten from scratch. Now it's very fast, and supports 1.2 spec. Installation YAML module for node.js npm install js-yaml CLI executable If you want to inspect your YAML files from CLI, install js-yaml globally: npm install -g js-yaml Usage usage: js-yaml [-h] [-v] [-c] [-t] file Positional arguments: file File with YAML document(s) Optional arguments: -h, --help Show this help message and exit. -v, --version Show program's version number and exit. -c, --compact Display errors in compact mode -t, --trace Show stack trace on error API Here we cover the most 'useful' methods. If you need advanced details (creating your own tags), see examples for more info. const yaml = require('js-yaml'); const fs = require('fs'); // Get document, or throw exception on error try { const doc = yaml.load(fs.readFileSync('/home/ixti/example.yml', 'utf8')); console.log(doc); } catch (e) { console.log(e); } load (string [ , options ]) Parses string as single YAML document. Returns either a plain object, a string, a number, null or undefined, or throws YAMLException on error. By default, does not support regexps, functions and undefined. options: filename (default: null) - string to be used as a file path in error/warning messages. onWarning (default: null) - function to call on warning messages. Loader will call this function with an instance of YAMLException for each warning. schema (default: DEFAULT_SCHEMA) - specifies a schema to use. FAILSAFE_SCHEMA - only strings, arrays and plain objects: http://www.yaml.org/spec/1.2/spec.html#id2802346 JSON_SCHEMA - all JSON-supported types: http://www.yaml.org/spec/1.2/spec.html#id2803231 CORE_SCHEMA - same as JSON_SCHEMA: http://www.yaml.org/spec/1.2/spec.html#id2804923 DEFAULT_SCHEMA - all supported YAML types. json (default: false) - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error. NOTE: This function does not understand multi-document sources, it throws exception on those. NOTE: JS-YAML does not support schema-specific tag resolution restrictions. So, the JSON schema is not as strictly defined in the YAML specification. It allows numbers in any notation, use Null and NULL as null, etc. The core schema also has no such restrictions. It allows binary notation for integers. loadAll (string [, iterator] [, options ]) Same as load(), but understands multi-document sources. Applies iterator to each document if specified, or returns array of documents. const yaml = require('js-yaml'); yaml.loadAll(data, function (doc) { console.log(doc); }); dump (object [ , options ]) Serializes object as a YAML document. Uses DEFAULT_SCHEMA, so it will throw an exception if you try to dump regexps or functions. However, you can disable exceptions by setting the skipInvalid option to true. options: indent (default: 2) - indentation width to use (in spaces). noArrayIndent (default: false) - when true, will not add an indentation level to array elements skipInvalid (default: false) - do not throw on invalid types (like function in the safe schema) and skip pairs and single values with such types. flowLevel (default: -1) - specifies level of nesting, when to switch from block to flow style for collections. -1 means block style everwhere styles - \"tag\" => \"style\" map. Each tag may have own set of styles. schema (default: DEFAULT_SCHEMA) specifies a schema to use. sortKeys (default: false) - if true, sort keys when dumping YAML. If a function, use the function to sort the keys. lineWidth (default: 80) - set max line width. Set -1 for unlimited width. noRefs (default: false) - if true, don't convert duplicate objects into references noCompatMode (default: false) - if true don't try to be compatible with older yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1 condenseFlow (default: false) - if true flow sequences will be condensed, omitting the space between a, b. Eg. '[a,b]', and omitting the space between key: value and quoting the key. Eg. '{\"a\":b}' Can be useful when using yaml for pretty URL query params as spaces are %-encoded. quotingType (' or \", default: ') - strings will be quoted using this quoting style. If you specify single quotes, double quotes will still be used for non-printable characters. forceQuotes (default: false) - if true, all non-key strings will be quoted even if they normally don't need to. replacer - callback function (key, value) called recursively on each key/value in source object (see replacer docs for JSON.stringify). The following table show availlable styles (e.g. \"canonical\", \"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml output is shown on the right side after => (default setting) or ->: !!null \"canonical\" -> \"~\" \"lowercase\" => \"null\" \"uppercase\" -> \"NULL\" \"camelcase\" -> \"Null\" !!int \"binary\" -> \"0b1\", \"0b101010\", \"0b1110001111010\" \"octal\" -> \"0o1\", \"0o52\", \"0o16172\" \"decimal\" => \"1\", \"42\", \"7290\" \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\" !!bool \"lowercase\" => \"true\", \"false\" \"uppercase\" -> \"TRUE\", \"FALSE\" \"camelcase\" -> \"True\", \"False\" !!float \"lowercase\" => \".nan\", '.inf' \"uppercase\" -> \".NAN\", '.INF' \"camelcase\" -> \".NaN\", '.Inf' Example: dump(object, { 'styles': { '!!null': 'canonical' // dump null as ~ }, 'sortKeys': true // sort object keys }); Supported YAML types The list of standard YAML tags and corresponding JavaScript types. See also YAML tag discussion and YAML types repository. !!null '' # null !!bool 'yes' # bool !!int '3...' # number !!float '3.14...' # number !!binary '...base64...' # buffer !!timestamp 'YYYY-...' # date !!omap [ ... ] # array of key-value pairs !!pairs [ ... ] # array or array pairs !!set { ... } # array of objects with given keys and null values !!str '...' # string !!seq [ ... ] # array !!map { ... } # object JavaScript-specific tags See js-yaml-js-types for extra types. Caveats Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects or arrays as keys, and stringifies (by calling toString() method) them at the moment of adding them. --- ? [ foo, bar ] : - baz ? { foo: bar } : - baz - baz { \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] } Also, reading of properties on implicit block mapping keys is not supported yet. So, the following YAML document cannot be loaded. &anchor foo: foo: bar *anchor: duplicate key baz: bat *anchor: duplicate key js-yaml for enterprise Available as part of the Tidelift Subscription The maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more."
  },
  "Examiner-UI/node_modules/json-buffer/README.html": {
    "href": "Examiner-UI/node_modules/json-buffer/README.html",
    "title": "json-buffer | Examiner",
    "summary": "json-buffer JSON functions that can convert buffers! JSON mangles buffers by converting to an array... which isn't helpful. json-buffers converts to base64 instead, and deconverts base64 to a buffer. var JSONB = require('json-buffer') var Buffer = require('buffer').Buffer var str = JSONB.stringify(Buffer.from('hello there!')) console.log(JSONB.parse(str)) //GET a BUFFER back License MIT"
  },
  "Examiner-UI/node_modules/json-schema-traverse/README.html": {
    "href": "Examiner-UI/node_modules/json-schema-traverse/README.html",
    "title": "json-schema-traverse | Examiner",
    "summary": "json-schema-traverse Traverse JSON Schema passing each schema object to callback Install npm install json-schema-traverse Usage const traverse = require('json-schema-traverse'); const schema = { properties: { foo: {type: 'string'}, bar: {type: 'integer'} } }; traverse(schema, {cb}); // cb is called 3 times with: // 1. root schema // 2. {type: 'string'} // 3. {type: 'integer'} // Or: traverse(schema, {cb: {pre, post}}); // pre is called 3 times with: // 1. root schema // 2. {type: 'string'} // 3. {type: 'integer'} // // post is called 3 times with: // 1. {type: 'string'} // 2. {type: 'integer'} // 3. root schema Callback function cb is called for each schema object (not including draft-06 boolean schemas), including the root schema, in pre-order traversal. Schema references ($ref) are not resolved, they are passed as is. Alternatively, you can pass a {pre, post} object as cb, and then pre will be called before traversing child elements, and post will be called after all child elements have been traversed. Callback is passed these parameters: schema: the current schema object JSON pointer: from the root schema to the current schema object root schema: the schema passed to traverse object parent JSON pointer: from the root schema to the parent schema object (see below) parent keyword: the keyword inside which this schema appears (e.g. properties, anyOf, etc.) parent schema: not necessarily parent object/array; in the example above the parent schema for {type: 'string'} is the root schema index/property: index or property name in the array/object containing multiple schemas; in the example above for {type: 'string'} the property name is 'foo' Traverse objects in all unknown keywords const traverse = require('json-schema-traverse'); const schema = { mySchema: { minimum: 1, maximum: 2 } }; traverse(schema, {allKeys: true, cb}); // cb is called 2 times with: // 1. root schema // 2. mySchema Without option allKeys: true callback will be called only with root schema. License MIT"
  },
  "Examiner-UI/node_modules/keyv/README.html": {
    "href": "Examiner-UI/node_modules/keyv/README.html",
    "title": "| Examiner",
    "summary": "Simple key-value storage with support for multiple backends Keyv provides a consistent interface for key-value storage across multiple backends via storage adapters. It supports TTL based expiry, making it suitable as a cache or a persistent key-value store. Features There are a few existing modules similar to Keyv, however Keyv is different because it: Isn't bloated Has a simple Promise based API Suitable as a TTL based cache or persistent key-value store Easily embeddable inside another module Works with any storage that implements the Map API Handles all JSON types plus Buffer Supports namespaces Wide range of efficient, well tested storage adapters Connection errors are passed through (db failures won't kill your app) Supports the current active LTS version of Node.js or higher Usage Install Keyv. npm install --save keyv By default everything is stored in memory, you can optionally also install a storage adapter. npm install --save @keyv/redis npm install --save @keyv/mongo npm install --save @keyv/sqlite npm install --save @keyv/postgres npm install --save @keyv/mysql npm install --save @keyv/etcd Create a new Keyv instance, passing your connection string if applicable. Keyv will automatically load the correct storage adapter. const Keyv = require('keyv'); // One of the following const keyv = new Keyv(); const keyv = new Keyv('redis://user:pass@localhost:6379'); const keyv = new Keyv('mongodb://user:pass@localhost:27017/dbname'); const keyv = new Keyv('sqlite://path/to/database.sqlite'); const keyv = new Keyv('postgresql://user:pass@localhost:5432/dbname'); const keyv = new Keyv('mysql://user:pass@localhost:3306/dbname'); const keyv = new Keyv('etcd://localhost:2379'); // Handle DB connection errors keyv.on('error', err => console.log('Connection Error', err)); await keyv.set('foo', 'expires in 1 second', 1000); // true await keyv.set('foo', 'never expires'); // true await keyv.get('foo'); // 'never expires' await keyv.delete('foo'); // true await keyv.clear(); // undefined Namespaces You can namespace your Keyv instance to avoid key collisions and allow you to clear only a certain namespace while using the same database. const users = new Keyv('redis://user:pass@localhost:6379', { namespace: 'users' }); const cache = new Keyv('redis://user:pass@localhost:6379', { namespace: 'cache' }); await users.set('foo', 'users'); // true await cache.set('foo', 'cache'); // true await users.get('foo'); // 'users' await cache.get('foo'); // 'cache' await users.clear(); // undefined await users.get('foo'); // undefined await cache.get('foo'); // 'cache' Custom Serializers Keyv uses json-buffer for data serialization to ensure consistency across different backends. You can optionally provide your own serialization functions to support extra data types or to serialize to something other than JSON. const keyv = new Keyv({ serialize: JSON.stringify, deserialize: JSON.parse }); Warning: Using custom serializers means you lose any guarantee of data consistency. You should do extensive testing with your serialisation functions and chosen storage engine. Official Storage Adapters The official storage adapters are covered by over 150 integration tests to guarantee consistent behaviour. They are lightweight, efficient wrappers over the DB clients making use of indexes and native TTLs where available. Database Adapter Native TTL Redis @keyv/redis Yes MongoDB @keyv/mongo Yes SQLite @keyv/sqlite No PostgreSQL @keyv/postgres No MySQL @keyv/mysql No Etcd @keyv/etcd Yes Memcache @keyv/memcache Yes Third-party Storage Adapters You can also use third-party storage adapters or build your own. Keyv will wrap these storage adapters in TTL functionality and handle complex types internally. const Keyv = require('keyv'); const myAdapter = require('./my-storage-adapter'); const keyv = new Keyv({ store: myAdapter }); Any store that follows the Map api will work. new Keyv({ store: new Map() }); For example, quick-lru is a completely unrelated module that implements the Map API. const Keyv = require('keyv'); const QuickLRU = require('quick-lru'); const lru = new QuickLRU({ maxSize: 1000 }); const keyv = new Keyv({ store: lru }); The following are third-party storage adapters compatible with Keyv: quick-lru - Simple \"Least Recently Used\" (LRU) cache keyv-file - File system storage adapter for Keyv keyv-dynamodb - DynamoDB storage adapter for Keyv keyv-lru - LRU storage adapter for Keyv keyv-null - Null storage adapter for Keyv keyv-firestore – Firebase Cloud Firestore adapter for Keyv keyv-mssql - Microsoft Sql Server adapter for Keyv keyv-azuretable - Azure Table Storage/API adapter for Keyv keyv-arango - ArangoDB storage adapter for Keyv keyv-momento - Momento storage adapter for Keyv Add Cache Support to your Module Keyv is designed to be easily embedded into other modules to add cache support. The recommended pattern is to expose a cache option in your modules options which is passed through to Keyv. Caching will work in memory by default and users have the option to also install a Keyv storage adapter and pass in a connection string, or any other storage that implements the Map API. You should also set a namespace for your module so you can safely call .clear() without clearing unrelated app data. Inside your module: class AwesomeModule { constructor(opts) { this.cache = new Keyv({ uri: typeof opts.cache === 'string' && opts.cache, store: typeof opts.cache !== 'string' && opts.cache, namespace: 'awesome-module' }); } } Now it can be consumed like this: const AwesomeModule = require('awesome-module'); // Caches stuff in memory by default const awesomeModule = new AwesomeModule(); // After npm install --save keyv-redis const awesomeModule = new AwesomeModule({ cache: 'redis://localhost' }); // Some third-party module that implements the Map API const awesomeModule = new AwesomeModule({ cache: some3rdPartyStore }); Compression Keyv supports gzip and brotli compression. To enable compression, pass the compress option to the constructor. const KeyvGzip = require('@keyv/compress-gzip'); const Keyv = require('keyv'); const keyvGzip = new KeyvGzip(); const keyv = new Keyv({ compression: KeyvGzip }); You can also pass a custom compression function to the compression option. Following the pattern of the official compression adapters. Want to build your own? Great! Keyv is designed to be easily extended. You can build your own compression adapter by following the pattern of the official compression adapters based on this interface: interface CompressionAdapter { async compress(value: any, options?: any); async decompress(value: any, options?: any); async serialize(value: any); async deserialize(value: any); } In addition to the interface, you can test it with our compression test suite using @keyv/test-suite: const {keyvCompresstionTests} = require('@keyv/test-suite'); const KeyvGzip = require('@keyv/compress-gzip'); keyvCompresstionTests(test, new KeyvGzip()); API new Keyv([uri], [options]) Returns a new Keyv instance. The Keyv instance is also an EventEmitter that will emit an 'error' event if the storage adapter connection fails. uri Type: String Default: undefined The connection string URI. Merged into the options object as options.uri. options Type: Object The options object is also passed through to the storage adapter. Check your storage adapter docs for any extra options. options.namespace Type: String Default: 'keyv' Namespace for the current instance. options.ttl Type: Number Default: undefined Default TTL. Can be overridden by specififying a TTL on .set(). options.compression Type: @keyv/compress-<compression_package_name> Default: undefined Compression package to use. See Compression for more details. options.serialize Type: Function Default: JSONB.stringify A custom serialization function. options.deserialize Type: Function Default: JSONB.parse A custom deserialization function. options.store Type: Storage adapter instance Default: new Map() The storage adapter instance to be used by Keyv. options.adapter Type: String Default: undefined Specify an adapter to use. e.g 'redis' or 'mongodb'. Instance Keys must always be strings. Values can be of any type. .set(key, value, [ttl]) Set a value. By default keys are persistent. You can set an expiry TTL in milliseconds. Returns a promise which resolves to true. .get(key, [options]) Returns a promise which resolves to the retrieved value. options.raw Type: Boolean Default: false If set to true the raw DB object Keyv stores internally will be returned instead of just the value. This contains the TTL timestamp. .delete(key) Deletes an entry. Returns a promise which resolves to true if the key existed, false if not. .clear() Delete all entries in the current namespace. Returns a promise which is resolved when the entries have been cleared. .iterator() Iterate over all entries of the current namespace. Returns a iterable that can be iterated by for-of loops. For example: // please note that the \"await\" keyword should be used here for await (const [key, value] of this.keyv.iterator()) { console.log(key, value); }; How to Contribute In this section of the documentation we will cover: How to set up this repository locally How to get started with running commands How to contribute changes using Pull Requests Dependencies This package requires the following dependencies to run: Yarn V1 Docker Setting up your workspace To contribute to this repository, start by setting up this project locally: Fork this repository into your Git account Clone the forked repository to your local directory using git clone Install any of the above missing dependencies Launching the project Once the project is installed locally, you are ready to start up its services: Ensure that your Docker service is running. From the root directory of your project, run the yarn command in the command prompt to install yarn. Run the yarn bootstrap command to install any necessary dependencies. Run yarn test:services:start to start up this project's Docker container. The container will launch all services within your workspace. Available Commands Once the project is running, you can execute a variety of commands. The root workspace and each subpackage contain a package.json file with a scripts field listing all the commands that can be executed from that directory. This project also supports native yarn, and docker commands. Here, we'll cover the primary commands that can be executed from the root directory. Unless otherwise noted, these commands can also be executed from a subpackage. If executed from a subpackage, they will only affect that subpackage, rather than the entire workspace. yarn The yarn command installs yarn in the workspace. yarn bootstrap The yarn bootstrap command installs all dependencies in the workspace. yarn test:services:start The yarn test:services:start command starts up the project's Docker container, launching all services in the workspace. This command must be executed from the root directory. yarn test:services:stop The yarn test:services:stop command brings down the project's Docker container, halting all services. This command must be executed from the root directory. yarn test The yarn test command runs all tests in the workspace. yarn clean The yarn clean command removes yarn and all dependencies installed by yarn. After executing this command, you must repeat the steps in Setting up your workspace to rebuild your workspace. Contributing Changes Now that you've set up your workspace, you're ready to contribute changes to the keyv repository. Make any changes that you would like to contribute in your local workspace. After making these changes, ensure that the project's tests still pass by executing the yarn test command in the root directory. Commit your changes and push them to your forked repository. Navigate to the original keyv repository and go the Pull Requests tab. Click the New pull request button, and open a pull request for the branch in your repository that contains your changes. Once your pull request is created, ensure that all checks have passed and that your branch has no conflicts with the base branch. If there are any issues, resolve these changes in your local repository, and then commit and push them to git. Similarly, respond to any reviewer comments or requests for changes by making edits to your local repository and pushing them to Git. Once the pull request has been reviewed, those with write access to the branch will be able to merge your changes into the keyv repository. If you need more information on the steps to create a pull request, you can find a detailed walkthrough in the Github documentation License MIT © Jared Wray"
  },
  "Examiner-UI/node_modules/levn/README.html": {
    "href": "Examiner-UI/node_modules/levn/README.html",
    "title": "levn | Examiner",
    "summary": "levn Light ECMAScript (JavaScript) Value Notation Levn is a library which allows you to parse a string into a JavaScript value based on an expected type. It is meant for short amounts of human entered data (eg. config files, command line arguments). Levn aims to concisely describe JavaScript values in text, and allow for the extraction and validation of those values. Levn uses type-check for its type format, and to validate the results. MIT license. Version 0.4.1. How is this different than JSON? levn is meant to be written by humans only, is (due to the previous point) much more concise, can be validated against supplied types, has regex and date literals, and can easily be extended with custom types. On the other hand, it is probably slower and thus less efficient at transporting large amounts of data, which is fine since this is not its purpose. npm install levn For updates on levn, follow me on twitter. Quick Examples var parse = require('levn').parse; parse('Number', '2'); // 2 parse('String', '2'); // '2' parse('String', 'levn'); // 'levn' parse('String', 'a b'); // 'a b' parse('Boolean', 'true'); // true parse('Date', '#2011-11-11#'); // (Date object) parse('Date', '2011-11-11'); // (Date object) parse('RegExp', '/[a-z]/gi'); // /[a-z]/gi parse('RegExp', 're'); // /re/ parse('Int', '2'); // 2 parse('Number | String', 'str'); // 'str' parse('Number | String', '2'); // 2 parse('[Number]', '[1,2,3]'); // [1,2,3] parse('(String, Boolean)', '(hi, false)'); // ['hi', false] parse('{a: String, b: Number}', '{a: str, b: 2}'); // {a: 'str', b: 2} // at the top level, you can ommit surrounding delimiters parse('[Number]', '1,2,3'); // [1,2,3] parse('(String, Boolean)', 'hi, false'); // ['hi', false] parse('{a: String, b: Number}', 'a: str, b: 2'); // {a: 'str', b: 2} // wildcard - auto choose type parse('*', '[hi,(null,[42]),{k: true}]'); // ['hi', [null, [42]], {k: true}] Usage require('levn'); returns an object that exposes three properties. VERSION is the current version of the library as a string. parse and parsedTypeParse are functions. // parse(type, input, options); parse('[Number]', '1,2,3'); // [1, 2, 3] // parsedTypeParse(parsedType, input, options); var parsedType = require('type-check').parseType('[Number]'); parsedTypeParse(parsedType, '1,2,3'); // [1, 2, 3] parse(type, input, options) parse casts the string input into a JavaScript value according to the specified type in the type format (and taking account the optional options) and returns the resulting JavaScript value. arguments type - String - the type written in the type format which to check against input - String - the value written in the levn format options - Maybe Object - an optional parameter specifying additional options returns * - the resulting JavaScript value example parse('[Number]', '1,2,3'); // [1, 2, 3] parsedTypeParse(parsedType, input, options) parsedTypeParse casts the string input into a JavaScript value according to the specified type which has already been parsed (and taking account the optional options) and returns the resulting JavaScript value. You can parse a type using the type-check library's parseType function. arguments type - Object - the type in the parsed type format which to check against input - String - the value written in the levn format options - Maybe Object - an optional parameter specifying additional options returns * - the resulting JavaScript value example var parsedType = require('type-check').parseType('[Number]'); parsedTypeParse(parsedType, '1,2,3'); // [1, 2, 3] Levn Format Levn can use the type information you provide to choose the appropriate value to produce from the input. For the same input, it will choose a different output value depending on the type provided. For example, parse('Number', '2') will produce the number 2, but parse('String', '2') will produce the string \"2\". If you do not provide type information, and simply use *, levn will parse the input according the unambiguous \"explicit\" mode, which we will now detail - you can also set the explicit option to true manually in the options. \"string\", 'string' are parsed as a String, eg. \"a msg\" is \"a msg\" #date# is parsed as a Date, eg. #2011-11-11# is new Date('2011-11-11') /regexp/flags is parsed as a RegExp, eg. /re/gi is /re/gi undefined, null, NaN, true, and false are all their JavaScript equivalents [element1, element2, etc] is an Array, and the casting procedure is recursively applied to each element. Eg. [1,2,3] is [1,2,3]. (element1, element2, etc) is an tuple, and the casting procedure is recursively applied to each element. Eg. (1, a) is (1, a) (is [1, 'a']). {key1: val1, key2: val2, ...} is an Object, and the casting procedure is recursively applied to each property. Eg. {a: 1, b: 2} is {a: 1, b: 2}. Any test which does not fall under the above, and which does not contain special characters ([``]``(``)``{``}``:``,) is a string, eg. $12- blah is \"$12- blah\". If you do provide type information, you can make your input more concise as the program already has some information about what it expects. Please see the type format section of type-check for more information about how to specify types. There are some rules about what levn can do with the information: If a String is expected, and only a String, all characters of the input (including any special ones) will become part of the output. Eg. [({})] is \"[({})]\", and \"hi\" is '\"hi\"'. If a Date is expected, the surrounding # can be omitted from date literals. Eg. 2011-11-11 is new Date('2011-11-11'). If a RegExp is expected, no flags need to be specified, and the regex is not using any of the special characters,the opening and closing / can be omitted - this will have the affect of setting the source of the regex to the input. Eg. regex is /regex/. If an Array is expected, and it is the root node (at the top level), the opening [ and closing ] can be omitted. Eg. 1,2,3 is [1,2,3]. If a tuple is expected, and it is the root node (at the top level), the opening ( and closing ) can be omitted. Eg. 1, a is (1, a) (is [1, 'a']). If an Object is expected, and it is the root node (at the top level), the opening { and closing } can be omitted. Eg a: 1, b: 2 is {a: 1, b: 2}. If you list multiple types (eg. Number | String), it will first attempt to cast to the first type and then validate - if the validation fails it will move on to the next type and so forth, left to right. You must be careful as some types will succeed with any input, such as String. Thus put String at the end of your list. In non-explicit mode, Date and RegExp will succeed with a large variety of input - also be careful with these and list them near the end if not last in your list. Whitespace between special characters and elements is inconsequential. Options Options is an object. It is an optional parameter to the parse and parsedTypeParse functions. Explicit A Boolean. By default it is false. Example: parse('RegExp', 're', {explicit: false}); // /re/ parse('RegExp', 're', {explicit: true}); // Error: ... does not type check... parse('RegExp | String', 're', {explicit: true}); // 're' explicit sets whether to be in explicit mode or not. Using * automatically activates explicit mode. For more information, read the levn format section. customTypes An Object. Empty {} by default. Example: var options = { customTypes: { Even: { typeOf: 'Number', validate: function (x) { return x % 2 === 0; }, cast: function (x) { return {type: 'Just', value: parseInt(x)}; } } } } parse('Even', '2', options); // 2 parse('Even', '3', options); // Error: Value: \"3\" does not type check... Another Example: function Person(name, age){ this.name = name; this.age = age; } var options = { customTypes: { Person: { typeOf: 'Object', validate: function (x) { x instanceof Person; }, cast: function (value, options, typesCast) { var name, age; if ({}.toString.call(value).slice(8, -1) !== 'Object') { return {type: 'Nothing'}; } name = typesCast(value.name, [{type: 'String'}], options); age = typesCast(value.age, [{type: 'Numger'}], options); return {type: 'Just', value: new Person(name, age)}; } } } parse('Person', '{name: Laura, age: 25}', options); // Person {name: 'Laura', age: 25} customTypes is an object whose keys are the name of the types, and whose values are an object with three properties, typeOf, validate, and cast. For more information about typeOf and validate, please see the custom types section of type-check. cast is a function which receives three arguments, the value under question, options, and the typesCast function. In cast, attempt to cast the value into the specified type. If you are successful, return an object in the format {type: 'Just', value: CAST-VALUE}, if you know it won't work, return {type: 'Nothing'}. You can use the typesCast function to cast any child values. Remember to pass options to it. In your function you can also check for options.explicit and act accordingly. Technical About levn is written in LiveScript - a language that compiles to JavaScript. It uses type-check to both parse types and validate values. It also uses the prelude.ls library."
  },
  "Examiner-UI/node_modules/locate-path/readme.html": {
    "href": "Examiner-UI/node_modules/locate-path/readme.html",
    "title": "locate-path | Examiner",
    "summary": "locate-path Get the first path that exists on disk of multiple paths Install $ npm install locate-path Usage Here we find the first file that exists on disk, in array order. const locatePath = require('locate-path'); const files = [ 'unicorn.png', 'rainbow.png', // Only this one actually exists on disk 'pony.png' ]; (async () => { console(await locatePath(files)); //=> 'rainbow' })(); API locatePath(paths, options?) Returns a Promise<string> for the first path that exists or undefined if none exists. paths Type: Iterable<string> Paths to check. options Type: object concurrency Type: number Default: Infinity Minimum: 1 Number of concurrently pending promises. preserveOrder Type: boolean Default: true Preserve paths order when searching. Disable this to improve performance if you don't care about the order. cwd Type: string Default: process.cwd() Current working directory. type Type: string Default: 'file' Values: 'file' | 'directory' The type of paths that can match. allowSymlinks Type: boolean Default: true Allow symbolic links to match if they point to the chosen path type. locatePath.sync(paths, options?) Returns the first path that exists or undefined if none exists. paths Type: Iterable<string> Paths to check. options Type: object cwd Same as above. type Same as above. allowSymlinks Same as above. Related path-exists - Check if a path exists Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/lodash-es/README.html": {
    "href": "Examiner-UI/node_modules/lodash-es/README.html",
    "title": "lodash-es v4.17.21 | Examiner",
    "summary": "lodash-es v4.17.21 The Lodash library exported as ES modules. Generated using lodash-cli: $ lodash modularize exports=es -o ./ See the package source for more details."
  },
  "Examiner-UI/node_modules/lodash-es/release.html": {
    "href": "Examiner-UI/node_modules/lodash-es/release.html",
    "title": "| Examiner",
    "summary": "npm run build npm run doc npm i git clone --depth=10 --branch=master git@github.com:lodash-archive/lodash-cli.git ./node_modules/lodash-cli mkdir -p ./node_modules/lodash-cli/node_modules/lodash; cd $_; cp ../../../../lodash.js ./lodash.js; cp ../../../../package.json ./package.json cd ../../; npm i --production; cd ../../ node ./node_modules/lodash-cli/bin/lodash core exports=node -o ./npm-package/core.js node ./node_modules/lodash-cli/bin/lodash modularize exports=node -o ./npm-package cp lodash.js npm-package/lodash.js cp dist/lodash.min.js npm-package/lodash.min.js cp LICENSE npm-package/LICENSE Clone two repos Bump lodash version in package.json, readme, package=locak, lodash.js npm run build npm run doc update mappings in ldoash-cli copy ldoash into lodash-cli node modules and package json. node ./node_modules/lodash-cli/bin/lodash core exports=node -o ./npm-package/core.js node ./node_modules/lodash-cli/bin/lodash modularize exports=node -o ./npm-package Clone the two repositories: $ git clone https://github.com/lodash/lodash.git $ git clone https://github.com/bnjmnt4n/lodash-cli.git Update lodash-cli to accomdate changes in lodash source. This can typically involve adding new function dependency mappings in lib/mappings.js. Sometimes, additional changes might be needed for more involved functions. In the lodash repository, update references to the lodash version in README.md, lodash.js, package.jsona nd package-lock.json Run: npm run build npm run doc node ../lodash-cli/bin/lodash core -o ./dist/lodash.core.js Add a commit and tag the release mkdir ../lodash-temp cp lodash.js dist/lodash.min.js dist/lodash.core.js dist/lodash.core.min.js ../lodash-temp/ node ../lodash-cli/bin/lodash modularize exports=node -o . cp ../lodash-temp/lodash.core.js core.js cp ../lodash-temp/lodash.core.min.js core.min.js cp ../lodash-temp/lodash.js lodash.js cp ../lodash-temp/lodash.min.js lodash.min.js ❯ node ../lodash-cli/bin/lodash modularize exports=es -o ."
  },
  "Examiner-UI/node_modules/lodash.merge/README.html": {
    "href": "Examiner-UI/node_modules/lodash.merge/README.html",
    "title": "lodash.merge v4.6.2 | Examiner",
    "summary": "lodash.merge v4.6.2 The Lodash method _.merge exported as a Node.js module. Installation Using npm: $ {sudo -H} npm i -g npm $ npm i --save lodash.merge In Node.js: var merge = require('lodash.merge'); See the documentation or package source for more details."
  },
  "Examiner-UI/node_modules/lodash/README.html": {
    "href": "Examiner-UI/node_modules/lodash/README.html",
    "title": "lodash v4.17.21 | Examiner",
    "summary": "lodash v4.17.21 The Lodash library exported as Node.js modules. Installation Using npm: $ npm i -g npm $ npm i --save lodash In Node.js: // Load the full build. var _ = require('lodash'); // Load the core build. var _ = require('lodash/core'); // Load the FP build for immutable auto-curried iteratee-first data-last methods. var fp = require('lodash/fp'); // Load method categories. var array = require('lodash/array'); var object = require('lodash/fp/object'); // Cherry-pick methods for smaller browserify/rollup/webpack bundles. var at = require('lodash/at'); var curryN = require('lodash/fp/curryN'); See the package source for more details. Note: Install n_ for Lodash use in the Node.js < 6 REPL. Support Tested in Chrome 74-75, Firefox 66-67, IE 11, Edge 18, Safari 11-12, & Node.js 8-12. Automated browser & CI test runs are available."
  },
  "Examiner-UI/node_modules/lodash/release.html": {
    "href": "Examiner-UI/node_modules/lodash/release.html",
    "title": "| Examiner",
    "summary": "npm run build npm run doc npm i git clone --depth=10 --branch=master git@github.com:lodash-archive/lodash-cli.git ./node_modules/lodash-cli mkdir -p ./node_modules/lodash-cli/node_modules/lodash; cd $_; cp ../../../../lodash.js ./lodash.js; cp ../../../../package.json ./package.json cd ../../; npm i --production; cd ../../ node ./node_modules/lodash-cli/bin/lodash core exports=node -o ./npm-package/core.js node ./node_modules/lodash-cli/bin/lodash modularize exports=node -o ./npm-package cp lodash.js npm-package/lodash.js cp dist/lodash.min.js npm-package/lodash.min.js cp LICENSE npm-package/LICENSE Clone two repos Bump lodash version in package.json, readme, package=locak, lodash.js npm run build npm run doc update mappings in ldoash-cli copy ldoash into lodash-cli node modules and package json. node ./node_modules/lodash-cli/bin/lodash core exports=node -o ./npm-package/core.js node ./node_modules/lodash-cli/bin/lodash modularize exports=node -o ./npm-package Clone the two repositories: $ git clone https://github.com/lodash/lodash.git $ git clone https://github.com/bnjmnt4n/lodash-cli.git Update lodash-cli to accomdate changes in lodash source. This can typically involve adding new function dependency mappings in lib/mappings.js. Sometimes, additional changes might be needed for more involved functions. In the lodash repository, update references to the lodash version in README.md, lodash.js, package.jsona nd package-lock.json Run: npm run build npm run doc node ../lodash-cli/bin/lodash core -o ./dist/lodash.core.js Add a commit and tag the release mkdir ../lodash-temp cp lodash.js dist/lodash.min.js dist/lodash.core.js dist/lodash.core.min.js ../lodash-temp/ node ../lodash-cli/bin/lodash modularize exports=node -o . cp ../lodash-temp/lodash.core.js core.js cp ../lodash-temp/lodash.core.min.js core.min.js cp ../lodash-temp/lodash.js lodash.js cp ../lodash-temp/lodash.min.js lodash.min.js ❯ node ../lodash-cli/bin/lodash modularize exports=es -o ."
  },
  "Examiner-UI/node_modules/loose-envify/README.html": {
    "href": "Examiner-UI/node_modules/loose-envify/README.html",
    "title": "loose-envify | Examiner",
    "summary": "loose-envify Fast (and loose) selective process.env replacer using js-tokens instead of an AST. Works just like envify but much faster. Gotchas Doesn't handle broken syntax. Doesn't look inside embedded expressions in template strings. this won't work: console.log(`the current env is ${process.env.NODE_ENV}`); Doesn't replace oddly-spaced or oddly-commented expressions. this won't work: console.log(process./*won't*/env./*work*/NODE_ENV); Usage/Options loose-envify has the exact same interface as envify, including the CLI. Benchmark envify: $ for i in {1..5}; do node bench/bench.js 'envify'; done 708ms 727ms 791ms 719ms 720ms loose-envify: $ for i in {1..5}; do node bench/bench.js '../'; done 51ms 52ms 52ms 52ms 52ms"
  },
  "Examiner-UI/node_modules/material-colors/README.html": {
    "href": "Examiner-UI/node_modules/material-colors/README.html",
    "title": "Material Colors | Examiner",
    "summary": "Material Colors Colors from Google's Material Design made available to coders. The colors are scraped from the guide. The idea to publish colors in multiple forms is stolen from mrmrs/colors. Available Forms CSS: Classes for prototyping such as .color-red-100, .bg-red-100, .border-red-100, .fill-red-100 and .stroke-red-100. CSS variables such as --md-red-100. Sass, Scss: Color variables such as $md-red-100. Less: Color variables such as @md-red-100. Stylus: Color variables such as md-red-100. JSON: Raw data of colors. Key names are hypenated. e.g. deep-purple JavaScript: Color set object provided via AMD, CommonJS or global variable materialColor. Key names are camelCase. e.g. deepPurple EcmaScript module: Color variables are exported as camelCase names. See dist directory or demo for more details. Usage Download Download what you like from dist directory and use it. Bower bower install material-colors and use what you like in bower_components/material-colors/dist. NPM npm install material-colors"
  },
  "Examiner-UI/node_modules/math-intrinsics/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/math-intrinsics/CHANGELOG.html",
    "title": "Changelog | Examiner",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. v1.1.0 - 2024-12-18 Commits [New] add round 7cfb044 [Tests] add attw e96be8f [Dev Deps] update @types/tape 30d0023 v1.0.0 - 2024-12-11 Commits Initial implementation, tests, readme, types b898caa Initial commit 02745b0 [New] add constants/maxArrayLength, mod b978178 npm init a39fc57 Only apps should have lockfiles 9451580"
  },
  "Examiner-UI/node_modules/math-intrinsics/README.html": {
    "href": "Examiner-UI/node_modules/math-intrinsics/README.html",
    "title": "math-intrinsics | Examiner",
    "summary": "math-intrinsics ES Math-related intrinsics and helpers, robustly cached. abs floor isFinite isInteger isNaN isNegativeZero max min mod pow round sign constants/maxArrayLength constants/maxSafeInteger constants/maxValue Tests Simply clone the repo, npm install, and run npm test Security Please email @ljharb or see https://tidelift.com/security if you have a potential security vulnerability to report."
  },
  "Examiner-UI/node_modules/merge2/README.html": {
    "href": "Examiner-UI/node_modules/merge2/README.html",
    "title": "merge2 | Examiner",
    "summary": "merge2 Merge multiple streams into one stream in sequence or parallel. Install Install with npm npm install merge2 Usage const gulp = require('gulp') const merge2 = require('merge2') const concat = require('gulp-concat') const minifyHtml = require('gulp-minify-html') const ngtemplate = require('gulp-ngtemplate') gulp.task('app-js', function () { return merge2( gulp.src('static/src/tpl/*.html') .pipe(minifyHtml({empty: true})) .pipe(ngtemplate({ module: 'genTemplates', standalone: true }) ), gulp.src([ 'static/src/js/app.js', 'static/src/js/locale_zh-cn.js', 'static/src/js/router.js', 'static/src/js/tools.js', 'static/src/js/services.js', 'static/src/js/filters.js', 'static/src/js/directives.js', 'static/src/js/controllers.js' ]) ) .pipe(concat('app.js')) .pipe(gulp.dest('static/dist/js/')) }) const stream = merge2([stream1, stream2], stream3, {end: false}) //... stream.add(stream4, stream5) //.. stream.end() // equal to merge2([stream1, stream2], stream3) const stream = merge2() stream.add([stream1, stream2]) stream.add(stream3) // merge order: // 1. merge `stream1`; // 2. merge `stream2` and `stream3` in parallel after `stream1` merged; // 3. merge 'stream4' after `stream2` and `stream3` merged; const stream = merge2(stream1, [stream2, stream3], stream4) // merge order: // 1. merge `stream5` and `stream6` in parallel after `stream4` merged; // 2. merge 'stream7' after `stream5` and `stream6` merged; stream.add([stream5, stream6], stream7) // nest merge // equal to merge2(stream1, stream2, stream6, stream3, [stream4, stream5]); const streamA = merge2(stream1, stream2) const streamB = merge2(stream3, [stream4, stream5]) const stream = merge2(streamA, streamB) streamA.add(stream6) API const merge2 = require('merge2') merge2() merge2(options) merge2(stream1, stream2, ..., streamN) merge2(stream1, stream2, ..., streamN, options) merge2(stream1, [stream2, stream3, ...], streamN, options) return a duplex stream (mergedStream). streams in array will be merged in parallel. mergedStream.add(stream) mergedStream.add(stream1, [stream2, stream3, ...], ...) return the mergedStream. mergedStream.on('queueDrain', function() {}) It will emit 'queueDrain' when all streams merged. If you set end === false in options, this event give you a notice that should add more streams to merge or end the mergedStream. stream option Type: Readable or Duplex or Transform stream. options option Type: Object. end - Boolean - if end === false then mergedStream will not be auto ended, you should end by yourself. Default: undefined pipeError - Boolean - if pipeError === true then mergedStream will emit error event from source streams. Default: undefined objectMode - Boolean . Default: true objectMode and other options(highWaterMark, defaultEncoding ...) is same as Node.js Stream. License MIT © Teambition"
  },
  "Examiner-UI/node_modules/micromatch/README.html": {
    "href": "Examiner-UI/node_modules/micromatch/README.html",
    "title": "micromatch | Examiner",
    "summary": "micromatch Glob matching for javascript/node.js. A replacement and faster alternative to minimatch and multimatch. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Table of Contents Details Install Sponsors Gold Sponsors Quickstart Why use micromatch? Matching features Switching to micromatch From minimatch From multimatch API Options Options Examples options.basename options.bash options.expandRange options.format options.ignore options.matchBase options.noextglob options.nonegate options.noglobstar options.nonull options.nullglob options.onIgnore options.onMatch options.onResult options.posixSlashes options.unescape Extended globbing Extglobs Braces Regex character classes Regex groups POSIX bracket expressions Notes Bash 4.3 parity Backslashes Benchmarks Running benchmarks Latest results Contributing About Install Install with npm: $ npm install --save micromatch Sponsors Become a Sponsor to add your logo to this README, or any of my other projects Quickstart const micromatch = require('micromatch'); // micromatch(list, patterns[, options]); The main export takes a list of strings and one or more glob patterns: console.log(micromatch(['foo', 'bar', 'baz', 'qux'], ['f*', 'b*'])) //=> ['foo', 'bar', 'baz'] console.log(micromatch(['foo', 'bar', 'baz', 'qux'], ['*', '!b*'])) //=> ['foo', 'qux'] Use .isMatch() to for boolean matching: console.log(micromatch.isMatch('foo', 'f*')) //=> true console.log(micromatch.isMatch('foo', ['b*', 'f*'])) //=> true Switching from minimatch and multimatch is easy! Why use micromatch? micromatch is a replacement for minimatch and multimatch Supports all of the same matching features as minimatch and multimatch More complete support for the Bash 4.3 specification than minimatch and multimatch. Micromatch passes all of the spec tests from bash, including some that bash still fails. Fast & Performant - Loads in about 5ms and performs fast matches. Glob matching - Using wildcards (* and ?), globstars (**) for nested directories Advanced globbing - Supports extglobs, braces, and POSIX brackets, and support for escaping special characters with \\ or quotes. Accurate - Covers more scenarios than minimatch Well tested - More than 5,000 test assertions Windows support - More reliable windows support than minimatch and multimatch. Safe - Micromatch is not subject to DoS with brace patterns like minimatch and multimatch. Matching features Support for multiple glob patterns (no need for wrappers like multimatch) Wildcards (**, *.js) Negation ('!a/*.js', '*!(b).js') extglobs (+(x|y), !(a|b)) POSIX character classes ([[:alpha:][:digit:]]) brace expansion (foo/{1..5}.md, bar/{a,b,c}.js) regex character classes (foo-[1-5].js) regex logical \"or\" (foo/(abc|xyz).js) You can mix and match these features to create whatever patterns you need! Switching to micromatch (There is one notable difference between micromatch and minimatch in regards to how backslashes are handled. See the notes about backslashes for more information.) From minimatch Use micromatch.isMatch() instead of minimatch(): console.log(micromatch.isMatch('foo', 'b*')); //=> false Use micromatch.match() instead of minimatch.match(): console.log(micromatch.match(['foo', 'bar'], 'b*')); //=> 'bar' From multimatch Same signature: console.log(micromatch(['foo', 'bar', 'baz'], ['f*', '*z'])); //=> ['foo', 'baz'] API Params list {String|Array } : List of strings to match. patterns {String|Array } : One or more glob patterns to use for matching. options {Object}: See available options returns {Array}: Returns an array of matches Example const mm = require('micromatch'); // mm(list, patterns[, options]); console.log(mm(['a.js', 'a.txt'], ['*.js'])); //=> [ 'a.js' ] .matcher Returns a matcher function from the given glob pattern and options. The returned function takes a string to match as its only argument and returns true if the string is a match. Params pattern {String}: Glob pattern options {Object} returns {Function}: Returns a matcher function. Example const mm = require('micromatch'); // mm.matcher(pattern[, options]); const isMatch = mm.matcher('*.!(*a)'); console.log(isMatch('a.a')); //=> false console.log(isMatch('a.b')); //=> true .isMatch Returns true if any of the given glob patterns match the specified string. Params str {String}: The string to test. patterns {String|Array}: One or more glob patterns to use for matching. [options] {Object}: See available options. returns {Boolean}: Returns true if any patterns match str Example const mm = require('micromatch'); // mm.isMatch(string, patterns[, options]); console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true console.log(mm.isMatch('a.a', 'b.*')); //=> false .not Returns a list of strings that do not match any of the given patterns. Params list {Array}: Array of strings to match. patterns {String|Array}: One or more glob pattern to use for matching. options {Object}: See available options for changing how matches are performed returns {Array}: Returns an array of strings that do not match the given patterns. Example const mm = require('micromatch'); // mm.not(list, patterns[, options]); console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a')); //=> ['b.b', 'c.c'] .contains Returns true if the given string contains the given pattern. Similar to .isMatch but the pattern can match any part of the string. Params str {String}: The string to match. patterns {String|Array}: Glob pattern to use for matching. options {Object}: See available options for changing how matches are performed returns {Boolean}: Returns true if any of the patterns matches any part of str. Example var mm = require('micromatch'); // mm.contains(string, pattern[, options]); console.log(mm.contains('aa/bb/cc', '*b')); //=> true console.log(mm.contains('aa/bb/cc', '*d')); //=> false .matchKeys Filter the keys of the given object with the given glob pattern and options. Does not attempt to match nested keys. If you need this feature, use glob-object instead. Params object {Object}: The object with keys to filter. patterns {String|Array}: One or more glob patterns to use for matching. options {Object}: See available options for changing how matches are performed returns {Object}: Returns an object with only keys that match the given patterns. Example const mm = require('micromatch'); // mm.matchKeys(object, patterns[, options]); const obj = { aa: 'a', ab: 'b', ac: 'c' }; console.log(mm.matchKeys(obj, '*b')); //=> { ab: 'b' } .some Returns true if some of the strings in the given list match any of the given glob patterns. Params list {String|Array}: The string or array of strings to test. Returns as soon as the first match is found. patterns {String|Array}: One or more glob patterns to use for matching. options {Object}: See available options for changing how matches are performed returns {Boolean}: Returns true if any patterns matches any of the strings in list Example const mm = require('micromatch'); // mm.some(list, patterns[, options]); console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js'])); // true console.log(mm.some(['foo.js'], ['*.js', '!foo.js'])); // false .every Returns true if every string in the given list matches any of the given glob patterns. Params list {String|Array}: The string or array of strings to test. patterns {String|Array}: One or more glob patterns to use for matching. options {Object}: See available options for changing how matches are performed returns {Boolean}: Returns true if all patterns matches all of the strings in list Example const mm = require('micromatch'); // mm.every(list, patterns[, options]); console.log(mm.every('foo.js', ['foo.js'])); // true console.log(mm.every(['foo.js', 'bar.js'], ['*.js'])); // true console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js'])); // false console.log(mm.every(['foo.js'], ['*.js', '!foo.js'])); // false .all Returns true if all of the given patterns match the specified string. Params str {String|Array}: The string to test. patterns {String|Array}: One or more glob patterns to use for matching. options {Object}: See available options for changing how matches are performed returns {Boolean}: Returns true if any patterns match str Example const mm = require('micromatch'); // mm.all(string, patterns[, options]); console.log(mm.all('foo.js', ['foo.js'])); // true console.log(mm.all('foo.js', ['*.js', '!foo.js'])); // false console.log(mm.all('foo.js', ['*.js', 'foo.js'])); // true console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js'])); // true .capture Returns an array of matches captured by pattern in string, ornull` if the pattern did not match. Params glob {String}: Glob pattern to use for matching. input {String}: String to match options {Object}: See available options for changing how matches are performed returns {Array|null}: Returns an array of captures if the input matches the glob pattern, otherwise null. Example const mm = require('micromatch'); // mm.capture(pattern, string[, options]); console.log(mm.capture('test/*.js', 'test/foo.js')); //=> ['foo'] console.log(mm.capture('test/*.js', 'foo/bar.css')); //=> null .makeRe Create a regular expression from the given glob pattern. Params pattern {String}: A glob pattern to convert to regex. options {Object} returns {RegExp}: Returns a regex created from the given pattern. Example const mm = require('micromatch'); // mm.makeRe(pattern[, options]); console.log(mm.makeRe('*.js')); //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/ .scan Scan a glob pattern to separate the pattern into segments. Used by the split method. Params pattern {String} options {Object} returns {Object}: Returns an object with Example const mm = require('micromatch'); const state = mm.scan(pattern[, options]); .parse Parse a glob pattern to create the source string for a regular expression. Params glob {String} options {Object} returns {Object}: Returns an object with useful properties and output to be used as regex source string. Example const mm = require('micromatch'); const state = mm.parse(pattern[, options]); .braces Process the given brace pattern. Params pattern {String}: String with brace pattern to process. options {Object}: Any options to change how expansion is performed. See the braces library for all available options. returns {Array} Example const { braces } = require('micromatch'); console.log(braces('foo/{a,b,c}/bar')); //=> [ 'foo/(a|b|c)/bar' ] console.log(braces('foo/{a,b,c}/bar', { expand: true })); //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ] Options Option Type Default value Description basename boolean false If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. bash boolean false Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (**). capture boolean undefined Return regex matches in supporting methods. contains boolean undefined Allows glob to match any part of the given string(s). cwd string process.cwd() Current working directory. Used by picomatch.split() debug boolean undefined Debug regular expressions when an error is thrown. dot boolean false Match dotfiles. Otherwise dotfiles are ignored unless a . is explicitly defined in the pattern. expandRange function undefined Custom function for expanding ranges in brace patterns, such as {a..z}. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. This option is overridden by the expandBrace option. failglob boolean false Similar to the failglob behavior in Bash, throws an error when no matches are found. Based on the bash option of the same name. fastpaths boolean true To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to false. flags boolean undefined Regex flags to use in the generated regex. If defined, the nocase option will be overridden. format function undefined Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. ignore array\\|string undefined One or more glob patterns for excluding strings that should not be matched from the result. keepQuotes boolean false Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes. literalBrackets boolean undefined When true, brackets in the glob pattern will be escaped so that only literal brackets will be matched. lookbehinds boolean true Support regex positive and negative lookbehinds. Note that you must be using Node 8.1.10 or higher to enable regex lookbehinds. matchBase boolean false Alias for basename maxLength boolean 65536 Limit the max length of the input string. An error is thrown if the input string is longer than this value. nobrace boolean false Disable brace matching, so that {a,b} and {1..3} would be treated as literal characters. nobracket boolean undefined Disable matching with regex brackets. nocase boolean false Perform case-insensitive matching. Equivalent to the regex i flag. Note that this option is ignored when the flags option is defined. nodupes boolean true Deprecated, use nounique instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. noext boolean false Alias for noextglob noextglob boolean false Disable support for matching with extglobs (like +(a\\|b)) noglobstar boolean false Disable support for matching nested directories with globstars (**) nonegate boolean false Disable support for negating with leading ! noquantifiers boolean false Disable support for regex quantifiers (like a{1,2}) and treat them as brace patterns to be expanded. onIgnore function undefined Function to be called on ignored items. onMatch function undefined Function to be called on matched items. onResult function undefined Function to be called on all items, regardless of whether or not they are matched or ignored. posix boolean false Support POSIX character classes (\"posix brackets\"). posixSlashes boolean undefined Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself prepend string undefined String to prepend to the generated regex used for matching. regex boolean false Use regular expression rules for + (instead of matching literal +), and for stars that follow closing parentheses or brackets (as in )* and ]*). strictBrackets boolean undefined Throw an error if brackets, braces, or parens are imbalanced. strictSlashes boolean undefined When true, picomatch won't match trailing slashes with single stars. unescape boolean undefined Remove preceding backslashes from escaped glob characters before creating the regular expression to perform matches. unixify boolean undefined Alias for posixSlashes, for backwards compatitibility. Options Examples options.basename Allow glob patterns without slashes to match a file path based on its basename. Same behavior as minimatch option matchBase. Type: Boolean Default: false Example micromatch(['a/b.js', 'a/c.md'], '*.js'); //=> [] micromatch(['a/b.js', 'a/c.md'], '*.js', { basename: true }); //=> ['a/b.js'] options.bash Enabled by default, this option enforces bash-like behavior with stars immediately following a bracket expression. Bash bracket expressions are similar to regex character classes, but unlike regex, a star following a bracket expression does not repeat the bracketed characters. Instead, the star is treated the same as any other star. Type: Boolean Default: true Example const files = ['abc', 'ajz']; console.log(micromatch(files, '[a-c]*')); //=> ['abc', 'ajz'] console.log(micromatch(files, '[a-c]*', { bash: false })); options.expandRange Type: function Default: undefined Custom function for expanding ranges in brace patterns. The fill-range library is ideal for this purpose, or you can use custom code to do whatever you need. Example The following example shows how to create a glob that matches a numeric folder name between 01 and 25, with leading zeros. const fill = require('fill-range'); const regex = micromatch.makeRe('foo/{01..25}/bar', { expandRange(a, b) { return `(${fill(a, b, { toRegex: true })})`; } }); console.log(regex) //=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/ console.log(regex.test('foo/00/bar')) // false console.log(regex.test('foo/01/bar')) // true console.log(regex.test('foo/10/bar')) // true console.log(regex.test('foo/22/bar')) // true console.log(regex.test('foo/25/bar')) // true console.log(regex.test('foo/26/bar')) // false options.format Type: function Default: undefined Custom function for formatting strings before they're matched. Example // strip leading './' from strings const format = str => str.replace(/^\\.\\//, ''); const isMatch = picomatch('foo/*.js', { format }); console.log(isMatch('./foo/bar.js')) //=> true options.ignore String or array of glob patterns to match files to ignore. Type: String|Array Default: undefined const isMatch = micromatch.matcher('*', { ignore: 'f*' }); console.log(isMatch('foo')) //=> false console.log(isMatch('bar')) //=> true console.log(isMatch('baz')) //=> true options.matchBase Alias for options.basename. options.noextglob Disable extglob support, so that extglobs are regarded as literal characters. Type: Boolean Default: undefined Examples console.log(micromatch(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)')); //=> ['a/b', 'a/!(z)'] console.log(micromatch(['a/z', 'a/b', 'a/!(z)'], 'a/!(z)', { noextglob: true })); //=> ['a/!(z)'] (matches only as literal characters) options.nonegate Disallow negation (!) patterns, and treat leading ! as a literal character to match. Type: Boolean Default: undefined options.noglobstar Disable matching with globstars (**). Type: Boolean Default: undefined micromatch(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**'); //=> ['a/b', 'a/b/c', 'a/b/c/d'] micromatch(['a/b', 'a/b/c', 'a/b/c/d'], 'a/**', {noglobstar: true}); //=> ['a/b'] options.nonull Alias for options.nullglob. options.nullglob If true, when no matches are found the actual (arrayified) glob pattern is returned instead of an empty array. Same behavior as minimatch option nonull. Type: Boolean Default: undefined options.onIgnore const onIgnore = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); // { glob: '*', regex: /^(?:(?!\\.)(?=.)[^\\/]*?\\/?)$/, input: 'foo', output: 'foo' } }; const isMatch = micromatch.matcher('*', { onIgnore, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onMatch const onMatch = ({ glob, regex, input, output }) => { console.log({ input, output }); // { input: 'some\\\\path', output: 'some/path' } // { input: 'some\\\\path', output: 'some/path' } // { input: 'some\\\\path', output: 'some/path' } }; const isMatch = micromatch.matcher('**', { onMatch, posixSlashes: true }); isMatch('some\\\\path'); isMatch('some\\\\path'); isMatch('some\\\\path'); options.onResult const onResult = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = micromatch('*', { onResult, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.posixSlashes Convert path separators on returned files to posix/unix-style forward slashes. Aliased as unixify for backwards compatibility. Type: Boolean Default: true on windows, false everywhere else. Example console.log(micromatch.match(['a\\\\b\\\\c'], 'a/**')); //=> ['a/b/c'] console.log(micromatch.match(['a\\\\b\\\\c'], { posixSlashes: false })); //=> ['a\\\\b\\\\c'] options.unescape Remove backslashes from escaped glob characters before creating the regular expression to perform matches. Type: Boolean Default: undefined Example In this example we want to match a literal *: console.log(micromatch.match(['abc', 'a\\\\*c'], 'a\\\\*c')); //=> ['a\\\\*c'] console.log(micromatch.match(['abc', 'a\\\\*c'], 'a\\\\*c', { unescape: true })); //=> ['a*c'] Extended globbing Micromatch supports the following extended globbing features. Extglobs Extended globbing, as described by the bash man page: pattern regex equivalent description ?(pattern) (pattern)? Matches zero or one occurrence of the given patterns *(pattern) (pattern)* Matches zero or more occurrences of the given patterns +(pattern) (pattern)+ Matches one or more occurrences of the given patterns @(pattern) (pattern) * Matches one of the given patterns !(pattern) N/A (equivalent regex is much more complicated) Matches anything except one of the given patterns * Note that @ isn't a regex character. Braces Brace patterns can be used to match specific ranges or sets of characters. Example The pattern {f,b}*/{1..3}/{b,q}* would match any of following strings: foo/1/bar foo/2/bar foo/3/bar baz/1/qux baz/2/qux baz/3/qux Visit braces to see the full range of features and options related to brace expansion, or to create brace matching or expansion related issues. Regex character classes Given the list: ['a.js', 'b.js', 'c.js', 'd.js', 'E.js']: [ac].js: matches both a and c, returning ['a.js', 'c.js'] [b-d].js: matches from b to d, returning ['b.js', 'c.js', 'd.js'] a/[A-Z].js: matches and uppercase letter, returning ['a/E.md'] Learn about regex character classes. Regex groups Given ['a.js', 'b.js', 'c.js', 'd.js', 'E.js']: (a|c).js: would match either a or c, returning ['a.js', 'c.js'] (b|d).js: would match either b or d, returning ['b.js', 'd.js'] (b|[A-Z]).js: would match either b or an uppercase letter, returning ['b.js', 'E.js'] As with regex, parens can be nested, so patterns like ((a|b)|c)/b will work. Although brace expansion might be friendlier to use, depending on preference. POSIX bracket expressions POSIX brackets are intended to be more user-friendly than regex character classes. This of course is in the eye of the beholder. Example console.log(micromatch.isMatch('a1', '[[:alpha:][:digit:]]')) //=> true console.log(micromatch.isMatch('a1', '[[:alpha:][:alpha:]]')) //=> false Notes Bash 4.3 parity Whenever possible matching behavior is based on behavior Bash 4.3, which is mostly consistent with minimatch. However, it's suprising how many edge cases and rabbit holes there are with glob matching, and since there is no real glob specification, and micromatch is more accurate than both Bash and minimatch, there are cases where best-guesses were made for behavior. In a few cases where Bash had no answers, we used wildmatch (used by git) as a fallback. Backslashes There is an important, notable difference between minimatch and micromatch in regards to how backslashes are handled in glob patterns. Micromatch exclusively and explicitly reserves backslashes for escaping characters in a glob pattern, even on windows, which is consistent with bash behavior. More importantly, unescaping globs can result in unsafe regular expressions. Minimatch converts all backslashes to forward slashes, which means you can't use backslashes to escape any characters in your glob patterns. We made this decision for micromatch for a couple of reasons: Consistency with bash conventions. Glob patterns are not filepaths. They are a type of regular language that is converted to a JavaScript regular expression. Thus, when forward slashes are defined in a glob pattern, the resulting regular expression will match windows or POSIX path separators just fine. A note about joining paths to globs Note that when you pass something like path.join('foo', '*') to micromatch, you are creating a filepath and expecting it to still work as a glob pattern. This causes problems on windows, since the path.sep is \\\\. In other words, since \\\\ is reserved as an escape character in globs, on windows path.join('foo', '*') would result in foo\\\\*, which tells micromatch to match * as a literal character. This is the same behavior as bash. To solve this, you might be inspired to do something like 'foo\\\\*'.replace(/\\\\/g, '/'), but this causes another, potentially much more serious, problem. Benchmarks Running benchmarks Install dependencies for running benchmarks: $ cd bench && npm install Run the benchmarks: $ npm run bench Latest results As of August 23, 2024 (longer bars are better): # .makeRe star micromatch x 2,232,802 ops/sec ±2.34% (89 runs sampled)) minimatch x 781,018 ops/sec ±6.74% (92 runs sampled)) # .makeRe star; dot=true micromatch x 1,863,453 ops/sec ±0.74% (93 runs sampled) minimatch x 723,105 ops/sec ±0.75% (93 runs sampled) # .makeRe globstar micromatch x 1,624,179 ops/sec ±2.22% (91 runs sampled) minimatch x 1,117,230 ops/sec ±2.78% (86 runs sampled)) # .makeRe globstars micromatch x 1,658,642 ops/sec ±0.86% (92 runs sampled) minimatch x 741,224 ops/sec ±1.24% (89 runs sampled)) # .makeRe with leading star micromatch x 1,525,014 ops/sec ±1.63% (90 runs sampled) minimatch x 561,074 ops/sec ±3.07% (89 runs sampled) # .makeRe - braces micromatch x 172,478 ops/sec ±2.37% (78 runs sampled) minimatch x 96,087 ops/sec ±2.34% (88 runs sampled))) # .makeRe braces - range (expanded) micromatch x 26,973 ops/sec ±0.84% (89 runs sampled) minimatch x 3,023 ops/sec ±0.99% (90 runs sampled)) # .makeRe braces - range (compiled) micromatch x 152,892 ops/sec ±1.67% (83 runs sampled) minimatch x 992 ops/sec ±3.50% (89 runs sampled)d)) # .makeRe braces - nested ranges (expanded) micromatch x 15,816 ops/sec ±13.05% (80 runs sampled) minimatch x 2,953 ops/sec ±1.64% (91 runs sampled) # .makeRe braces - nested ranges (compiled) micromatch x 110,881 ops/sec ±1.85% (82 runs sampled) minimatch x 1,008 ops/sec ±1.51% (91 runs sampled) # .makeRe braces - set (compiled) micromatch x 134,930 ops/sec ±3.54% (63 runs sampled)) minimatch x 43,242 ops/sec ±0.60% (93 runs sampled) # .makeRe braces - nested sets (compiled) micromatch x 94,455 ops/sec ±1.74% (69 runs sampled)) minimatch x 27,720 ops/sec ±1.84% (93 runs sampled)) Contributing All contributions are welcome! Please read the contributing guide to get started. Bug reports Please create an issue if you encounter a bug or matching behavior that doesn't seem correct. If you find a matching-related issue, please: research existing issues first (open and closed) visit the GNU Bash documentation to see how Bash deals with the pattern visit the minimatch documentation to cross-check expected behavior in node.js if all else fails, since there is no real specification for globs we will probably need to discuss expected behavior and decide how to resolve it. which means any detail you can provide to help with this discussion would be greatly appreciated. Platform issues It's important to us that micromatch work consistently on all platforms. If you encounter any platform-specific matching or path related issues, please let us know (pull requests are also greatly appreciated). About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Please read the contributing guide for advice on opening issues, pull requests, and coding standards. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: braces: Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support… more | homepage expand-brackets: Expand POSIX bracket expressions (character classes) in glob patterns. | homepage extglob: Extended glob support for JavaScript. Adds (almost) the expressive power of regular expressions to glob… more | homepage fill-range: Fill in a range of numbers or letters, optionally passing an increment or step to… more | homepage nanomatch: Fast, minimal glob matcher for node.js. Similar to micromatch, minimatch and multimatch, but complete Bash… more | homepage Contributors Commits Contributor 523 jonschlinkert 12 es128 9 danez 8 doowb 6 paulmillr 5 mrmlnc 3 DrPizza 2 Tvrqvoise 2 antonyk 2 MartinKolarik 2 Glazy 2 mceIdo 2 TrySound 1 yvele 1 wtgtybhertgeghgtwtg 1 simlu 1 curbengh 1 fidian 1 tomByrer 1 ZoomerTedJackson 1 styfle 1 sebdeckers 1 muescha 1 juszczykjakub 1 joyceerhl 1 donatj 1 frangio 1 UltCombo 1 DianeLooney 1 devongovett 1 Cslove 1 amilajack Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2024, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on August 23, 2024."
  },
  "Examiner-UI/node_modules/mime-db/HISTORY.html": {
    "href": "Examiner-UI/node_modules/mime-db/HISTORY.html",
    "title": "1.52.0 / 2022-02-21 | Examiner",
    "summary": "1.52.0 / 2022-02-21 Add extensions from IANA for more image/* types Add extension .asc to application/pgp-keys Add extensions to various XML types Add new upstream MIME types 1.51.0 / 2021-11-08 Add new upstream MIME types Mark image/vnd.microsoft.icon as compressible Mark image/vnd.ms-dds as compressible 1.50.0 / 2021-09-15 Add deprecated iWorks mime types and extensions Add new upstream MIME types 1.49.0 / 2021-07-26 Add extension .trig to application/trig Add new upstream MIME types 1.48.0 / 2021-05-30 Add extension .mvt to application/vnd.mapbox-vector-tile Add new upstream MIME types Mark text/yaml as compressible 1.47.0 / 2021-04-01 Add new upstream MIME types Remove ambigious extensions from IANA for application/*+xml types Update primary extension to .es for application/ecmascript 1.46.0 / 2021-02-13 Add extension .amr to audio/amr Add extension .m4s to video/iso.segment Add extension .opus to audio/ogg Add new upstream MIME types 1.45.0 / 2020-09-22 Add application/ubjson with extension .ubj Add image/avif with extension .avif Add image/ktx2 with extension .ktx2 Add extension .dbf to application/vnd.dbf Add extension .rar to application/vnd.rar Add extension .td to application/urc-targetdesc+xml Add new upstream MIME types Fix extension of application/vnd.apple.keynote to be .key 1.44.0 / 2020-04-22 Add charsets from IANA Add extension .cjs to application/node Add new upstream MIME types 1.43.0 / 2020-01-05 Add application/x-keepass2 with extension .kdbx Add extension .mxmf to audio/mobile-xmf Add extensions from IANA for application/*+xml types Add new upstream MIME types 1.42.0 / 2019-09-25 Add image/vnd.ms-dds with extension .dds Add new upstream MIME types Remove compressible from multipart/mixed 1.41.0 / 2019-08-30 Add new upstream MIME types Add application/toml with extension .toml Mark font/ttf as compressible 1.40.0 / 2019-04-20 Add extensions from IANA for model/* types Add text/mdx with extension .mdx 1.39.0 / 2019-04-04 Add extensions .siv and .sieve to application/sieve Add new upstream MIME types 1.38.0 / 2019-02-04 Add extension .nq to application/n-quads Add extension .nt to application/n-triples Add new upstream MIME types Mark text/less as compressible 1.37.0 / 2018-10-19 Add extensions to HEIC image types Add new upstream MIME types 1.36.0 / 2018-08-20 Add Apple file extensions from IANA Add extensions from IANA for image/* types Add new upstream MIME types 1.35.0 / 2018-07-15 Add extension .owl to application/rdf+xml Add new upstream MIME types Removes extension .woff from application/font-woff 1.34.0 / 2018-06-03 Add extension .csl to application/vnd.citationstyles.style+xml Add extension .es to application/ecmascript Add new upstream MIME types Add UTF-8 as default charset for text/turtle Mark all XML-derived types as compressible 1.33.0 / 2018-02-15 Add extensions from IANA for message/* types Add new upstream MIME types Fix some incorrect OOXML types Remove application/font-woff2 1.32.0 / 2017-11-29 Add new upstream MIME types Update text/hjson to registered application/hjson Add text/shex with extension .shex 1.31.0 / 2017-10-25 Add application/raml+yaml with extension .raml Add application/wasm with extension .wasm Add new font type from IANA Add new upstream font extensions Add new upstream MIME types Add extensions for JPEG-2000 images 1.30.0 / 2017-08-27 Add application/vnd.ms-outlook Add application/x-arj Add extension .mjs to application/javascript Add glTF types and extensions Add new upstream MIME types Add text/x-org Add VirtualBox MIME types Fix source records for video/* types that are IANA Update font/opentype to registered font/otf 1.29.0 / 2017-07-10 Add application/fido.trusted-apps+json Add extension .wadl to application/vnd.sun.wadl+xml Add new upstream MIME types Add UTF-8 as default charset for text/css 1.28.0 / 2017-05-14 Add new upstream MIME types Add extension .gz to application/gzip Update extensions .md and .markdown to be text/markdown 1.27.0 / 2017-03-16 Add new upstream MIME types Add image/apng with extension .apng 1.26.0 / 2017-01-14 Add new upstream MIME types Add extension .geojson to application/geo+json 1.25.0 / 2016-11-11 Add new upstream MIME types 1.24.0 / 2016-09-18 Add audio/mp3 Add new upstream MIME types 1.23.0 / 2016-05-01 Add new upstream MIME types Add extension .3gpp to audio/3gpp 1.22.0 / 2016-02-15 Add text/slim Add extension .rng to application/xml Add new upstream MIME types Fix extension of application/dash+xml to be .mpd Update primary extension to .m4a for audio/mp4 1.21.0 / 2016-01-06 Add Google document types Add new upstream MIME types 1.20.0 / 2015-11-10 Add text/x-suse-ymp Add new upstream MIME types 1.19.0 / 2015-09-17 Add application/vnd.apple.pkpass Add new upstream MIME types 1.18.0 / 2015-09-03 Add new upstream MIME types 1.17.0 / 2015-08-13 Add application/x-msdos-program Add audio/g711-0 Add image/vnd.mozilla.apng Add extension .exe to application/x-msdos-program 1.16.0 / 2015-07-29 Add application/vnd.uri-map 1.15.0 / 2015-07-13 Add application/x-httpd-php 1.14.0 / 2015-06-25 Add application/scim+json Add application/vnd.3gpp.ussd+xml Add application/vnd.biopax.rdf+xml Add text/x-processing 1.13.0 / 2015-06-07 Add nginx as a source Add application/x-cocoa Add application/x-java-archive-diff Add application/x-makeself Add application/x-perl Add application/x-pilot Add application/x-redhat-package-manager Add application/x-sea Add audio/x-m4a Add audio/x-realaudio Add image/x-jng Add text/mathml 1.12.0 / 2015-06-05 Add application/bdoc Add application/vnd.hyperdrive+json Add application/x-bdoc Add extension .rtf to text/rtf 1.11.0 / 2015-05-31 Add audio/wav Add audio/wave Add extension .litcoffee to text/coffeescript Add extension .sfd-hdstx to application/vnd.hydrostatix.sof-data Add extension .n-gage to application/vnd.nokia.n-gage.symbian.install 1.10.0 / 2015-05-19 Add application/vnd.balsamiq.bmpr Add application/vnd.microsoft.portable-executable Add application/x-ns-proxy-autoconfig 1.9.1 / 2015-04-19 Remove .json extension from application/manifest+json This is causing bugs downstream 1.9.0 / 2015-04-19 Add application/manifest+json Add application/vnd.micro+json Add image/vnd.zbrush.pcx Add image/x-ms-bmp 1.8.0 / 2015-03-13 Add application/vnd.citationstyles.style+xml Add application/vnd.fastcopy-disk-image Add application/vnd.gov.sk.xmldatacontainer+xml Add extension .jsonld to application/ld+json 1.7.0 / 2015-02-08 Add application/vnd.gerber Add application/vnd.msa-disk-image 1.6.1 / 2015-02-05 Community extensions ownership transferred from node-mime 1.6.0 / 2015-01-29 Add application/jose Add application/jose+json Add application/json-seq Add application/jwk+json Add application/jwk-set+json Add application/jwt Add application/rdap+json Add application/vnd.gov.sk.e-form+xml Add application/vnd.ims.imsccv1p3 1.5.0 / 2014-12-30 Add application/vnd.oracle.resource+json Fix various invalid MIME type entries application/mbox+xml application/oscp-response application/vwg-multiplexed audio/g721 1.4.0 / 2014-12-21 Add application/vnd.ims.imsccv1p2 Fix various invalid MIME type entries application/vnd-acucobol application/vnd-curl application/vnd-dart application/vnd-dxr application/vnd-fdf application/vnd-mif application/vnd-sema application/vnd-wap-wmlc application/vnd.adobe.flash-movie application/vnd.dece-zip application/vnd.dvb_service application/vnd.micrografx-igx application/vnd.sealed-doc application/vnd.sealed-eml application/vnd.sealed-mht application/vnd.sealed-ppt application/vnd.sealed-tiff application/vnd.sealed-xls application/vnd.sealedmedia.softseal-html application/vnd.sealedmedia.softseal-pdf application/vnd.wap-slc application/vnd.wap-wbxml audio/vnd.sealedmedia.softseal-mpeg image/vnd-djvu image/vnd-svf image/vnd-wap-wbmp image/vnd.sealed-png image/vnd.sealedmedia.softseal-gif image/vnd.sealedmedia.softseal-jpg model/vnd-dwf model/vnd.parasolid.transmit-binary model/vnd.parasolid.transmit-text text/vnd-a text/vnd-curl text/vnd.wap-wml Remove example template MIME types application/example audio/example image/example message/example model/example multipart/example text/example video/example 1.3.1 / 2014-12-16 Fix missing extensions application/json5 text/hjson 1.3.0 / 2014-12-07 Add application/a2l Add application/aml Add application/atfx Add application/atxml Add application/cdfx+xml Add application/dii Add application/json5 Add application/lxf Add application/mf4 Add application/vnd.apache.thrift.compact Add application/vnd.apache.thrift.json Add application/vnd.coffeescript Add application/vnd.enphase.envoy Add application/vnd.ims.imsccv1p1 Add text/csv-schema Add text/hjson Add text/markdown Add text/yaml 1.2.0 / 2014-11-09 Add application/cea Add application/dit Add application/vnd.gov.sk.e-form+zip Add application/vnd.tmd.mediaflex.api+xml Type application/epub+zip is now IANA-registered 1.1.2 / 2014-10-23 Rebuild database for application/x-www-form-urlencoded change 1.1.1 / 2014-10-20 Mark application/x-www-form-urlencoded as compressible. 1.1.0 / 2014-09-28 Add application/font-woff2 1.0.3 / 2014-09-25 Fix engine requirement in package 1.0.2 / 2014-09-25 Add application/coap-group+json Add application/dcd Add application/vnd.apache.thrift.binary Add image/vnd.tencent.tap Mark all JSON-derived types as compressible Update text/vtt data 1.0.1 / 2014-08-30 Fix extension ordering 1.0.0 / 2014-08-30 Add application/atf Add application/merge-patch+json Add multipart/x-mixed-replace Add source: 'apache' metadata Add source: 'iana' metadata Remove badly-assumed charset data"
  },
  "Examiner-UI/node_modules/mime-db/README.html": {
    "href": "Examiner-UI/node_modules/mime-db/README.html",
    "title": "mime-db | Examiner",
    "summary": "mime-db This is a large database of mime types and information about them. It consists of a single, public JSON file and does not include any logic, allowing it to remain as un-opinionated as possible with an API. It aggregates data from the following sources: http://www.iana.org/assignments/media-types/media-types.xhtml http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types http://hg.nginx.org/nginx/raw-file/default/conf/mime.types Installation npm install mime-db Database Download If you're crazy enough to use this in the browser, you can just grab the JSON file using jsDelivr. It is recommended to replace master with a release tag as the JSON format may change in the future. https://cdn.jsdelivr.net/gh/jshttp/mime-db@master/db.json Usage var db = require('mime-db') // grab data on .js files var data = db['application/javascript'] Data Structure The JSON file is a map lookup for lowercased mime types. Each mime type has the following properties: .source - where the mime type is defined. If not set, it's probably a custom media type. apache - Apache common media types iana - IANA-defined media types nginx - nginx media types .extensions[] - known extensions associated with this mime type. .compressible - whether a file of this type can be gzipped. .charset - the default charset associated with this type, if any. If unknown, every property could be undefined. Contributing To edit the database, only make PRs against src/custom-types.json or src/custom-suffix.json. The src/custom-types.json file is a JSON object with the MIME type as the keys and the values being an object with the following keys: compressible - leave out if you don't know, otherwise true/false to indicate whether the data represented by the type is typically compressible. extensions - include an array of file extensions that are associated with the type. notes - human-readable notes about the type, typically what the type is. sources - include an array of URLs of where the MIME type and the associated extensions are sourced from. This needs to be a primary source; links to type aggregating sites and Wikipedia are not acceptable. To update the build, run npm run build. Adding Custom Media Types The best way to get new media types included in this library is to register them with the IANA. The community registration procedure is outlined in RFC 6838 section 5. Types registered with the IANA are automatically pulled into this library. If that is not possible / feasible, they can be added directly here as a \"custom\" type. To do this, it is required to have a primary source that definitively lists the media type. If an extension is going to be listed as associateed with this media type, the source must definitively link the media type and extension as well."
  },
  "Examiner-UI/node_modules/mime-types/HISTORY.html": {
    "href": "Examiner-UI/node_modules/mime-types/HISTORY.html",
    "title": "2.1.35 / 2022-03-12 | Examiner",
    "summary": "2.1.35 / 2022-03-12 deps: mime-db@1.52.0 Add extensions from IANA for more image/* types Add extension .asc to application/pgp-keys Add extensions to various XML types Add new upstream MIME types 2.1.34 / 2021-11-08 deps: mime-db@1.51.0 Add new upstream MIME types 2.1.33 / 2021-10-01 deps: mime-db@1.50.0 Add deprecated iWorks mime types and extensions Add new upstream MIME types 2.1.32 / 2021-07-27 deps: mime-db@1.49.0 Add extension .trig to application/trig Add new upstream MIME types 2.1.31 / 2021-06-01 deps: mime-db@1.48.0 Add extension .mvt to application/vnd.mapbox-vector-tile Add new upstream MIME types 2.1.30 / 2021-04-02 deps: mime-db@1.47.0 Add extension .amr to audio/amr Remove ambigious extensions from IANA for application/*+xml types Update primary extension to .es for application/ecmascript 2.1.29 / 2021-02-17 deps: mime-db@1.46.0 Add extension .amr to audio/amr Add extension .m4s to video/iso.segment Add extension .opus to audio/ogg Add new upstream MIME types 2.1.28 / 2021-01-01 deps: mime-db@1.45.0 Add application/ubjson with extension .ubj Add image/avif with extension .avif Add image/ktx2 with extension .ktx2 Add extension .dbf to application/vnd.dbf Add extension .rar to application/vnd.rar Add extension .td to application/urc-targetdesc+xml Add new upstream MIME types Fix extension of application/vnd.apple.keynote to be .key 2.1.27 / 2020-04-23 deps: mime-db@1.44.0 Add charsets from IANA Add extension .cjs to application/node Add new upstream MIME types 2.1.26 / 2020-01-05 deps: mime-db@1.43.0 Add application/x-keepass2 with extension .kdbx Add extension .mxmf to audio/mobile-xmf Add extensions from IANA for application/*+xml types Add new upstream MIME types 2.1.25 / 2019-11-12 deps: mime-db@1.42.0 Add new upstream MIME types Add application/toml with extension .toml Add image/vnd.ms-dds with extension .dds 2.1.24 / 2019-04-20 deps: mime-db@1.40.0 Add extensions from IANA for model/* types Add text/mdx with extension .mdx 2.1.23 / 2019-04-17 deps: mime-db@~1.39.0 Add extensions .siv and .sieve to application/sieve Add new upstream MIME types 2.1.22 / 2019-02-14 deps: mime-db@~1.38.0 Add extension .nq to application/n-quads Add extension .nt to application/n-triples Add new upstream MIME types 2.1.21 / 2018-10-19 deps: mime-db@~1.37.0 Add extensions to HEIC image types Add new upstream MIME types 2.1.20 / 2018-08-26 deps: mime-db@~1.36.0 Add Apple file extensions from IANA Add extensions from IANA for image/* types Add new upstream MIME types 2.1.19 / 2018-07-17 deps: mime-db@~1.35.0 Add extension .csl to application/vnd.citationstyles.style+xml Add extension .es to application/ecmascript Add extension .owl to application/rdf+xml Add new upstream MIME types Add UTF-8 as default charset for text/turtle 2.1.18 / 2018-02-16 deps: mime-db@~1.33.0 Add application/raml+yaml with extension .raml Add application/wasm with extension .wasm Add text/shex with extension .shex Add extensions for JPEG-2000 images Add extensions from IANA for message/* types Add new upstream MIME types Update font MIME types Update text/hjson to registered application/hjson 2.1.17 / 2017-09-01 deps: mime-db@~1.30.0 Add application/vnd.ms-outlook Add application/x-arj Add extension .mjs to application/javascript Add glTF types and extensions Add new upstream MIME types Add text/x-org Add VirtualBox MIME types Fix source records for video/* types that are IANA Update font/opentype to registered font/otf 2.1.16 / 2017-07-24 deps: mime-db@~1.29.0 Add application/fido.trusted-apps+json Add extension .wadl to application/vnd.sun.wadl+xml Add extension .gz to application/gzip Add new upstream MIME types Update extensions .md and .markdown to be text/markdown 2.1.15 / 2017-03-23 deps: mime-db@~1.27.0 Add new mime types Add image/apng 2.1.14 / 2017-01-14 deps: mime-db@~1.26.0 Add new mime types 2.1.13 / 2016-11-18 deps: mime-db@~1.25.0 Add new mime types 2.1.12 / 2016-09-18 deps: mime-db@~1.24.0 Add new mime types Add audio/mp3 2.1.11 / 2016-05-01 deps: mime-db@~1.23.0 Add new mime types 2.1.10 / 2016-02-15 deps: mime-db@~1.22.0 Add new mime types Fix extension of application/dash+xml Update primary extension for audio/mp4 2.1.9 / 2016-01-06 deps: mime-db@~1.21.0 Add new mime types 2.1.8 / 2015-11-30 deps: mime-db@~1.20.0 Add new mime types 2.1.7 / 2015-09-20 deps: mime-db@~1.19.0 Add new mime types 2.1.6 / 2015-09-03 deps: mime-db@~1.18.0 Add new mime types 2.1.5 / 2015-08-20 deps: mime-db@~1.17.0 Add new mime types 2.1.4 / 2015-07-30 deps: mime-db@~1.16.0 Add new mime types 2.1.3 / 2015-07-13 deps: mime-db@~1.15.0 Add new mime types 2.1.2 / 2015-06-25 deps: mime-db@~1.14.0 Add new mime types 2.1.1 / 2015-06-08 perf: fix deopt during mapping 2.1.0 / 2015-06-07 Fix incorrectly treating extension-less file name as extension i.e. 'path/to/json' will no longer return application/json Fix .charset(type) to accept parameters Fix .charset(type) to match case-insensitive Improve generation of extension to MIME mapping Refactor internals for readability and no argument reassignment Prefer application/* MIME types from the same source Prefer any type over application/octet-stream deps: mime-db@~1.13.0 Add nginx as a source Add new mime types 2.0.14 / 2015-06-06 deps: mime-db@~1.12.0 Add new mime types 2.0.13 / 2015-05-31 deps: mime-db@~1.11.0 Add new mime types 2.0.12 / 2015-05-19 deps: mime-db@~1.10.0 Add new mime types 2.0.11 / 2015-05-05 deps: mime-db@~1.9.1 Add new mime types 2.0.10 / 2015-03-13 deps: mime-db@~1.8.0 Add new mime types 2.0.9 / 2015-02-09 deps: mime-db@~1.7.0 Add new mime types Community extensions ownership transferred from node-mime 2.0.8 / 2015-01-29 deps: mime-db@~1.6.0 Add new mime types 2.0.7 / 2014-12-30 deps: mime-db@~1.5.0 Add new mime types Fix various invalid MIME type entries 2.0.6 / 2014-12-30 deps: mime-db@~1.4.0 Add new mime types Fix various invalid MIME type entries Remove example template MIME types 2.0.5 / 2014-12-29 deps: mime-db@~1.3.1 Fix missing extensions 2.0.4 / 2014-12-10 deps: mime-db@~1.3.0 Add new mime types 2.0.3 / 2014-11-09 deps: mime-db@~1.2.0 Add new mime types 2.0.2 / 2014-09-28 deps: mime-db@~1.1.0 Add new mime types Update charsets 2.0.1 / 2014-09-07 Support Node.js 0.6 2.0.0 / 2014-09-02 Use mime-db Remove .define() 1.0.2 / 2014-08-04 Set charset=utf-8 for text/javascript 1.0.1 / 2014-06-24 Add text/jsx type 1.0.0 / 2014-05-12 Return false for unknown types Set charset=utf-8 for application/json 0.1.0 / 2014-05-02 Initial release"
  },
  "Examiner-UI/node_modules/mime-types/README.html": {
    "href": "Examiner-UI/node_modules/mime-types/README.html",
    "title": "mime-types | Examiner",
    "summary": "mime-types The ultimate javascript content-type utility. Similar to the mime@1.x module, except: No fallbacks. Instead of naively returning the first available type, mime-types simply returns false, so do var type = mime.lookup('unrecognized') || 'application/octet-stream'. No new Mime() business, so you could do var lookup = require('mime-types').lookup. No .define() functionality Bug fixes for .lookup(path) Otherwise, the API is compatible with mime 1.x. Install This is a Node.js module available through the npm registry. Installation is done using the npm install command: $ npm install mime-types Adding Types All mime types are based on mime-db, so open a PR there if you'd like to add mime types. API var mime = require('mime-types') All functions return false if input is invalid or not found. mime.lookup(path) Lookup the content-type associated with a file. mime.lookup('json') // 'application/json' mime.lookup('.md') // 'text/markdown' mime.lookup('file.html') // 'text/html' mime.lookup('folder/file.js') // 'application/javascript' mime.lookup('folder/.htaccess') // false mime.lookup('cats') // false mime.contentType(type) Create a full content-type header given a content-type or extension. When given an extension, mime.lookup is used to get the matching content-type, otherwise the given content-type is used. Then if the content-type does not already have a charset parameter, mime.charset is used to get the default charset and add to the returned content-type. mime.contentType('markdown') // 'text/x-markdown; charset=utf-8' mime.contentType('file.json') // 'application/json; charset=utf-8' mime.contentType('text/html') // 'text/html; charset=utf-8' mime.contentType('text/html; charset=iso-8859-1') // 'text/html; charset=iso-8859-1' // from a full path mime.contentType(path.extname('/path/to/file.json')) // 'application/json; charset=utf-8' mime.extension(type) Get the default extension for a content-type. mime.extension('application/octet-stream') // 'bin' mime.charset(type) Lookup the implied default charset of a content-type. mime.charset('text/markdown') // 'UTF-8' var type = mime.types[extension] A map of content-types by extension. [extensions...] = mime.extensions[type] A map of extensions by content-type. License MIT"
  },
  "Examiner-UI/node_modules/minimatch/README.html": {
    "href": "Examiner-UI/node_modules/minimatch/README.html",
    "title": "minimatch | Examiner",
    "summary": "minimatch A minimal matching utility. This is the matching library used internally by npm. It works by converting glob expressions into JavaScript RegExp objects. Usage var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! Features Supports these glob features: Brace Expansion Extended glob matching \"Globstar\" ** matching See: man sh man bash man 3 fnmatch man 5 gitignore Minimatch Class Create a minimatch object by instantiating the minimatch.Minimatch class. var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) Properties pattern The original pattern the minimatch object represents. options The options supplied to the constructor. set A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern {a,b/c}/d would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like \"foo\" rather than fo*o?), then it will be left as a string rather than converted to a regular expression. regexp Created by the makeRe method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like fnmatch(3) with FNM_PATH enabled. negate True if the pattern is negated. comment True if the pattern is a comment. empty True if the pattern is \"\". Methods makeRe Generate the regexp member if necessary, and return it. Will return false if the pattern is invalid. match(fname) Return true if the filename matches the pattern, or false otherwise. matchOne(fileArray, patternArray, partial) Take a /-split filename, and match it against a single row in the regExpSet. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. var isJS = minimatch(file, \"*.js\", { matchBase: true }) minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with Array.filter. Example: var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. Options All options are false by default. debug Dump a ton of stuff to stderr. nobrace Do not expand {a,b} and {1..3} brace sets. noglobstar Disable ** matching against multiple folder names. dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, a/**/b will not match a/.d/b, unless dot is set. noext Disable \"extglob\" style patterns like +(a|b). nocase Perform a case-insensitive match. nonull When a match is not found by minimatch.match, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. nocomment Suppress the behavior of treating # at the start of a pattern as a comment. nonegate Suppress the behavior of treating a leading ! character as negation. flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) partial Compare a partial path to a pattern. As long as the parts of the path that are present are not contradicted by the pattern, it will be treated as a match. This is useful in applications where you're walking through a folder structure, and don't yet have the full path, but want to ensure that you do not walk down paths that can never be a match. For example, minimatch('/a/b', '/a/*/c/d', { partial: true }) // true, might be /a/b/c/d minimatch('/a/b', '/**/d', { partial: true }) // true, might be /a/b/.../d minimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a allowWindowsEscape Windows path separator \\ is by default converted to /, which prohibits the usage of \\ as a escape character. This flag skips that behavior and allows using the escape character. Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a ! character, then it is negated. Set the nonegate flag to suppress this behavior, and treat leading ! characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B). Multiple ! characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with #, then it is treated as a comment, and will not match anything. Use \\# to match a literal # at the start of a line, or set the nocomment flag to suppress this behavior. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.1, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b, but a/**b will not. If an escaped pattern has no matches, and the nonull flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, minimatch.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\". This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)}, which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c), and those patterns are checked for validity. Since those two are valid, matching proceeds."
  },
  "Examiner-UI/node_modules/ms/license.html": {
    "href": "Examiner-UI/node_modules/ms/license.html",
    "title": "| Examiner",
    "summary": "The MIT License (MIT) Copyright (c) 2020 Vercel, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/ms/readme.html": {
    "href": "Examiner-UI/node_modules/ms/readme.html",
    "title": "ms | Examiner",
    "summary": "ms Use this package to easily convert various time formats to milliseconds. Examples ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('1y') // 31557600000 ms('100') // 100 ms('-3 days') // -259200000 ms('-1h') // -3600000 ms('-200') // -200 Convert from Milliseconds ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(-3 * 60000) // \"-3m\" ms(ms('10 hours')) // \"10h\" Time Format Written-Out ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(-3 * 60000, { long: true }) // \"-3 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" Features Works both in Node.js and in the browser If a number is supplied to ms, a string with a unit is returned If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for '100') If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned Related Packages ms.macro - Run ms as a macro at build-time. Caught a Bug? Fork this repository to your own GitHub account and then clone it to your local device Link the package to the global module directory: npm link Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, Node.js will now use your clone of ms! As always, you can run the tests using: npm test"
  },
  "Examiner-UI/node_modules/nanoid/README.html": {
    "href": "Examiner-UI/node_modules/nanoid/README.html",
    "title": "Nano ID | Examiner",
    "summary": "Nano ID English | Русский | 简体中文 | Bahasa Indonesia A tiny, secure, URL-friendly, unique string ID generator for JavaScript. “An amazing level of senseless perfectionism, which is simply impossible not to respect.” Small. 130 bytes (minified and gzipped). No dependencies. Size Limit controls the size. Fast. It is 2 times faster than UUID. Safe. It uses hardware random generator. Can be used in clusters. Short IDs. It uses a larger alphabet than UUID (A-Za-z0-9_-). So ID size was reduced from 36 to 21 symbols. Portable. Nano ID was ported to 20 programming languages. import { nanoid } from 'nanoid' model.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\" Supports modern browsers, IE with Babel, Node.js and React Native. Docs Read full docs here."
  },
  "Examiner-UI/node_modules/natural-compare/README.html": {
    "href": "Examiner-UI/node_modules/natural-compare/README.html",
    "title": "Natural Compare – | Examiner",
    "summary": "@version 1.4.0 @date 2015-10-26 @stability 3 - Stable Natural Compare – Compare strings containing a mix of letters and numbers in the way a human being would in sort order. This is described as a \"natural ordering\". Standard sorting: Natural order sorting: img1.png img1.png img10.png img2.png img12.png img10.png img2.png img12.png String.naturalCompare returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Use it with builtin sort() function. Installation In browser <script src=min.natural-compare.js></script> In node.js: npm install natural-compare-lite require(\"natural-compare-lite\") Usage // Simple case sensitive example var a = [\"z1.doc\", \"z10.doc\", \"z17.doc\", \"z2.doc\", \"z23.doc\", \"z3.doc\"]; a.sort(String.naturalCompare); // [\"z1.doc\", \"z2.doc\", \"z3.doc\", \"z10.doc\", \"z17.doc\", \"z23.doc\"] // Use wrapper function for case insensitivity a.sort(function(a, b){ return String.naturalCompare(a.toLowerCase(), b.toLowerCase()); }) // In most cases we want to sort an array of objects var a = [ {\"street\":\"350 5th Ave\", \"room\":\"A-1021\"} , {\"street\":\"350 5th Ave\", \"room\":\"A-21046-b\"} ]; // sort by street, then by room a.sort(function(a, b){ return String.naturalCompare(a.street, b.street) || String.naturalCompare(a.room, b.room); }) // When text transformation is needed (eg toLowerCase()), // it is best for performance to keep // transformed key in that object. // There are no need to do text transformation // on each comparision when sorting. var a = [ {\"make\":\"Audi\", \"model\":\"A6\"} , {\"make\":\"Kia\", \"model\":\"Rio\"} ]; // sort by make, then by model a.map(function(car){ car.sort_key = (car.make + \" \" + car.model).toLowerCase(); }) a.sort(function(a, b){ return String.naturalCompare(a.sort_key, b.sort_key); }) Works well with dates in ISO format eg \"Rev 2012-07-26.doc\". Custom alphabet It is possible to configure a custom alphabet to achieve a desired order. // Estonian alphabet String.alphabet = \"ABDEFGHIJKLMNOPRSŠZŽTUVÕÄÖÜXYabdefghijklmnoprsšzžtuvõäöüxy\" [\"t\", \"z\", \"x\", \"õ\"].sort(String.naturalCompare) // [\"z\", \"t\", \"õ\", \"x\"] // Russian alphabet String.alphabet = \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя\" [\"Ё\", \"А\", \"Б\"].sort(String.naturalCompare) // [\"А\", \"Б\", \"Ё\"] External links [GitHub repo][https://github.com/litejs/natural-compare-lite] jsperf test Licence Copyright (c) 2012-2015 Lauri Rooden <lauri@rooden.ee&gt; The MIT License"
  },
  "Examiner-UI/node_modules/object-assign/readme.html": {
    "href": "Examiner-UI/node_modules/object-assign/readme.html",
    "title": "object-assign | Examiner",
    "summary": "object-assign ES2015 Object.assign() ponyfill Use the built-in Node.js 4 and up, as well as every evergreen browser (Chrome, Edge, Firefox, Opera, Safari), support Object.assign() \uD83C\uDF89. If you target only those environments, then by all means, use Object.assign() instead of this package. Install $ npm install --save object-assign Usage const objectAssign = require('object-assign'); objectAssign({foo: 0}, {bar: 1}); //=> {foo: 0, bar: 1} // multiple sources objectAssign({foo: 0}, {bar: 1}, {baz: 2}); //=> {foo: 0, bar: 1, baz: 2} // overwrites equal keys objectAssign({foo: 0}, {foo: 1}, {foo: 2}); //=> {foo: 2} // ignores null and undefined sources objectAssign({foo: 0}, null, {bar: 1}, undefined); //=> {foo: 0, bar: 1} API objectAssign(target, [source, ...]) Assigns enumerable own properties of source objects to the target object and returns the target object. Additional source objects will overwrite previous ones. Resources ES2015 spec - Object.assign Related deep-assign - Recursive Object.assign() License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/optionator/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/optionator/CHANGELOG.html",
    "title": "0.9.0 | Examiner",
    "summary": "0.9.0 update dependencies, in particular levn and type-check - this could affect behaviour of argument parsing 0.8.3 changes dependency from wordwrap to word-wrap due to license issue update dependencies 0.8.2 fix bug #18 - detect missing value when flag is last item update dependencies 0.8.1 update fast-levenshtein dependency 0.8.0 update levn dependency - supplying a float value to an option with type Int now throws an error, instead of silently converting to an Int 0.7.1 fix bug with use of defaults and concatRepeatedArrays or mergeRepeatedObjects 0.7.0 added concatrepeatedarrays option: oneValuePerFlag, only allows one array value per flag added typeAliases option added parseArgv which takes an array and parses with the first two items sliced off changed enum help style bug fixes (#12) use of concatRepeatedArrays and mergeRepeatedObjects at the top level is deprecated, use it as either a per-option option, or set them in the defaults object to set them for all objects 0.6.0 added defaults lib-option flag, allowing one to set default properties for all options added concatRepeatedArrays and mergeRepeatedObjects as option level properties, allowing you to turn this feature on for specific options only 0.5.0 Boolean flags with default: 'true', and no short aliases, will by default show the --no version in help 0.4.0 add mergeRepeatedObjects setting 0.3.0 add concatRepeatedArrays setting add overrideRequired option setting use just Levenshtein string compare algo rather than Levenshtein Damerau to due dependency license issue 0.2.2 bug fixes 0.2.1 improved interpolation added changelog 0.2.0 add dependency checks to options - added dependsOn as an option property add interpolation for prepend and append text with new generateHelp option, interpolate 0.1.1 update dependencies 0.1.0 initial release"
  },
  "Examiner-UI/node_modules/optionator/README.html": {
    "href": "Examiner-UI/node_modules/optionator/README.html",
    "title": "Optionator | Examiner",
    "summary": "Optionator Optionator is a JavaScript/Node.js option parsing and help generation library used by eslint, Grasp, LiveScript, esmangle, escodegen, and many more. For an online demo, check out the Grasp online demo. About · Usage · Settings Format · Argument Format Why? The problem with other option parsers, such as yargs or minimist, is they just accept all input, valid or not. With Optionator, if you mistype an option, it will give you an error (with a suggestion for what you meant). If you give the wrong type of argument for an option, it will give you an error rather than supplying the wrong input to your application. $ cmd --halp Invalid option '--halp' - perhaps you meant '--help'? $ cmd --count str Invalid value for option 'count' - expected type Int, received value: str. Other helpful features include reformatting the help text based on the size of the console, so that it fits even if the console is narrow, and accepting not just an array (eg. process.argv), but a string or object as well, making things like testing much easier. About Optionator uses type-check and levn behind the scenes to cast and verify input according the specified types. MIT license. Version 0.9.4 npm install optionator For updates on Optionator, follow me on twitter. Optionator is a Node.js module, but can be used in the browser as well if packed with webpack/browserify. Usage require('optionator'); returns a function. It has one property, VERSION, the current version of the library as a string. This function is called with an object specifying your options and other information, see the settings format section. This in turn returns an object with three properties, parse, parseArgv, generateHelp, and generateHelpForOption, which are all functions. var optionator = require('optionator')({ prepend: 'Usage: cmd [options]', append: 'Version 1.0.0', options: [{ option: 'help', alias: 'h', type: 'Boolean', description: 'displays help' }, { option: 'count', alias: 'c', type: 'Int', description: 'number of things', example: 'cmd --count 2' }] }); var options = optionator.parseArgv(process.argv); if (options.help) { console.log(optionator.generateHelp()); } ... parse(input, parseOptions) parse processes the input according to your settings, and returns an object with the results. arguments input - [String] | Object | String - the input you wish to parse parseOptions - {slice: Int} - all options optional slice specifies how much to slice away from the beginning if the input is an array or string - by default 0 for string, 2 for array (works with process.argv) returns Object - the parsed options, each key is a camelCase version of the option name (specified in dash-case), and each value is the processed value for that option. Positional values are in an array under the _ key. example parse(['node', 't.js', '--count', '2', 'positional']); // {count: 2, _: ['positional']} parse('--count 2 positional'); // {count: 2, _: ['positional']} parse({count: 2, _:['positional']}); // {count: 2, _: ['positional']} parseArgv(input) parseArgv works exactly like parse, but only for array input and it slices off the first two elements. arguments input - [String] - the input you wish to parse returns See \"returns\" section in \"parse\" example parseArgv(process.argv); generateHelp(helpOptions) generateHelp produces help text based on your settings. arguments helpOptions - {showHidden: Boolean, interpolate: Object} - all options optional showHidden specifies whether to show options with hidden: true specified, by default it is false interpolate specify data to be interpolated in prepend and append text, {{key}} is the format - eg. generateHelp({interpolate:{version: '0.4.2'}}), will change this append text: Version {{version}} to Version 0.4.2 returns String - the generated help text example generateHelp(); /* \"Usage: cmd [options] positional -h, --help displays help -c, --count Int number of things Version 1.0.0 \"*/ generateHelpForOption(optionName) generateHelpForOption produces expanded help text for the specified with optionName option. If an example was specified for the option, it will be displayed, and if a longDescription was specified, it will display that instead of the description. arguments optionName - String - the name of the option to display returns String - the generated help text for the option example generateHelpForOption('count'); /* \"-c, --count Int description: number of things example: cmd --count 2 \"*/ Settings Format When your require('optionator'), you get a function that takes in a settings object. This object has the type: { prepend: String, append: String, options: [{heading: String} | { option: String, alias: [String] | String, type: String, enum: [String], default: String, restPositional: Boolean, required: Boolean, overrideRequired: Boolean, dependsOn: [String] | String, concatRepeatedArrays: Boolean | (Boolean, Object), mergeRepeatedObjects: Boolean, description: String, longDescription: String, example: [String] | String }], helpStyle: { aliasSeparator: String, typeSeparator: String, descriptionSeparator: String, initialIndent: Int, secondaryIndent: Int, maxPadFactor: Number }, mutuallyExclusive: [[String | [String]]], concatRepeatedArrays: Boolean | (Boolean, Object), // deprecated, set in defaults object mergeRepeatedObjects: Boolean, // deprecated, set in defaults object positionalAnywhere: Boolean, typeAliases: Object, defaults: Object } All of the properties are optional (the Maybe has been excluded for brevities sake), except for having either heading: String or option: String in each object in the options array. Top Level Properties prepend is an optional string to be placed before the options in the help text append is an optional string to be placed after the options in the help text options is a required array specifying your options and headings, the options and headings will be displayed in the order specified helpStyle is an optional object which enables you to change the default appearance of some aspects of the help text mutuallyExclusive is an optional array of arrays of either strings or arrays of strings. The top level array is a list of rules, each rule is a list of elements - each element can be either a string (the name of an option), or a list of strings (a group of option names) - there will be an error if more than one element is present concatRepeatedArrays see description under the \"Option Properties\" heading - use at the top level is deprecated, if you want to set this for all options, use the defaults property mergeRepeatedObjects see description under the \"Option Properties\" heading - use at the top level is deprecated, if you want to set this for all options, use the defaults property positionalAnywhere is an optional boolean (defaults to true) - when true it allows positional arguments anywhere, when false, all arguments after the first positional one are taken to be positional as well, even if they look like a flag. For example, with positionalAnywhere: false, the arguments --flag --boom 12 --crack would have two positional arguments: 12 and --crack typeAliases is an optional object, it allows you to set aliases for types, eg. {Path: 'String'} would allow you to use the type Path as an alias for the type String defaults is an optional object following the option properties format, which specifies default values for all options. A default will be overridden if manually set. For example, you can do default: { type: \"String\" } to set the default type of all options to String, and then override that default in an individual option by setting the type property Heading Properties heading a required string, the name of the heading Option Properties option the required name of the option - use dash-case, without the leading dashes alias is an optional string or array of strings which specify any aliases for the option type is a required string in the type check format, this will be used to cast the inputted value and validate it enum is an optional array of strings, each string will be parsed by levn - the argument value must be one of the resulting values - each potential value must validate against the specified type default is a optional string, which will be parsed by levn and used as the default value if none is set - the value must validate against the specified type restPositional is an optional boolean - if set to true, everything after the option will be taken to be a positional argument, even if it looks like a named argument required is an optional boolean - if set to true, the option parsing will fail if the option is not defined overrideRequired is a optional boolean - if set to true and the option is used, and there is another option which is required but not set, it will override the need for the required option and there will be no error - this is useful if you have required options and want to use --help or --version flags concatRepeatedArrays is an optional boolean or tuple with boolean and options object (defaults to false) - when set to true and an option contains an array value and is repeated, the subsequent values for the flag will be appended rather than overwriting the original value - eg. option g of type [String]: -g a -g b -g c,d will result in ['a','b','c','d'] You can supply an options object by giving the following value: [true, options]. The one currently supported option is oneValuePerFlag, this only allows one array value per flag. This is useful if your potential values contain a comma. mergeRepeatedObjects is an optional boolean (defaults to false) - when set to true and an option contains an object value and is repeated, the subsequent values for the flag will be merged rather than overwriting the original value - eg. option g of type Object: -g a:1 -g b:2 -g c:3,d:4 will result in {a: 1, b: 2, c: 3, d: 4} dependsOn is an optional string or array of strings - if simply a string (the name of another option), it will make sure that that other option is set, if an array of strings, depending on whether 'and' or 'or' is first, it will either check whether all (['and', 'option-a', 'option-b']), or at least one (['or', 'option-a', 'option-b']) other options are set description is an optional string, which will be displayed next to the option in the help text longDescription is an optional string, it will be displayed instead of the description when generateHelpForOption is used example is an optional string or array of strings with example(s) for the option - these will be displayed when generateHelpForOption is used Help Style Properties aliasSeparator is an optional string, separates multiple names from each other - default: ' ,' typeSeparator is an optional string, separates the type from the names - default: ' ' descriptionSeparator is an optional string , separates the description from the padded name and type - default: ' ' initialIndent is an optional int - the amount of indent for options - default: 2 secondaryIndent is an optional int - the amount of indent if wrapped fully (in addition to the initial indent) - default: 4 maxPadFactor is an optional number - affects the default level of padding for the names/type, it is multiplied by the average of the length of the names/type - default: 1.5 Argument Format At the highest level there are two types of arguments: named, and positional. Name arguments of any length are prefixed with -- (eg. --go), and those of one character may be prefixed with either -- or - (eg. -g). There are two types of named arguments: boolean flags (eg. --problemo, -p) which take no value and result in a true if they are present, the falsey undefined if they are not present, or false if present and explicitly prefixed with no (eg. --no-problemo). Named arguments with values (eg. --tseries 800, -t 800) are the other type. If the option has a type Boolean it will automatically be made into a boolean flag. Any other type results in a named argument that takes a value. For more information about how to properly set types to get the value you want, take a look at the type check and levn pages. You can group single character arguments that use a single -, however all except the last must be boolean flags (which take no value). The last may be a boolean flag, or an argument which takes a value - eg. -ba 2 is equivalent to -b -a 2. Positional arguments are all those values which do not fall under the above - they can be anywhere, not just at the end. For example, in cmd -b one -a 2 two where b is a boolean flag, and a has the type Number, there are two positional arguments, one and two. Everything after an -- is positional, even if it looks like a named argument. You may optionally use = to separate option names from values, for example: --count=2. If you specify the option NUM, then any argument using a single - followed by a number will be valid and will set the value of NUM. Eg. -2 will be parsed into NUM: 2. If duplicate named arguments are present, the last one will be taken. Technical About optionator is written in LiveScript - a language that compiles to JavaScript. It uses levn to cast arguments to their specified type, and uses type-check to validate values. It also uses the prelude.ls library."
  },
  "Examiner-UI/node_modules/p-limit/readme.html": {
    "href": "Examiner-UI/node_modules/p-limit/readme.html",
    "title": "p-limit | Examiner",
    "summary": "p-limit Run multiple promise-returning & async functions with limited concurrency Install $ npm install p-limit Usage const pLimit = require('p-limit'); const limit = pLimit(1); const input = [ limit(() => fetchSomething('foo')), limit(() => fetchSomething('bar')), limit(() => doSomething()) ]; (async () => { // Only one promise is run at once const result = await Promise.all(input); console.log(result); })(); API pLimit(concurrency) Returns a limit function. concurrency Type: number Minimum: 1 Default: Infinity Concurrency limit. limit(fn, ...args) Returns the promise returned by calling fn(...args). fn Type: Function Promise-returning/async function. args Any arguments to pass through to fn. Support for passing arguments on to the fn is provided in order to be able to avoid creating unnecessary closures. You probably don't need this optimization unless you're pushing a lot of functions. limit.activeCount The number of promises that are currently running. limit.pendingCount The number of promises that are waiting to run (i.e. their internal fn was not called yet). limit.clearQueue() Discard pending promises that are waiting to run. This might be useful if you want to teardown the queue at the end of your program's lifecycle or discard any function calls referencing an intermediary state of your app. Note: This does not cancel promises that are already running. FAQ How is this different from the p-queue package? This package is only about limiting the number of concurrent executions, while p-queue is a fully featured queue implementation with lots of different options, introspection, and ability to pause the queue. Related p-queue - Promise queue with concurrency control p-throttle - Throttle promise-returning & async functions p-debounce - Debounce promise-returning & async functions p-all - Run promise-returning & async functions concurrently with optional limited concurrency More… Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/p-locate/readme.html": {
    "href": "Examiner-UI/node_modules/p-locate/readme.html",
    "title": "p-locate | Examiner",
    "summary": "p-locate Get the first fulfilled promise that satisfies the provided testing function Think of it like an async version of Array#find. Install $ npm install p-locate Usage Here we find the first file that exists on disk, in array order. const pathExists = require('path-exists'); const pLocate = require('p-locate'); const files = [ 'unicorn.png', 'rainbow.png', // Only this one actually exists on disk 'pony.png' ]; (async () => { const foundPath = await pLocate(files, file => pathExists(file)); console.log(foundPath); //=> 'rainbow' })(); The above is just an example. Use locate-path if you need this. API pLocate(input, tester, options?) Returns a Promise that is fulfilled when tester resolves to true or the iterable is done, or rejects if any of the promises reject. The fulfilled value is the current iterable value or undefined if tester never resolved to true. input Type: Iterable<Promise | unknown> An iterable of promises/values to test. tester(element) Type: Function This function will receive resolved values from input and is expected to return a Promise<boolean> or boolean. options Type: object concurrency Type: number Default: Infinity Minimum: 1 Number of concurrently pending promises returned by tester. preserveOrder Type: boolean Default: true Preserve input order when searching. Disable this to improve performance if you don't care about the order. Related p-map - Map over promises concurrently p-filter - Filter promises concurrently p-any - Wait for any promise to be fulfilled More… Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/parent-module/readme.html": {
    "href": "Examiner-UI/node_modules/parent-module/readme.html",
    "title": "parent-module | Examiner",
    "summary": "parent-module Get the path of the parent module Node.js exposes module.parent, but it only gives you the first cached parent, which is not necessarily the actual parent. Install $ npm install parent-module Usage // bar.js const parentModule = require('parent-module'); module.exports = () => { console.log(parentModule()); //=> '/Users/sindresorhus/dev/unicorn/foo.js' }; // foo.js const bar = require('./bar'); bar(); API parentModule([filepath]) By default, it will return the path of the immediate parent. filepath Type: string Default: __filename Filepath of the module of which to get the parent path. Useful if you want it to work multiple module levels down. Tip Combine it with read-pkg-up to read the package.json of the parent module. const path = require('path'); const readPkgUp = require('read-pkg-up'); const parentModule = require('parent-module'); console.log(readPkgUp.sync({cwd: path.dirname(parentModule())}).pkg); //=> {name: 'chalk', version: '1.0.0', …} License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/path-exists/readme.html": {
    "href": "Examiner-UI/node_modules/path-exists/readme.html",
    "title": "path-exists | Examiner",
    "summary": "path-exists Check if a path exists NOTE: fs.existsSync has been un-deprecated in Node.js since 6.8.0. If you only need to check synchronously, this module is not needed. While fs.exists() is being deprecated, there's still a genuine use-case of being able to check if a path exists for other purposes than doing IO with it. Never use this before handling a file though: In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open(). Just open the file and handle the error when it's not there. Install $ npm install path-exists Usage // foo.js const pathExists = require('path-exists'); (async () => { console.log(await pathExists('foo.js')); //=> true })(); API pathExists(path) Returns a Promise<boolean> of whether the path exists. pathExists.sync(path) Returns a boolean of whether the path exists. Related path-exists-cli - CLI for this module License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/path-key/readme.html": {
    "href": "Examiner-UI/node_modules/path-key/readme.html",
    "title": "path-key | Examiner",
    "summary": "path-key Get the PATH environment variable key cross-platform It's usually PATH, but on Windows it can be any casing like Path... Install $ npm install path-key Usage const pathKey = require('path-key'); const key = pathKey(); //=> 'PATH' const PATH = process.env[key]; //=> '/usr/local/bin:/usr/bin:/bin' API pathKey(options?) options Type: object env Type: object Default: process.env Use a custom environment variables object. platform Type: string Default: process.platform Get the PATH key for a specific platform. Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/picocolors/README.html": {
    "href": "Examiner-UI/node_modules/picocolors/README.html",
    "title": "picocolors | Examiner",
    "summary": "picocolors The tiniest and the fastest library for terminal output formatting with ANSI colors. import pc from \"picocolors\" console.log( pc.green(`How are ${pc.italic(`you`)} doing?`) ) No dependencies. 14 times smaller and 2 times faster than chalk. Used by popular tools like PostCSS, SVGO, Stylelint, and Browserslist. Node.js v6+ & browsers support. Support for both CJS and ESM projects. TypeScript type declarations included. NO_COLOR friendly. Docs Read full docs on GitHub."
  },
  "Examiner-UI/node_modules/picomatch/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/picomatch/CHANGELOG.html",
    "title": "Release history | Examiner",
    "summary": "Release history All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. Guiding Principles Changelogs are for humans, not machines. There should be an entry for every single version. The same types of changes should be grouped. Versions and sections should be linkable. The latest version comes first. The release date of each versions is displayed. Mention whether you follow Semantic Versioning. Types of changes Changelog entries are classified using the following labels (from keep-a-changelog): Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be removed features. Removed for now removed features. Fixed for any bug fixes. Security in case of vulnerabilities. 2.3.1 (2022-01-02) Fixed Fixes bug when a pattern containing an expression after the closing parenthesis (/!(*.d).{ts,tsx}) was incorrectly converted to regexp (9f241ef). Changed Some documentation improvements (f81d236, 421e0e7). 2.3.0 (2021-05-21) Fixed Fixes bug where file names with two dots were not being matched consistently with negation extglobs containing a star (56083ef) 2.2.3 (2021-04-10) Fixed Do not skip pattern seperator for square brackets (fb08a30). Set negatedExtGlob also if it does not span the whole pattern (032e3f5). 2.2.2 (2020-03-21) Fixed Correctly handle parts of the pattern after parentheses in the scan method (e15b920). 2.2.1 (2020-01-04) Fixes #49, so that braces with no sets or ranges are now propertly treated as literals. 2.2.0 (2020-01-04) Disable fastpaths mode for the parse method (5b8d33f) Add tokens, slashes, and parts to the object returned by picomatch.scan(). 2.1.0 (2019-10-31) add benchmarks for scan (4793b92) Add eslint object-curly-spacing rule (707c650) Add prefer-const eslint rule (5c7501c) Add support for nonegate in scan API (275c9b9) Change lets to consts. Move root import up. (4840625) closes https://github.com/micromatch/picomatch/issues/21 (766bcb0) Fix \"Extglobs\" table in readme (eb19da8) fixes https://github.com/micromatch/picomatch/issues/20 (9caca07) fixes https://github.com/micromatch/picomatch/issues/26 (fa58f45) Lint test (d433a34) lint unit tests (0159b55) Make scan work with noext (6c02e03) minor linting (c2a2b87) minor parser improvements (197671d) remove eslint since it... (07876fa) remove funding file (8ebe96d) Remove unused funks (cbc6d54) Run eslint during pretest, fix existing eslint findings (0682367) support noparen in scan (3d37569) update changelog (7b34e77) update travis (777f038) Use eslint-disable-next-line instead of eslint-disable (4e7c1fd) 2.0.7 (2019-05-14) 2.0.7 (9eb9a71) supports lookbehinds (1f63f7e) update .verb.md file with typo change (2741279) fix: typo in README (0753e44) 2.0.4 (2019-04-10) Fixed Readme link fixed by @danez. options.capture now works as expected when fastpaths are enabled. See https://github.com/micromatch/picomatch/pull/12/commits/26aefd71f1cfaf95c37f1c1fcab68a693b037304. Thanks to @DrPizza. 2.0.0 (2019-04-10) Added Adds support for options.onIgnore. See the readme for details Adds support for options.onResult. See the readme for details Breaking changes The unixify option was renamed to windows caching and all related options and methods have been removed 1.0.0 (2018-11-05) adds .onMatch option improvements to .scan method numerous improvements and optimizations for matching and parsing better windows path handling 0.1.0 - 2017-04-13 First release."
  },
  "Examiner-UI/node_modules/picomatch/README.html": {
    "href": "Examiner-UI/node_modules/picomatch/README.html",
    "title": "Picomatch | Examiner",
    "summary": "Picomatch Blazing fast and accurate glob matcher written in JavaScript. No dependencies and full support for standard and extended Bash glob features, including braces, extglobs, POSIX brackets, and regular expressions. Why picomatch? Lightweight - No dependencies Minimal - Tiny API surface. Main export is a function that takes a glob pattern and returns a matcher function. Fast - Loads in about 2ms (that's several times faster than a single frame of a HD movie at 60fps) Performant - Use the returned matcher function to speed up repeat matching (like when watching files) Accurate matching - Using wildcards (* and ?), globstars (**) for nested directories, advanced globbing with extglobs, braces, and POSIX brackets, and support for escaping special characters with \\ or quotes. Well tested - Thousands of unit tests See the library comparison to other libraries. Table of Contents Click to expand Install Usage API picomatch .test .matchBase .isMatch .parse .scan .compileRe .makeRe .toRegex Options Picomatch options Scan Options Options Examples Globbing features Basic globbing Advanced globbing Braces Matching special characters as literals Library Comparisons Benchmarks Philosophies About Author License (TOC generated by verb using markdown-toc) Install Install with npm: npm install --save picomatch Usage The main export is a function that takes a glob pattern and an options object and returns a function for matching strings. const pm = require('picomatch'); const isMatch = pm('*.js'); console.log(isMatch('abcd')); //=> false console.log(isMatch('a.js')); //=> true console.log(isMatch('a.md')); //=> false console.log(isMatch('a/b.js')); //=> false API picomatch Creates a matcher function from one or more glob patterns. The returned function takes a string to match as its first argument, and returns true if the string is a match. The returned matcher function also takes a boolean as the second argument that, when true, returns an object with additional information. Params globs {String|Array}: One or more glob patterns. options {Object=} returns {Function=}: Returns a matcher function. Example const picomatch = require('picomatch'); // picomatch(glob[, options]); const isMatch = picomatch('*.!(*a)'); console.log(isMatch('a.a')); //=> false console.log(isMatch('a.b')); //=> true .test Test input with the given regex. This is used by the main picomatch() function to test the input string. Params input {String}: String to test. regex {RegExp} returns {Object}: Returns an object with matching info. Example const picomatch = require('picomatch'); // picomatch.test(input, regex[, options]); console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/)); // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' } .matchBase Match the basename of a filepath. Params input {String}: String to test. glob {RegExp|String}: Glob pattern or regex created by .makeRe. returns {Boolean} Example const picomatch = require('picomatch'); // picomatch.matchBase(input, glob[, options]); console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true .isMatch Returns true if any of the given glob patterns match the specified string. Params {String|Array}: str The string to test. {String|Array}: patterns One or more glob patterns to use for matching. {Object}: See available options. returns {Boolean}: Returns true if any patterns match str Example const picomatch = require('picomatch'); // picomatch.isMatch(string, patterns[, options]); console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true console.log(picomatch.isMatch('a.a', 'b.*')); //=> false .parse Parse a glob pattern to create the source string for a regular expression. Params pattern {String} options {Object} returns {Object}: Returns an object with useful properties and output to be used as a regex source string. Example const picomatch = require('picomatch'); const result = picomatch.parse(pattern[, options]); .scan Scan a glob pattern to separate the pattern into segments. Params input {String}: Glob pattern to scan. options {Object} returns {Object}: Returns an object with Example const picomatch = require('picomatch'); // picomatch.scan(input[, options]); const result = picomatch.scan('!./foo/*.js'); console.log(result); { prefix: '!./', input: '!./foo/*.js', start: 3, base: 'foo', glob: '*.js', isBrace: false, isBracket: false, isGlob: true, isExtglob: false, isGlobstar: false, negated: true } .compileRe Compile a regular expression from the state object returned by the parse() method. Params state {Object} options {Object} returnOutput {Boolean}: Intended for implementors, this argument allows you to return the raw output from the parser. returnState {Boolean}: Adds the state to a state property on the returned regex. Useful for implementors and debugging. returns {RegExp} .makeRe Create a regular expression from a parsed glob pattern. Params state {String}: The object returned from the .parse method. options {Object} returnOutput {Boolean}: Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result. returnState {Boolean}: Implementors may use this argument to return the state from the parsed glob with the returned regular expression. returns {RegExp}: Returns a regex created from the given pattern. Example const picomatch = require('picomatch'); const state = picomatch.parse('*.js'); // picomatch.compileRe(state[, options]); console.log(picomatch.compileRe(state)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ .toRegex Create a regular expression from the given regex source string. Params source {String}: Regular expression source string. options {Object} returns {RegExp} Example const picomatch = require('picomatch'); // picomatch.toRegex(source[, options]); const { output } = picomatch.parse('*.js'); console.log(picomatch.toRegex(output)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ Options Picomatch options The following options may be used with the main picomatch() function or any of the methods on the picomatch API. Option Type Default value Description basename boolean false If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. bash boolean false Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (**). capture boolean undefined Return regex matches in supporting methods. contains boolean undefined Allows glob to match any part of the given string(s). cwd string process.cwd() Current working directory. Used by picomatch.split() debug boolean undefined Debug regular expressions when an error is thrown. dot boolean false Enable dotfile matching. By default, dotfiles are ignored unless a . is explicitly defined in the pattern, or options.dot is true expandRange function undefined Custom function for expanding ranges in brace patterns, such as {a..z}. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. failglob boolean false Throws an error if no matches are found. Based on the bash option of the same name. fastpaths boolean true To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to false. flags string undefined Regex flags to use in the generated regex. If defined, the nocase option will be overridden. format function undefined Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. ignore array\\|string undefined One or more glob patterns for excluding strings that should not be matched from the result. keepQuotes boolean false Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes. literalBrackets boolean undefined When true, brackets in the glob pattern will be escaped so that only literal brackets will be matched. matchBase boolean false Alias for basename maxLength boolean 65536 Limit the max length of the input string. An error is thrown if the input string is longer than this value. nobrace boolean false Disable brace matching, so that {a,b} and {1..3} would be treated as literal characters. nobracket boolean undefined Disable matching with regex brackets. nocase boolean false Make matching case-insensitive. Equivalent to the regex i flag. Note that this option is overridden by the flags option. nodupes boolean true Deprecated, use nounique instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. noext boolean false Alias for noextglob noextglob boolean false Disable support for matching with extglobs (like +(a\\|b)) noglobstar boolean false Disable support for matching nested directories with globstars (**) nonegate boolean false Disable support for negating with leading ! noquantifiers boolean false Disable support for regex quantifiers (like a{1,2}) and treat them as brace patterns to be expanded. onIgnore function undefined Function to be called on ignored items. onMatch function undefined Function to be called on matched items. onResult function undefined Function to be called on all items, regardless of whether or not they are matched or ignored. posix boolean false Support POSIX character classes (\"posix brackets\"). posixSlashes boolean undefined Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself prepend boolean undefined String to prepend to the generated regex used for matching. regex boolean false Use regular expression rules for + (instead of matching literal +), and for stars that follow closing parentheses or brackets (as in )* and ]*). strictBrackets boolean undefined Throw an error if brackets, braces, or parens are imbalanced. strictSlashes boolean undefined When true, picomatch won't match trailing slashes with single stars. unescape boolean undefined Remove backslashes preceding escaped characters in the glob pattern. By default, backslashes are retained. unixify boolean undefined Alias for posixSlashes, for backwards compatibility. picomatch has automatic detection for regex positive and negative lookbehinds. If the pattern contains a negative lookbehind, you must be using Node.js >= 8.10 or else picomatch will throw an error. Scan Options In addition to the main picomatch options, the following options may also be used with the .scan method. Option Type Default value Description tokens boolean false When true, the returned object will include an array of tokens (objects), representing each path \"segment\" in the scanned glob pattern parts boolean false When true, the returned object will include an array of strings representing each path \"segment\" in the scanned glob pattern. This is automatically enabled when options.tokens is true Example const picomatch = require('picomatch'); const result = picomatch.scan('!./foo/*.js', { tokens: true }); console.log(result); // { // prefix: '!./', // input: '!./foo/*.js', // start: 3, // base: 'foo', // glob: '*.js', // isBrace: false, // isBracket: false, // isGlob: true, // isExtglob: false, // isGlobstar: false, // negated: true, // maxDepth: 2, // tokens: [ // { value: '!./', depth: 0, isGlob: false, negated: true, isPrefix: true }, // { value: 'foo', depth: 1, isGlob: false }, // { value: '*.js', depth: 1, isGlob: true } // ], // slashes: [ 2, 6 ], // parts: [ 'foo', '*.js' ] // } Options Examples options.expandRange Type: function Default: undefined Custom function for expanding ranges in brace patterns. The fill-range library is ideal for this purpose, or you can use custom code to do whatever you need. Example The following example shows how to create a glob that matches a folder const fill = require('fill-range'); const regex = pm.makeRe('foo/{01..25}/bar', { expandRange(a, b) { return `(${fill(a, b, { toRegex: true })})`; } }); console.log(regex); //=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/ console.log(regex.test('foo/00/bar')) // false console.log(regex.test('foo/01/bar')) // true console.log(regex.test('foo/10/bar')) // true console.log(regex.test('foo/22/bar')) // true console.log(regex.test('foo/25/bar')) // true console.log(regex.test('foo/26/bar')) // false options.format Type: function Default: undefined Custom function for formatting strings before they're matched. Example // strip leading './' from strings const format = str => str.replace(/^\\.\\//, ''); const isMatch = picomatch('foo/*.js', { format }); console.log(isMatch('./foo/bar.js')); //=> true options.onMatch const onMatch = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onMatch }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onIgnore const onIgnore = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onIgnore, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onResult const onResult = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onResult, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); Globbing features Basic globbing (Wildcard matching) Advanced globbing (extglobs, posix brackets, brace matching) Basic globbing Character Description * Matches any character zero or more times, excluding path separators. Does not match path separators or hidden files or directories (\"dotfiles\"), unless explicitly enabled by setting the dot option to true. ** Matches any character zero or more times, including path separators. Note that ** will only match path separators (/, and \\\\ on Windows) when they are the only characters in a path segment. Thus, foo**/bar is equivalent to foo*/bar, and foo/a**b/bar is equivalent to foo/a*b/bar, and more than two consecutive stars in a glob path segment are regarded as a single star. Thus, foo/***/bar is equivalent to foo/*/bar. ? Matches any character excluding path separators one time. Does not match path separators or leading dots. [abc] Matches any characters inside the brackets. For example, [abc] would match the characters a, b or c, and nothing else. Matching behavior vs. Bash Picomatch's matching features and expected results in unit tests are based on Bash's unit tests and the Bash 4.3 specification, with the following exceptions: Bash will match foo/bar/baz with *. Picomatch only matches nested directories with **. Bash greedily matches with negated extglobs. For example, Bash 4.3 says that !(foo)* should match foo and foobar, since the trailing * bracktracks to match the preceding pattern. This is very memory-inefficient, and IMHO, also incorrect. Picomatch would return false for both foo and foobar. Advanced globbing extglobs POSIX brackets Braces Extglobs Pattern Description @(pattern) Match only one consecutive occurrence of pattern *(pattern) Match zero or more consecutive occurrences of pattern +(pattern) Match one or more consecutive occurrences of pattern ?(pattern) Match zero or one consecutive occurrences of pattern !(pattern) Match anything but pattern Examples const pm = require('picomatch'); // *(pattern) matches ZERO or more of \"pattern\" console.log(pm.isMatch('a', 'a*(z)')); // true console.log(pm.isMatch('az', 'a*(z)')); // true console.log(pm.isMatch('azzz', 'a*(z)')); // true // +(pattern) matches ONE or more of \"pattern\" console.log(pm.isMatch('a', 'a*(z)')); // true console.log(pm.isMatch('az', 'a*(z)')); // true console.log(pm.isMatch('azzz', 'a*(z)')); // true // supports multiple extglobs console.log(pm.isMatch('foo.bar', '!(foo).!(bar)')); // false // supports nested extglobs console.log(pm.isMatch('foo.bar', '!(!(foo)).!(!(bar))')); // true POSIX brackets POSIX classes are disabled by default. Enable this feature by setting the posix option to true. Enable POSIX bracket support console.log(pm.makeRe('[[:word:]]+', { posix: true })); //=> /^(?:(?=.)[A-Za-z0-9_]+\\/?)$/ Supported POSIX classes The following named POSIX bracket expressions are supported: [:alnum:] - Alphanumeric characters, equ [a-zA-Z0-9] [:alpha:] - Alphabetical characters, equivalent to [a-zA-Z]. [:ascii:] - ASCII characters, equivalent to [\\\\x00-\\\\x7F]. [:blank:] - Space and tab characters, equivalent to [ \\\\t]. [:cntrl:] - Control characters, equivalent to [\\\\x00-\\\\x1F\\\\x7F]. [:digit:] - Numerical digits, equivalent to [0-9]. [:graph:] - Graph characters, equivalent to [\\\\x21-\\\\x7E]. [:lower:] - Lowercase letters, equivalent to [a-z]. [:print:] - Print characters, equivalent to [\\\\x20-\\\\x7E ]. [:punct:] - Punctuation and symbols, equivalent to [\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_{|}~]`. [:space:] - Extended space characters, equivalent to [ \\\\t\\\\r\\\\n\\\\v\\\\f]. [:upper:] - Uppercase letters, equivalent to [A-Z]. [:word:] - Word characters (letters, numbers and underscores), equivalent to [A-Za-z0-9_]. [:xdigit:] - Hexadecimal digits, equivalent to [A-Fa-f0-9]. See the Bash Reference Manual for more information. Braces Picomatch does not do brace expansion. For brace expansion and advanced matching with braces, use micromatch instead. Picomatch has very basic support for braces. Matching special characters as literals If you wish to match the following special characters in a filepath, and you want to use these characters in your glob pattern, they must be escaped with backslashes or quotes: Special Characters Some characters that are used for matching in regular expressions are also regarded as valid file path characters on some platforms. To match any of the following characters as literals: `$^*+?()[] Examples: console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); Library Comparisons The following table shows which features are supported by minimatch, micromatch, picomatch, nanomatch, extglob, braces, and expand-brackets. Feature minimatch micromatch picomatch nanomatch extglob braces expand-brackets Wildcard matching (*?+) ✔ ✔ ✔ ✔ - - - Advancing globbing ✔ ✔ ✔ - - - - Brace matching ✔ ✔ ✔ - - ✔ - Brace expansion ✔ ✔ - - - ✔ - Extglobs partial ✔ ✔ - ✔ - - Posix brackets - ✔ ✔ - - - ✔ Regular expression syntax - ✔ ✔ ✔ ✔ - ✔ File system operations - - - - - - - Benchmarks Performance comparison of picomatch and minimatch. # .makeRe star picomatch x 1,993,050 ops/sec ±0.51% (91 runs sampled) minimatch x 627,206 ops/sec ±1.96% (87 runs sampled)) # .makeRe star; dot=true picomatch x 1,436,640 ops/sec ±0.62% (91 runs sampled) minimatch x 525,876 ops/sec ±0.60% (88 runs sampled) # .makeRe globstar picomatch x 1,592,742 ops/sec ±0.42% (90 runs sampled) minimatch x 962,043 ops/sec ±1.76% (91 runs sampled)d) # .makeRe globstars picomatch x 1,615,199 ops/sec ±0.35% (94 runs sampled) minimatch x 477,179 ops/sec ±1.33% (91 runs sampled) # .makeRe with leading star picomatch x 1,220,856 ops/sec ±0.40% (92 runs sampled) minimatch x 453,564 ops/sec ±1.43% (94 runs sampled) # .makeRe - basic braces picomatch x 392,067 ops/sec ±0.70% (90 runs sampled) minimatch x 99,532 ops/sec ±2.03% (87 runs sampled)) Philosophies The goal of this library is to be blazing fast, without compromising on accuracy. Accuracy The number one of goal of this library is accuracy. However, it's not unusual for different glob implementations to have different rules for matching behavior, even with simple wildcard matching. It gets increasingly more complicated when combinations of different features are combined, like when extglobs are combined with globstars, braces, slashes, and so on: !(**/{a,b,*/c}). Thus, given that there is no canonical glob specification to use as a single source of truth when differences of opinion arise regarding behavior, sometimes we have to implement our best judgement and rely on feedback from users to make improvements. Performance Although this library performs well in benchmarks, and in most cases it's faster than other popular libraries we benchmarked against, we will always choose accuracy over performance. It's not helpful to anyone if our library is faster at returning the wrong answer. About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Please read the contributing guide for advice on opening issues, pull requests, and coding standards. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: npm install -g verbose/verb#dev verb-generate-readme && verb Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2017-present, Jon Schlinkert. Released under the MIT License."
  },
  "Examiner-UI/node_modules/postcss/README.html": {
    "href": "Examiner-UI/node_modules/postcss/README.html",
    "title": "PostCSS | Examiner",
    "summary": "PostCSS PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more. PostCSS is used by industry leaders including Wikipedia, Twitter, Alibaba, and JetBrains. The Autoprefixer and Stylelint PostCSS plugins are some of the most popular CSS tools. Built by Evil Martians, go-to agency for developer tools. Docs Read full docs here."
  },
  "Examiner-UI/node_modules/prelude-ls/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/prelude-ls/CHANGELOG.html",
    "title": "1.2.1 | Examiner",
    "summary": "1.2.1 fix version 1.2.0 add List.remove build with LiveScript 1.6.0 update dependencies remove coverage calculation 1.1.2 add Func.memoize fix zip-all and zip-with-all corner case (no input) build with LiveScript 1.4.0 1.1.1 curry unique-by, minimum-by 1.1.0 added List functions: maximum-by, minimum-by, unique-by added List functions: at, elem-index, elem-indices, find-index, find-indices added Str functions: capitalize, camelize, dasherize added Func function: over - eg. same-length = (==) `over` (.length) exported Str.repeat through main prelude object fixed definition of foldr and foldr1, the new correct definition is backwards incompatible with the old, incorrect one fixed issue with fix improved code coverage 1.0.3 build browser versions 1.0.2 bug fix for flatten - slight change with bug fix, flattens arrays only, not array-like objects 1.0.1 bug fixes for drop-while and take-while 1.0.0 massive update - separated functions into separate modules functions do not accept multiple types anymore - use different versions in their respective modules in some cases (eg. Obj.map), or use chars or values in other cases to transform into a list objects are no longer transformed into functions, simply use (obj.) in LiveScript to do that browser version now using browserify - use prelude = require('prelude-ls') added compact, split, flatten, difference, intersection, union, count-by, group-by, chars, unchars, apply added lists-to-obj which takes a list of keys and list of values and zips them up into an object, and the converse obj-to-lists added pairs-to-obj which takes a list of pairs (2 element lists) and creates an object, and the converse obj-to-pairs removed cons, append - use the concat operator removed compose - use the compose operator removed obj-to-func - use partially applied access (eg. (obj.)) removed length - use (.length) sort-by renamed to sort-with added new sort-by removed compare - just use the new sort-by break-it renamed break-list, (Str.break-str for the string version) added Str.repeat which creates a new string by repeating the input n times unfold as alias to unfoldr is no longer used fixed up style and compiled with LiveScript 1.1.1 use Make instead of Slake greatly improved tests 0.6.0 fixed various bugs added fix, a fixpoint (Y combinator) for anonymous recursive functions added unfoldr (alias unfold) calling replicate with a string now returns a list of strings removed partial, just use native partial application in LiveScript using the _ placeholder, or currying added sort, sortBy, and compare 0.5.0 removed lookup - use (.prop) removed call - use (.func arg1, arg2) removed pluck - use map (.prop), xs fixed buys wtih head and last added non-minifed browser version, as prelude-browser.js renamed prelude-min.js to prelude-browser-min.js renamed zip to zipAll renamed zipWith to zipAllWith added zip, a curried zip that takes only two arguments added zipWith, a curried zipWith that takes only two arguments 0.4.0 added parition function added curry function removed elem function (use in) removed notElem function (use not in) 0.3.0 added listToObject added unique added objToFunc added support for using strings in map and the like added support for using objects in map and the like added ability to use objects instead of functions in certain cases removed error (just use throw) added tau constant added join added values added keys added partial renamed log to ln added alias to head: first added installPrelude helper 0.2.0 removed functions that simply warp operators as you can now use operators as functions in LiveScript min/max are now curried and take only 2 arguments added call 0.1.0 initial public release"
  },
  "Examiner-UI/node_modules/prelude-ls/README.html": {
    "href": "Examiner-UI/node_modules/prelude-ls/README.html",
    "title": "prelude.ls | Examiner",
    "summary": "prelude.ls is a functionally oriented utility library. It is powerful and flexible. Almost all of its functions are curried. It is written in, and is the recommended base library for, LiveScript. See the prelude.ls site for examples, a reference, and more. You can install via npm npm install prelude-ls Development make test to test make build to build lib from src make build-browser to build browser versions"
  },
  "Examiner-UI/node_modules/prop-types/README.html": {
    "href": "Examiner-UI/node_modules/prop-types/README.html",
    "title": "prop-types | Examiner",
    "summary": "prop-types Runtime type checking for React props and similar objects. You can use prop-types to document the intended types of properties passed to components. React (and potentially other libraries—see the checkPropTypes() reference below) will check props passed to your components against those definitions, and warn in development if they don’t match. Installation npm install --save prop-types Importing import PropTypes from 'prop-types'; // ES6 var PropTypes = require('prop-types'); // ES5 with npm CDN If you prefer to exclude prop-types from your application and use it globally via window.PropTypes, the prop-types package provides single-file distributions, which are hosted on the following CDNs: unpkg <!-- development version --> <script src=\"https://unpkg.com/prop-types@15.6/prop-types.js\"></script> <!-- production version --> <script src=\"https://unpkg.com/prop-types@15.6/prop-types.min.js\"></script> cdnjs <!-- development version --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js\"></script> <!-- production version --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.min.js\"></script> To load a specific version of prop-types replace 15.6.0 with the version number. Usage PropTypes was originally exposed as part of the React core module, and is commonly used with React components. Here is an example of using PropTypes with a React component, which also documents the different validators provided: import React from 'react'; import PropTypes from 'prop-types'; class MyComponent extends React.Component { render() { // ... do things with the props } } MyComponent.propTypes = { // You can declare that a prop is a specific JS primitive. By default, these // are all optional. optionalArray: PropTypes.array, optionalBigInt: PropTypes.bigint, optionalBool: PropTypes.bool, optionalFunc: PropTypes.func, optionalNumber: PropTypes.number, optionalObject: PropTypes.object, optionalString: PropTypes.string, optionalSymbol: PropTypes.symbol, // Anything that can be rendered: numbers, strings, elements or an array // (or fragment) containing these types. // see https://reactjs.org/docs/rendering-elements.html for more info optionalNode: PropTypes.node, // A React element (ie. <MyComponent />). optionalElement: PropTypes.element, // A React element type (eg. MyComponent). // a function, string, or \"element-like\" object (eg. React.Fragment, Suspense, etc.) // see https://github.com/facebook/react/blob/HEAD/packages/shared/isValidElementType.js optionalElementType: PropTypes.elementType, // You can also declare that a prop is an instance of a class. This uses // JS's instanceof operator. optionalMessage: PropTypes.instanceOf(Message), // You can ensure that your prop is limited to specific values by treating // it as an enum. optionalEnum: PropTypes.oneOf(['News', 'Photos']), // An object that could be one of many types optionalUnion: PropTypes.oneOfType([ PropTypes.string, PropTypes.number, PropTypes.instanceOf(Message) ]), // An array of a certain type optionalArrayOf: PropTypes.arrayOf(PropTypes.number), // An object with property values of a certain type optionalObjectOf: PropTypes.objectOf(PropTypes.number), // You can chain any of the above with `isRequired` to make sure a warning // is shown if the prop isn't provided. // An object taking on a particular shape optionalObjectWithShape: PropTypes.shape({ optionalProperty: PropTypes.string, requiredProperty: PropTypes.number.isRequired }), // An object with warnings on extra properties optionalObjectWithStrictShape: PropTypes.exact({ optionalProperty: PropTypes.string, requiredProperty: PropTypes.number.isRequired }), requiredFunc: PropTypes.func.isRequired, // A value of any data type requiredAny: PropTypes.any.isRequired, // You can also specify a custom validator. It should return an Error // object if the validation fails. Don't `console.warn` or throw, as this // won't work inside `oneOfType`. customProp: function(props, propName, componentName) { if (!/matchme/.test(props[propName])) { return new Error( 'Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Validation failed.' ); } }, // You can also supply a custom validator to `arrayOf` and `objectOf`. // It should return an Error object if the validation fails. The validator // will be called for each key in the array or object. The first two // arguments of the validator are the array or object itself, and the // current item's key. customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) { if (!/matchme/.test(propValue[key])) { return new Error( 'Invalid prop `' + propFullName + '` supplied to' + ' `' + componentName + '`. Validation failed.' ); } }) }; Refer to the React documentation for more information. Migrating from React.PropTypes Check out Migrating from React.PropTypes for details on how to migrate to prop-types from React.PropTypes. Note that this blog posts mentions a codemod script that performs the conversion automatically. There are also important notes below. How to Depend on This Package? For apps, we recommend putting it in dependencies with a caret range. For example: \"dependencies\": { \"prop-types\": \"^15.5.7\" } For libraries, we also recommend leaving it in dependencies: \"dependencies\": { \"prop-types\": \"^15.5.7\" }, \"peerDependencies\": { \"react\": \"^15.5.0\" } Note: there are known issues in versions before 15.5.7 so we recommend using it as the minimal version. Make sure that the version range uses a caret (^) and thus is broad enough for npm to efficiently deduplicate packages. For UMD bundles of your components, make sure you don’t include PropTypes in the build. Usually this is done by marking it as an external (the specifics depend on your bundler), just like you do with React. Compatibility React 0.14 This package is compatible with React 0.14.9. Compared to 0.14.8 (which was released in March of 2016), there are no other changes in 0.14.9, so it should be a painless upgrade. # ATTENTION: Only run this if you still use React 0.14! npm install --save react@^0.14.9 react-dom@^0.14.9 React 15+ This package is compatible with React 15.3.0 and higher. npm install --save react@^15.3.0 react-dom@^15.3.0 What happens on other React versions? It outputs warnings with the message below even though the developer doesn’t do anything wrong. Unfortunately there is no solution for this other than updating React to either 15.3.0 or higher, or 0.14.9 if you’re using React 0.14. Difference from React.PropTypes: Don’t Call Validator Functions First of all, which version of React are you using? You might be seeing this message because a component library has updated to use prop-types package, but your version of React is incompatible with it. See the above section for more details. Are you using either React 0.14.9 or a version higher than React 15.3.0? Read on. When you migrate components to use the standalone prop-types, all validator functions will start throwing an error if you call them directly. This makes sure that nobody relies on them in production code, and it is safe to strip their implementations to optimize the bundle size. Code like this is still fine: MyComponent.propTypes = { myProp: PropTypes.bool }; However, code like this will not work with the prop-types package: // Will not work with `prop-types` package! var errorOrNull = PropTypes.bool(42, 'myProp', 'MyComponent', 'prop'); It will throw an error: Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. (If you see a warning rather than an error with this message, please check the above section about compatibility.) This is new behavior, and you will only encounter it when you migrate from React.PropTypes to the prop-types package. For the vast majority of components, this doesn’t matter, and if you didn’t see this warning in your components, your code is safe to migrate. This is not a breaking change in React because you are only opting into this change for a component by explicitly changing your imports to use prop-types. If you temporarily need the old behavior, you can keep using React.PropTypes until React 16. If you absolutely need to trigger the validation manually, call PropTypes.checkPropTypes(). Unlike the validators themselves, this function is safe to call in production, as it will be replaced by an empty function: // Works with standalone PropTypes PropTypes.checkPropTypes(MyComponent.propTypes, props, 'prop', 'MyComponent'); See below for more info. If you DO want to use validation in production, you can choose to use the development version by importing/requiring prop-types/prop-types instead of prop-types. You might also see this error if you’re calling a PropTypes validator from your own custom PropTypes validator. In this case, the fix is to make sure that you are passing all of the arguments to the inner function. There is a more in-depth explanation of how to fix it on this page. Alternatively, you can temporarily keep using React.PropTypes until React 16, as it would still only warn in this case. If you use a bundler like Browserify or Webpack, don’t forget to follow these instructions to correctly bundle your application in development or production mode. Otherwise you’ll ship unnecessary code to your users. PropTypes.checkPropTypes React will automatically check the propTypes you set on the component, but if you are using PropTypes without React then you may want to manually call PropTypes.checkPropTypes, like so: const myPropTypes = { name: PropTypes.string, age: PropTypes.number, // ... define your prop validations }; const props = { name: 'hello', // is valid age: 'world', // not valid }; // Let's say your component is called 'MyComponent' // Works with standalone PropTypes PropTypes.checkPropTypes(myPropTypes, props, 'prop', 'MyComponent'); // This will warn as follows: // Warning: Failed prop type: Invalid prop `age` of type `string` supplied to // `MyComponent`, expected `number`. PropTypes.resetWarningCache() PropTypes.checkPropTypes(...) only console.errors a given message once. To reset the error warning cache in tests, call PropTypes.resetWarningCache() License prop-types is MIT licensed."
  },
  "Examiner-UI/node_modules/proxy-from-env/README.html": {
    "href": "Examiner-UI/node_modules/proxy-from-env/README.html",
    "title": "proxy-from-env | Examiner",
    "summary": "proxy-from-env proxy-from-env is a Node.js package that exports a function (getProxyForUrl) that takes an input URL (a string or url.parse's return value) and returns the desired proxy URL (also a string) based on standard proxy environment variables. If no proxy is set, an empty string is returned. It is your responsibility to actually proxy the request using the given URL. Installation: npm install proxy-from-env Example This example shows how the data for a URL can be fetched via the http module, in a proxy-aware way. var http = require('http'); var parseUrl = require('url').parse; var getProxyForUrl = require('proxy-from-env').getProxyForUrl; var some_url = 'http://example.com/something'; // // Example, if there is a proxy server at 10.0.0.1:1234, then setting the // // http_proxy environment variable causes the request to go through a proxy. // process.env.http_proxy = 'http://10.0.0.1:1234'; // // // But if the host to be proxied is listed in NO_PROXY, then the request is // // not proxied (but a direct request is made). // process.env.no_proxy = 'example.com'; var proxy_url = getProxyForUrl(some_url); // <-- Our magic. if (proxy_url) { // Should be proxied through proxy_url. var parsed_some_url = parseUrl(some_url); var parsed_proxy_url = parseUrl(proxy_url); // A HTTP proxy is quite simple. It is similar to a normal request, except the // path is an absolute URL, and the proxied URL's host is put in the header // instead of the server's actual host. httpOptions = { protocol: parsed_proxy_url.protocol, hostname: parsed_proxy_url.hostname, port: parsed_proxy_url.port, path: parsed_some_url.href, headers: { Host: parsed_some_url.host, // = host name + optional port. }, }; } else { // Direct request. httpOptions = some_url; } http.get(httpOptions, function(res) { var responses = []; res.on('data', function(chunk) { responses.push(chunk); }); res.on('end', function() { console.log(responses.join('')); }); }); Environment variables The environment variables can be specified in lowercase or uppercase, with the lowercase name having precedence over the uppercase variant. A variable that is not set has the same meaning as a variable that is set but has no value. NO_PROXY NO_PROXY is a list of host names (optionally with a port). If the input URL matches any of the entries in NO_PROXY, then the input URL should be fetched by a direct request (i.e. without a proxy). Matching follows the following rules: NO_PROXY=* disables all proxies. Space and commas may be used to separate the entries in the NO_PROXY list. If NO_PROXY does not contain any entries, then proxies are never disabled. If a port is added after the host name, then the ports must match. If the URL does not have an explicit port name, the protocol's default port is used. Generally, the proxy is only disabled if the host name is an exact match for an entry in the NO_PROXY list. The only exceptions are entries that start with a dot or with a wildcard; then the proxy is disabled if the host name ends with the entry. See test.js for examples of what should match and what does not. *_PROXY The environment variable used for the proxy depends on the protocol of the URL. For example, https://example.com uses the \"https\" protocol, and therefore the proxy to be used is HTTPS_PROXY (NOT HTTP_PROXY, which is only used for http:-URLs). The library is not limited to http(s), other schemes such as FTP_PROXY (ftp:), WSS_PROXY (wss:), WS_PROXY (ws:) are also supported. If present, ALL_PROXY is used as fallback if there is no other match. External resources The exact way of parsing the environment variables is not codified in any standard. This library is designed to be compatible with formats as expected by existing software. The following resources were used to determine the desired behavior: cURL: https://curl.haxx.se/docs/manpage.html#ENVIRONMENT https://github.com/curl/curl/blob/4af40b3646d3b09f68e419f7ca866ff395d1f897/lib/url.c#L4446-L4514 https://github.com/curl/curl/blob/4af40b3646d3b09f68e419f7ca866ff395d1f897/lib/url.c#L4608-L4638 wget: https://www.gnu.org/software/wget/manual/wget.html#Proxies http://git.savannah.gnu.org/cgit/wget.git/tree/src/init.c?id=636a5f9a1c508aa39e35a3a8e9e54520a284d93d#n383 http://git.savannah.gnu.org/cgit/wget.git/tree/src/retr.c?id=93c1517c4071c4288ba5a4b038e7634e4c6b5482#n1278 W3: https://www.w3.org/Daemon/User/Proxies/ProxyClients.html Python's urllib: https://github.com/python/cpython/blob/936135bb97fe04223aa30ca6e98eac8f3ed6b349/Lib/urllib/request.py#L755-L782 https://github.com/python/cpython/blob/936135bb97fe04223aa30ca6e98eac8f3ed6b349/Lib/urllib/request.py#L2444-L2479"
  },
  "Examiner-UI/node_modules/punycode/README.html": {
    "href": "Examiner-UI/node_modules/punycode/README.html",
    "title": "Punycode.js | Examiner",
    "summary": "Punycode.js Punycode.js is a robust Punycode converter that fully complies to RFC 3492 and RFC 5891. This JavaScript library is the result of comparing, optimizing and documenting different open-source implementations of the Punycode algorithm: The C example code from RFC 3492 punycode.c by Markus W. Scherer (IBM) punycode.c by Ben Noordhuis JavaScript implementation by some punycode.js by Ben Noordhuis (note: not fully compliant) This project was bundled with Node.js from v0.6.2+ until v7 (soft-deprecated). This project provides a CommonJS module that uses ES2015+ features and JavaScript module, which work in modern Node.js versions and browsers. For the old Punycode.js version that offers the same functionality in a UMD build with support for older pre-ES2015 runtimes, including Rhino, Ringo, and Narwhal, see v1.4.1. Installation Via npm: npm install punycode --save In Node.js: ⚠️ Note that userland modules don't hide core modules. For example, require('punycode') still imports the deprecated core module even if you executed npm install punycode. Use require('punycode/') to import userland modules rather than core modules. const punycode = require('punycode/'); API punycode.decode(string) Converts a Punycode string of ASCII symbols to a string of Unicode symbols. // decode domain name parts punycode.decode('maana-pta'); // 'mañana' punycode.decode('--dqo34k'); // '☃-⌘' punycode.encode(string) Converts a string of Unicode symbols to a Punycode string of ASCII symbols. // encode domain name parts punycode.encode('mañana'); // 'maana-pta' punycode.encode('☃-⌘'); // '--dqo34k' punycode.toUnicode(input) Converts a Punycode string representing a domain name or an email address to Unicode. Only the Punycoded parts of the input will be converted, i.e. it doesn’t matter if you call it on a string that has already been converted to Unicode. // decode domain names punycode.toUnicode('xn--maana-pta.com'); // → 'mañana.com' punycode.toUnicode('xn----dqo34k.com'); // → '☃-⌘.com' // decode email addresses punycode.toUnicode('джумла@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq'); // → 'джумла@джpумлатест.bрфa' punycode.toASCII(input) Converts a lowercased Unicode string representing a domain name or an email address to Punycode. Only the non-ASCII parts of the input will be converted, i.e. it doesn’t matter if you call it with a domain that’s already in ASCII. // encode domain names punycode.toASCII('mañana.com'); // → 'xn--maana-pta.com' punycode.toASCII('☃-⌘.com'); // → 'xn----dqo34k.com' // encode email addresses punycode.toASCII('джумла@джpумлатест.bрфa'); // → 'джумла@xn--p-8sbkgc5ag7bhce.xn--ba-lmcq' punycode.ucs2 punycode.ucs2.decode(string) Creates an array containing the numeric code point values of each Unicode symbol in the string. While JavaScript uses UCS-2 internally, this function will convert a pair of surrogate halves (each of which UCS-2 exposes as separate characters) into a single code point, matching UTF-16. punycode.ucs2.decode('abc'); // → [0x61, 0x62, 0x63] // surrogate pair for U+1D306 TETRAGRAM FOR CENTRE: punycode.ucs2.decode('\\uD834\\uDF06'); // → [0x1D306] punycode.ucs2.encode(codePoints) Creates a string based on an array of numeric code point values. punycode.ucs2.encode([0x61, 0x62, 0x63]); // → 'abc' punycode.ucs2.encode([0x1D306]); // → '\\uD834\\uDF06' punycode.version A string representing the current Punycode.js version number. For maintainers How to publish a new release On the main branch, bump the version number in package.json: npm version patch -m 'Release v%s' Instead of patch, use minor or major as needed. Note that this produces a Git commit + tag. Push the release commit and tag: git push && git push --tags Our CI then automatically publishes the new release to npm, under both the punycode and punycode.js names. Author Mathias Bynens License Punycode.js is available under the MIT license."
  },
  "Examiner-UI/node_modules/queue-microtask/README.html": {
    "href": "Examiner-UI/node_modules/queue-microtask/README.html",
    "title": "queue-microtask | Examiner",
    "summary": "queue-microtask fast, tiny queueMicrotask shim for modern engines Use queueMicrotask in all modern JS engines. No dependencies. Less than 10 lines. No shims or complicated fallbacks. Optimal performance in all modern environments Uses queueMicrotask in modern environments Fallback to Promise.resolve().then(fn) in Node.js 10 and earlier, and old browsers (same performance as queueMicrotask) install npm install queue-microtask usage const queueMicrotask = require('queue-microtask') queueMicrotask(() => { /* this will run soon */ }) What is queueMicrotask and why would one use it? The queueMicrotask function is a WHATWG standard. It queues a microtask to be executed prior to control returning to the event loop. A microtask is a short function which will run after the current task has completed its work and when there is no other code waiting to be run before control of the execution context is returned to the event loop. The code queueMicrotask(fn) is equivalent to the code Promise.resolve().then(fn). It is also very similar to process.nextTick(fn) in Node. Using microtasks lets code run without interfering with any other, potentially higher priority, code that is pending, but before the JS engine regains control over the execution context. See the spec or Node documentation for more information. Who is this package for? This package allows you to use queueMicrotask safely in all modern JS engines. Use it if you prioritize small JS bundle size over support for old browsers. If you just need to support Node 12 and later, use queueMicrotask directly. If you need to support all versions of Node, use this package. Why not use process.nextTick? In Node, queueMicrotask and process.nextTick are essentially equivalent, though there are subtle differences that don't matter in most situations. You can think of queueMicrotask as a standardized version of process.nextTick that works in the browser. No need to rely on your browser bundler to shim process for the browser environment. Why not use setTimeout(fn, 0)? This approach is the most compatible, but it has problems. Modern browsers throttle timers severely, so setTimeout(…, 0) usually takes at least 4ms to run. Furthermore, the throttling gets even worse if the page is backgrounded. If you have many setTimeout calls, then this can severely limit the performance of your program. Why not use a microtask library like immediate or asap? These packages are great! However, if you prioritize small JS bundle size over optimal performance in old browsers then you may want to consider this package. This package (queue-microtask) is four times smaller than immediate, twice as small as asap, and twice as small as using process.nextTick and letting the browser bundler shim it automatically. Note: This package throws an exception in JS environments which lack Promise support -- which are usually very old browsers and Node.js versions. Since the queueMicrotask API is supported in Node.js, Chrome, Firefox, Safari, Opera, and Edge, the vast majority of users will get optimal performance. Any JS environment with Promise, which is almost all of them, also get optimal performance. If you need support for JS environments which lack Promise support, use one of the alternative packages. What is a shim? In computer programming, a shim is a library that transparently intercepts API calls and changes the arguments passed, handles the operation itself or redirects the operation elsewhere. – Wikipedia This package could also be described as a \"ponyfill\". A ponyfill is almost the same as a polyfill, but not quite. Instead of patching functionality for older browsers, a ponyfill provides that functionality as a standalone module you can use. – PonyFoo API queueMicrotask(fn) The queueMicrotask() method queues a microtask. The fn argument is a function to be executed after all pending tasks have completed but before yielding control to the browser's event loop. license MIT. Copyright (c) Feross Aboukhadijeh."
  },
  "Examiner-UI/node_modules/react-color/README.html": {
    "href": "Examiner-UI/node_modules/react-color/README.html",
    "title": "React Color | Examiner",
    "summary": "React Color 13 Different Pickers - Sketch, Photoshop, Chrome and many more Make Your Own - Use the building block components to make your own Demo Live Demo Installation & Usage npm install react-color --save Include the Component import React from 'react' import { SketchPicker } from 'react-color' class Component extends React.Component { render() { return <SketchPicker /> } } You can import AlphaPicker BlockPicker ChromePicker CirclePicker CompactPicker GithubPicker HuePicker MaterialPicker PhotoshopPicker SketchPicker SliderPicker SwatchesPicker TwitterPicker respectively. 100% inline styles via ReactCSS"
  },
  "Examiner-UI/node_modules/react-dom/README.html": {
    "href": "Examiner-UI/node_modules/react-dom/README.html",
    "title": "react-dom | Examiner",
    "summary": "react-dom This package serves as the entry point to the DOM and server renderers for React. It is intended to be paired with the generic React package, which is shipped as react to npm. Installation npm install react react-dom Usage In the browser import { createRoot } from 'react-dom/client'; function App() { return <div>Hello World</div>; } const root = createRoot(document.getElementById('root')); root.render(<App />); On the server import { renderToPipeableStream } from 'react-dom/server'; function App() { return <div>Hello World</div>; } function handleRequest(res) { // ... in your server handler ... const stream = renderToPipeableStream(<App />, { onShellReady() { res.statusCode = 200; res.setHeader('Content-type', 'text/html'); stream.pipe(res); }, // ... }); } API react-dom See https://react.dev/reference/react-dom react-dom/client See https://react.dev/reference/react-dom/client react-dom/server See https://react.dev/reference/react-dom/server"
  },
  "Examiner-UI/node_modules/react-is/README.html": {
    "href": "Examiner-UI/node_modules/react-is/README.html",
    "title": "react-is | Examiner",
    "summary": "react-is This package allows you to test arbitrary values and see if they're a particular React element type. Installation # Yarn yarn add react-is # NPM npm install react-is Usage Determining if a Component is Valid import React from \"react\"; import * as ReactIs from \"react-is\"; class ClassComponent extends React.Component { render() { return React.createElement(\"div\"); } } const FunctionComponent = () => React.createElement(\"div\"); const ForwardRefComponent = React.forwardRef((props, ref) => React.createElement(Component, { forwardedRef: ref, ...props }) ); const Context = React.createContext(false); ReactIs.isValidElementType(\"div\"); // true ReactIs.isValidElementType(ClassComponent); // true ReactIs.isValidElementType(FunctionComponent); // true ReactIs.isValidElementType(ForwardRefComponent); // true ReactIs.isValidElementType(Context.Provider); // true ReactIs.isValidElementType(Context.Consumer); // true ReactIs.isValidElementType(React.createFactory(\"div\")); // true Determining an Element's Type Context import React from \"react\"; import * as ReactIs from 'react-is'; const ThemeContext = React.createContext(\"blue\"); ReactIs.isContextConsumer(<ThemeContext.Consumer />); // true ReactIs.isContextProvider(<ThemeContext.Provider />); // true ReactIs.typeOf(<ThemeContext.Provider />) === ReactIs.ContextProvider; // true ReactIs.typeOf(<ThemeContext.Consumer />) === ReactIs.ContextConsumer; // true Element import React from \"react\"; import * as ReactIs from 'react-is'; ReactIs.isElement(<div />); // true ReactIs.typeOf(<div />) === ReactIs.Element; // true Fragment import React from \"react\"; import * as ReactIs from 'react-is'; ReactIs.isFragment(<></>); // true ReactIs.typeOf(<></>) === ReactIs.Fragment; // true Portal import React from \"react\"; import ReactDOM from \"react-dom\"; import * as ReactIs from 'react-is'; const div = document.createElement(\"div\"); const portal = ReactDOM.createPortal(<div />, div); ReactIs.isPortal(portal); // true ReactIs.typeOf(portal) === ReactIs.Portal; // true StrictMode import React from \"react\"; import * as ReactIs from 'react-is'; ReactIs.isStrictMode(<React.StrictMode />); // true ReactIs.typeOf(<React.StrictMode />) === ReactIs.StrictMode; // true"
  },
  "Examiner-UI/node_modules/react-router-dom/LICENSE.html": {
    "href": "Examiner-UI/node_modules/react-router-dom/LICENSE.html",
    "title": "| Examiner",
    "summary": "MIT License Copyright (c) React Training LLC 2015-2019 Copyright (c) Remix Software Inc. 2020-2021 Copyright (c) Shopify Inc. 2022-2023 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/react-router-dom/README.html": {
    "href": "Examiner-UI/node_modules/react-router-dom/README.html",
    "title": "| Examiner",
    "summary": "This package simply re-exports everything from react-router to smooth the upgrade path for v6 applications. Once upgraded you can change all of your imports and remove it from your dependencies: -import { Routes } from \"react-router-dom\" +import { Routes } from \"react-router\""
  },
  "Examiner-UI/node_modules/react-router/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/react-router/CHANGELOG.html",
    "title": "react-router | Examiner",
    "summary": "react-router 7.6.3 Patch Changes Do not serialize types for useRouteLoaderData<typeof clientLoader> (#13752) For types to distinguish a clientLoader from a serverLoader, you MUST annotate clientLoader args: // \uD83D\uDC47 annotation required to skip serializing types export function clientLoader({}: Route.ClientLoaderArgs) { return { fn: () => \"earth\" }; } function SomeComponent() { const data = useRouteLoaderData<typeof clientLoader>(\"routes/this-route\"); const planet = data?.fn() ?? \"world\"; return <h1>Hello, {planet}!</h1>; } 7.6.2 Patch Changes Avoid additional with-props chunk in Framework Mode by moving route module component prop logic from the Vite plugin to react-router (#13650) Slight refactor of internal headers() function processing for use with RSC (#13639) 7.6.1 Patch Changes Update Route.MetaArgs to reflect that data can be potentially undefined (#13563) This is primarily for cases where a route loader threw an error to it's own ErrorBoundary. but it also arises in the case of a 404 which renders the root ErrorBoundary/meta but the root loader did not run because not routes matched. Partially revert optimization added in 7.1.4 to reduce calls to matchRoutes because it surfaced other issues (#13562) Fix typegen when same route is used at multiple paths (#13574) For example, routes/route.tsx is used at 4 different paths here: import { type RouteConfig, route } from \"@react-router/dev/routes\"; export default [ route(\"base/:base\", \"routes/base.tsx\", [ route(\"home/:home\", \"routes/route.tsx\", { id: \"home\" }), route(\"changelog/:changelog\", \"routes/route.tsx\", { id: \"changelog\" }), route(\"splat/*\", \"routes/route.tsx\", { id: \"splat\" }), ]), route(\"other/:other\", \"routes/route.tsx\", { id: \"other\" }), ] satisfies RouteConfig; Previously, typegen would arbitrarily pick one of these paths to be the \"winner\" and generate types for the route module based on that path. Now, typegen creates unions as necessary for alternate paths for the same route file. Better types for params (#13543) For example: // routes.ts import { type RouteConfig, route } from \"@react-router/dev/routes\"; export default [ route(\"parent/:p\", \"routes/parent.tsx\", [ route(\"layout/:l\", \"routes/layout.tsx\", [ route(\"child1/:c1a/:c1b\", \"routes/child1.tsx\"), route(\"child2/:c2a/:c2b\", \"routes/child2.tsx\"), ]), ]), ] satisfies RouteConfig; Previously, params for the routes/layout.tsx route were calculated as { p: string, l: string }. This incorrectly ignores params that could come from child routes. If visiting /parent/1/layout/2/child1/3/4, the actual params passed to routes/layout.tsx will have a type of { p: string, l: string, c1a: string, c1b: string }. Now, params are aware of child routes and autocompletion will include child params as optionals: params.| // ^ cursor is here and you ask for autocompletion // p: string // l: string // c1a?: string // c1b?: string // c2a?: string // c2b?: string You can also narrow the types for params as it is implemented as a normalized union of params for each page that includes routes/layout.tsx: if (typeof params.c1a === 'string') { params.| // ^ cursor is here and you ask for autocompletion // p: string // l: string // c1a: string // c1b: string } UNSTABLE: renamed internal react-router/route-module export to react-router/internal UNSTABLE: removed Info export from generated +types/* files Avoid initial fetcher execution 404 error when Lazy Route Discovery is interrupted by a navigation (#13564) href replaces splats * (#13593) const a = href(\"/products/*\", { \"*\": \"/1/edit\" }); // -> /products/1/edit 7.6.0 Minor Changes Added a new react-router.config.ts routeDiscovery option to configure Lazy Route Discovery behavior. (#13451) By default, Lazy Route Discovery is enabled and makes manifest requests to the /__manifest path: routeDiscovery: { mode: \"lazy\", manifestPath: \"/__manifest\" } You can modify the manifest path used: routeDiscovery: { mode: \"lazy\", manifestPath: \"/custom-manifest\" } Or you can disable this feature entirely and include all routes in the manifest on initial document load: routeDiscovery: { mode: \"initial\" } Add support for route component props in createRoutesStub. This allows you to unit test your route components using the props instead of the hooks: (#13528) let RoutesStub = createRoutesStub([ { path: \"/\", Component({ loaderData }) { let data = loaderData as { message: string }; return <pre data-testid=\"data\">Message: {data.message}</pre>; }, loader() { return { message: \"hello\" }; }, }, ]); render(<RoutesStub />); await waitFor(() => screen.findByText(\"Message: hello\")); Patch Changes Fix react-router module augmentation for NodeNext (#13498) Don't bundle react-router in react-router/dom CJS export (#13497) Fix bug where a submitting fetcher would get stuck in a loading state if a revalidating loader redirected (#12873) Fix hydration error if a server loader returned undefined (#13496) Fix initial load 404 scenarios in data mode (#13500) Stabilize useRevalidator's revalidate function (#13542) Preserve status code if a clientAction throws a data() result in framework mode (#13522) Be defensive against leading double slashes in paths to avoid Invalid URL errors from the URL constructor (#13510) Note we do not sanitize/normalize these paths - we only detect them so we can avoid the error that would be thrown by new URL(\"//\", window.location.origin) Remove Navigator declaration for navigator.connection.saveData to avoid messing with any other types beyond saveData in userland (#13512) Fix handleError params values on .data requests for routes with a dynamic param as the last URL segment (#13481) Don't trigger an ErrorBoundary UI before the reload when we detect a manifest verison mismatch in Lazy Route Discovery (#13480) Inline turbo-stream@2.4.1 dependency and fix decoding ordering of Map/Set instances (#13518) Only render dev warnings in DEV mode (#13461) UNSTABLE: Fix a few bugs with error bubbling in middleware use-cases (#13538) Short circuit post-processing on aborted dataStrategy requests (#13521) This resolves non-user-facing console errors of the form Cannot read properties of undefined (reading 'result') 7.5.3 Patch Changes Fix bug where bubbled action errors would result in loaderData being cleared at the handling ErrorBoundary route (#13476) Handle redirects from clientLoader.hydrate initial load executions (#13477) 7.5.2 Patch Changes Update Single Fetch to also handle the 204 redirects used in ?_data requests in Remix v2 (#13364) This allows applications to return a redirect on .data requests from outside the scope of React Router (i.e., an express/hono middleware) ⚠️ Please note that doing so relies on implementation details that are subject to change without a SemVer major release This is primarily done to ease upgrading to Single Fetch for existing Remix v2 applications, but the recommended way to handle this is redirecting from a route middleware Adjust approach for Prerendering/SPA Mode via headers (#13453) 7.5.1 Patch Changes Fix single fetch bug where no revalidation request would be made when navigating upwards to a reused parent route (#13253) When using the object-based route.lazy API, the HydrateFallback and hydrateFallbackElement properties are now skipped when lazy loading routes after hydration. (#13376) If you move the code for these properties into a separate file, you can use this optimization to avoid downloading unused hydration code. For example: createBrowserRouter([ { path: \"/show/:showId\", lazy: { loader: async () => (await import(\"./show.loader.js\")).loader, Component: async () => (await import(\"./show.component.js\")).Component, HydrateFallback: async () => (await import(\"./show.hydrate-fallback.js\")).HydrateFallback, }, }, ]); Properly revalidate prerendered paths when param values change (#13380) UNSTABLE: Add a new unstable_runClientMiddleware argument to dataStrategy to enable middleware execution in custom dataStrategy implementations (#13395) UNSTABLE: Add better error messaging when getLoadContext is not updated to return a Map\" (#13242) Do not automatically add null to staticHandler.query() context.loaderData if routes do not have loaders (#13223) This was a Remix v2 implementation detail inadvertently left in for React Router v7 Now that we allow returning undefined from loaders, our prior check of loaderData[routeId] !== undefined was no longer sufficient and was changed to a routeId in loaderData check - these null values can cause issues for this new check ⚠️ This could be a \"breaking bug fix\" for you if you are doing manual SSR with createStaticHandler()/<StaticRouterProvider>, and using context.loaderData to control <RouterProvider> hydration behavior on the client Fix prerendering when a loader returns a redirect (#13365) UNSTABLE: Update context type for LoaderFunctionArgs/ActionFunctionArgs when middleware is enabled (#13381) Add support for the new unstable_shouldCallHandler/unstable_shouldRevalidateArgs APIs in dataStrategy (#13253) 7.5.0 Minor Changes Add granular object-based API for route.lazy to support lazy loading of individual route properties, for example: (#13294) createBrowserRouter([ { path: \"/show/:showId\", lazy: { loader: async () => (await import(\"./show.loader.js\")).loader, action: async () => (await import(\"./show.action.js\")).action, Component: async () => (await import(\"./show.component.js\")).Component, }, }, ]); Breaking change for route.unstable_lazyMiddleware consumers The route.unstable_lazyMiddleware property is no longer supported. If you want to lazily load middleware, you must use the new object-based route.lazy API with route.lazy.unstable_middleware, for example: createBrowserRouter([ { path: \"/show/:showId\", lazy: { unstable_middleware: async () => (await import(\"./show.middleware.js\")).middleware, // etc. }, }, ]); Patch Changes Introduce unstable_subResourceIntegrity future flag that enables generation of an importmap with integrity for the scripts that will be loaded by the browser. (#13163) 7.4.1 Patch Changes Fix types on unstable_MiddlewareFunction to avoid type errors when a middleware doesn't return a value (#13311) Dedupe calls to route.lazy functions (#13260) Add support for route.unstable_lazyMiddleware function to allow lazy loading of middleware logic. (#13210) Breaking change for unstable_middleware consumers The route.unstable_middleware property is no longer supported in the return value from route.lazy. If you want to lazily load middleware, you must use route.unstable_lazyMiddleware. 7.4.0 Patch Changes Fix root loader data on initial load redirects in SPA mode (#13222) Load ancestor pathless/index routes in lazy route discovery for upwards non-eager-discoery routing (#13203) Fix shouldRevalidate behavior for clientLoader-only routes in ssr:true apps (#13221) UNSTABLE: Fix RequestHandler loadContext parameter type when middleware is enabled (#13204) UNSTABLE: Update Route.unstable_MiddlewareFunction to have a return value of Response | undefined instead of Response | void becaue you should not return anything if you aren't returning the Response (#13199) UNSTABLE(BREAKING): If a middleware throws an error, ensure we only bubble the error itself via next() and are no longer leaking the MiddlewareError implementation detail (#13180) 7.3.0 Minor Changes Add fetcherKey as a parameter to patchRoutesOnNavigation (#13061) In framework mode, Lazy Route Discovery will now detect manifest version mismatches after a new deploy On navigations to undiscovered routes, this mismatch will trigger a document reload of the destination path On fetcher calls to undiscovered routes, this mismatch will trigger a document reload of the current path Patch Changes Skip resource route flow in dev server in SPA mode (#13113) Support middleware on routes (unstable) (#12941) Middleware is implemented behind a future.unstable_middleware flag. To enable, you must enable the flag and the types in your react-router-config.ts file: import type { Config } from \"@react-router/dev/config\"; import type { Future } from \"react-router\"; declare module \"react-router\" { interface Future { unstable_middleware: true; // \uD83D\uDC48 Enable middleware types } } export default { future: { unstable_middleware: true, // \uD83D\uDC48 Enable middleware }, } satisfies Config; ⚠️ Middleware is unstable and should not be adopted in production. There is at least one known de-optimization in route module loading for clientMiddleware that we will be addressing this before a stable release. ⚠️ Enabling middleware contains a breaking change to the context parameter passed to your loader/action functions - see below for more information. Once enabled, routes can define an array of middleware functions that will run sequentially before route handlers run. These functions accept the same parameters as loader/action plus an additional next parameter to run the remaining data pipeline. This allows middlewares to perform logic before and after handlers execute. // Framework mode export const unstable_middleware = [serverLogger, serverAuth]; // server export const unstable_clientMiddleware = [clientLogger]; // client // Library mode const routes = [ { path: \"/\", // Middlewares are client-side for library mode SPA's unstable_middleware: [clientLogger, clientAuth], loader: rootLoader, Component: Root, }, ]; Here's a simple example of a client-side logging middleware that can be placed on the root route: const clientLogger: Route.unstable_ClientMiddlewareFunction = async ( { request }, next ) => { let start = performance.now(); // Run the remaining middlewares and all route loaders await next(); let duration = performance.now() - start; console.log(`Navigated to ${request.url} (${duration}ms)`); }; Note that in the above example, the next/middleware functions don't return anything. This is by design as on the client there is no \"response\" to send over the network like there would be for middlewares running on the server. The data is all handled behind the scenes by the stateful router. For a server-side middleware, the next function will return the HTTP Response that React Router will be sending across the wire, thus giving you a chance to make changes as needed. You may throw a new response to short circuit and respond immediately, or you may return a new or altered response to override the default returned by next(). const serverLogger: Route.unstable_MiddlewareFunction = async ( { request, params, context }, next ) => { let start = performance.now(); // \uD83D\uDC47 Grab the response here let res = await next(); let duration = performance.now() - start; console.log(`Navigated to ${request.url} (${duration}ms)`); // \uD83D\uDC47 And return it here (optional if you don't modify the response) return res; }; You can throw a redirect from a middleware to short circuit any remaining processing: import { sessionContext } from \"../context\"; const serverAuth: Route.unstable_MiddlewareFunction = ( { request, params, context }, next ) => { let session = context.get(sessionContext); let user = session.get(\"user\"); if (!user) { session.set(\"returnTo\", request.url); throw redirect(\"/login\", 302); } }; Note that in cases like this where you don't need to do any post-processing you don't need to call the next function or return a Response. Here's another example of using a server middleware to detect 404s and check the CMS for a redirect: const redirects: Route.unstable_MiddlewareFunction = async ({ request, next, }) => { // attempt to handle the request let res = await next(); // if it's a 404, check the CMS for a redirect, do it last // because it's expensive if (res.status === 404) { let cmsRedirect = await checkCMSRedirects(request.url); if (cmsRedirect) { throw redirect(cmsRedirect, 302); } } return res; }; context parameter When middleware is enabled, your application will use a different type of context parameter in your loaders and actions to provide better type safety. Instead of AppLoadContext, context will now be an instance of ContextProvider that you can use with type-safe contexts (similar to React.createContext): import { unstable_createContext } from \"react-router\"; import { Route } from \"./+types/root\"; import type { Session } from \"./sessions.server\"; import { getSession } from \"./sessions.server\"; let sessionContext = unstable_createContext<Session>(); const sessionMiddleware: Route.unstable_MiddlewareFunction = ({ context, request, }) => { let session = await getSession(request); context.set(sessionContext, session); // ^ must be of type Session }; // ... then in some downstream middleware const loggerMiddleware: Route.unstable_MiddlewareFunction = ({ context, request, }) => { let session = context.get(sessionContext); // ^ typeof Session console.log(session.get(\"userId\"), request.method, request.url); }; // ... or some downstream loader export function loader({ context }: Route.LoaderArgs) { let session = context.get(sessionContext); let profile = await getProfile(session.get(\"userId\")); return { profile }; } If you are using a custom server with a getLoadContext function, the return value for initial context values passed from the server adapter layer is no longer an object and should now return an unstable_InitialContext (Map<RouterContext, unknown>): let adapterContext = unstable_createContext<MyAdapterContext>(); function getLoadContext(req, res): unstable_InitialContext { let map = new Map(); map.set(adapterContext, getAdapterContext(req)); return map; } Fix types for loaderData and actionData that contained Records (#13139) UNSTABLE(BREAKING): unstable_SerializesTo added a way to register custom serialization types in Single Fetch for other library and framework authors like Apollo. It was implemented with branded type whose branded property that was made optional so that casting arbitrary values was easy: // without the brand being marked as optional let x1 = 42 as unknown as unstable_SerializesTo<number>; // ^^^^^^^^^^ // with the brand being marked as optional let x2 = 42 as unstable_SerializesTo<number>; However, this broke type inference in loaderData and actionData for any Record types as those would now (incorrectly) match unstable_SerializesTo. This affected all users, not just those that depended on unstable_SerializesTo. To fix this, the branded property of unstable_SerializesTo is marked as required instead of optional. For library and framework authors using unstable_SerializesTo, you may need to add as unknown casts before casting to unstable_SerializesTo. Fix single fetch _root.data requests when a basename is used (#12898) Add context support to client side data routers (unstable) (#12941) Your application loader and action functions on the client will now receive a context parameter. This is an instance of unstable_RouterContextProvider that you use with type-safe contexts (similar to React.createContext) and is most useful with the corresponding middleware/clientMiddleware API's: import { unstable_createContext } from \"react-router\"; type User = { /*...*/ }; let userContext = unstable_createContext<User>(); function sessionMiddleware({ context }) { let user = await getUser(); context.set(userContext, user); } // ... then in some downstream loader function loader({ context }) { let user = context.get(userContext); let profile = await getProfile(user.id); return { profile }; } Similar to server-side requests, a fresh context will be created per navigation (or fetcher call). If you have initial data you'd like to populate in the context for every request, you can provide an unstable_getContext function at the root of your app: Library mode - createBrowserRouter(routes, { unstable_getContext }) Framework mode - <HydratedRouter unstable_getContext> This function should return an value of type unstable_InitialContext which is a Map<unstable_RouterContext, unknown> of context's and initial values: const loggerContext = unstable_createContext<(...args: unknown[]) => void>(); function logger(...args: unknown[]) { console.log(new Date.toISOString(), ...args); } function unstable_getContext() { let map = new Map(); map.set(loggerContext, logger); return map; } 7.2.0 Minor Changes New type-safe href utility that guarantees links point to actual paths in your app (#13012) import { href } from \"react-router\"; export default function Component() { const link = href(\"/blog/:slug\", { slug: \"my-first-post\" }); return ( <main> <Link to={href(\"/products/:id\", { id: \"asdf\" })} /> <NavLink to={href(\"/:lang?/about\", { lang: \"en\" })} /> </main> ); } Patch Changes Fix typegen for repeated params (#13012) In React Router, path parameters are keyed by their name. So for a path pattern like /a/:id/b/:id?/c/:id, the last :id will set the value for id in useParams and the params prop. For example, /a/1/b/2/c/3 will result in the value { id: 3 } at runtime. Previously, generated types for params incorrectly modeled repeated params with an array. So /a/1/b/2/c/3 generated a type like { id: [1,2,3] }. To be consistent with runtime behavior, the generated types now correctly model the \"last one wins\" semantics of path parameters. So /a/1/b/2/c/3 now generates a type like { id: 3 }. Don't apply Single Fetch revalidation de-optimization when in SPA mode since there is no server HTTP request (#12948) Properly handle revalidations to across a prerender/SPA boundary (#13021) In \"hybrid\" applications where some routes are pre-rendered and some are served from a SPA fallback, we need to avoid making .data requests if the path wasn't pre-rendered because the request will 404 We don't know all the pre-rendered paths client-side, however: All loader data in ssr:false mode is static because it's generated at build time A route must use a clientLoader to do anything dynamic Therefore, if a route only has a loader and not a clientLoader, we disable revalidation by default because there is no new data to retrieve We short circuit and skip single fetch .data request logic if there are no server loaders with shouldLoad=true in our single fetch dataStrategy This ensures that the route doesn't cause a .data request that would 404 after a submission Error at build time in ssr:false + prerender apps for the edge case scenario of: (#13021) A parent route has only a loader (does not have a clientLoader) The parent route is pre-rendered The parent route has children routes which are not prerendered This means that when the child paths are loaded via the SPA fallback, the parent won't have any loaderData because there is no server on which to run the loader This can be resolved by either adding a parent clientLoader or pre-rendering the child paths If you add a clientLoader, calling the serverLoader() on non-prerendered paths will throw a 404 Add unstable support for splitting route modules in framework mode via future.unstable_splitRouteModules (#11871) Add unstable_SerializesTo brand type for library authors to register types serializable by React Router's streaming format (turbo-stream) (ab5b05b02) Align dev server behavior with static file server behavior when ssr:false is set (#12948) When no prerender config exists, only SSR down to the root HydrateFallback (SPA Mode) When a prerender config exists but the current path is not prerendered, only SSR down to the root HydrateFallback (SPA Fallback) Return a 404 on .data requests to non-pre-rendered paths Improve prefetch performance of CSS side effects in framework mode (#12889) Disable Lazy Route Discovery for all ssr:false apps and not just \"SPA Mode\" because there is no runtime server to serve the search-param-configured __manifest requests (#12894) We previously only disabled this for \"SPA Mode\" which is ssr:false and no prerender config but we realized it should apply to all ssr:false apps, including those prerendering multiple pages In those prerender scenarios we would prerender the /__manifest file assuming the static file server would serve it but that makes some unneccesary assumptions about the static file server behaviors Properly handle interrupted manifest requests in lazy route discovery (#12915) 7.1.5 Patch Changes Fix regression introduced in 7.1.4 via #12800 that caused issues navigating to hash routes inside splat routes for applications using Lazy Route Discovery (patchRoutesOnNavigation) (#12927) 7.1.4 Patch Changes Internal reorg to clean up some duplicated route module types (#12799) Properly handle status codes that cannot have a body in single fetch responses (204, etc.) (#12760) Stop erroring on resource routes that return raw strings/objects and instead serialize them as text/plain or application/json responses (#12848) This only applies when accessed as a resource route without the .data extension When accessed from a Single Fetch .data request, they will still be encoded via turbo-stream Optimize Lazy Route Discovery path discovery to favor a single querySelectorAll call at the body level instead of many calls at the sub-tree level (#12731) Properly bubble headers as errorHeaders when throwing a data() result (#12846) Avoid duplication of Set-Cookie headers could be duplicated if also returned from headers Optimize route matching by skipping redundant matchRoutes calls when possible (#12800) 7.1.3 No changes 7.1.2 Patch Changes Fix issue with fetcher data cleanup in the data layer on fetcher unmount (#12681) Do not rely on symbol for filtering out redirect responses from loader data (#12694) Previously, some projects were getting type checking errors like: error TS4058: Return type of exported function has or is using name 'redirectSymbol' from external module \"node_modules/...\" but cannot be named. Now that symbols are not used for the redirect response type, these errors should no longer be present. 7.1.1 No changes 7.1.0 Patch Changes Throw unwrapped single fetch redirect to align with pre-single fetch behavior (#12506) Ignore redirects when inferring loader data types (#12527) Remove <Link prefetch> warning which suffers from false positives in a lazy route discovery world (#12485) 7.0.2 Patch Changes temporarily only use one build in export map so packages can have a peer dependency on react router (#12437) Generate wide matches and params types for current route and child routes (#12397) At runtime, matches includes child route matches and params include child route path parameters. But previously, we only generated types for parent routes in matches; for params, we only considered the parent routes and the current route. To align our generated types more closely to the runtime behavior, we now generate more permissive, wider types when accessing child route information. 7.0.1 No changes 7.0.0 Major Changes Remove the original defer implementation in favor of using raw promises via single fetch and turbo-stream. This removes these exports from React Router: (#11744) defer AbortedDeferredError type TypedDeferredData UNSAFE_DeferredData UNSAFE_DEFERRED_SYMBOL, Collapse @remix-run/router into react-router (#11505) Collapse react-router-dom into react-router Collapse @remix-run/server-runtime into react-router Collapse @remix-run/testing into react-router Remove single fetch future flag. (#11522) Drop support for Node 16, React Router SSR now requires Node 18 or higher (#11391) Remove future.v7_startTransition flag (#11696) Expose the underlying router promises from the following APIs for compsition in React 19 APIs: (#11521) useNavigate() useSubmit useFetcher().load useFetcher().submit useRevalidator.revalidate Remove future.v7_normalizeFormMethod future flag (#11697) For Remix consumers migrating to React Router, the crypto global from the Web Crypto API is now required when using cookie and session APIs. This means that the following APIs are provided from react-router rather than platform-specific packages: (#11837) createCookie createCookieSessionStorage createMemorySessionStorage createSessionStorage For consumers running older versions of Node, the installGlobals function from @remix-run/node has been updated to define globalThis.crypto, using Node's require('node:crypto').webcrypto implementation. Since platform-specific packages no longer need to implement this API, the following low-level APIs have been removed: createCookieFactory createSessionStorageFactory createCookieSessionStorageFactory createMemorySessionStorageFactory Imports/Exports cleanup (#11840) Removed the following exports that were previously public API from @remix-run/router types AgnosticDataIndexRouteObject AgnosticDataNonIndexRouteObject AgnosticDataRouteMatch AgnosticDataRouteObject AgnosticIndexRouteObject AgnosticNonIndexRouteObject AgnosticRouteMatch AgnosticRouteObject TrackedPromise unstable_AgnosticPatchRoutesOnMissFunction Action -> exported as NavigationType via react-router Router exported as DataRouter to differentiate from RR's <Router> API getToPathname (@private) joinPaths (@private) normalizePathname (@private) resolveTo (@private) stripBasename (@private) createBrowserHistory -> in favor of createBrowserRouter createHashHistory -> in favor of createHashRouter createMemoryHistory -> in favor of createMemoryRouter createRouter createStaticHandler -> in favor of wrapper createStaticHandler in RR Dom getStaticContextFromError Removed the following exports that were previously public API from react-router Hash Pathname Search update minimum node version to 18 (#11690) Remove future.v7_prependBasename from the ionternalized @remix-run/router package (#11726) Migrate Remix type generics to React Router (#12180) These generics are provided for Remix v2 migration purposes These generics and the APIs they exist on should be considered informally deprecated in favor of the new Route.* types Anyone migrating from React Router v6 should probably not leverage these new generics and should migrate straight to the Route.* types For React Router v6 users, these generics are new and should not impact your app, with one exception useFetcher previously had an optional generic (used primarily by Remix v2) that expected the data type This has been updated in v7 to expect the type of the function that generates the data (i.e., typeof loader/typeof action) Therefore, you should update your usages: ❌ useFetcher<LoaderData>() ✅ useFetcher<typeof loader>() Remove future.v7_throwAbortReason from internalized @remix-run/router package (#11728) Add exports field to all packages (#11675) node package no longer re-exports from react-router (#11702) renamed RemixContext to FrameworkContext (#11705) updates the minimum React version to 18 (#11689) PrefetchPageDescriptor replaced by PageLinkDescriptor (#11960) Consolidate types previously duplicated across @remix-run/router, @remix-run/server-runtime, and @remix-run/react now that they all live in react-router (#12177) Examples: LoaderFunction, LoaderFunctionArgs, ActionFunction, ActionFunctionArgs, DataFunctionArgs, RouteManifest, LinksFunction, Route, EntryRoute The RouteManifest type used by the \"remix\" code is now slightly stricter because it is using the former @remix-run/router RouteManifest Record<string, Route> -> Record<string, Route | undefined> Removed AppData type in favor of inlining unknown in the few locations it was used Removed ServerRuntimeMeta* types in favor of the Meta* types they were duplicated from Remove the future.v7_partialHydration flag (#11725) This also removes the <RouterProvider fallbackElement> prop To migrate, move the fallbackElement to a hydrateFallbackElement/HydrateFallback on your root route Also worth nothing there is a related breaking changer with this future flag: Without future.v7_partialHydration (when using fallbackElement), state.navigation was populated during the initial load With future.v7_partialHydration, state.navigation remains in an \"idle\" state during the initial load Remove v7_relativeSplatPath future flag (#11695) Drop support for Node 18, update minimum Node vestion to 20 (#12171) Remove installGlobals() as this should no longer be necessary Remove remaining future flags (#11820) React Router v7_skipActionErrorRevalidation Remix v3_fetcherPersist, v3_relativeSplatPath, v3_throwAbortReason rename createRemixStub to createRoutesStub (#11692) Remove @remix-run/router deprecated detectErrorBoundary option in favor of mapRouteProperties (#11751) Add react-router/dom subpath export to properly enable react-dom as an optional peerDependency (#11851) This ensures that we don't blindly import ReactDOM from \"react-dom\" in <RouterProvider> in order to access ReactDOM.flushSync(), since that would break createMemoryRouter use cases in non-DOM environments DOM environments should import from react-router/dom to get the proper component that makes ReactDOM.flushSync() available: If you are using the Vite plugin, use this in your entry.client.tsx: import { HydratedRouter } from 'react-router/dom' If you are not using the Vite plugin and are manually calling createBrowserRouter/createHashRouter: import { RouterProvider } from \"react-router/dom\" Remove future.v7_fetcherPersist flag (#11731) Update cookie dependency to ^1.0.1 - please see the release notes for any breaking changes (#12172) Minor Changes Add support for prerender config in the React Router vite plugin, to support existing SSG use-cases (#11539) You can use the prerender config to pre-render your .html and .data files at build time and then serve them statically at runtime (either from a running server or a CDN) prerender can either be an array of string paths, or a function (sync or async) that returns an array of strings so that you can dynamically generate the paths by talking to your CMS, etc. // react-router.config.ts import type { Config } from \"@react-router/dev/config\"; export default { async prerender() { let slugs = await fakeGetSlugsFromCms(); // Prerender these paths into `.html` files at build time, and `.data` // files if they have loaders return [\"/\", \"/about\", ...slugs.map((slug) => `/product/${slug}`)]; }, } satisfies Config; async function fakeGetSlugsFromCms() { await new Promise((r) => setTimeout(r, 1000)); return [\"shirt\", \"hat\"]; } Params, loader data, and action data as props for route component exports (#11961) export default function Component({ params, loaderData, actionData }) {} export function HydrateFallback({ params }) {} export function ErrorBoundary({ params, loaderData, actionData }) {} Remove duplicate RouterProvider impliementations (#11679) Typesafety improvements (#12019) React Router now generates types for each of your route modules. You can access those types by importing them from ./+types.<route filename without extension>. For example: // app/routes/product.tsx import type * as Route from \"./+types.product\"; export function loader({ params }: Route.LoaderArgs) {} export default function Component({ loaderData }: Route.ComponentProps) {} This initial implementation targets type inference for: Params : Path parameters from your routing config in routes.ts including file-based routing LoaderData : Loader data from loader and/or clientLoader within your route module ActionData : Action data from action and/or clientAction within your route module In the future, we plan to add types for the rest of the route module exports: meta, links, headers, shouldRevalidate, etc. We also plan to generate types for typesafe Links: <Link to=\"/products/:id\" params={{ id: 1 }} /> // ^^^^^^^^^^^^^ ^^^^^^^^^ // typesafe `to` and `params` based on the available routes in your app Check out our docs for more: Explanations > Type Safety How-To > Setting up type safety Stabilize unstable_dataStrategy (#11969) Stabilize unstable_patchRoutesOnNavigation (#11970) Patch Changes No changes (506329c4e) chore: re-enable development warnings through a development exports condition. (#12269) Remove unstable upload handler. (#12015) Remove unneeded dependency on @web3-storage/multipart-parser (#12274) Fix redirects returned from loaders/actions using data() (#12021) fix(react-router): (v7) fix static prerender of non-ascii characters (#12161) Replace substr with substring (#12080) Remove the deprecated json utility (#12146) You can use Response.json if you still need to construct JSON responses in your app Remove unneeded dependency on source-map (#12275) 6.28.0 Minor Changes Log deprecation warnings for v7 flags (#11750) Add deprecation warnings to json/defer in favor of returning raw objects These methods will be removed in React Router v7 Patch Changes Update JSDoc URLs for new website structure (add /v6/ segment) (#12141) Updated dependencies: @remix-run/router@1.21.0 6.27.0 Minor Changes Stabilize unstable_patchRoutesOnNavigation (#11973) Add new PatchRoutesOnNavigationFunctionArgs type for convenience (#11967) Stabilize unstable_dataStrategy (#11974) Stabilize the unstable_flushSync option for navigations and fetchers (#11989) Stabilize the unstable_viewTransition option for navigations and the corresponding unstable_useViewTransitionState hook (#11989) Patch Changes Fix bug when submitting to the current contextual route (parent route with an index child) when an ?index param already exists from a prior submission (#12003) Fix useFormAction bug - when removing ?index param it would not keep other non-Remix index params (#12003) Fix types for RouteObject within PatchRoutesOnNavigationFunction's patch method so it doesn't expect agnostic route objects passed to patch (#11967) Updated dependencies: @remix-run/router@1.20.0 6.26.2 Patch Changes Updated dependencies: @remix-run/router@1.19.2 6.26.1 Patch Changes Rename unstable_patchRoutesOnMiss to unstable_patchRoutesOnNavigation to match new behavior (#11888) Updated dependencies: @remix-run/router@1.19.1 6.26.0 Minor Changes Add a new replace(url, init?) alternative to redirect(url, init?) that performs a history.replaceState instead of a history.pushState on client-side navigation redirects (#11811) Patch Changes Fix initial hydration behavior when using future.v7_partialHydration along with unstable_patchRoutesOnMiss (#11838) During initial hydration, router.state.matches will now include any partial matches so that we can render ancestor HydrateFallback components Updated dependencies: @remix-run/router@1.19.0 6.25.1 No significant changes to this package were made in this release. See the repo CHANGELOG.md for an overview of all changes in v6.25.1. 6.25.0 Minor Changes Stabilize future.unstable_skipActionErrorRevalidation as future.v7_skipActionErrorRevalidation (#11769) When this flag is enabled, actions will not automatically trigger a revalidation if they return/throw a Response with a 4xx/5xx status code You may still opt-into revalidation via shouldRevalidate This also changes shouldRevalidate's unstable_actionStatus parameter to actionStatus Patch Changes Fix regression and properly decode paths inside useMatch so matches/params reflect decoded params (#11789) Updated dependencies: @remix-run/router@1.18.0 6.24.1 Patch Changes When using future.v7_relativeSplatPath, properly resolve relative paths in splat routes that are children of pathless routes (#11633) Updated dependencies: @remix-run/router@1.17.1 6.24.0 Minor Changes Add support for Lazy Route Discovery (a.k.a. Fog of War) (#11626) RFC: https://github.com/remix-run/react-router/discussions/11113 unstable_patchRoutesOnMiss docs: https://reactrouter.com/v6/routers/create-browser-router Patch Changes Updated dependencies: @remix-run/router@1.17.0 6.23.1 Patch Changes allow undefined to be resolved with <Await> (#11513) Updated dependencies: @remix-run/router@1.16.1 6.23.0 Minor Changes Add a new unstable_dataStrategy configuration option (#11098) This option allows Data Router applications to take control over the approach for executing route loaders and actions The default implementation is today's behavior, to fetch all loaders in parallel, but this option allows users to implement more advanced data flows including Remix single-fetch, middleware/context APIs, automatic loader caching, and more Patch Changes Updated dependencies: @remix-run/router@1.16.0 6.22.3 Patch Changes Updated dependencies: @remix-run/router@1.15.3 6.22.2 Patch Changes Updated dependencies: @remix-run/router@1.15.2 6.22.1 Patch Changes Fix encoding/decoding issues with pre-encoded dynamic parameter values (#11199) Updated dependencies: @remix-run/router@1.15.1 6.22.0 Patch Changes Updated dependencies: @remix-run/router@1.15.0 6.21.3 Patch Changes Remove leftover unstable_ prefix from Blocker/BlockerFunction types (#11187) 6.21.2 Patch Changes Updated dependencies: @remix-run/router@1.14.2 6.21.1 Patch Changes Fix bug with route.lazy not working correctly on initial SPA load when v7_partialHydration is specified (#11121) Updated dependencies: @remix-run/router@1.14.1 6.21.0 Minor Changes Add a new future.v7_relativeSplatPath flag to implement a breaking bug fix to relative routing when inside a splat route. (#11087) This fix was originally added in #10983 and was later reverted in #11078 because it was determined that a large number of existing applications were relying on the buggy behavior (see #11052) The Bug The buggy behavior is that without this flag, the default behavior when resolving relative paths is to ignore any splat (*) portion of the current route path. The Background This decision was originally made thinking that it would make the concept of nested different sections of your apps in <Routes> easier if relative routing would replace the current splat: <BrowserRouter> <Routes> <Route path=\"/\" element={<Home />} /> <Route path=\"dashboard/*\" element={<Dashboard />} /> </Routes> </BrowserRouter> Any paths like /dashboard, /dashboard/team, /dashboard/projects will match the Dashboard route. The dashboard component itself can then render nested <Routes>: function Dashboard() { return ( <div> <h2>Dashboard</h2> <nav> <Link to=\"/\">Dashboard Home</Link> <Link to=\"team\">Team</Link> <Link to=\"projects\">Projects</Link> </nav> <Routes> <Route path=\"/\" element={<DashboardHome />} /> <Route path=\"team\" element={<DashboardTeam />} /> <Route path=\"projects\" element={<DashboardProjects />} /> </Routes> </div> ); } Now, all links and route paths are relative to the router above them. This makes code splitting and compartmentalizing your app really easy. You could render the Dashboard as its own independent app, or embed it into your large app without making any changes to it. The Problem The problem is that this concept of ignoring part of a path breaks a lot of other assumptions in React Router - namely that \".\" always means the current location pathname for that route. When we ignore the splat portion, we start getting invalid paths when using \".\": // If we are on URL /dashboard/team, and we want to link to /dashboard/team: function DashboardTeam() { // ❌ This is broken and results in <a href=\"/dashboard\"> return <Link to=\".\">A broken link to the Current URL</Link>; // ✅ This is fixed but super unintuitive since we're already at /dashboard/team! return <Link to=\"./team\">A broken link to the Current URL</Link>; } We've also introduced an issue that we can no longer move our DashboardTeam component around our route hierarchy easily - since it behaves differently if we're underneath a non-splat route, such as /dashboard/:widget. Now, our \".\" links will, properly point to ourself inclusive of the dynamic param value so behavior will break from it's corresponding usage in a /dashboard/* route. Even worse, consider a nested splat route configuration: <BrowserRouter> <Routes> <Route path=\"dashboard\"> <Route path=\"*\" element={<Dashboard />} /> </Route> </Routes> </BrowserRouter> Now, a <Link to=\".\"> and a <Link to=\"..\"> inside the Dashboard component go to the same place! That is definitely not correct! Another common issue arose in Data Routers (and Remix) where any <Form> should post to it's own route action if you the user doesn't specify a form action: let router = createBrowserRouter({ path: \"/dashboard\", children: [ { path: \"*\", action: dashboardAction, Component() { // ❌ This form is broken! It throws a 405 error when it submits because // it tries to submit to /dashboard (without the splat value) and the parent // `/dashboard` route doesn't have an action return <Form method=\"post\">...</Form>; }, }, ], }); This is just a compounded issue from the above because the default location for a Form to submit to is itself (\".\") - and if we ignore the splat portion, that now resolves to the parent route. The Solution If you are leveraging this behavior, it's recommended to enable the future flag, move your splat to it's own route, and leverage ../ for any links to \"sibling\" pages: <BrowserRouter> <Routes> <Route path=\"dashboard\"> <Route index path=\"*\" element={<Dashboard />} /> </Route> </Routes> </BrowserRouter> function Dashboard() { return ( <div> <h2>Dashboard</h2> <nav> <Link to=\"..\">Dashboard Home</Link> <Link to=\"../team\">Team</Link> <Link to=\"../projects\">Projects</Link> </nav> <Routes> <Route path=\"/\" element={<DashboardHome />} /> <Route path=\"team\" element={<DashboardTeam />} /> <Route path=\"projects\" element={<DashboardProjects />} /> </Router> </div> ); } This way, . means \"the full current pathname for my route\" in all cases (including static, dynamic, and splat routes) and .. always means \"my parents pathname\". Patch Changes Properly handle falsy error values in ErrorBoundary's (#11071) Updated dependencies: @remix-run/router@1.14.0 6.20.1 Patch Changes Revert the useResolvedPath fix for splat routes due to a large number of applications that were relying on the buggy behavior (see https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329). We plan to re-introduce this fix behind a future flag in the next minor version. (#11078) Updated dependencies: @remix-run/router@1.13.1 6.20.0 Minor Changes Export the PathParam type from the public API (#10719) Patch Changes Fix bug with resolveTo in splat routes (#11045) This is a follow up to #10983 to handle the few other code paths using getPathContributingMatches This removes the UNSAFE_getPathContributingMatches export from @remix-run/router since we no longer need this in the react-router/react-router-dom layers Updated dependencies: @remix-run/router@1.13.0 6.19.0 Minor Changes Add unstable_flushSync option to useNavigate/useSumbit/fetcher.load/fetcher.submit to opt-out of React.startTransition and into ReactDOM.flushSync for state updates (#11005) Remove the unstable_ prefix from the useBlocker hook as it's been in use for enough time that we are confident in the API. We do not plan to remove the prefix from unstable_usePrompt due to differences in how browsers handle window.confirm that prevent React Router from guaranteeing consistent/correct behavior. (#10991) Patch Changes Fix useActionData so it returns proper contextual action data and not any action data in the tree (#11023) Fix bug in useResolvedPath that would cause useResolvedPath(\".\") in a splat route to lose the splat portion of the URL path. (#10983) ⚠️ This fixes a quite long-standing bug specifically for \".\" paths inside a splat route which incorrectly dropped the splat portion of the URL. If you are relative routing via \".\" inside a splat route in your application you should double check that your logic is not relying on this buggy behavior and update accordingly. Updated dependencies: @remix-run/router@1.12.0 6.18.0 Patch Changes Fix the future prop on BrowserRouter, HashRouter and MemoryRouter so that it accepts a Partial<FutureConfig> instead of requiring all flags to be included. (#10962) Updated dependencies: @remix-run/router@1.11.0 6.17.0 Patch Changes Fix RouterProvider future prop type to be a Partial<FutureConfig> so that not all flags must be specified (#10900) Updated dependencies: @remix-run/router@1.10.0 6.16.0 Minor Changes In order to move towards stricter TypeScript support in the future, we're aiming to replace current usages of any with unknown on exposed typings for user-provided data. To do this in Remix v2 without introducing breaking changes in React Router v6, we have added generics to a number of shared types. These continue to default to any in React Router and are overridden with unknown in Remix. In React Router v7 we plan to move these to unknown as a breaking change. (#10843) Location now accepts a generic for the location.state value ActionFunctionArgs/ActionFunction/LoaderFunctionArgs/LoaderFunction now accept a generic for the context parameter (only used in SSR usages via createStaticHandler) The return type of useMatches (now exported as UIMatch) accepts generics for match.data and match.handle - both of which were already set to unknown Move the @private class export ErrorResponse to an UNSAFE_ErrorResponseImpl export since it is an implementation detail and there should be no construction of ErrorResponse instances in userland. This frees us up to export a type ErrorResponse which correlates to an instance of the class via InstanceType. Userland code should only ever be using ErrorResponse as a type and should be type-narrowing via isRouteErrorResponse. (#10811) Export ShouldRevalidateFunctionArgs interface (#10797) Removed private/internal APIs only required for the Remix v1 backwards compatibility layer and no longer needed in Remix v2 (_isFetchActionRedirect, _hasFetcherDoneAnything) (#10715) Patch Changes Updated dependencies: @remix-run/router@1.9.0 6.15.0 Minor Changes Add's a new redirectDocument() function which allows users to specify that a redirect from a loader/action should trigger a document reload (via window.location) instead of attempting to navigate to the redirected location via React Router (#10705) Patch Changes Ensure useRevalidator is referentially stable across re-renders if revalidations are not actively occurring (#10707) Updated dependencies: @remix-run/router@1.8.0 6.14.2 Patch Changes Updated dependencies: @remix-run/router@1.7.2 6.14.1 Patch Changes Fix loop in unstable_useBlocker when used with an unstable blocker function (#10652) Fix issues with reused blockers on subsequent navigations (#10656) Updated dependencies: @remix-run/router@1.7.1 6.14.0 Patch Changes Strip basename from locations provided to unstable_useBlocker functions to match useLocation (#10573) Fix generatePath when passed a numeric 0 value parameter (#10612) Fix unstable_useBlocker key issues in StrictMode (#10573) Fix tsc --skipLibCheck:false issues on React 17 (#10622) Upgrade typescript to 5.1 (#10581) Updated dependencies: @remix-run/router@1.7.0 6.13.0 Minor Changes Move React.startTransition usage behind a future flag to avoid issues with existing incompatible Suspense usages. We recommend folks adopting this flag to be better compatible with React concurrent mode, but if you run into issues you can continue without the use of startTransition until v7. Issues usually boils down to creating net-new promises during the render cycle, so if you run into issues you should either lift your promise creation out of the render cycle or put it behind a useMemo. (#10596) Existing behavior will no longer include React.startTransition: <BrowserRouter> <Routes>{/*...*/}</Routes> </BrowserRouter> <RouterProvider router={router} /> If you wish to enable React.startTransition, pass the future flag to your component: <BrowserRouter future={{ v7_startTransition: true }}> <Routes>{/*...*/}</Routes> </BrowserRouter> <RouterProvider router={router} future={{ v7_startTransition: true }}/> Patch Changes Work around webpack/terser React.startTransition minification bug in production mode (#10588) 6.12.1 [!WARNING] Please use version 6.13.0 or later instead of 6.12.1. This version suffers from a webpack/terser minification issue resulting in invalid minified code in your resulting production bundles which can cause issues in your application. See #10579 for more details. Patch Changes Adjust feature detection of React.startTransition to fix webpack + react 17 compilation error (#10569) 6.12.0 Minor Changes Wrap internal router state updates with React.startTransition if it exists (#10438) Patch Changes Updated dependencies: @remix-run/router@1.6.3 6.11.2 Patch Changes Fix basename duplication in descendant <Routes> inside a <RouterProvider> (#10492) Updated dependencies: @remix-run/router@1.6.2 6.11.1 Patch Changes Fix usage of Component API within descendant <Routes> (#10434) Fix bug when calling useNavigate from <Routes> inside a <RouterProvider> (#10432) Fix usage of <Navigate> in strict mode when using a data router (#10435) Updated dependencies: @remix-run/router@1.6.1 6.11.0 Patch Changes Log loader/action errors to the console in dev for easier stack trace evaluation (#10286) Fix bug preventing rendering of descendant <Routes> when RouterProvider errors existed (#10374) Fix inadvertent re-renders when using Component instead of element on a route definition (#10287) Fix detection of useNavigate in the render cycle by setting the activeRef in a layout effect, allowing the navigate function to be passed to child components and called in a useEffect there. (#10394) Switched from useSyncExternalStore to useState for internal @remix-run/router router state syncing in <RouterProvider>. We found some subtle bugs where router state updates got propagated before other normal useState updates, which could lead to footguns in useEffect calls. (#10377, #10409) Allow useRevalidator() to resolve a loader-driven error boundary scenario (#10369) Avoid unnecessary unsubscribe/resubscribes on router state changes (#10409) When using a RouterProvider, useNavigate/useSubmit/fetcher.submit are now stable across location changes, since we can handle relative routing via the @remix-run/router instance and get rid of our dependence on useLocation(). When using BrowserRouter, these hooks remain unstable across location changes because they still rely on useLocation(). (#10336) Updated dependencies: @remix-run/router@1.6.0 6.10.0 Minor Changes Added support for Future Flags in React Router. The first flag being introduced is future.v7_normalizeFormMethod which will normalize the exposed useNavigation()/useFetcher() formMethod fields as uppercase HTTP methods to align with the fetch() behavior. (#10207) When future.v7_normalizeFormMethod === false (default v6 behavior), useNavigation().formMethod is lowercase useFetcher().formMethod is lowercase When future.v7_normalizeFormMethod === true: useNavigation().formMethod is uppercase useFetcher().formMethod is uppercase Patch Changes Fix route ID generation when using Fragments in createRoutesFromElements (#10193) Updated dependencies: @remix-run/router@1.5.0 6.9.0 Minor Changes React Router now supports an alternative way to define your route element and errorElement fields as React Components instead of React Elements. You can instead pass a React Component to the new Component and ErrorBoundary fields if you choose. There is no functional difference between the two, so use whichever approach you prefer \uD83D\uDE00. You shouldn't be defining both, but if you do Component/ErrorBoundary will \"win\". (#10045) Example JSON Syntax // Both of these work the same: const elementRoutes = [{ path: '/', element: <Home />, errorElement: <HomeError />, }] const componentRoutes = [{ path: '/', Component: Home, ErrorBoundary: HomeError, }] function Home() { ... } function HomeError() { ... } Example JSX Syntax // Both of these work the same: const elementRoutes = createRoutesFromElements( <Route path='/' element={<Home />} errorElement={<HomeError /> } /> ); const componentRoutes = createRoutesFromElements( <Route path='/' Component={Home} ErrorBoundary={HomeError} /> ); function Home() { ... } function HomeError() { ... } Introducing Lazy Route Modules! (#10045) In order to keep your application bundles small and support code-splitting of your routes, we've introduced a new lazy() route property. This is an async function that resolves the non-route-matching portions of your route definition (loader, action, element/Component, errorElement/ErrorBoundary, shouldRevalidate, handle). Lazy routes are resolved on initial load and during the loading or submitting phase of a navigation or fetcher call. You cannot lazily define route-matching properties (path, index, children) since we only execute your lazy route functions after we've matched known routes. Your lazy functions will typically return the result of a dynamic import. // In this example, we assume most folks land on the homepage so we include that // in our critical-path bundle, but then we lazily load modules for /a and /b so // they don't load until the user navigates to those routes let routes = createRoutesFromElements( <Route path=\"/\" element={<Layout />}> <Route index element={<Home />} /> <Route path=\"a\" lazy={() => import(\"./a\")} /> <Route path=\"b\" lazy={() => import(\"./b\")} /> </Route> ); Then in your lazy route modules, export the properties you want defined for the route: export async function loader({ request }) { let data = await fetchData(request); return json(data); } // Export a `Component` directly instead of needing to create a React Element from it export function Component() { let data = useLoaderData(); return ( <> <h1>You made it!</h1> <p>{data}</p> </> ); } // Export an `ErrorBoundary` directly instead of needing to create a React Element from it export function ErrorBoundary() { let error = useRouteError(); return isRouteErrorResponse(error) ? ( <h1> {error.status} {error.statusText} </h1> ) : ( <h1>{error.message || error}</h1> ); } An example of this in action can be found in the examples/lazy-loading-router-provider directory of the repository. \uD83D\uDE4C Huge thanks to @rossipedia for the Initial Proposal and POC Implementation. Updated dependencies: @remix-run/router@1.4.0 Patch Changes Fix generatePath incorrectly applying parameters in some cases (#10078) Improve memoization for context providers to avoid unnecessary re-renders (#9983) 6.8.2 Patch Changes Updated dependencies: @remix-run/router@1.3.3 6.8.1 Patch Changes Remove inaccurate console warning for POP navigations and update active blocker logic (#10030) Updated dependencies: @remix-run/router@1.3.2 6.8.0 Patch Changes Updated dependencies: @remix-run/router@1.3.1 6.7.0 Minor Changes Add unstable_useBlocker hook for blocking navigations within the app's location origin (#9709) Patch Changes Fix generatePath when optional params are present (#9764) Update <Await> to accept ReactNode as children function return result (#9896) Updated dependencies: @remix-run/router@1.3.0 6.6.2 Patch Changes Ensure useId consistency during SSR (#9805) 6.6.1 Patch Changes Updated dependencies: @remix-run/router@1.2.1 6.6.0 Patch Changes Prevent useLoaderData usage in errorElement (#9735) Updated dependencies: @remix-run/router@1.2.0 6.5.0 This release introduces support for Optional Route Segments. Now, adding a ? to the end of any path segment will make that entire segment optional. This works for both static segments and dynamic parameters. Optional Params Examples <Route path=\":lang?/about> will match: /:lang/about /about <Route path=\"/multistep/:widget1?/widget2?/widget3?\"> will match: /multistep /multistep/:widget1 /multistep/:widget1/:widget2 /multistep/:widget1/:widget2/:widget3 Optional Static Segment Example <Route path=\"/home?\"> will match: / /home <Route path=\"/fr?/about\"> will match: /about /fr/about Minor Changes Allows optional routes and optional static segments (#9650) Patch Changes Stop incorrectly matching on partial named parameters, i.e. <Route path=\"prefix-:param\">, to align with how splat parameters work. If you were previously relying on this behavior then it's recommended to extract the static portion of the path at the useParams call site: (#9506) // Old behavior at URL /prefix-123 <Route path=\"prefix-:id\" element={<Comp /> }> function Comp() { let params = useParams(); // { id: '123' } let id = params.id; // \"123\" ... } // New behavior at URL /prefix-123 <Route path=\":id\" element={<Comp /> }> function Comp() { let params = useParams(); // { id: 'prefix-123' } let id = params.id.replace(/^prefix-/, ''); // \"123\" ... } Updated dependencies: @remix-run/router@1.1.0 6.4.5 Patch Changes Updated dependencies: @remix-run/router@1.0.5 6.4.4 Patch Changes Updated dependencies: @remix-run/router@1.0.4 6.4.3 Patch Changes useRoutes should be able to return null when passing locationArg (#9485) fix initialEntries type in createMemoryRouter (#9498) Updated dependencies: @remix-run/router@1.0.3 6.4.2 Patch Changes Fix IndexRouteObject and NonIndexRouteObject types to make hasErrorElement optional (#9394) Enhance console error messages for invalid usage of data router hooks (#9311) If an index route has children, it will result in a runtime error. We have strengthened our RouteObject/RouteProps types to surface the error in TypeScript. (#9366) Updated dependencies: @remix-run/router@1.0.2 6.4.1 Patch Changes Preserve state from initialEntries (#9288) Updated dependencies: @remix-run/router@1.0.1 6.4.0 Whoa this is a big one! 6.4.0 brings all the data loading and mutation APIs over from Remix. Here's a quick high level overview, but it's recommended you go check out the docs, especially the feature overview and the tutorial. New APIs Create your router with createMemoryRouter Render your router with <RouterProvider> Load data with a Route loader and mutate with a Route action Handle errors with Route errorElement Defer non-critical data with defer and Await Bug Fixes Path resolution is now trailing slash agnostic (#8861) useLocation returns the scoped location inside a <Routes location> component (#9094) Updated Dependencies @remix-run/router@1.0.0"
  },
  "Examiner-UI/node_modules/react-router/LICENSE.html": {
    "href": "Examiner-UI/node_modules/react-router/LICENSE.html",
    "title": "| Examiner",
    "summary": "MIT License Copyright (c) React Training LLC 2015-2019 Copyright (c) Remix Software Inc. 2020-2021 Copyright (c) Shopify Inc. 2022-2023 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/react-router/README.html": {
    "href": "Examiner-UI/node_modules/react-router/README.html",
    "title": "| Examiner",
    "summary": "react-router is the primary package in the React Router project. Installation npm i react-router"
  },
  "Examiner-UI/node_modules/react/README.html": {
    "href": "Examiner-UI/node_modules/react/README.html",
    "title": "react | Examiner",
    "summary": "react React is a JavaScript library for creating user interfaces. The react package contains only the functionality necessary to define React components. It is typically used together with a React renderer like react-dom for the web, or react-native for the native environments. Note: by default, React will be in development mode. The development version includes extra warnings about common mistakes, whereas the production version includes extra performance optimizations and strips all error messages. Don't forget to use the production build when deploying your application. Usage import { useState } from 'react'; import { createRoot } from 'react-dom/client'; function Counter() { const [count, setCount] = useState(0); return ( <> <h1>{count}</h1> <button onClick={() => setCount(count + 1)}> Increment </button> </> ); } const root = createRoot(document.getElementById('root')); root.render(<Counter />); Documentation See https://react.dev/ API See https://react.dev/reference/react"
  },
  "Examiner-UI/node_modules/reactcss/README.html": {
    "href": "Examiner-UI/node_modules/reactcss/README.html",
    "title": "ReactCSS | Examiner",
    "summary": "ReactCSS Inline Styles in JS with support for React, React Native, Autoprefixing, Hover, Pseudo-Elements & Media Queries Install npm install reactcss --save Style Object Define a default styles for your elements: import reactCSS from 'reactcss' const styles = reactCSS({ 'default': { card: { background: this.props.background, boxShadow: '0 2px 4px rgba(0,0,0,.15)', }, }, }) Pass style definitions via inline styles: <div style={ styles.card } /> Activating Classes Activate additional classes by passing down objects as additional parameters to reactCSS: const styles = reactCSS({ 'default': { card: { background: '#fff', boxShadow: '0 2px 4px rgba(0,0,0,.15)', }, }, 'zIndex-2': { card: { boxShadow: '0 4px 8px rgba(0,0,0,.15)', }, }, }, { 'zIndex-2': props.zIndex === 2, }) Documentation See the Full Documentation Examples Examples and projects built with reactCSS: Felony - Next Level PGP Desktop App React Color - Color Pickers from Sketch, Photoshop, Chrome, Github, Twitter & more Buffer App Components - A shared set of UI Components React Reactions - Use Reactions from Slack, Facebook, Pokemon, Github and Youtube"
  },
  "Examiner-UI/node_modules/resolve-from/readme.html": {
    "href": "Examiner-UI/node_modules/resolve-from/readme.html",
    "title": "resolve-from | Examiner",
    "summary": "resolve-from Resolve the path of a module like require.resolve() but from a given path Install $ npm install resolve-from Usage const resolveFrom = require('resolve-from'); // There is a file at `./foo/bar.js` resolveFrom('foo', './bar'); //=> '/Users/sindresorhus/dev/test/foo/bar.js' API resolveFrom(fromDir, moduleId) Like require(), throws when the module can't be found. resolveFrom.silent(fromDir, moduleId) Returns null instead of throwing when the module can't be found. fromDir Type: string Directory to resolve from. moduleId Type: string What you would use in require(). Tip Create a partial using a bound function if you want to resolve from the same fromDir multiple times: const resolveFromFoo = resolveFrom.bind(null, 'foo'); resolveFromFoo('./bar'); resolveFromFoo('./baz'); Related resolve-cwd - Resolve the path of a module from the current working directory import-from - Import a module from a given path import-cwd - Import a module from the current working directory resolve-pkg - Resolve the path of a package regardless of it having an entry point import-lazy - Import a module lazily resolve-global - Resolve the path of a globally installed module License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/reusify/README.html": {
    "href": "Examiner-UI/node_modules/reusify/README.html",
    "title": "reusify | Examiner",
    "summary": "reusify Reuse your objects and functions for maximum speed. This technique will make any function run ~10% faster. You call your functions a lot, and it adds up quickly in hot code paths. $ node benchmarks/createNoCodeFunction.js Total time 53133 Total iterations 100000000 Iteration/s 1882069.5236482036 $ node benchmarks/reuseNoCodeFunction.js Total time 50617 Total iterations 100000000 Iteration/s 1975620.838848608 The above benchmark uses fibonacci to simulate a real high-cpu load. The actual numbers might differ for your use case, but the difference should not. The benchmark was taken using Node v6.10.0. This library was extracted from fastparallel. Example var reusify = require('reusify') var fib = require('reusify/benchmarks/fib') var instance = reusify(MyObject) // get an object from the cache, // or creates a new one when cache is empty var obj = instance.get() // set the state obj.num = 100 obj.func() // reset the state. // if the state contains any external object // do not use delete operator (it is slow) // prefer set them to null obj.num = 0 // store an object in the cache instance.release(obj) function MyObject () { // you need to define this property // so V8 can compile MyObject into an // hidden class this.next = null this.num = 0 var that = this // this function is never reallocated, // so it can be optimized by V8 this.func = function () { if (null) { // do nothing } else { // calculates fibonacci fib(that.num) } } } The above example was intended for synchronous code, let's see async: var reusify = require('reusify') var instance = reusify(MyObject) for (var i = 0; i < 100; i++) { getData(i, console.log) } function getData (value, cb) { var obj = instance.get() obj.value = value obj.cb = cb obj.run() } function MyObject () { this.next = null this.value = null var that = this this.run = function () { asyncOperation(that.value, that.handle) } this.handle = function (err, result) { that.cb(err, result) that.value = null that.cb = null instance.release(that) } } Also note how in the above examples, the code, that consumes an instance of MyObject, reset the state to initial condition, just before storing it in the cache. That's needed so that every subsequent request for an instance from the cache, could get a clean instance. Why It is faster because V8 doesn't have to collect all the functions you create. On a short-lived benchmark, it is as fast as creating the nested function, but on a longer time frame it creates less pressure on the garbage collector. Other examples If you want to see some complex example, checkout middie and steed. Acknowledgements Thanks to Trevor Norris for getting me down the rabbit hole of performance, and thanks to Mathias Buss for suggesting me to share this trick. License MIT"
  },
  "Examiner-UI/node_modules/reusify/SECURITY.html": {
    "href": "Examiner-UI/node_modules/reusify/SECURITY.html",
    "title": "Security Policy | Examiner",
    "summary": "Security Policy Supported Versions Use this section to tell people about which versions of your project are currently being supported with security updates. Version Supported 1.x ✅ < 1.0 ❌ Reporting a Vulnerability Please report all vulnerabilities at https://github.com/mcollina/fastq/security."
  },
  "Examiner-UI/node_modules/rollup/LICENSE.html": {
    "href": "Examiner-UI/node_modules/rollup/LICENSE.html",
    "title": "Rollup core license | Examiner",
    "summary": "Rollup core license Rollup is released under the MIT license: The MIT License (MIT) Copyright (c) 2017 these people Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Licenses of bundled dependencies The published Rollup artifact additionally contains code with the following licenses: MIT, ISC, 0BSD Bundled dependencies: @jridgewell/sourcemap-codec License: MIT By: Rich Harris Repository: git+https://github.com/jridgewell/sourcemap-codec.git The MIT License Copyright (c) 2015 Rich Harris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @rollup/pluginutils License: MIT By: Rich Harris Repository: rollup/plugins The MIT License (MIT) Copyright (c) 2019 RollupJS Plugin Contributors (https://github.com/rollup/plugins/graphs/contributors) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. anymatch License: ISC By: Elan Shanker Repository: https://github.com/micromatch/anymatch The ISC License Copyright (c) 2019 Elan Shanker, Paul Miller (https://paulmillr.com) Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. binary-extensions License: MIT By: Sindre Sorhus Repository: sindresorhus/binary-extensions MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Copyright (c) Paul Miller (https://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. braces License: MIT By: Jon Schlinkert, Brian Woodward, Elan Shanker, Eugene Sharygin, hemanth.hm Repository: micromatch/braces The MIT License (MIT) Copyright (c) 2014-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. builtin-modules License: MIT By: Sindre Sorhus Repository: sindresorhus/builtin-modules MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. chokidar License: MIT By: Paul Miller, Elan Shanker Repository: git+https://github.com/paulmillr/chokidar.git The MIT License (MIT) Copyright (c) 2012-2019 Paul Miller (https://paulmillr.com), Elan Shanker Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. date-time License: MIT By: Sindre Sorhus Repository: sindresorhus/date-time MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. fill-range License: MIT By: Jon Schlinkert, Edo Rivai, Paul Miller, Rouven Weßling Repository: jonschlinkert/fill-range The MIT License (MIT) Copyright (c) 2014-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. flru License: MIT By: Luke Edwards Repository: lukeed/flru MIT License Copyright (c) Luke Edwards luke.edwards05@gmail.com (lukeed.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. glob-parent License: ISC By: Gulp Team, Elan Shanker, Blaine Bublitz Repository: gulpjs/glob-parent The ISC License Copyright (c) 2015, 2019 Elan Shanker Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. is-binary-path License: MIT By: Sindre Sorhus Repository: sindresorhus/is-binary-path MIT License Copyright (c) 2019 Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com), Paul Miller (https://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-extglob License: MIT By: Jon Schlinkert Repository: jonschlinkert/is-extglob The MIT License (MIT) Copyright (c) 2014-2016, Jon Schlinkert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-glob License: MIT By: Jon Schlinkert, Brian Woodward, Daniel Perez Repository: micromatch/is-glob The MIT License (MIT) Copyright (c) 2014-2017, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-number License: MIT By: Jon Schlinkert, Olsten Larck, Rouven Weßling Repository: jonschlinkert/is-number The MIT License (MIT) Copyright (c) 2014-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-reference License: MIT By: Rich Harris Repository: git+https://github.com/Rich-Harris/is-reference.git locate-character License: MIT By: Rich Harris Repository: git+https://gitlab.com/Rich-Harris/locate-character.git magic-string License: MIT By: Rich Harris Repository: https://github.com/rich-harris/magic-string Copyright 2018 Rich Harris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. normalize-path License: MIT By: Jon Schlinkert, Blaine Bublitz Repository: jonschlinkert/normalize-path The MIT License (MIT) Copyright (c) 2014-2018, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. parse-ms License: MIT By: Sindre Sorhus Repository: sindresorhus/parse-ms MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. picocolors License: ISC By: Alexey Raspopov Repository: alexeyraspopov/picocolors ISC License Copyright (c) 2021-2024 Oleksii Raspopov, Kostiantyn Denysov, Anton Verinov Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. picomatch License: MIT By: Jon Schlinkert Repository: micromatch/picomatch The MIT License (MIT) Copyright (c) 2017-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. pretty-bytes License: MIT By: Sindre Sorhus Repository: sindresorhus/pretty-bytes MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. pretty-ms License: MIT By: Sindre Sorhus Repository: sindresorhus/pretty-ms MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. readdirp License: MIT By: Thorsten Lorenz, Paul Miller Repository: git://github.com/paulmillr/readdirp.git MIT License Copyright (c) 2012-2019 Thorsten Lorenz, Paul Miller (https://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. signal-exit License: ISC By: Ben Coe Repository: https://github.com/tapjs/signal-exit.git The ISC License Copyright (c) 2015-2023 Benjamin Coe, Isaac Z. Schlueter, and Contributors Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. time-zone License: MIT By: Sindre Sorhus Repository: sindresorhus/time-zone MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. to-regex-range License: MIT By: Jon Schlinkert, Rouven Weßling Repository: micromatch/to-regex-range The MIT License (MIT) Copyright (c) 2015-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. tslib License: 0BSD By: Microsoft Corp. Repository: https://github.com/Microsoft/tslib.git Copyright (c) Microsoft Corporation. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. yargs-parser License: ISC By: Ben Coe Repository: https://github.com/yargs/yargs-parser.git Copyright (c) 2016, Contributors Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
  },
  "Examiner-UI/node_modules/rollup/README.html": {
    "href": "Examiner-UI/node_modules/rollup/README.html",
    "title": "Rollup | Examiner",
    "summary": "Rollup Overview Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application. It uses the standardized ES module format for code, instead of previous idiosyncratic solutions such as CommonJS and AMD. ES modules let you freely and seamlessly combine the most useful individual functions from your favorite libraries. Rollup can optimize ES modules for faster native loading in modern browsers, or output a legacy module format allowing ES module workflows today. Quick Start Guide Install with npm install --global rollup. Rollup can be used either through a command line interface with an optional configuration file or else through its JavaScript API. Run rollup --help to see the available options and parameters. The starter project templates, rollup-starter-lib and rollup-starter-app, demonstrate common configuration options, and more detailed instructions are available throughout the user guide. Commands These commands assume the entry point to your application is named main.js, and that you'd like all imports compiled into a single file named bundle.js. For browsers: # compile to a <script> containing a self-executing function rollup main.js --format iife --name \"myBundle\" --file bundle.js For Node.js: # compile to a CommonJS module rollup main.js --format cjs --file bundle.js For both browsers and Node.js: # UMD format requires a bundle name rollup main.js --format umd --name \"myBundle\" --file bundle.js Why Developing software is usually easier if you break your project into smaller separate pieces, since that often removes unexpected interactions and dramatically reduces the complexity of the problems you'll need to solve, and simply writing smaller projects in the first place isn't necessarily the answer. Unfortunately, JavaScript has not historically included this capability as a core feature in the language. This finally changed with ES modules support in JavaScript, which provides a syntax for importing and exporting functions and data so they can be shared between separate scripts. Most browsers and Node.js support ES modules. However, Node.js releases before 12.17 support ES modules only behind the --experimental-modules flag, and older browsers like Internet Explorer do not support ES modules at all. Rollup allows you to write your code using ES modules, and run your application even in environments that do not support ES modules natively. For environments that support them, Rollup can output optimized ES modules; for environments that don't, Rollup can compile your code to other formats such as CommonJS modules, AMD modules, and IIFE-style scripts. This means that you get to write future-proof code, and you also get the tremendous benefits of... Tree Shaking In addition to enabling the use of ES modules, Rollup also statically analyzes and optimizes the code you are importing, and will exclude anything that isn't actually used. This allows you to build on top of existing tools and modules without adding extra dependencies or bloating the size of your project. For example, with CommonJS, the entire tool or library must be imported. // import the entire utils object with CommonJS var utils = require('node:utils'); var query = 'Rollup'; // use the ajax method of the utils object utils.ajax('https://api.example.com?search=' + query).then(handleResponse); But with ES modules, instead of importing the whole utils object, we can just import the one ajax function we need: // import the ajax function with an ES import statement import { ajax } from 'node:utils'; var query = 'Rollup'; // call the ajax function ajax('https://api.example.com?search=' + query).then(handleResponse); Because Rollup includes the bare minimum, it results in lighter, faster, and less complicated libraries and applications. Since this approach is based on explicit import and export statements, it is vastly more effective than simply running an automated minifier to detect unused variables in the compiled output code. Compatibility Importing CommonJS Rollup can import existing CommonJS modules through a plugin. Publishing ES Modules To make sure your ES modules are immediately usable by tools that work with CommonJS such as Node.js and webpack, you can use Rollup to compile to UMD or CommonJS format, and then point to that compiled version with the main property in your package.json file. If your package.json file also has a module field, ES-module-aware tools like Rollup and webpack will import the ES module version directly. Contributors This project exists thanks to all the people who contribute. [Contribute]. . If you want to contribute yourself, head over to the contribution guidelines. Backers Thank you to all our backers! \uD83D\uDE4F [Become a backer] Sponsors Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor] Special Sponsor TNG has been supporting the work of Lukas Taegert-Atkinson on Rollup since 2017. License MIT"
  },
  "Examiner-UI/node_modules/run-parallel/README.html": {
    "href": "Examiner-UI/node_modules/run-parallel/README.html",
    "title": "run-parallel | Examiner",
    "summary": "run-parallel Run an array of functions in parallel install npm install run-parallel usage parallel(tasks, [callback]) Run the tasks array of functions in parallel, without waiting until the previous function has completed. If any of the functions pass an error to its callback, the main callback is immediately called with the value of the error. Once the tasks have completed, the results are passed to the final callback as an array. It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final callback as an object instead of an array. This can be a more readable way of handling the results. arguments tasks - An array or object containing functions to run. Each function is passed a callback(err, result) which it must call on completion with an error err (which can be null) and an optional result value. callback(err, results) - An optional callback to run once all the functions have completed. This function gets a results array (or object) containing all the result arguments passed to the task callbacks. example var parallel = require('run-parallel') parallel([ function (callback) { setTimeout(function () { callback(null, 'one') }, 200) }, function (callback) { setTimeout(function () { callback(null, 'two') }, 100) } ], // optional callback function (err, results) { // the results array will equal ['one','two'] even though // the second function had a shorter timeout. }) This module is basically equavalent to async.parallel, but it's handy to just have the one function you need instead of the kitchen sink. Modularity! Especially handy if you're serving to the browser and need to reduce your javascript bundle size. Works great in the browser with browserify! see also run-auto run-parallel-limit run-series run-waterfall license MIT. Copyright (c) Feross Aboukhadijeh."
  },
  "Examiner-UI/node_modules/scheduler/README.html": {
    "href": "Examiner-UI/node_modules/scheduler/README.html",
    "title": "scheduler | Examiner",
    "summary": "scheduler This is a package for cooperative scheduling in a browser environment. It is currently used internally by React, but we plan to make it more generic. The public API for this package is not yet finalized. Thanks The React team thanks Anton Podviaznikov for donating the scheduler package name."
  },
  "Examiner-UI/node_modules/semver/README.html": {
    "href": "Examiner-UI/node_modules/semver/README.html",
    "title": "semver(1) -- The semantic versioner for npm | Examiner",
    "summary": "semver(1) -- The semantic versioner for npm Install npm install semver Usage As a node module: const semver = require('semver') semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean(' =v1.2.3 ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true semver.minVersion('>=1.0.0') // '1.0.0' semver.valid(semver.coerce('v2')) // '2.0.0' semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7' You can also just load the module for the function that you care about if you'd like to minimize your footprint. // load the whole API at once in a single object const semver = require('semver') // or just load the bits you need // all of them listed here, just pick and choose what you want // classes const SemVer = require('semver/classes/semver') const Comparator = require('semver/classes/comparator') const Range = require('semver/classes/range') // functions for working with versions const semverParse = require('semver/functions/parse') const semverValid = require('semver/functions/valid') const semverClean = require('semver/functions/clean') const semverInc = require('semver/functions/inc') const semverDiff = require('semver/functions/diff') const semverMajor = require('semver/functions/major') const semverMinor = require('semver/functions/minor') const semverPatch = require('semver/functions/patch') const semverPrerelease = require('semver/functions/prerelease') const semverCompare = require('semver/functions/compare') const semverRcompare = require('semver/functions/rcompare') const semverCompareLoose = require('semver/functions/compare-loose') const semverCompareBuild = require('semver/functions/compare-build') const semverSort = require('semver/functions/sort') const semverRsort = require('semver/functions/rsort') // low-level comparators between versions const semverGt = require('semver/functions/gt') const semverLt = require('semver/functions/lt') const semverEq = require('semver/functions/eq') const semverNeq = require('semver/functions/neq') const semverGte = require('semver/functions/gte') const semverLte = require('semver/functions/lte') const semverCmp = require('semver/functions/cmp') const semverCoerce = require('semver/functions/coerce') // working with ranges const semverSatisfies = require('semver/functions/satisfies') const semverMaxSatisfying = require('semver/ranges/max-satisfying') const semverMinSatisfying = require('semver/ranges/min-satisfying') const semverToComparators = require('semver/ranges/to-comparators') const semverMinVersion = require('semver/ranges/min-version') const semverValidRange = require('semver/ranges/valid') const semverOutside = require('semver/ranges/outside') const semverGtr = require('semver/ranges/gtr') const semverLtr = require('semver/ranges/ltr') const semverIntersects = require('semver/ranges/intersects') const semverSimplifyRange = require('semver/ranges/simplify') const semverRangeSubset = require('semver/ranges/subset') As a command-line utility: $ semver -h A JavaScript implementation of the https://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] <version> [<version> [...]] Prints valid versions sorted by SemVer precedence Options: -r --range <range> Print versions that match the specified range. -i --increment [<level>] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, prerelease, or release. Default level is 'patch'. Only one version may be specified. --preid <identifier> Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely -n <0|1> This is the base to be used for the prerelease identifier. -p --include-prerelease Always include prerelease versions in range matching -c --coerce Coerce a string into SemVer if possible (does not imply --loose) --rtl Coerce version strings right to left --ltr Coerce version strings left to right (default) Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. Versions A \"version\" is described by the v2.0.0 specification found at https://semver.org/. A leading \"=\" or \"v\" character is stripped off and ignored. Support for stripping a leading \"v\" is kept for compatibility with v1.0.0 of the SemVer specification but should not be used anymore. Ranges A version range is a set of comparators that specify versions that satisfy the range. A comparator is composed of an operator and a version. The set of primitive operators is: < Less than <= Less than or equal to > Greater than >= Greater than or equal to = Equal. If no operator is specified, then equality is assumed, so this operator is optional but MAY be included. For example, the comparator >=1.2.7 would match the versions 1.2.7, 1.2.8, 2.5.3, and 1.3.9, but not the versions 1.2.6 or 1.1.0. The comparator >1 is equivalent to >=2.0.0 and would match the versions 2.0.0 and 3.1.0, but not the versions 1.0.1 or 1.1.0. Comparators can be joined by whitespace to form a comparator set, which is satisfied by the intersection of all of the comparators it includes. A range is composed of one or more comparator sets, joined by ||. A version matches a range if and only if every comparator in at least one of the ||-separated comparator sets is satisfied by the version. For example, the range >=1.2.7 <1.3.0 would match the versions 1.2.7, 1.2.8, and 1.2.99, but not the versions 1.2.6, 1.3.0, or 1.1.0. The range 1.2.7 || >=1.2.9 <2.0.0 would match the versions 1.2.7, 1.2.9, and 1.4.6, but not the versions 1.2.8 or 2.0.0. Prerelease Tags If a version has a prerelease tag (for example, 1.2.3-alpha.3) then it will only be allowed to satisfy comparator sets if at least one comparator with the same [major, minor, patch] tuple also has a prerelease tag. For example, the range >1.2.3-alpha.3 would be allowed to match the version 1.2.3-alpha.7, but it would not be satisfied by 3.4.5-alpha.9, even though 3.4.5-alpha.9 is technically \"greater than\" 1.2.3-alpha.3 according to the SemVer sort rules. The version range only accepts prerelease tags on the 1.2.3 version. Version 3.4.5 would satisfy the range because it does not have a prerelease flag, and 3.4.5 is greater than 1.2.3-alpha.7. The purpose of this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range-matching semantics. Second, a user who has opted into using a prerelease version has indicated the intent to use that specific set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the next set of prerelease versions. Note that this behavior can be suppressed (treating all prerelease versions as if they were normal versions, for range-matching) by setting the includePrerelease flag on the options object to any functions that do range matching. Prerelease Identifiers The method .inc takes an additional identifier string argument that will append the value of the string as a prerelease identifier: semver.inc('1.2.3', 'prerelease', 'beta') // '1.2.4-beta.0' command-line example: $ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 Which then can be used to increment further: $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 To get out of the prerelease phase, use the release option: $ semver 1.2.4-beta.1 -i release 1.2.4 Prerelease Identifier Base The method .inc takes an optional parameter 'identifierBase' string that will let you let your prerelease number as zero-based or one-based. Set to false to omit the prerelease number altogether. If you do not specify this parameter, it will default to zero-based. semver.inc('1.2.3', 'prerelease', 'beta', '1') // '1.2.4-beta.1' semver.inc('1.2.3', 'prerelease', 'beta', false) // '1.2.4-beta' command-line example: $ semver 1.2.3 -i prerelease --preid beta -n 1 1.2.4-beta.1 $ semver 1.2.3 -i prerelease --preid beta -n false 1.2.4-beta Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or ||. Hyphen Ranges X.Y.Z - A.B.C Specifies an inclusive set. 1.2.3 - 2.3.4 := >=1.2.3 <=2.3.4 If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes. 1.2 - 2.3.4 := >=1.2.0 <=2.3.4 If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts. 1.2.3 - 2.3 := >=1.2.3 <2.4.0-0 1.2.3 - 2 := >=1.2.3 <3.0.0-0 X-Ranges 1.2.x 1.X 1.2.* * Any of X, x, or * may be used to \"stand in\" for one of the numeric values in the [major, minor, patch] tuple. * := >=0.0.0 (Any non-prerelease version satisfies, unless includePrerelease is specified, in which case any version at all satisfies) 1.x := >=1.0.0 <2.0.0-0 (Matching major version) 1.2.x := >=1.2.0 <1.3.0-0 (Matching major and minor versions) A partial version range is treated as an X-Range, so the special character is in fact optional. \"\" (empty string) := * := >=0.0.0 1 := 1.x.x := >=1.0.0 <2.0.0-0 1.2 := 1.2.x := >=1.2.0 <1.3.0-0 Tilde Ranges ~1.2.3 ~1.2 ~1 Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not. ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0-0 ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0-0 (Same as 1.2.x) ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0-0 (Same as 1.x) ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0-0 ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0-0 (Same as 0.2.x) ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0-0 (Same as 0.x) ~1.2.3-beta.2 := >=1.2.3-beta.2 <1.3.0-0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4 Allows changes that do not modify the left-most non-zero element in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X. Many authors treat a 0.x version as if the x were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. ^1.2.3 := >=1.2.3 <2.0.0-0 ^0.2.3 := >=0.2.3 <0.3.0-0 ^0.0.3 := >=0.0.3 <0.0.4-0 ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0-0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. ^0.0.3-beta := >=0.0.3-beta <0.0.4-0 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta. So, 0.0.3-pr.2 would be allowed. When parsing caret ranges, a missing patch value desugars to the number 0, but will allow flexibility within that value, even if the major and minor versions are both 0. ^1.2.x := >=1.2.0 <2.0.0-0 ^0.0.x := >=0.0.0 <0.1.0-0 ^0.0 := >=0.0.0 <0.1.0-0 A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero. ^1.x := >=1.0.0 <2.0.0-0 ^0.x := >=0.0.0 <1.0.0-0 Range Grammar Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors: range-set ::= range ( logical-or range ) * logical-or ::= ( ' ' ) * '||' ( ' ' ) * range ::= hyphen | simple ( ' ' simple ) * | '' hyphen ::= partial ' - ' partial simple ::= primitive | partial | tilde | caret primitive ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial partial ::= xr ( '.' xr ( '.' xr qualifier ? )? )? xr ::= 'x' | 'X' | '*' | nr nr ::= '0' | ['1'-'9'] ( ['0'-'9'] ) * tilde ::= '~' partial caret ::= '^' partial qualifier ::= ( '-' pre )? ( '+' build )? pre ::= parts build ::= parts parts ::= part ( '.' part ) * part ::= nr | [-0-9A-Za-z]+ Functions All methods and classes take a final options object argument. All options in this object are false by default. The options supported are: loose: Be more forgiving about not-quite-valid semver strings. (Any resulting output will always be 100% strict compliant, of course.) For backwards compatibility reasons, if the options argument is a boolean value instead of an object, it is interpreted to be the loose param. includePrerelease: Set to suppress the default behavior of excluding prerelease tagged versions from ranges unless they are explicitly opted into. Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse. valid(v): Return the parsed version, or null if it's not valid. inc(v, releaseType, options, identifier, identifierBase): Return the version incremented by the release type (major, premajor, minor, preminor, patch, prepatch, prerelease, or release), or null if it's not valid premajor in one call will bump the version up to the next major version and down to a prerelease of that major version. preminor, and prepatch work the same way. If called from a non-prerelease version, prerelease will work the same as prepatch. It increments the patch version and then makes a prerelease. If the input version is already a prerelease it simply increments it. release will remove any prerelease part of the version. identifier can be used to prefix premajor, preminor, prepatch, or prerelease version increments. identifierBase is the base to be used for the prerelease identifier. prerelease(v): Returns an array of prerelease components, or null if none exist. Example: prerelease('1.2.3-alpha.1') -> ['alpha', 1] major(v): Return the major version number. minor(v): Return the minor version number. patch(v): Return the patch version number. intersects(r1, r2, loose): Return true if the two supplied ranges or comparators intersect. parse(v): Attempt to parse a string as a semantic version, returning either a SemVer object or null. Comparison gt(v1, v2): v1 > v2 gte(v1, v2): v1 >= v2 lt(v1, v2): v1 < v2 lte(v1, v2): v1 <= v2 eq(v1, v2): v1 == v2 This is true if they're logically equivalent, even if they're not the same string. You already know how to compare strings. neq(v1, v2): v1 != v2 The opposite of eq. cmp(v1, comparator, v2): Pass in a comparison string, and it'll call the corresponding function above. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided. compare(v1, v2): Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort(). rcompare(v1, v2): The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort(). compareBuild(v1, v2): The same as compare but considers build when two versions are equal. Sorts in ascending order if passed to Array.sort(). compareLoose(v1, v2): Short for compare(v1, v2, { loose: true }). diff(v1, v2): Returns the difference between two versions by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if the versions are the same. Sorting sort(versions): Returns a sorted array of versions based on the compareBuild function. rsort(versions): The reverse of sort. Returns an array of versions based on the compareBuild function in descending order. Comparators intersects(comparator): Return true if the comparators intersect Ranges validRange(range): Return the valid range or null if it's not valid. satisfies(version, range): Return true if the version satisfies the range. maxSatisfying(versions, range): Return the highest version in the list that satisfies the range, or null if none of them do. minSatisfying(versions, range): Return the lowest version in the list that satisfies the range, or null if none of them do. minVersion(range): Return the lowest version that can match the given range. gtr(version, range): Return true if the version is greater than all the versions possible in the range. ltr(version, range): Return true if the version is less than all the versions possible in the range. outside(version, range, hilo): Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<'. (This is the function called by gtr and ltr.) intersects(range): Return true if any of the range comparators intersect. simplifyRange(versions, range): Return a \"simplified\" range that matches the same items in the versions list as the range specified. Note that it does not guarantee that it would match the same versions in all cases, only for the set of versions provided. This is useful when generating ranges by joining together multiple versions with || programmatically, to provide the user with something a bit more ergonomic. If the provided range is shorter in string-length than the generated range, then that is returned. subset(subRange, superRange): Return true if the subRange range is entirely contained by the superRange range. Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, or satisfy a range! For example, the range 1.2 <1.2.9 || >2.0.0 would have a hole from 1.2.9 until 2.0.0, so version 1.2.10 would not be greater than the range (because 2.0.1 satisfies, which is higher), nor less than the range (since 1.2.8 satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the satisfies(version, range) function. Coercion coerce(version, options): Coerces a string to semver if possible This aims to provide a very forgiving translation of a non-semver string to semver. It looks for the first digit in a string and consumes all remaining characters which satisfy at least a partial semver (e.g., 1, 1.2, 1.2.3) up to the max permitted length (256 characters). Longer versions are simply truncated (4.6.3.9.2-alpha2 becomes 4.6.3). All surrounding text is simply ignored (v3.4 replaces v3.3.1 becomes 3.4.0). Only text which lacks digits will fail coercion (version one is not valid). The maximum length for any semver component considered for coercion is 16 characters; longer components will be ignored (10000000000000000.4.7.4 becomes 4.7.4). The maximum value for any semver component is Number.MAX_SAFE_INTEGER || (2**53 - 1); higher value components are invalid (9999999999999999.4.7.4 is likely invalid). If the options.rtl flag is set, then coerce will return the right-most coercible tuple that does not share an ending index with a longer coercible tuple. For example, 1.2.3.4 will return 2.3.4 in rtl mode, not 4.0.0. 1.2.3/4 will return 4.0.0, because the 4 is not a part of any other overlapping SemVer tuple. If the options.includePrerelease flag is set, then the coerce result will contain prerelease and build parts of a version. For example, 1.2.3.4-rc.1+rev.2 will preserve prerelease rc.1 and build rev.2 in the result. Clean clean(version): Clean a string to be a valid semver if possible This will return a cleaned and trimmed semver version. If the provided version is not valid a null will be returned. This does not work for ranges. ex. s.clean(' = v 2.1.5foo'): null s.clean(' = v 2.1.5foo', { loose: true }): '2.1.5-foo' s.clean(' = v 2.1.5-foo'): null s.clean(' = v 2.1.5-foo', { loose: true }): '2.1.5-foo' s.clean('=v2.1.5'): '2.1.5' s.clean(' =v2.1.5'): '2.1.5' s.clean(' 2.1.5 '): '2.1.5' s.clean('~1.0.0'): null Constants As a convenience, helper constants are exported to provide information about what node-semver supports: RELEASE_TYPES major premajor minor preminor patch prepatch prerelease const semver = require('semver'); if (semver.RELEASE_TYPES.includes(arbitraryUserInput)) { console.log('This is a valid release type!'); } else { console.warn('This is NOT a valid release type!'); } SEMVER_SPEC_VERSION 2.0.0 const semver = require('semver'); console.log('We are currently using the semver specification version:', semver.SEMVER_SPEC_VERSION); Exported Modules You may pull in just the part of this semver utility that you need if you are sensitive to packing and tree-shaking concerns. The main require('semver') export uses getter functions to lazily load the parts of the API that are used. The following modules are available: require('semver') require('semver/classes') require('semver/classes/comparator') require('semver/classes/range') require('semver/classes/semver') require('semver/functions/clean') require('semver/functions/cmp') require('semver/functions/coerce') require('semver/functions/compare') require('semver/functions/compare-build') require('semver/functions/compare-loose') require('semver/functions/diff') require('semver/functions/eq') require('semver/functions/gt') require('semver/functions/gte') require('semver/functions/inc') require('semver/functions/lt') require('semver/functions/lte') require('semver/functions/major') require('semver/functions/minor') require('semver/functions/neq') require('semver/functions/parse') require('semver/functions/patch') require('semver/functions/prerelease') require('semver/functions/rcompare') require('semver/functions/rsort') require('semver/functions/satisfies') require('semver/functions/sort') require('semver/functions/valid') require('semver/ranges/gtr') require('semver/ranges/intersects') require('semver/ranges/ltr') require('semver/ranges/max-satisfying') require('semver/ranges/min-satisfying') require('semver/ranges/min-version') require('semver/ranges/outside') require('semver/ranges/simplify') require('semver/ranges/subset') require('semver/ranges/to-comparators') require('semver/ranges/valid')"
  },
  "Examiner-UI/node_modules/set-cookie-parser/README.html": {
    "href": "Examiner-UI/node_modules/set-cookie-parser/README.html",
    "title": "set-cookie-parser | Examiner",
    "summary": "set-cookie-parser ℹ️ Note for current users: I'm considering some changes for the next major version and would appreciate your feedback: https://github.com/nfriedly/set-cookie-parser/discussions/68 Parses set-cookie headers into JavaScript objects Accepts a single set-cookie header value, an array of set-cookie header values, a Node.js response object, or a fetch() Response object that may have 0 or more set-cookie headers. Also accepts an optional options object. Defaults: { decodeValues: true, // Calls decodeURIComponent on each value - default: true map: false, // Return an object instead of an array - default: false silent: false, // Suppress the warning that is logged when called on a request instead of a response - default: false } Returns either an array of cookie objects or a map of name => cookie object with {map: true}. Each cookie object will have, at a minimum name and value properties, and may have additional properties depending on the set-cookie header: name - cookie name (string) value - cookie value (string) path - URL path to limit the scope to (string or undefined) domain - domain to expand the scope to (string or undefined, may begin with \".\" to indicate the named domain or any subdomain of it) expires - absolute expiration date for the cookie (Date object or undefined) maxAge - relative expiration time of the cookie in seconds from when the client receives it (integer or undefined) Note: when using with express's res.cookie() method, multiply maxAge by 1000 to convert to milliseconds. secure - indicates cookie should only be sent over HTTPs (true or undefined) httpOnly - indicates cookie should not be accessible to client-side JavaScript (true or undefined) sameSite - indicates if cookie should be included in cross-site requests (more info) (string or undefined) Note: valid values are \"Strict\", \"Lax\", and \"None\", but set-cookie-parser coppies the value verbatim and does not perform any validation. partitioned - indicates cookie should be scoped to the combination of 3rd party domain + top page domain (more info) (true or undefined) (The output format is loosely based on the input format of https://www.npmjs.com/package/cookie) Install $ npm install --save set-cookie-parser Usage Get array of cookie objects var http = require('http'); var setCookie = require('set-cookie-parser'); http.get('http://example.com', function(res) { var cookies = setCookie.parse(res, { decodeValues: true // default: true }); cookies.forEach(console.log); } Example output: [ { name: 'bam', value: 'baz' }, { name: 'foo', value: 'bar', path: '/', expires: new Date('Tue Jul 01 2025 06:01:11 GMT-0400 (EDT)'), maxAge: 1000, domain: '.example.com', secure: true, httpOnly: true, sameSite: 'lax' } ] Get map of cookie objects var http = require('http'); var setCookie = require('set-cookie-parser'); http.get('http://example.com', function(res) { var cookies = setCookie.parse(res, { decodeValues: true, // default: true map: true // default: false }); var desiredCookie = cookies['session']; console.log(desiredCookie); }); Example output: { bam: { name: 'bam', value: 'baz' }, foo: { name: 'foo', value: 'bar', path: '/', expires: new Date('Tue Jul 01 2025 06:01:11 GMT-0400 (EDT)'), maxAge: 1000, domain: '.example.com', secure: true, httpOnly: true, sameSite: 'lax' } } Creating a new, modified set-cookie header This library can be used in conjunction with the cookie library to modify and replace set-cookie headers: const libCookie = require('cookie'); const setCookie = require('set-cookie-parser'); function modifySetCookie(res){ // parse the set-cookie headers with this library let cookies = setCookie.parse(res); // modify the cookies here // ... // create new set-cookie headers using the cookie library res.headers['set-cookie'] = cookies.map(function(cookie) { return libCookie.serialize(cookie.name, cookie.value, cookie); }); } See a real-world example of this in unblocker Usage in React Native (and with some other fetch implementations) React Native follows the Fetch spec more closely and combines all of the Set-Cookie header values into a single string. The splitCookiesString method reverses this. var setCookie = require('set-cookie-parser'); var response = fetch(/*...*/); // This is mainly for React Native; Node.js does not combine set-cookie headers. var combinedCookieHeader = response.headers.get('Set-Cookie'); var splitCookieHeaders = setCookie.splitCookiesString(combinedCookieHeader) var cookies = setCookie.parse(splitCookieHeaders); console.log(cookies); // should be an array of cookies This behavior may become a default part of parse in the next major release, but requires the extra step for now. Note that the fetch() spec now includes a getSetCookie() method that provides un-combined Set-Cookie headers. This library will automatically use that method if it is present. API parse(input, [options]) Parses cookies from a string, array of strings, or a http response object. Always returns an array, regardless of input format. (Unless the map option is set, in which case it always returns an object.) parseString(individualSetCookieHeader, [options]) Parses a single set-cookie header value string. Options default is {decodeValues: true}. Used under-the-hood by parse(). Returns an object. splitCookiesString(combinedSetCookieHeader) It's uncommon, but the HTTP spec does allow for multiple of the same header to have their values combined (comma-separated) into a single header. This method splits apart a combined header without choking on commas that appear within a cookie's value (or expiration date). Returns an array of strings that may be passed to parse(). References RFC 6265: HTTP State Management Mechanism draft-ietf-httpbis-rfc6265bis-10 License MIT © Nathan Friedly"
  },
  "Examiner-UI/node_modules/shebang-command/readme.html": {
    "href": "Examiner-UI/node_modules/shebang-command/readme.html",
    "title": "shebang-command | Examiner",
    "summary": "shebang-command Get the command from a shebang Install $ npm install shebang-command Usage const shebangCommand = require('shebang-command'); shebangCommand('#!/usr/bin/env node'); //=> 'node' shebangCommand('#!/bin/bash'); //=> 'bash' API shebangCommand(string) string Type: string String containing a shebang."
  },
  "Examiner-UI/node_modules/shebang-regex/readme.html": {
    "href": "Examiner-UI/node_modules/shebang-regex/readme.html",
    "title": "shebang-regex | Examiner",
    "summary": "shebang-regex Regular expression for matching a shebang line Install $ npm install shebang-regex Usage const shebangRegex = require('shebang-regex'); const string = '#!/usr/bin/env node\\nconsole.log(\"unicorns\");'; shebangRegex.test(string); //=> true shebangRegex.exec(string)[0]; //=> '#!/usr/bin/env node' shebangRegex.exec(string)[1]; //=> '/usr/bin/env node' License MIT © Sindre Sorhus"
  },
  "Examiner-UI/node_modules/source-map-js/README.html": {
    "href": "Examiner-UI/node_modules/source-map-js/README.html",
    "title": "Source Map JS | Examiner",
    "summary": "Source Map JS Difference between original source-map: TL,DR: it's fork of original source-map@0.6, but with perfomance optimizations. This journey starts from source-map@0.7.0. Some part of it was rewritten to Rust and WASM and API became async. It's still a major block for many libraries like PostCSS or Sass for example because they need to migrate the whole API to the async way. This is the reason why 0.6.1 has 2x more downloads than 0.7.3 while it's faster several times. More important that WASM version has some optimizations in JS code too. This is why community asked to create branch for 0.6 version and port these optimizations but, sadly, the answer was «no». A bit later I discovered the issue created by Ben Rothman (@benthemonkey) with no response at all. Roman Dvornov (@lahmatiy) wrote a serveral posts (russian, only, sorry) about source-map library in his own Telegram channel. He mentioned the article «Maybe you don't need Rust and WASM to speed up your JS» written by Vyacheslav Egorov (@mraleph). This article contains optimizations and hacks that lead to almost the same performance compare to WASM implementation. I decided to fork the original source-map and port these optimizations from the article and several others PR from the original source-map. This is a library to generate and consume the source map format described here. Use with Node $ npm install source-map-js Table of Contents Examples Consuming a source map Generating a source map With SourceNode (high level API) With SourceMapGenerator (low level API) API SourceMapConsumer new SourceMapConsumer(rawSourceMap) SourceMapConsumer.prototype.computeColumnSpans() SourceMapConsumer.prototype.originalPositionFor(generatedPosition) SourceMapConsumer.prototype.generatedPositionFor(originalPosition) SourceMapConsumer.prototype.allGeneratedPositionsFor(originalPosition) SourceMapConsumer.prototype.hasContentsOfAllSources() SourceMapConsumer.prototype.sourceContentFor(source[, returnNullOnMissing]) SourceMapConsumer.prototype.eachMapping(callback, context, order) SourceMapGenerator new SourceMapGenerator([startOfSourceMap]) SourceMapGenerator.fromSourceMap(sourceMapConsumer) SourceMapGenerator.prototype.addMapping(mapping) SourceMapGenerator.prototype.setSourceContent(sourceFile, sourceContent) SourceMapGenerator.prototype.applySourceMap(sourceMapConsumer[, sourceFile[, sourceMapPath]]) SourceMapGenerator.prototype.toString() SourceNode new SourceNode([line, column, source[, chunk[, name]]]) SourceNode.fromStringWithSourceMap(code, sourceMapConsumer[, relativePath]) SourceNode.prototype.add(chunk) SourceNode.prototype.prepend(chunk) SourceNode.prototype.setSourceContent(sourceFile, sourceContent) SourceNode.prototype.walk(fn) SourceNode.prototype.walkSourceContents(fn) SourceNode.prototype.join(sep) SourceNode.prototype.replaceRight(pattern, replacement) SourceNode.prototype.toString() SourceNode.prototype.toStringWithSourceMap([startOfSourceMap]) Examples Consuming a source map var rawSourceMap = { version: 3, file: 'min.js', names: ['bar', 'baz', 'n'], sources: ['one.js', 'two.js'], sourceRoot: 'http://example.com/www/js/', mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA' }; var smc = new SourceMapConsumer(rawSourceMap); console.log(smc.sources); // [ 'http://example.com/www/js/one.js', // 'http://example.com/www/js/two.js' ] console.log(smc.originalPositionFor({ line: 2, column: 28 })); // { source: 'http://example.com/www/js/two.js', // line: 2, // column: 10, // name: 'n' } console.log(smc.generatedPositionFor({ source: 'http://example.com/www/js/two.js', line: 2, column: 10 })); // { line: 2, column: 28 } smc.eachMapping(function (m) { // ... }); Generating a source map In depth guide: Compiling to JavaScript, and Debugging with Source Maps With SourceNode (high level API) function compile(ast) { switch (ast.type) { case 'BinaryExpression': return new SourceNode( ast.location.line, ast.location.column, ast.location.source, [compile(ast.left), \" + \", compile(ast.right)] ); case 'Literal': return new SourceNode( ast.location.line, ast.location.column, ast.location.source, String(ast.value) ); // ... default: throw new Error(\"Bad AST\"); } } var ast = parse(\"40 + 2\", \"add.js\"); console.log(compile(ast).toStringWithSourceMap({ file: 'add.js' })); // { code: '40 + 2', // map: [object SourceMapGenerator] } With SourceMapGenerator (low level API) var map = new SourceMapGenerator({ file: \"source-mapped.js\" }); map.addMapping({ generated: { line: 10, column: 35 }, source: \"foo.js\", original: { line: 33, column: 2 }, name: \"christopher\" }); console.log(map.toString()); // '{\"version\":3,\"file\":\"source-mapped.js\",\"sources\":[\"foo.js\"],\"names\":[\"christopher\"],\"mappings\":\";;;;;;;;;mCAgCEA\"}' API Get a reference to the module: // Node.js var sourceMap = require('source-map'); // Browser builds var sourceMap = window.sourceMap; // Inside Firefox const sourceMap = require(\"devtools/toolkit/sourcemap/source-map.js\"); SourceMapConsumer A SourceMapConsumer instance represents a parsed source map which we can query for information about the original file positions by giving it a file position in the generated source. new SourceMapConsumer(rawSourceMap) The only parameter is the raw source map (either as a string which can be JSON.parse'd, or an object). According to the spec, source maps have the following attributes: version: Which version of the source map spec this map is following. sources: An array of URLs to the original source files. names: An array of identifiers which can be referenced by individual mappings. sourceRoot: Optional. The URL root from which all sources are relative. sourcesContent: Optional. An array of contents of the original source files. mappings: A string of base64 VLQs which contain the actual mappings. file: Optional. The generated filename this source map is associated with. var consumer = new sourceMap.SourceMapConsumer(rawSourceMapJsonData); SourceMapConsumer.prototype.computeColumnSpans() Compute the last column for each generated mapping. The last column is inclusive. // Before: consumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" }) // [ { line: 2, // column: 1 }, // { line: 2, // column: 10 }, // { line: 2, // column: 20 } ] consumer.computeColumnSpans(); // After: consumer.allGeneratedPositionsFor({ line: 2, source: \"foo.coffee\" }) // [ { line: 2, // column: 1, // lastColumn: 9 }, // { line: 2, // column: 10, // lastColumn: 19 }, // { line: 2, // column: 20, // lastColumn: Infinity } ] SourceMapConsumer.prototype.originalPositionFor(generatedPosition) Returns the original source, line, and column information for the generated source's line and column positions provided. The only argument is an object with the following properties: line: The line number in the generated source. Line numbers in this library are 1-based (note that the underlying source map specification uses 0-based line numbers -- this library handles the translation). column: The column number in the generated source. Column numbers in this library are 0-based. bias: Either SourceMapConsumer.GREATEST_LOWER_BOUND or SourceMapConsumer.LEAST_UPPER_BOUND. Specifies whether to return the closest element that is smaller than or greater than the one we are searching for, respectively, if the exact element cannot be found. Defaults to SourceMapConsumer.GREATEST_LOWER_BOUND. and an object is returned with the following properties: source: The original source file, or null if this information is not available. line: The line number in the original source, or null if this information is not available. The line number is 1-based. column: The column number in the original source, or null if this information is not available. The column number is 0-based. name: The original identifier, or null if this information is not available. consumer.originalPositionFor({ line: 2, column: 10 }) // { source: 'foo.coffee', // line: 2, // column: 2, // name: null } consumer.originalPositionFor({ line: 99999999999999999, column: 999999999999999 }) // { source: null, // line: null, // column: null, // name: null } SourceMapConsumer.prototype.generatedPositionFor(originalPosition) Returns the generated line and column information for the original source, line, and column positions provided. The only argument is an object with the following properties: source: The filename of the original source. line: The line number in the original source. The line number is 1-based. column: The column number in the original source. The column number is 0-based. and an object is returned with the following properties: line: The line number in the generated source, or null. The line number is 1-based. column: The column number in the generated source, or null. The column number is 0-based. consumer.generatedPositionFor({ source: \"example.js\", line: 2, column: 10 }) // { line: 1, // column: 56 } SourceMapConsumer.prototype.allGeneratedPositionsFor(originalPosition) Returns all generated line and column information for the original source, line, and column provided. If no column is provided, returns all mappings corresponding to a either the line we are searching for or the next closest line that has any mappings. Otherwise, returns all mappings corresponding to the given line and either the column we are searching for or the next closest column that has any offsets. The only argument is an object with the following properties: source: The filename of the original source. line: The line number in the original source. The line number is 1-based. column: Optional. The column number in the original source. The column number is 0-based. and an array of objects is returned, each with the following properties: line: The line number in the generated source, or null. The line number is 1-based. column: The column number in the generated source, or null. The column number is 0-based. consumer.allGeneratedpositionsfor({ line: 2, source: \"foo.coffee\" }) // [ { line: 2, // column: 1 }, // { line: 2, // column: 10 }, // { line: 2, // column: 20 } ] SourceMapConsumer.prototype.hasContentsOfAllSources() Return true if we have the embedded source content for every source listed in the source map, false otherwise. In other words, if this method returns true, then consumer.sourceContentFor(s) will succeed for every source s in consumer.sources. // ... if (consumer.hasContentsOfAllSources()) { consumerReadyCallback(consumer); } else { fetchSources(consumer, consumerReadyCallback); } // ... SourceMapConsumer.prototype.sourceContentFor(source[, returnNullOnMissing]) Returns the original source content for the source provided. The only argument is the URL of the original source file. If the source content for the given source is not found, then an error is thrown. Optionally, pass true as the second param to have null returned instead. consumer.sources // [ \"my-cool-lib.clj\" ] consumer.sourceContentFor(\"my-cool-lib.clj\") // \"...\" consumer.sourceContentFor(\"this is not in the source map\"); // Error: \"this is not in the source map\" is not in the source map consumer.sourceContentFor(\"this is not in the source map\", true); // null SourceMapConsumer.prototype.eachMapping(callback, context, order) Iterate over each mapping between an original source/line/column and a generated line/column in this source map. callback: The function that is called with each mapping. Mappings have the form { source, generatedLine, generatedColumn, originalLine, originalColumn, name } context: Optional. If specified, this object will be the value of this every time that callback is called. order: Either SourceMapConsumer.GENERATED_ORDER or SourceMapConsumer.ORIGINAL_ORDER. Specifies whether you want to iterate over the mappings sorted by the generated file's line/column order or the original's source/line/column order, respectively. Defaults to SourceMapConsumer.GENERATED_ORDER. consumer.eachMapping(function (m) { console.log(m); }) // ... // { source: 'illmatic.js', // generatedLine: 1, // generatedColumn: 0, // originalLine: 1, // originalColumn: 0, // name: null } // { source: 'illmatic.js', // generatedLine: 2, // generatedColumn: 0, // originalLine: 2, // originalColumn: 0, // name: null } // ... SourceMapGenerator An instance of the SourceMapGenerator represents a source map which is being built incrementally. new SourceMapGenerator([startOfSourceMap]) You may pass an object with the following properties: file: The filename of the generated source that this source map is associated with. sourceRoot: A root for all relative URLs in this source map. skipValidation: Optional. When true, disables validation of mappings as they are added. This can improve performance but should be used with discretion, as a last resort. Even then, one should avoid using this flag when running tests, if possible. ignoreInvalidMapping: Optional. When true, instead of throwing error on invalid mapping, it will be ignored. var generator = new sourceMap.SourceMapGenerator({ file: \"my-generated-javascript-file.js\", sourceRoot: \"http://example.com/app/js/\" }); SourceMapGenerator.fromSourceMap(sourceMapConsumer, sourceMapGeneratorOptions) Creates a new SourceMapGenerator from an existing SourceMapConsumer instance. sourceMapConsumer The SourceMap. sourceMapGeneratorOptions options that will be passed to the SourceMapGenerator constructor which used under the hood. var generator = sourceMap.SourceMapGenerator.fromSourceMap(consumer, { ignoreInvalidMapping: true, }); SourceMapGenerator.prototype.addMapping(mapping) Add a single mapping from original source line and column to the generated source's line and column for this source map being created. The mapping object should have the following properties: generated: An object with the generated line and column positions. original: An object with the original line and column positions. source: The original source file (relative to the sourceRoot). name: An optional original token name for this mapping. generator.addMapping({ source: \"module-one.scm\", original: { line: 128, column: 0 }, generated: { line: 3, column: 456 } }) SourceMapGenerator.prototype.setSourceContent(sourceFile, sourceContent) Set the source content for an original source file. sourceFile the URL of the original source file. sourceContent the content of the source file. generator.setSourceContent(\"module-one.scm\", fs.readFileSync(\"path/to/module-one.scm\")) SourceMapGenerator.prototype.applySourceMap(sourceMapConsumer[, sourceFile[, sourceMapPath]]) Applies a SourceMap for a source file to the SourceMap. Each mapping to the supplied source file is rewritten using the supplied SourceMap. Note: The resolution for the resulting mappings is the minimum of this map and the supplied map. sourceMapConsumer: The SourceMap to be applied. sourceFile: Optional. The filename of the source file. If omitted, sourceMapConsumer.file will be used, if it exists. Otherwise an error will be thrown. sourceMapPath: Optional. The dirname of the path to the SourceMap to be applied. If relative, it is relative to the SourceMap. This parameter is needed when the two SourceMaps aren't in the same directory, and the SourceMap to be applied contains relative source paths. If so, those relative source paths need to be rewritten relative to the SourceMap. If omitted, it is assumed that both SourceMaps are in the same directory, thus not needing any rewriting. (Supplying '.' has the same effect.) SourceMapGenerator.prototype.toString() Renders the source map being generated to a string. generator.toString() // '{\"version\":3,\"sources\":[\"module-one.scm\"],\"names\":[],\"mappings\":\"...snip...\",\"file\":\"my-generated-javascript-file.js\",\"sourceRoot\":\"http://example.com/app/js/\"}' SourceNode SourceNodes provide a way to abstract over interpolating and/or concatenating snippets of generated JavaScript source code, while maintaining the line and column information associated between those snippets and the original source code. This is useful as the final intermediate representation a compiler might use before outputting the generated JS and source map. new SourceNode([line, column, source[, chunk[, name]]]) line: The original line number associated with this source node, or null if it isn't associated with an original line. The line number is 1-based. column: The original column number associated with this source node, or null if it isn't associated with an original column. The column number is 0-based. source: The original source's filename; null if no filename is provided. chunk: Optional. Is immediately passed to SourceNode.prototype.add, see below. name: Optional. The original identifier. var node = new SourceNode(1, 2, \"a.cpp\", [ new SourceNode(3, 4, \"b.cpp\", \"extern int status;\\n\"), new SourceNode(5, 6, \"c.cpp\", \"std::string* make_string(size_t n);\\n\"), new SourceNode(7, 8, \"d.cpp\", \"int main(int argc, char** argv) {}\\n\"), ]); SourceNode.fromStringWithSourceMap(code, sourceMapConsumer[, relativePath]) Creates a SourceNode from generated code and a SourceMapConsumer. code: The generated code sourceMapConsumer The SourceMap for the generated code relativePath The optional path that relative sources in sourceMapConsumer should be relative to. var consumer = new SourceMapConsumer(fs.readFileSync(\"path/to/my-file.js.map\", \"utf8\")); var node = SourceNode.fromStringWithSourceMap(fs.readFileSync(\"path/to/my-file.js\"), consumer); SourceNode.prototype.add(chunk) Add a chunk of generated JS to this source node. chunk: A string snippet of generated JS code, another instance of SourceNode, or an array where each member is one of those things. node.add(\" + \"); node.add(otherNode); node.add([leftHandOperandNode, \" + \", rightHandOperandNode]); SourceNode.prototype.prepend(chunk) Prepend a chunk of generated JS to this source node. chunk: A string snippet of generated JS code, another instance of SourceNode, or an array where each member is one of those things. node.prepend(\"/** Build Id: f783haef86324gf **/\\n\\n\"); SourceNode.prototype.setSourceContent(sourceFile, sourceContent) Set the source content for a source file. This will be added to the SourceMap in the sourcesContent field. sourceFile: The filename of the source file sourceContent: The content of the source file node.setSourceContent(\"module-one.scm\", fs.readFileSync(\"path/to/module-one.scm\")) SourceNode.prototype.walk(fn) Walk over the tree of JS snippets in this node and its children. The walking function is called once for each snippet of JS and is passed that snippet and the its original associated source's line/column location. fn: The traversal function. var node = new SourceNode(1, 2, \"a.js\", [ new SourceNode(3, 4, \"b.js\", \"uno\"), \"dos\", [ \"tres\", new SourceNode(5, 6, \"c.js\", \"quatro\") ] ]); node.walk(function (code, loc) { console.log(\"WALK:\", code, loc); }) // WALK: uno { source: 'b.js', line: 3, column: 4, name: null } // WALK: dos { source: 'a.js', line: 1, column: 2, name: null } // WALK: tres { source: 'a.js', line: 1, column: 2, name: null } // WALK: quatro { source: 'c.js', line: 5, column: 6, name: null } SourceNode.prototype.walkSourceContents(fn) Walk over the tree of SourceNodes. The walking function is called for each source file content and is passed the filename and source content. fn: The traversal function. var a = new SourceNode(1, 2, \"a.js\", \"generated from a\"); a.setSourceContent(\"a.js\", \"original a\"); var b = new SourceNode(1, 2, \"b.js\", \"generated from b\"); b.setSourceContent(\"b.js\", \"original b\"); var c = new SourceNode(1, 2, \"c.js\", \"generated from c\"); c.setSourceContent(\"c.js\", \"original c\"); var node = new SourceNode(null, null, null, [a, b, c]); node.walkSourceContents(function (source, contents) { console.log(\"WALK:\", source, \":\", contents); }) // WALK: a.js : original a // WALK: b.js : original b // WALK: c.js : original c SourceNode.prototype.join(sep) Like Array.prototype.join except for SourceNodes. Inserts the separator between each of this source node's children. sep: The separator. var lhs = new SourceNode(1, 2, \"a.rs\", \"my_copy\"); var operand = new SourceNode(3, 4, \"a.rs\", \"=\"); var rhs = new SourceNode(5, 6, \"a.rs\", \"orig.clone()\"); var node = new SourceNode(null, null, null, [ lhs, operand, rhs ]); var joinedNode = node.join(\" \"); SourceNode.prototype.replaceRight(pattern, replacement) Call String.prototype.replace on the very right-most source snippet. Useful for trimming white space from the end of a source node, etc. pattern: The pattern to replace. replacement: The thing to replace the pattern with. // Trim trailing white space. node.replaceRight(/\\s*$/, \"\"); SourceNode.prototype.toString() Return the string representation of this source node. Walks over the tree and concatenates all the various snippets together to one string. var node = new SourceNode(1, 2, \"a.js\", [ new SourceNode(3, 4, \"b.js\", \"uno\"), \"dos\", [ \"tres\", new SourceNode(5, 6, \"c.js\", \"quatro\") ] ]); node.toString() // 'unodostresquatro' SourceNode.prototype.toStringWithSourceMap([startOfSourceMap]) Returns the string representation of this tree of source nodes, plus a SourceMapGenerator which contains all the mappings between the generated and original sources. The arguments are the same as those to new SourceMapGenerator. var node = new SourceNode(1, 2, \"a.js\", [ new SourceNode(3, 4, \"b.js\", \"uno\"), \"dos\", [ \"tres\", new SourceNode(5, 6, \"c.js\", \"quatro\") ] ]); node.toStringWithSourceMap({ file: \"my-output-file.js\" }) // { code: 'unodostresquatro', // map: [object SourceMapGenerator] }"
  },
  "Examiner-UI/node_modules/strip-json-comments/readme.html": {
    "href": "Examiner-UI/node_modules/strip-json-comments/readme.html",
    "title": "strip-json-comments | Examiner",
    "summary": "strip-json-comments Strip comments from JSON. Lets you use comments in your JSON files! This is now possible: { // Rainbows \"unicorn\": /* ❤ */ \"cake\" } It will replace single-line comments // and multi-line comments /**/ with whitespace. This allows JSON error positions to remain as close as possible to the original source. Also available as a Gulp/Grunt/Broccoli plugin. Install $ npm install strip-json-comments Usage const json = `{ // Rainbows \"unicorn\": /* ❤ */ \"cake\" }`; JSON.parse(stripJsonComments(json)); //=> {unicorn: 'cake'} API stripJsonComments(jsonString, options?) jsonString Type: string Accepts a string with JSON and returns a string without comments. options Type: object whitespace Type: boolean Default: true Replace comments with whitespace instead of stripping them entirely. Benchmark $ npm run bench Related strip-json-comments-cli - CLI for this module strip-css-comments - Strip comments from CSS Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/supports-color/readme.html": {
    "href": "Examiner-UI/node_modules/supports-color/readme.html",
    "title": "supports-color | Examiner",
    "summary": "supports-color Detect whether a terminal supports color Install $ npm install supports-color Usage const supportsColor = require('supports-color'); if (supportsColor.stdout) { console.log('Terminal stdout supports color'); } if (supportsColor.stdout.has256) { console.log('Terminal stdout supports 256 colors'); } if (supportsColor.stderr.has16m) { console.log('Terminal stderr supports 16 million colors (truecolor)'); } API Returns an Object with a stdout and stderr property for testing either streams. Each property is an Object, or false if color is not supported. The stdout/stderr objects specifies a level of support for color through a .level property and a corresponding flag: .level = 1 and .hasBasic = true: Basic color support (16 colors) .level = 2 and .has256 = true: 256 color support .level = 3 and .has16m = true: Truecolor support (16 million colors) Info It obeys the --color and --no-color CLI flags. For situations where using --color is not possible, use the environment variable FORCE_COLOR=1 (level 1), FORCE_COLOR=2 (level 2), or FORCE_COLOR=3 (level 3) to forcefully enable color, or FORCE_COLOR=0 to forcefully disable. The use of FORCE_COLOR overrides all other color support checks. Explicit 256/Truecolor mode can be enabled using the --color=256 and --color=16m flags, respectively. Related supports-color-cli - CLI for this module chalk - Terminal string styling done right Maintainers Sindre Sorhus Josh Junon Get professional support for this package with a Tidelift subscription Tidelift helps make open source sustainable for maintainers while giving companies assurances about security, maintenance, and licensing for their dependencies."
  },
  "Examiner-UI/node_modules/tinycolor2/README.html": {
    "href": "Examiner-UI/node_modules/tinycolor2/README.html",
    "title": "TinyColor | Examiner",
    "summary": "TinyColor JavaScript color tooling TinyColor is a small, fast library for color manipulation and conversion in JavaScript. It allows many forms of input, while providing color conversions and other color utility functions. It has no dependencies. Including in node tinycolor can be installed from npm: npm install tinycolor2 Then it can be used in your script like so: var tinycolor = require(\"tinycolor2\"); var color = tinycolor(\"red\"); Or in a module like so: import tinycolor from \"tinycolor2\"; var color = tinycolor(\"red\"); Including in a browser The package can be bundled from npm, but if you prefer to download it locally you have two choices: ESM It can be used as a module by downloading npm/esm/tinycolor.js or using https://esm.sh/tinycolor2. <script type='module'> import tinycolor from \"https://esm.sh/tinycolor2\"; var color = tinycolor(\"red\"); </script> UMD You can use it directly in a script tag by downloading the UMD file from npm/cjs/tinycolor.js: <script type='text/javascript' src='tinycolor.js'></script> <script type='text/javascript'> var color = tinycolor(\"red\"); </script> Usage Call tinycolor(input) or new tinycolor(input), and you will have an object with the following properties. See Accepted String Input and Accepted Object Input below for more information about what is accepted. Accepted String Input The string parsing is very permissive. It is meant to make typing a color as input as easy as possible. All commas, percentages, parenthesis are optional, and most input allow either 0-1, 0%-100%, or 0-n (where n is either 100, 255, or 360 depending on the value). HSL and HSV both require either 0%-100% or 0-1 for the S/L/V properties. The H (hue) can have values between 0%-100% or 0-360. RGB input requires either 0-255 or 0%-100%. If you call tinycolor.fromRatio, RGB and Hue input can also accept 0-1. Here are some examples of string input: Hex, 8-digit (RGBA) Hex tinycolor(\"#000\"); tinycolor(\"000\"); tinycolor(\"#369C\"); tinycolor(\"369C\"); tinycolor(\"#f0f0f6\"); tinycolor(\"f0f0f6\"); tinycolor(\"#f0f0f688\"); tinycolor(\"f0f0f688\"); RGB, RGBA tinycolor(\"rgb (255, 0, 0)\"); tinycolor(\"rgb 255 0 0\"); tinycolor(\"rgba (255, 0, 0, .5)\"); tinycolor({ r: 255, g: 0, b: 0 }); tinycolor.fromRatio({ r: 1, g: 0, b: 0 }); tinycolor.fromRatio({ r: .5, g: .5, b: .5 }); HSL, HSLA tinycolor(\"hsl(0, 100%, 50%)\"); tinycolor(\"hsla(0, 100%, 50%, .5)\"); tinycolor(\"hsl(0, 100%, 50%)\"); tinycolor(\"hsl 0 1.0 0.5\"); tinycolor({ h: 0, s: 1, l: .5 }); tinycolor.fromRatio({ h: 1, s: 0, l: 0 }); tinycolor.fromRatio({ h: .5, s: .5, l: .5 }); HSV, HSVA tinycolor(\"hsv(0, 100%, 100%)\"); tinycolor(\"hsva(0, 100%, 100%, .5)\"); tinycolor(\"hsv (0 100% 100%)\"); tinycolor(\"hsv 0 1 1\"); tinycolor({ h: 0, s: 100, v: 100 }); tinycolor.fromRatio({ h: 1, s: 0, v: 0 }); tinycolor.fromRatio({ h: .5, s: .5, v: .5 }); Named Case insenstive names are accepted, using the list of colors in the CSS spec. tinycolor(\"RED\"); tinycolor(\"blanchedalmond\"); tinycolor(\"darkblue\"); Accepted Object Input If you are calling this from code, you may want to use object input. Here are some examples of the different types of accepted object inputs: { r: 255, g: 0, b: 0 } { r: 255, g: 0, b: 0, a: .5 } { h: 0, s: 100, l: 50 } { h: 0, s: 100, v: 100 } Methods getFormat Returns the format used to create the tinycolor instance var color = tinycolor(\"red\"); color.getFormat(); // \"name\" color = tinycolor({r:255, g:255, b:255}); color.getFormat(); // \"rgb\" getOriginalInput Returns the input passed into the constructor used to create the tinycolor instance var color = tinycolor(\"red\"); color.getOriginalInput(); // \"red\" color = tinycolor({r:255, g:255, b:255}); color.getOriginalInput(); // \"{r: 255, g: 255, b: 255}\" isValid Return a boolean indicating whether the color was successfully parsed. Note: if the color is not valid then it will act like black when being used with other methods. var color1 = tinycolor(\"red\"); color1.isValid(); // true color1.toHexString(); // \"#ff0000\" var color2 = tinycolor(\"not a color\"); color2.isValid(); // false color2.toString(); // \"#000000\" getBrightness Returns the perceived brightness of a color, from 0-255, as defined by Web Content Accessibility Guidelines (Version 1.0). var color1 = tinycolor(\"#fff\"); color1.getBrightness(); // 255 var color2 = tinycolor(\"#000\"); color2.getBrightness(); // 0 isLight Return a boolean indicating whether the color's perceived brightness is light. var color1 = tinycolor(\"#fff\"); color1.isLight(); // true var color2 = tinycolor(\"#000\"); color2.isLight(); // false isDark Return a boolean indicating whether the color's perceived brightness is dark. var color1 = tinycolor(\"#fff\"); color1.isDark(); // false var color2 = tinycolor(\"#000\"); color2.isDark(); // true getLuminance Returns the perceived luminance of a color, from 0-1 as defined by Web Content Accessibility Guidelines (Version 2.0). var color1 = tinycolor(\"#fff\"); color1.getLuminance(); // 1 var color2 = tinycolor(\"#000\"); color2.getLuminance(); // 0 getAlpha Returns the alpha value of a color, from 0-1. var color1 = tinycolor(\"rgba(255, 0, 0, .5)\"); color1.getAlpha(); // 0.5 var color2 = tinycolor(\"rgb(255, 0, 0)\"); color2.getAlpha(); // 1 var color3 = tinycolor(\"transparent\"); color3.getAlpha(); // 0 setAlpha Sets the alpha value on a current color. Accepted range is in between 0-1. var color = tinycolor(\"red\"); color.getAlpha(); // 1 color.setAlpha(.5); color.getAlpha(); // .5 color.toRgbString(); // \"rgba(255, 0, 0, .5)\" String Representations The following methods will return a property for the alpha value, which can be ignored: toHsv, toHsl, toRgb toHsv var color = tinycolor(\"red\"); color.toHsv(); // { h: 0, s: 1, v: 1, a: 1 } toHsvString var color = tinycolor(\"red\"); color.toHsvString(); // \"hsv(0, 100%, 100%)\" color.setAlpha(0.5); color.toHsvString(); // \"hsva(0, 100%, 100%, 0.5)\" toHsl var color = tinycolor(\"red\"); color.toHsl(); // { h: 0, s: 1, l: 0.5, a: 1 } toHslString var color = tinycolor(\"red\"); color.toHslString(); // \"hsl(0, 100%, 50%)\" color.setAlpha(0.5); color.toHslString(); // \"hsla(0, 100%, 50%, 0.5)\" toHex var color = tinycolor(\"red\"); color.toHex(); // \"ff0000\" toHexString var color = tinycolor(\"red\"); color.toHexString(); // \"#ff0000\" toHex8 var color = tinycolor(\"red\"); color.toHex8(); // \"ff0000ff\" toHex8String var color = tinycolor(\"red\"); color.toHex8String(); // \"#ff0000ff\" toRgb var color = tinycolor(\"red\"); color.toRgb(); // { r: 255, g: 0, b: 0, a: 1 } toRgbString var color = tinycolor(\"red\"); color.toRgbString(); // \"rgb(255, 0, 0)\" color.setAlpha(0.5); color.toRgbString(); // \"rgba(255, 0, 0, 0.5)\" toPercentageRgb var color = tinycolor(\"red\"); color.toPercentageRgb() // { r: \"100%\", g: \"0%\", b: \"0%\", a: 1 } toPercentageRgbString var color = tinycolor(\"red\"); color.toPercentageRgbString(); // \"rgb(100%, 0%, 0%)\" color.setAlpha(0.5); color.toPercentageRgbString(); // \"rgba(100%, 0%, 0%, 0.5)\" toName var color = tinycolor(\"red\"); color.toName(); // \"red\" toFilter var color = tinycolor(\"red\"); color.toFilter(); // \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#ffff0000,endColorstr=#ffff0000)\" toString Print to a string, depending on the input format. You can also override this by passing one of \"rgb\", \"prgb\", \"hex6\", \"hex3\", \"hex8\", \"name\", \"hsl\", \"hsv\" into the function. var color1 = tinycolor(\"red\"); color1.toString(); // \"red\" color1.toString(\"hsv\"); // \"hsv(0, 100%, 100%)\" var color2 = tinycolor(\"rgb(255, 0, 0)\"); color2.toString(); // \"rgb(255, 0, 0)\" color2.setAlpha(.5); color2.toString(); // \"rgba(255, 0, 0, 0.5)\" Color Modification These methods manipulate the current color, and return it for chaining. For instance: tinycolor(\"red\").lighten().desaturate().toHexString() // \"#f53d3d\" lighten lighten: function(amount = 10) -> TinyColor. Lighten the color a given amount, from 0 to 100. Providing 100 will always return white. tinycolor(\"#f00\").lighten().toString(); // \"#ff3333\" tinycolor(\"#f00\").lighten(100).toString(); // \"#ffffff\" brighten brighten: function(amount = 10) -> TinyColor. Brighten the color a given amount, from 0 to 100. tinycolor(\"#f00\").brighten().toString(); // \"#ff1919\" darken darken: function(amount = 10) -> TinyColor. Darken the color a given amount, from 0 to 100. Providing 100 will always return black. tinycolor(\"#f00\").darken().toString(); // \"#cc0000\" tinycolor(\"#f00\").darken(100).toString(); // \"#000000\" desaturate desaturate: function(amount = 10) -> TinyColor. Desaturate the color a given amount, from 0 to 100. Providing 100 will is the same as calling greyscale. tinycolor(\"#f00\").desaturate().toString(); // \"#f20d0d\" tinycolor(\"#f00\").desaturate(100).toString(); // \"#808080\" saturate saturate: function(amount = 10) -> TinyColor. Saturate the color a given amount, from 0 to 100. tinycolor(\"hsl(0, 10%, 50%)\").saturate().toString(); // \"hsl(0, 20%, 50%)\" greyscale greyscale: function() -> TinyColor. Completely desaturates a color into greyscale. Same as calling desaturate(100). tinycolor(\"#f00\").greyscale().toString(); // \"#808080\" spin spin: function(amount = 0) -> TinyColor. Spin the hue a given amount, from -360 to 360. Calling with 0, 360, or -360 will do nothing (since it sets the hue back to what it was before). tinycolor(\"#f00\").spin(180).toString(); // \"#00ffff\" tinycolor(\"#f00\").spin(-90).toString(); // \"#7f00ff\" tinycolor(\"#f00\").spin(90).toString(); // \"#80ff00\" // spin(0) and spin(360) do nothing tinycolor(\"#f00\").spin(0).toString(); // \"#ff0000\" tinycolor(\"#f00\").spin(360).toString(); // \"#ff0000\" Color Combinations Combination functions return an array of TinyColor objects unless otherwise noted. analogous analogous: function(, results = 6, slices = 30) -> array<TinyColor>. var colors = tinycolor(\"#f00\").analogous(); colors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#ff0066\", \"#ff0033\", \"#ff0000\", \"#ff3300\", \"#ff6600\" ] monochromatic monochromatic: function(, results = 6) -> array<TinyColor>. var colors = tinycolor(\"#f00\").monochromatic(); colors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#2a0000\", \"#550000\", \"#800000\", \"#aa0000\", \"#d40000\" ] splitcomplement splitcomplement: function() -> array<TinyColor>. var colors = tinycolor(\"#f00\").splitcomplement(); colors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#ccff00\", \"#0066ff\" ] triad triad: function() -> array<TinyColor>. var colors = tinycolor(\"#f00\").triad(); colors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#00ff00\", \"#0000ff\" ] tetrad tetrad: function() -> array<TinyColor>. var colors = tinycolor(\"#f00\").tetrad(); colors.map(function(t) { return t.toHexString(); }); // [ \"#ff0000\", \"#80ff00\", \"#00ffff\", \"#7f00ff\" ] complement complement: function() -> TinyColor. tinycolor(\"#f00\").complement().toHexString(); // \"#00ffff\" Color Utilities tinycolor.equals(color1, color2) tinycolor.mix(color1, color2, amount = 50) random Returns a random color. var color = tinycolor.random(); color.toRgb(); // \"{r: 145, g: 40, b: 198, a: 1}\" Readability TinyColor assesses readability based on the Web Content Accessibility Guidelines (Version 2.0). readability readability: function(TinyColor, TinyColor) -> Object. Returns the contrast ratio between two colors. tinycolor.readability(\"#000\", \"#000\"); // 1 tinycolor.readability(\"#000\", \"#111\"); // 1.1121078324840545 tinycolor.readability(\"#000\", \"#fff\"); // 21 Use the values in your own calculations, or use one of the convenience functions below. isReadable isReadable: function(TinyColor, TinyColor, Object) -> Boolean. Ensure that foreground and background color combinations meet WCAG guidelines. Object is optional, defaulting to {level: \"AA\",size: \"small\"}. level can be \"AA\" or \"AAA\" and size can be \"small\" or \"large\". Here are links to read more about the AA and AAA requirements. tinycolor.isReadable(\"#000\", \"#111\", {}); // false tinycolor.isReadable(\"#ff0088\", \"#5c1a72\",{level:\"AA\",size:\"small\"}); //false tinycolor.isReadable(\"#ff0088\", \"#5c1a72\",{level:\"AA\",size:\"large\"}), //true mostReadable mostReadable: function(TinyColor, [TinyColor, Tinycolor ...], Object) -> Boolean. Given a base color and a list of possible foreground or background colors for that base, returns the most readable color. If none of the colors in the list is readable, mostReadable will return the better of black or white if includeFallbackColors:true. tinycolor.mostReadable(\"#000\", [\"#f00\", \"#0f0\", \"#00f\"]).toHexString(); // \"#00ff00\" tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\" tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString(); // \"#ffffff\" tinycolor.mostReadable(\"#ff0088\", [\"#2e0c3a\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString() // \"#2e0c3a\", tinycolor.mostReadable(\"#ff0088\", [\"#2e0c3a\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString() // \"#000000\", See index.html in the project for a demo. Common operations clone clone: function() -> TinyColor. Instantiate a new TinyColor object with the same color. Any changes to the new one won't affect the old one. var color1 = tinycolor(\"#F00\"); var color2 = color1.clone(); color2.setAlpha(.5); color1.toString(); // \"#ff0000\" color2.toString(); // \"rgba(255, 0, 0, 0.5)\""
  },
  "Examiner-UI/node_modules/tinyglobby/README.html": {
    "href": "Examiner-UI/node_modules/tinyglobby/README.html",
    "title": "tinyglobby | Examiner",
    "summary": "tinyglobby A fast and minimal alternative to globby and fast-glob, meant to behave the same way. Both globby and fast-glob present some behavior no other globbing lib has, which makes it hard to manually replace with something smaller and better. This library uses only two subdependencies, compared to globby's 23 and fast-glob's 17. Usage import { glob, globSync } from 'tinyglobby'; await glob(['files/*.ts', '!**/*.d.ts'], { cwd: 'src' }); globSync(['src/**/*.ts'], { ignore: ['**/*.d.ts'] }); API glob(patterns: string | string[], options: GlobOptions): Promise<string[]>: Returns a promise with an array of matches. globSync(patterns: string | string[], options: GlobOptions): string[]: Returns an array of matches. convertPathToPattern(path: string): string: Converts a path to a pattern depending on the platform. escapePath(path: string): string: Escapes a path's special characters depending on the platform. isDynamicPattern(pattern: string, options?: GlobOptions): boolean: Checks if a pattern is dynamic. Options patterns: An array of glob patterns to search for. Defaults to ['**/*']. ignore: An array of glob patterns to ignore. cwd: The current working directory in which to search. Defaults to process.cwd(). absolute: Whether to return absolute paths. Defaults to false. dot: Whether to allow entries starting with a dot. Defaults to false. deep: Maximum depth of a directory. Defaults to Infinity. followSymbolicLinks: Whether to traverse and include symbolic links. Defaults to true. caseSensitiveMatch: Whether to match in case-sensitive mode. Defaults to true. expandDirectories: Whether to expand directories. Disable to best match fast-glob. Defaults to true. onlyDirectories: Enable to only return directories. Disables onlyFiles if set. Defaults to false. onlyFiles: Enable to only return files. Defaults to true. debug: Enable debug logs. Useful for development purposes. Used by tinyglobby is downloaded many times by projects all around the world. Here's a partial list of notable projects that use it: vite pnpm node-gyp eslint-import-resolver-typescript vitest copy-webpack-plugin storybook ts-morph nx sort-package-json unimport tsup lerna cspell nuxt postcss-mixins astro unocss vitepress pkg-pr-new Your own project? Open an issue if you feel like this list is incomplete."
  },
  "Examiner-UI/node_modules/tinyglobby/node_modules/fdir/README.html": {
    "href": "Examiner-UI/node_modules/tinyglobby/node_modules/fdir/README.html",
    "title": "The Fastest Directory Crawler & Globber for NodeJS | Examiner",
    "summary": "The Fastest Directory Crawler & Globber for NodeJS ⚡ The Fastest: Nothing similar (in the NodeJS world) beats fdir in speed. It can easily crawl a directory containing 1 million files in < 1 second. \uD83D\uDCA1 Stupidly Easy: fdir uses expressive Builder pattern to build the crawler increasing code readability. \uD83E\uDD16 Zero Dependencies*: fdir only uses NodeJS fs & path modules. \uD83D\uDD7A Astonishingly Small: < 2KB in size gzipped & minified. \uD83D\uDDAE Hackable: Extending fdir is extremely simple now that the new Builder API is here. Feel free to experiment around. * picomatch must be installed manually by the user to support globbing. \uD83D\uDE84 Quickstart Installation You can install using npm: $ npm i fdir or Yarn: $ yarn add fdir Usage import { fdir } from \"fdir\"; // create the builder const api = new fdir().withFullPaths().crawl(\"path/to/dir\"); // get all files in a directory synchronously const files = api.sync(); // or asynchronously api.withPromise().then((files) => { // do something with the result here. }); Documentation: Documentation for all methods is available here. \uD83D\uDCCA Benchmarks: Please check the benchmark against the latest version here. \uD83D\uDE4FUsed by: fdir is downloaded over 200k+ times a week by projects around the world. Here's a list of some notable projects using fdir in production: Note: if you think your project should be here, feel free to open an issue. Notable is anything with a considerable amount of GitHub stars. rollup/plugins SuperchupuDev/tinyglobby pulumi/pulumi dotenvx/dotenvx mdn/yari streetwriters/notesnook imba/imba moroshko/react-scanner netlify/build yassinedoghri/astro-i18next selfrefactor/rambda whyboris/Video-Hub-App \uD83E\uDDAE LICENSE Copyright © 2024 Abdullah Atta under MIT. Read full text here."
  },
  "Examiner-UI/node_modules/tinyglobby/node_modules/picomatch/README.html": {
    "href": "Examiner-UI/node_modules/tinyglobby/node_modules/picomatch/README.html",
    "title": "Picomatch | Examiner",
    "summary": "Picomatch Blazing fast and accurate glob matcher written in JavaScript. No dependencies and full support for standard and extended Bash glob features, including braces, extglobs, POSIX brackets, and regular expressions. Why picomatch? Lightweight - No dependencies Minimal - Tiny API surface. Main export is a function that takes a glob pattern and returns a matcher function. Fast - Loads in about 2ms (that's several times faster than a single frame of a HD movie at 60fps) Performant - Use the returned matcher function to speed up repeat matching (like when watching files) Accurate matching - Using wildcards (* and ?), globstars (**) for nested directories, advanced globbing with extglobs, braces, and POSIX brackets, and support for escaping special characters with \\ or quotes. Well tested - Thousands of unit tests See the library comparison to other libraries. Table of Contents Click to expand Install Usage API picomatch .test .matchBase .isMatch .parse .scan .compileRe .makeRe .toRegex Options Picomatch options Scan Options Options Examples Globbing features Basic globbing Advanced globbing Braces Matching special characters as literals Library Comparisons Benchmarks Philosophies About Author License (TOC generated by verb using markdown-toc) Install Install with npm: npm install --save picomatch Usage The main export is a function that takes a glob pattern and an options object and returns a function for matching strings. const pm = require('picomatch'); const isMatch = pm('*.js'); console.log(isMatch('abcd')); //=> false console.log(isMatch('a.js')); //=> true console.log(isMatch('a.md')); //=> false console.log(isMatch('a/b.js')); //=> false API picomatch Creates a matcher function from one or more glob patterns. The returned function takes a string to match as its first argument, and returns true if the string is a match. The returned matcher function also takes a boolean as the second argument that, when true, returns an object with additional information. Params globs {String|Array}: One or more glob patterns. options {Object=} returns {Function=}: Returns a matcher function. Example const picomatch = require('picomatch'); // picomatch(glob[, options]); const isMatch = picomatch('*.!(*a)'); console.log(isMatch('a.a')); //=> false console.log(isMatch('a.b')); //=> true Example without node.js For environments without node.js, picomatch/posix provides you a dependency-free matcher, without automatic OS detection. const picomatch = require('picomatch/posix'); // the same API, defaulting to posix paths const isMatch = picomatch('a/*'); console.log(isMatch('a\\\\b')); //=> false console.log(isMatch('a/b')); //=> true // you can still configure the matcher function to accept windows paths const isMatch = picomatch('a/*', { options: windows }); console.log(isMatch('a\\\\b')); //=> true console.log(isMatch('a/b')); //=> true .test Test input with the given regex. This is used by the main picomatch() function to test the input string. Params input {String}: String to test. regex {RegExp} returns {Object}: Returns an object with matching info. Example const picomatch = require('picomatch'); // picomatch.test(input, regex[, options]); console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/)); // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' } .matchBase Match the basename of a filepath. Params input {String}: String to test. glob {RegExp|String}: Glob pattern or regex created by .makeRe. returns {Boolean} Example const picomatch = require('picomatch'); // picomatch.matchBase(input, glob[, options]); console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true .isMatch Returns true if any of the given glob patterns match the specified string. Params {String|Array}: str The string to test. {String|Array}: patterns One or more glob patterns to use for matching. {Object}: See available options. returns {Boolean}: Returns true if any patterns match str Example const picomatch = require('picomatch'); // picomatch.isMatch(string, patterns[, options]); console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true console.log(picomatch.isMatch('a.a', 'b.*')); //=> false .parse Parse a glob pattern to create the source string for a regular expression. Params pattern {String} options {Object} returns {Object}: Returns an object with useful properties and output to be used as a regex source string. Example const picomatch = require('picomatch'); const result = picomatch.parse(pattern[, options]); .scan Scan a glob pattern to separate the pattern into segments. Params input {String}: Glob pattern to scan. options {Object} returns {Object}: Returns an object with Example const picomatch = require('picomatch'); // picomatch.scan(input[, options]); const result = picomatch.scan('!./foo/*.js'); console.log(result); { prefix: '!./', input: '!./foo/*.js', start: 3, base: 'foo', glob: '*.js', isBrace: false, isBracket: false, isGlob: true, isExtglob: false, isGlobstar: false, negated: true } .compileRe Compile a regular expression from the state object returned by the parse() method. Params state {Object} options {Object} returnOutput {Boolean}: Intended for implementors, this argument allows you to return the raw output from the parser. returnState {Boolean}: Adds the state to a state property on the returned regex. Useful for implementors and debugging. returns {RegExp} .makeRe Create a regular expression from a parsed glob pattern. Params state {String}: The object returned from the .parse method. options {Object} returnOutput {Boolean}: Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result. returnState {Boolean}: Implementors may use this argument to return the state from the parsed glob with the returned regular expression. returns {RegExp}: Returns a regex created from the given pattern. Example const picomatch = require('picomatch'); const state = picomatch.parse('*.js'); // picomatch.compileRe(state[, options]); console.log(picomatch.compileRe(state)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ .toRegex Create a regular expression from the given regex source string. Params source {String}: Regular expression source string. options {Object} returns {RegExp} Example const picomatch = require('picomatch'); // picomatch.toRegex(source[, options]); const { output } = picomatch.parse('*.js'); console.log(picomatch.toRegex(output)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ Options Picomatch options The following options may be used with the main picomatch() function or any of the methods on the picomatch API. Option Type Default value Description basename boolean false If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. bash boolean false Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (**). capture boolean undefined Return regex matches in supporting methods. contains boolean undefined Allows glob to match any part of the given string(s). cwd string process.cwd() Current working directory. Used by picomatch.split() debug boolean undefined Debug regular expressions when an error is thrown. dot boolean false Enable dotfile matching. By default, dotfiles are ignored unless a . is explicitly defined in the pattern, or options.dot is true expandRange function undefined Custom function for expanding ranges in brace patterns, such as {a..z}. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. failglob boolean false Throws an error if no matches are found. Based on the bash option of the same name. fastpaths boolean true To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to false. flags string undefined Regex flags to use in the generated regex. If defined, the nocase option will be overridden. format function undefined Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. ignore array\\|string undefined One or more glob patterns for excluding strings that should not be matched from the result. keepQuotes boolean false Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes. literalBrackets boolean undefined When true, brackets in the glob pattern will be escaped so that only literal brackets will be matched. matchBase boolean false Alias for basename maxLength boolean 65536 Limit the max length of the input string. An error is thrown if the input string is longer than this value. nobrace boolean false Disable brace matching, so that {a,b} and {1..3} would be treated as literal characters. nobracket boolean undefined Disable matching with regex brackets. nocase boolean false Make matching case-insensitive. Equivalent to the regex i flag. Note that this option is overridden by the flags option. nodupes boolean true Deprecated, use nounique instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. noext boolean false Alias for noextglob noextglob boolean false Disable support for matching with extglobs (like +(a\\|b)) noglobstar boolean false Disable support for matching nested directories with globstars (**) nonegate boolean false Disable support for negating with leading ! noquantifiers boolean false Disable support for regex quantifiers (like a{1,2}) and treat them as brace patterns to be expanded. onIgnore function undefined Function to be called on ignored items. onMatch function undefined Function to be called on matched items. onResult function undefined Function to be called on all items, regardless of whether or not they are matched or ignored. posix boolean false Support POSIX character classes (\"posix brackets\"). posixSlashes boolean undefined Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself prepend boolean undefined String to prepend to the generated regex used for matching. regex boolean false Use regular expression rules for + (instead of matching literal +), and for stars that follow closing parentheses or brackets (as in )* and ]*). strictBrackets boolean undefined Throw an error if brackets, braces, or parens are imbalanced. strictSlashes boolean undefined When true, picomatch won't match trailing slashes with single stars. unescape boolean undefined Remove backslashes preceding escaped characters in the glob pattern. By default, backslashes are retained. unixify boolean undefined Alias for posixSlashes, for backwards compatibility. windows boolean false Also accept backslashes as the path separator. Scan Options In addition to the main picomatch options, the following options may also be used with the .scan method. Option Type Default value Description tokens boolean false When true, the returned object will include an array of tokens (objects), representing each path \"segment\" in the scanned glob pattern parts boolean false When true, the returned object will include an array of strings representing each path \"segment\" in the scanned glob pattern. This is automatically enabled when options.tokens is true Example const picomatch = require('picomatch'); const result = picomatch.scan('!./foo/*.js', { tokens: true }); console.log(result); // { // prefix: '!./', // input: '!./foo/*.js', // start: 3, // base: 'foo', // glob: '*.js', // isBrace: false, // isBracket: false, // isGlob: true, // isExtglob: false, // isGlobstar: false, // negated: true, // maxDepth: 2, // tokens: [ // { value: '!./', depth: 0, isGlob: false, negated: true, isPrefix: true }, // { value: 'foo', depth: 1, isGlob: false }, // { value: '*.js', depth: 1, isGlob: true } // ], // slashes: [ 2, 6 ], // parts: [ 'foo', '*.js' ] // } Options Examples options.expandRange Type: function Default: undefined Custom function for expanding ranges in brace patterns. The fill-range library is ideal for this purpose, or you can use custom code to do whatever you need. Example The following example shows how to create a glob that matches a folder const fill = require('fill-range'); const regex = pm.makeRe('foo/{01..25}/bar', { expandRange(a, b) { return `(${fill(a, b, { toRegex: true })})`; } }); console.log(regex); //=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/ console.log(regex.test('foo/00/bar')) // false console.log(regex.test('foo/01/bar')) // true console.log(regex.test('foo/10/bar')) // true console.log(regex.test('foo/22/bar')) // true console.log(regex.test('foo/25/bar')) // true console.log(regex.test('foo/26/bar')) // false options.format Type: function Default: undefined Custom function for formatting strings before they're matched. Example // strip leading './' from strings const format = str => str.replace(/^\\.\\//, ''); const isMatch = picomatch('foo/*.js', { format }); console.log(isMatch('./foo/bar.js')); //=> true options.onMatch const onMatch = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onMatch }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onIgnore const onIgnore = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onIgnore, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onResult const onResult = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onResult, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); Globbing features Basic globbing (Wildcard matching) Advanced globbing (extglobs, posix brackets, brace matching) Basic globbing Character Description * Matches any character zero or more times, excluding path separators. Does not match path separators or hidden files or directories (\"dotfiles\"), unless explicitly enabled by setting the dot option to true. ** Matches any character zero or more times, including path separators. Note that ** will only match path separators (/, and \\\\ with the windows option) when they are the only characters in a path segment. Thus, foo**/bar is equivalent to foo*/bar, and foo/a**b/bar is equivalent to foo/a*b/bar, and more than two consecutive stars in a glob path segment are regarded as a single star. Thus, foo/***/bar is equivalent to foo/*/bar. ? Matches any character excluding path separators one time. Does not match path separators or leading dots. [abc] Matches any characters inside the brackets. For example, [abc] would match the characters a, b or c, and nothing else. Matching behavior vs. Bash Picomatch's matching features and expected results in unit tests are based on Bash's unit tests and the Bash 4.3 specification, with the following exceptions: Bash will match foo/bar/baz with *. Picomatch only matches nested directories with **. Bash greedily matches with negated extglobs. For example, Bash 4.3 says that !(foo)* should match foo and foobar, since the trailing * bracktracks to match the preceding pattern. This is very memory-inefficient, and IMHO, also incorrect. Picomatch would return false for both foo and foobar. Advanced globbing extglobs POSIX brackets Braces Extglobs Pattern Description @(pattern) Match only one consecutive occurrence of pattern *(pattern) Match zero or more consecutive occurrences of pattern +(pattern) Match one or more consecutive occurrences of pattern ?(pattern) Match zero or one consecutive occurrences of pattern !(pattern) Match anything but pattern Examples const pm = require('picomatch'); // *(pattern) matches ZERO or more of \"pattern\" console.log(pm.isMatch('a', 'a*(z)')); // true console.log(pm.isMatch('az', 'a*(z)')); // true console.log(pm.isMatch('azzz', 'a*(z)')); // true // +(pattern) matches ONE or more of \"pattern\" console.log(pm.isMatch('a', 'a+(z)')); // false console.log(pm.isMatch('az', 'a+(z)')); // true console.log(pm.isMatch('azzz', 'a+(z)')); // true // supports multiple extglobs console.log(pm.isMatch('foo.bar', '!(foo).!(bar)')); // false // supports nested extglobs console.log(pm.isMatch('foo.bar', '!(!(foo)).!(!(bar))')); // true POSIX brackets POSIX classes are disabled by default. Enable this feature by setting the posix option to true. Enable POSIX bracket support console.log(pm.makeRe('[[:word:]]+', { posix: true })); //=> /^(?:(?=.)[A-Za-z0-9_]+\\/?)$/ Supported POSIX classes The following named POSIX bracket expressions are supported: [:alnum:] - Alphanumeric characters, equ [a-zA-Z0-9] [:alpha:] - Alphabetical characters, equivalent to [a-zA-Z]. [:ascii:] - ASCII characters, equivalent to [\\\\x00-\\\\x7F]. [:blank:] - Space and tab characters, equivalent to [ \\\\t]. [:cntrl:] - Control characters, equivalent to [\\\\x00-\\\\x1F\\\\x7F]. [:digit:] - Numerical digits, equivalent to [0-9]. [:graph:] - Graph characters, equivalent to [\\\\x21-\\\\x7E]. [:lower:] - Lowercase letters, equivalent to [a-z]. [:print:] - Print characters, equivalent to [\\\\x20-\\\\x7E ]. [:punct:] - Punctuation and symbols, equivalent to [\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_{|}~]`. [:space:] - Extended space characters, equivalent to [ \\\\t\\\\r\\\\n\\\\v\\\\f]. [:upper:] - Uppercase letters, equivalent to [A-Z]. [:word:] - Word characters (letters, numbers and underscores), equivalent to [A-Za-z0-9_]. [:xdigit:] - Hexadecimal digits, equivalent to [A-Fa-f0-9]. See the Bash Reference Manual for more information. Braces Picomatch does not do brace expansion. For brace expansion and advanced matching with braces, use micromatch instead. Picomatch has very basic support for braces. Matching special characters as literals If you wish to match the following special characters in a filepath, and you want to use these characters in your glob pattern, they must be escaped with backslashes or quotes: Special Characters Some characters that are used for matching in regular expressions are also regarded as valid file path characters on some platforms. To match any of the following characters as literals: `$^*+?()[] Examples: console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); Library Comparisons The following table shows which features are supported by minimatch, micromatch, picomatch, nanomatch, extglob, braces, and expand-brackets. Feature minimatch micromatch picomatch nanomatch extglob braces expand-brackets Wildcard matching (*?+) ✔ ✔ ✔ ✔ - - - Advancing globbing ✔ ✔ ✔ - - - - Brace matching ✔ ✔ ✔ - - ✔ - Brace expansion ✔ ✔ - - - ✔ - Extglobs partial ✔ ✔ - ✔ - - Posix brackets - ✔ ✔ - - - ✔ Regular expression syntax - ✔ ✔ ✔ ✔ - ✔ File system operations - - - - - - - Benchmarks Performance comparison of picomatch and minimatch. (Pay special attention to the last three benchmarks. Minimatch freezes on long ranges.) # .makeRe star (*) picomatch x 4,449,159 ops/sec ±0.24% (97 runs sampled) minimatch x 632,772 ops/sec ±0.14% (98 runs sampled) # .makeRe star; dot=true (*) picomatch x 3,500,079 ops/sec ±0.26% (99 runs sampled) minimatch x 564,916 ops/sec ±0.23% (96 runs sampled) # .makeRe globstar (**) picomatch x 3,261,000 ops/sec ±0.27% (98 runs sampled) minimatch x 1,664,766 ops/sec ±0.20% (100 runs sampled) # .makeRe globstars (**/**/**) picomatch x 3,284,469 ops/sec ±0.18% (97 runs sampled) minimatch x 1,435,880 ops/sec ±0.34% (95 runs sampled) # .makeRe with leading star (*.txt) picomatch x 3,100,197 ops/sec ±0.35% (99 runs sampled) minimatch x 428,347 ops/sec ±0.42% (94 runs sampled) # .makeRe - basic braces ({a,b,c}*.txt) picomatch x 443,578 ops/sec ±1.33% (89 runs sampled) minimatch x 107,143 ops/sec ±0.35% (94 runs sampled) # .makeRe - short ranges ({a..z}*.txt) picomatch x 415,484 ops/sec ±0.76% (96 runs sampled) minimatch x 14,299 ops/sec ±0.26% (96 runs sampled) # .makeRe - medium ranges ({1..100000}*.txt) picomatch x 395,020 ops/sec ±0.87% (89 runs sampled) minimatch x 2 ops/sec ±4.59% (10 runs sampled) # .makeRe - long ranges ({1..10000000}*.txt) picomatch x 400,036 ops/sec ±0.83% (90 runs sampled) minimatch (FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory) Philosophies The goal of this library is to be blazing fast, without compromising on accuracy. Accuracy The number one of goal of this library is accuracy. However, it's not unusual for different glob implementations to have different rules for matching behavior, even with simple wildcard matching. It gets increasingly more complicated when combinations of different features are combined, like when extglobs are combined with globstars, braces, slashes, and so on: !(**/{a,b,*/c}). Thus, given that there is no canonical glob specification to use as a single source of truth when differences of opinion arise regarding behavior, sometimes we have to implement our best judgement and rely on feedback from users to make improvements. Performance Although this library performs well in benchmarks, and in most cases it's faster than other popular libraries we benchmarked against, we will always choose accuracy over performance. It's not helpful to anyone if our library is faster at returning the wrong answer. About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Please read the contributing guide for advice on opening issues, pull requests, and coding standards. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: npm install -g verbose/verb#dev verb-generate-readme && verb Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2017-present, Jon Schlinkert. Released under the MIT License."
  },
  "Examiner-UI/node_modules/to-regex-range/README.html": {
    "href": "Examiner-UI/node_modules/to-regex-range/README.html",
    "title": "to-regex-range | Examiner",
    "summary": "to-regex-range Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Install Install with npm: $ npm install --save to-regex-range What does this do? This libary generates the source string to be passed to new RegExp() for matching a range of numbers. Example const toRegexRange = require('to-regex-range'); const regex = new RegExp(toRegexRange('15', '95')); A string is returned so that you can do whatever you need with it before passing it to new RegExp() (like adding ^ or $ boundaries, defining flags, or combining it another string). Why use this library? Convenience Creating regular expressions for matching numbers gets deceptively complicated pretty fast. For example, let's say you need a validation regex for matching part of a user-id, postal code, social security number, tax id, etc: regex for matching 1 => /1/ (easy enough) regex for matching 1 through 5 => /[1-5]/ (not bad...) regex for matching 1 or 5 => /(1|5)/ (still easy...) regex for matching 1 through 50 => /([1-9]|[1-4][0-9]|50)/ (uh-oh...) regex for matching 1 through 55 => /([1-9]|[1-4][0-9]|5[0-5])/ (no prob, I can do this...) regex for matching 1 through 555 => /([1-9]|[1-9][0-9]|[1-4][0-9]{2}|5[0-4][0-9]|55[0-5])/ (maybe not...) regex for matching 0001 through 5555 => /(0{3}[1-9]|0{2}[1-9][0-9]|0[1-9][0-9]{2}|[1-4][0-9]{3}|5[0-4][0-9]{2}|55[0-4][0-9]|555[0-5])/ (okay, I get the point!) The numbers are contrived, but they're also really basic. In the real world you might need to generate a regex on-the-fly for validation. Learn more If you're interested in learning more about character classes and other regex features, I personally have always found regular-expressions.info to be pretty useful. Heavily tested As of April 07, 2019, this library runs >1m test assertions against generated regex-ranges to provide brute-force verification that results are correct. Tests run in ~280ms on my MacBook Pro, 2.5 GHz Intel Core i7. Optimized Generated regular expressions are optimized: duplicate sequences and character classes are reduced using quantifiers smart enough to use ? conditionals when number(s) or range(s) can be positive or negative uses fragment caching to avoid processing the same exact string more than once Usage Add this library to your javascript application with the following line of code const toRegexRange = require('to-regex-range'); The main export is a function that takes two integers: the min value and max value (formatted as strings or numbers). const source = toRegexRange('15', '95'); //=> 1[5-9]|[2-8][0-9]|9[0-5] const regex = new RegExp(`^${source}$`); console.log(regex.test('14')); //=> false console.log(regex.test('50')); //=> true console.log(regex.test('94')); //=> true console.log(regex.test('96')); //=> false Options options.capture Type: boolean Deafault: undefined Wrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges. console.log(toRegexRange('-10', '10')); //=> -[1-9]|-?10|[0-9] console.log(toRegexRange('-10', '10', { capture: true })); //=> (-[1-9]|-?10|[0-9]) options.shorthand Type: boolean Deafault: undefined Use the regex shorthand for [0-9]: console.log(toRegexRange('0', '999999')); //=> [0-9]|[1-9][0-9]{1,5} console.log(toRegexRange('0', '999999', { shorthand: true })); //=> \\d|[1-9]\\d{1,5} options.relaxZeros Type: boolean Default: true This option relaxes matching for leading zeros when when ranges are zero-padded. const source = toRegexRange('-0010', '0010'); const regex = new RegExp(`^${source}$`); console.log(regex.test('-10')); //=> true console.log(regex.test('-010')); //=> true console.log(regex.test('-0010')); //=> true console.log(regex.test('10')); //=> true console.log(regex.test('010')); //=> true console.log(regex.test('0010')); //=> true When relaxZeros is false, matching is strict: const source = toRegexRange('-0010', '0010', { relaxZeros: false }); const regex = new RegExp(`^${source}$`); console.log(regex.test('-10')); //=> false console.log(regex.test('-010')); //=> false console.log(regex.test('-0010')); //=> true console.log(regex.test('10')); //=> false console.log(regex.test('010')); //=> false console.log(regex.test('0010')); //=> true Examples Range Result Compile time toRegexRange(-10, 10) -[1-9]\\|-?10\\|[0-9] 132μs toRegexRange(-100, -10) -1[0-9]\\|-[2-9][0-9]\\|-100 50μs toRegexRange(-100, 100) -[1-9]\\|-?[1-9][0-9]\\|-?100\\|[0-9] 42μs toRegexRange(001, 100) 0{0,2}[1-9]\\|0?[1-9][0-9]\\|100 109μs toRegexRange(001, 555) 0{0,2}[1-9]\\|0?[1-9][0-9]\\|[1-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5] 51μs toRegexRange(0010, 1000) 0{0,2}1[0-9]\\|0{0,2}[2-9][0-9]\\|0?[1-9][0-9]{2}\\|1000 31μs toRegexRange(1, 50) [1-9]\\|[1-4][0-9]\\|50 24μs toRegexRange(1, 55) [1-9]\\|[1-4][0-9]\\|5[0-5] 23μs toRegexRange(1, 555) [1-9]\\|[1-9][0-9]\\|[1-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5] 30μs toRegexRange(1, 5555) [1-9]\\|[1-9][0-9]{1,2}\\|[1-4][0-9]{3}\\|5[0-4][0-9]{2}\\|55[0-4][0-9]\\|555[0-5] 43μs toRegexRange(111, 555) 11[1-9]\\|1[2-9][0-9]\\|[2-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5] 38μs toRegexRange(29, 51) 29\\|[34][0-9]\\|5[01] 24μs toRegexRange(31, 877) 3[1-9]\\|[4-9][0-9]\\|[1-7][0-9]{2}\\|8[0-6][0-9]\\|87[0-7] 32μs toRegexRange(5, 5) 5 8μs toRegexRange(5, 6) 5\\|6 11μs toRegexRange(1, 2) 1\\|2 6μs toRegexRange(1, 5) [1-5] 15μs toRegexRange(1, 10) [1-9]\\|10 22μs toRegexRange(1, 100) [1-9]\\|[1-9][0-9]\\|100 25μs toRegexRange(1, 1000) [1-9]\\|[1-9][0-9]{1,2}\\|1000 31μs toRegexRange(1, 10000) [1-9]\\|[1-9][0-9]{1,3}\\|10000 34μs toRegexRange(1, 100000) [1-9]\\|[1-9][0-9]{1,4}\\|100000 36μs toRegexRange(1, 1000000) [1-9]\\|[1-9][0-9]{1,5}\\|1000000 42μs toRegexRange(1, 10000000) [1-9]\\|[1-9][0-9]{1,6}\\|10000000 42μs Heads up! Order of arguments When the min is larger than the max, values will be flipped to create a valid range: toRegexRange('51', '29'); Is effectively flipped to: toRegexRange('29', '51'); //=> 29|[3-4][0-9]|5[0-1] Steps / increments This library does not support steps (increments). A pr to add support would be welcome. History v2.0.0 - 2017-04-21 New features Adds support for zero-padding! v1.0.0 Optimizations Repeating ranges are now grouped using quantifiers. rocessing time is roughly the same, but the generated regex is much smaller, which should result in faster matching. Attribution Inspired by the python library range-regex. About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: expand-range: Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used… more | homepage fill-range: Fill in a range of numbers or letters, optionally passing an increment or step to… more | homepage micromatch: Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | homepage repeat-element: Create an array by repeating the given value n times. | homepage repeat-string: Repeat the given string n times. Fastest implementation for repeating a string. | homepage Contributors Commits Contributor 63 jonschlinkert 3 doowb 2 realityking Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile Please consider supporting me on Patreon, or start your own Patreon page! License Copyright © 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on April 07, 2019."
  },
  "Examiner-UI/node_modules/ts-api-utils/LICENSE.html": {
    "href": "Examiner-UI/node_modules/ts-api-utils/LICENSE.html",
    "title": "MIT License | Examiner",
    "summary": "MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/ts-api-utils/README.html": {
    "href": "Examiner-UI/node_modules/ts-api-utils/README.html",
    "title": "TypeScript API Utils | Examiner",
    "summary": "TypeScript API Utils Utility functions for working with TypeScript's API. Successor to the wonderful tsutils. \uD83D\uDEE0️️ Usage npm i ts-api-utils import * as tsutils from \"ts-api-utils\"; tsutils.forEachToken(/* ... */); API ts-api-utils provides many utility functions. Check out our API docs for details: \uD83D\uDCDD ts-api-utils API docs. Development See .github/CONTRIBUTING.md. Thanks! \uD83D\uDC96 Contributors Many thanks to @ajafff for creating the original tsutils (original license: MIT) that this project was originally based on! \uD83D\uDE4F Dan Vanderkam \uD83D\uDC1B Johannes Chorzempa \uD83D\uDCD6 \uD83D\uDCBB Josh Goldberg \uD83D\uDC1B \uD83D\uDCBB \uD83D\uDCD6 \uD83D\uDCC6 ⚠️ \uD83D\uDD27 \uD83D\uDEA7 \uD83D\uDE87 \uD83E\uDD14 Kirill Cherkashin \uD83D\uDCBB Kirk Waiblinger \uD83D\uDC1B \uD83D\uDCBB Klaus Meinhardt \uD83D\uDCBB ⚠️ Lars Kappert \uD83D\uDCBB Rebecca Stevens \uD83D\uDC1B \uD83D\uDCBB \uD83D\uDCD6 \uD83D\uDCC6 ⚠️ \uD83D\uDD27 \uD83D\uDE87 \uD83D\uDEA7 \uD83E\uDD14 Ronen Amiel ⚠️ fisker Cheung \uD83D\uDCBB \uD83D\uDC99 This package was templated with create-typescript-app. \"My tools! I have to have my tools!\" - Dennis Reynolds"
  },
  "Examiner-UI/node_modules/type-check/README.html": {
    "href": "Examiner-UI/node_modules/type-check/README.html",
    "title": "type-check | Examiner",
    "summary": "type-check type-check is a library which allows you to check the types of JavaScript values at runtime with a Haskell like type syntax. It is great for checking external input, for testing, or even for adding a bit of safety to your internal code. It is a major component of levn. MIT license. Version 0.4.0. Check out the demo. For updates on type-check, follow me on twitter. npm install type-check Quick Examples // Basic types: var typeCheck = require('type-check').typeCheck; typeCheck('Number', 1); // true typeCheck('Number', 'str'); // false typeCheck('Error', new Error); // true typeCheck('Undefined', undefined); // true // Comment typeCheck('count::Number', 1); // true // One type OR another type: typeCheck('Number | String', 2); // true typeCheck('Number | String', 'str'); // true // Wildcard, matches all types: typeCheck('*', 2) // true // Array, all elements of a single type: typeCheck('[Number]', [1, 2, 3]); // true typeCheck('[Number]', [1, 'str', 3]); // false // Tuples, or fixed length arrays with elements of different types: typeCheck('(String, Number)', ['str', 2]); // true typeCheck('(String, Number)', ['str']); // false typeCheck('(String, Number)', ['str', 2, 5]); // false // Object properties: typeCheck('{x: Number, y: Boolean}', {x: 2, y: false}); // true typeCheck('{x: Number, y: Boolean}', {x: 2}); // false typeCheck('{x: Number, y: Maybe Boolean}', {x: 2}); // true typeCheck('{x: Number, y: Boolean}', {x: 2, y: false, z: 3}); // false typeCheck('{x: Number, y: Boolean, ...}', {x: 2, y: false, z: 3}); // true // A particular type AND object properties: typeCheck('RegExp{source: String, ...}', /re/i); // true typeCheck('RegExp{source: String, ...}', {source: 're'}); // false // Custom types: var opt = {customTypes: {Even: { typeOf: 'Number', validate: function(x) { return x % 2 === 0; }}}}; typeCheck('Even', 2, opt); // true // Nested: var type = '{a: (String, [Number], {y: Array, ...}), b: Error{message: String, ...}}' typeCheck(type, {a: ['hi', [1, 2, 3], {y: [1, 'ms']}], b: new Error('oh no')}); // true Check out the type syntax format and guide. Usage require('type-check'); returns an object that exposes four properties. VERSION is the current version of the library as a string. typeCheck, parseType, and parsedTypeCheck are functions. // typeCheck(type, input, options); typeCheck('Number', 2); // true // parseType(type); var parsedType = parseType('Number'); // object // parsedTypeCheck(parsedType, input, options); parsedTypeCheck(parsedType, 2); // true typeCheck(type, input, options) typeCheck checks a JavaScript value input against type written in the type format (and taking account the optional options) and returns whether the input matches the type. arguments type - String - the type written in the type format which to check against input - * - any JavaScript value, which is to be checked against the type options - Maybe Object - an optional parameter specifying additional options, currently the only available option is specifying custom types returns Boolean - whether the input matches the type example typeCheck('Number', 2); // true parseType(type) parseType parses string type written in the type format into an object representing the parsed type. arguments type - String - the type written in the type format which to parse returns Object - an object in the parsed type format representing the parsed type example parseType('Number'); // [{type: 'Number'}] parsedTypeCheck(parsedType, input, options) parsedTypeCheck checks a JavaScript value input against parsed type in the parsed type format (and taking account the optional options) and returns whether the input matches the type. Use this in conjunction with parseType if you are going to use a type more than once. arguments type - Object - the type in the parsed type format which to check against input - * - any JavaScript value, which is to be checked against the type options - Maybe Object - an optional parameter specifying additional options, currently the only available option is specifying custom types returns Boolean - whether the input matches the type example parsedTypeCheck([{type: 'Number'}], 2); // true var parsedType = parseType('String'); parsedTypeCheck(parsedType, 'str'); // true ## Type Format Syntax White space is ignored. The root node is a Types. Identifier = [\\$\\w]+ - a group of any lower or upper case letters, numbers, underscores, or dollar signs - eg. String Type = an Identifier, an Identifier followed by a Structure, just a Structure, or a wildcard * - eg. String, Object{x: Number}, {x: Number}, Array{0: String, 1: Boolean, length: Number}, * Types = optionally a comment (an Identifier followed by a ::), optionally the identifier Maybe, one or more Type, separated by | - eg. Number, String | Date, Maybe Number, Maybe Boolean | String Structure = Fields, or a Tuple, or an Array - eg. {x: Number}, (String, Number), [Date] Fields = a {, followed one or more Field separated by a comma , (trailing comma , is permitted), optionally an ... (always preceded by a comma ,), followed by a } - eg. {x: Number, y: String}, {k: Function, ...} Field = an Identifier, followed by a colon :, followed by Types - eg. x: Date | String, y: Boolean Tuple = a (, followed by one or more Types separated by a comma , (trailing comma , is permitted), followed by a ) - eg (Date), (Number, Date) Array = a [ followed by exactly one Types followed by a ] - eg. [Boolean], [Boolean | Null] Guide type-check uses Object.toString to find out the basic type of a value. Specifically, {}.toString.call(VALUE).slice(8, -1) {}.toString.call(true).slice(8, -1) // 'Boolean' A basic type, eg. Number, uses this check. This is much more versatile than using typeof - for example, with document, typeof produces 'object' which isn't that useful, and our technique produces 'HTMLDocument'. You may check for multiple types by separating types with a |. The checker proceeds from left to right, and passes if the value is any of the types - eg. String | Boolean first checks if the value is a string, and then if it is a boolean. If it is none of those, then it returns false. Adding a Maybe in front of a list of multiple types is the same as also checking for Null and Undefined - eg. Maybe String is equivalent to Undefined | Null | String. You may add a comment to remind you of what the type is for by following an identifier with a :: before a type (or multiple types). The comment is simply thrown out. The wildcard * matches all types. There are three types of structures for checking the contents of a value: 'fields', 'tuple', and 'array'. If used by itself, a 'fields' structure will pass with any type of object as long as it is an instance of Object and the properties pass - this allows for duck typing - eg. {x: Boolean}. To check if the properties pass, and the value is of a certain type, you can specify the type - eg. Error{message: String}. If you want to make a field optional, you can simply use Maybe - eg. {x: Boolean, y: Maybe String} will still pass if y is undefined (or null). If you don't care if the value has properties beyond what you have specified, you can use the 'etc' operator ... - eg. {x: Boolean, ...} will match an object with an x property that is a boolean, and with zero or more other properties. For an array, you must specify one or more types (separated by |) - it will pass for something of any length as long as each element passes the types provided - eg. [Number], [Number | String]. A tuple checks for a fixed number of elements, each of a potentially different type. Each element is separated by a comma - eg. (String, Number). An array and tuple structure check that the value is of type Array by default, but if another type is specified, they will check for that instead - eg. Int32Array[Number]. You can use the wildcard * to search for any type at all. Check out the type precedence library for type-check. Options Options is an object. It is an optional parameter to the typeCheck and parsedTypeCheck functions. The only current option is customTypes. ### Custom Types Example: var options = { customTypes: { Even: { typeOf: 'Number', validate: function(x) { return x % 2 === 0; } } } }; typeCheck('Even', 2, options); // true typeCheck('Even', 3, options); // false customTypes allows you to set up custom types for validation. The value of this is an object. The keys of the object are the types you will be matching. Each value of the object will be an object having a typeOf property - a string, and validate property - a function. The typeOf property is the type the value should be (optional - if not set only validate will be used), and validate is a function which should return true if the value is of that type. validate receives one parameter, which is the value that we are checking. Technical About type-check is written in LiveScript - a language that compiles to JavaScript. It also uses the prelude.ls library."
  },
  "Examiner-UI/node_modules/typescript-eslint/README.html": {
    "href": "Examiner-UI/node_modules/typescript-eslint/README.html",
    "title": "typescript-eslint | Examiner",
    "summary": "typescript-eslint Tooling which enables you to use TypeScript with ESLint \uD83D\uDC49 See https://typescript-eslint.io/packages/typescript-eslint for documentation on this package. See https://typescript-eslint.io for general documentation on typescript-eslint, the tooling that allows you to run ESLint and Prettier on TypeScript code."
  },
  "Examiner-UI/node_modules/typescript/README.html": {
    "href": "Examiner-UI/node_modules/typescript/README.html",
    "title": "TypeScript | Examiner",
    "summary": "TypeScript TypeScript is a language for application-scale JavaScript. TypeScript adds optional types to JavaScript that support tools for large-scale JavaScript applications for any browser, for any host, on any OS. TypeScript compiles to readable, standards-based JavaScript. Try it out at the playground, and stay up to date via our blog and Twitter account. Find others who are using TypeScript at our community page. Installing For the latest stable version: npm install -D typescript For our nightly builds: npm install -D typescript@next Contribute There are many ways to contribute to TypeScript. Submit bugs and help us verify fixes as they are checked in. Review the source code changes. Engage with other TypeScript users and developers on StackOverflow. Help each other in the TypeScript Community Discord. Join the #typescript discussion on Twitter. Contribute bug fixes. This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Documentation TypeScript in 5 minutes Programming handbook Homepage Roadmap For details on our planned features and future direction, please refer to our roadmap."
  },
  "Examiner-UI/node_modules/typescript/SECURITY.html": {
    "href": "Examiner-UI/node_modules/typescript/SECURITY.html",
    "title": "| Examiner",
    "summary": "Security Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include Microsoft, Azure, DotNet, AspNet and Xamarin. If you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's definition of a security vulnerability, please report it to us as described below. Reporting Security Issues Please do not report security vulnerabilities through public GitHub issues. Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report. If you prefer to submit without logging in, send email to secure@microsoft.com. If possible, encrypt your message with our PGP key; please download it from the Microsoft Security Response Center PGP Key page. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at microsoft.com/msrc. Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue: Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.) Full paths of source file(s) related to the manifestation of the issue The location of the affected source code (tag/branch/commit or direct URL) Any special configuration required to reproduce the issue Step-by-step instructions to reproduce the issue Proof-of-concept or exploit code (if possible) Impact of the issue, including how an attacker might exploit the issue This information will help us triage your report more quickly. If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our Microsoft Bug Bounty Program page for more details about our active programs. Preferred Languages We prefer all communications to be in English. Policy Microsoft follows the principle of Coordinated Vulnerability Disclosure."
  },
  "Examiner-UI/node_modules/undici-types/README.html": {
    "href": "Examiner-UI/node_modules/undici-types/README.html",
    "title": "undici-types | Examiner",
    "summary": "undici-types This package is a dual-publish of the undici library types. The undici package still contains types. This package is for users who only need undici types (such as for @types/node). It is published alongside every release of undici, so you can always use the same version. GitHub nodejs/undici Undici Documentation"
  },
  "Examiner-UI/node_modules/uri-js/README.html": {
    "href": "Examiner-UI/node_modules/uri-js/README.html",
    "title": "URI.js | Examiner",
    "summary": "URI.js URI.js is an RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for all JavaScript environments (browsers, Node.js, etc). It is also compliant with the IRI (RFC 3987), IDNA (RFC 5890), IPv6 Address (RFC 5952), IPv6 Zone Identifier (RFC 6874) specifications. URI.js has an extensive test suite, and works in all (Node.js, web) environments. It weighs in at 6.4kb (gzipped, 17kb deflated). API Parsing URI.parse(\"uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body\"); //returns: //{ // scheme : \"uri\", // userinfo : \"user:pass\", // host : \"example.com\", // port : 123, // path : \"/one/two.three\", // query : \"q1=a1&q2=a2\", // fragment : \"body\" //} Serializing URI.serialize({scheme : \"http\", host : \"example.com\", fragment : \"footer\"}) === \"http://example.com/#footer\" Resolving URI.resolve(\"uri://a/b/c/d?q\", \"../../g\") === \"uri://a/g\" Normalizing URI.normalize(\"HTTP://ABC.com:80/%7Esmith/home.html\") === \"http://abc.com/~smith/home.html\" Comparison URI.equal(\"example://a/b/c/%7Bfoo%7D\", \"eXAMPLE://a/./b/../b/%63/%7bfoo%7d\") === true IP Support //IPv4 normalization URI.normalize(\"//192.068.001.000\") === \"//192.68.1.0\" //IPv6 normalization URI.normalize(\"//[2001:0:0DB8::0:0001]\") === \"//[2001:0:db8::1]\" //IPv6 zone identifier support URI.parse(\"//[2001:db8::7%25en1]\"); //returns: //{ // host : \"2001:db8::7%en1\" //} IRI Support //convert IRI to URI URI.serialize(URI.parse(\"http://examplé.org/rosé\")) === \"http://xn--exampl-gva.org/ros%C3%A9\" //convert URI to IRI URI.serialize(URI.parse(\"http://xn--exampl-gva.org/ros%C3%A9\"), {iri:true}) === \"http://examplé.org/rosé\" Options All of the above functions can accept an additional options argument that is an object that can contain one or more of the following properties: scheme (string) Indicates the scheme that the URI should be treated as, overriding the URI's normal scheme parsing behavior. reference (string) If set to \"suffix\", it indicates that the URI is in the suffix format, and the validator will use the option's scheme property to determine the URI's scheme. tolerant (boolean, false) If set to true, the parser will relax URI resolving rules. absolutePath (boolean, false) If set to true, the serializer will not resolve a relative path component. iri (boolean, false) If set to true, the serializer will unescape non-ASCII characters as per RFC 3987. unicodeSupport (boolean, false) If set to true, the parser will unescape non-ASCII characters in the parsed output as per RFC 3987. domainHost (boolean, false) If set to true, the library will treat the host component as a domain name, and convert IDNs (International Domain Names) as per RFC 5891. Scheme Extendable URI.js supports inserting custom scheme dependent processing rules. Currently, URI.js has built in support for the following schemes: http [RFC 2616] https [RFC 2818] ws [RFC 6455] wss [RFC 6455] mailto [RFC 6068] urn [RFC 2141] urn:uuid [RFC 4122] HTTP/HTTPS Support URI.equal(\"HTTP://ABC.COM:80\", \"http://abc.com/\") === true URI.equal(\"https://abc.com\", \"HTTPS://ABC.COM:443/\") === true WS/WSS Support URI.parse(\"wss://example.com/foo?bar=baz\"); //returns: //{ // scheme : \"wss\", // host: \"example.com\", // resourceName: \"/foo?bar=baz\", // secure: true, //} URI.equal(\"WS://ABC.COM:80/chat#one\", \"ws://abc.com/chat\") === true Mailto Support URI.parse(\"mailto:alpha@example.com,bravo@example.com?subject=SUBSCRIBE&body=Sign%20me%20up!\"); //returns: //{ // scheme : \"mailto\", // to : [\"alpha@example.com\", \"bravo@example.com\"], // subject : \"SUBSCRIBE\", // body : \"Sign me up!\" //} URI.serialize({ scheme : \"mailto\", to : [\"alpha@example.com\"], subject : \"REMOVE\", body : \"Please remove me\", headers : { cc : \"charlie@example.com\" } }) === \"mailto:alpha@example.com?cc=charlie@example.com&subject=REMOVE&body=Please%20remove%20me\" URN Support URI.parse(\"urn:example:foo\"); //returns: //{ // scheme : \"urn\", // nid : \"example\", // nss : \"foo\", //} URN UUID Support URI.parse(\"urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"); //returns: //{ // scheme : \"urn\", // nid : \"uuid\", // uuid : \"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\", //} Usage To load in a browser, use the following tag: <script type=\"text/javascript\" src=\"uri-js/dist/es5/uri.all.min.js\"></script> To load in a CommonJS/Module environment, first install with npm/yarn by running on the command line: npm install uri-js # OR yarn add uri-js Then, in your code, load it using: const URI = require(\"uri-js\"); If you are writing your code in ES6+ (ESNEXT) or TypeScript, you would load it using: import * as URI from \"uri-js\"; Or you can load just what you need using named exports: import { parse, serialize, resolve, resolveComponents, normalize, equal, removeDotSegments, pctEncChar, pctDecChars, escapeComponent, unescapeComponent } from \"uri-js\"; Breaking changes Breaking changes from 3.x URN parsing has been completely changed to better align with the specification. Scheme is now always urn, but has two new properties: nid which contains the Namspace Identifier, and nss which contains the Namespace Specific String. The nss property will be removed by higher order scheme handlers, such as the UUID URN scheme handler. The UUID of a URN can now be found in the uuid property. Breaking changes from 2.x URI validation has been removed as it was slow, exposed a vulnerabilty, and was generally not useful. Breaking changes from 1.x The errors array on parsed components is now an error string."
  },
  "Examiner-UI/node_modules/vite/LICENSE.html": {
    "href": "Examiner-UI/node_modules/vite/LICENSE.html",
    "title": "Vite core license | Examiner",
    "summary": "Vite core license Vite is released under the MIT license: MIT License Copyright (c) 2019-present, VoidZero Inc. and Vite contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Licenses of bundled dependencies The published Vite artifact additionally contains code with the following licenses: Apache-2.0, BSD-2-Clause, CC0-1.0, ISC, MIT Bundled dependencies: @ampproject/remapping License: Apache-2.0 By: Justin Ridgewell Repository: git+https://github.com/ampproject/remapping.git Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. @jridgewell/gen-mapping, @jridgewell/set-array License: MIT By: Justin Ridgewell Repositories: https://github.com/jridgewell/gen-mapping, https://github.com/jridgewell/set-array Copyright 2022 Justin Ridgewell jridgewell@google.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @jridgewell/resolve-uri License: MIT By: Justin Ridgewell Repository: https://github.com/jridgewell/resolve-uri Copyright 2019 Justin Ridgewell jridgewell@google.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @jridgewell/sourcemap-codec License: MIT By: Rich Harris Repository: git+https://github.com/jridgewell/sourcemap-codec.git The MIT License Copyright (c) 2015 Rich Harris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @jridgewell/trace-mapping License: MIT By: Justin Ridgewell Repository: git+https://github.com/jridgewell/trace-mapping.git Copyright 2022 Justin Ridgewell justin@ridgewell.name Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. @polka/compression License: MIT Repository: lukeed/polka @polka/url License: MIT By: Luke Edwards Repository: lukeed/polka @rollup/plugin-alias, @rollup/plugin-commonjs, @rollup/plugin-dynamic-import-vars, @rollup/pluginutils License: MIT By: Johannes Stein Repository: rollup/plugins License: MIT By: Rich Harris Repository: rollup/plugins License: MIT By: LarsDenBakker Repository: rollup/plugins License: MIT By: Rich Harris Repository: rollup/plugins The MIT License (MIT) Copyright (c) 2019 RollupJS Plugin Contributors (https://github.com/rollup/plugins/graphs/contributors) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. anymatch License: ISC By: Elan Shanker Repository: https://github.com/micromatch/anymatch The ISC License Copyright (c) 2019 Elan Shanker, Paul Miller (https://paulmillr.com) Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. artichokie License: MIT By: sapphi-red, Evan You Repository: git+https://github.com/sapphi-red/artichokie.git MIT License Copyright (c) 2020-present, Yuxi (Evan) You Copyright (c) 2023-present, sapphi-red Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. binary-extensions License: MIT By: Sindre Sorhus Repository: sindresorhus/binary-extensions MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Copyright (c) Paul Miller (https://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. braces, fill-range, is-number License: MIT By: Jon Schlinkert, Brian Woodward, Elan Shanker, Eugene Sharygin, hemanth.hm Repository: micromatch/braces License: MIT By: Jon Schlinkert, Edo Rivai, Paul Miller, Rouven Weßling Repository: jonschlinkert/fill-range License: MIT By: Jon Schlinkert, Olsten Larck, Rouven Weßling Repository: jonschlinkert/is-number The MIT License (MIT) Copyright (c) 2014-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. bundle-name, default-browser, default-browser-id, define-lazy-prop, is-docker, is-inside-container, is-wsl, open, run-applescript License: MIT By: Sindre Sorhus Repositories: sindresorhus/bundle-name, sindresorhus/default-browser, sindresorhus/default-browser-id, sindresorhus/define-lazy-prop, sindresorhus/is-docker, sindresorhus/is-inside-container, sindresorhus/is-wsl, sindresorhus/open, sindresorhus/run-applescript MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. cac License: MIT By: egoist Repository: egoist/cac The MIT License (MIT) Copyright (c) EGOIST 0x142857@gmail.com (https://github.com/egoist) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. chokidar License: MIT By: Paul Miller, Elan Shanker Repository: git+https://github.com/paulmillr/chokidar.git The MIT License (MIT) Copyright (c) 2012-2019 Paul Miller (https://paulmillr.com), Elan Shanker Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. commondir, shell-quote License: MIT By: James Halliday Repositories: http://github.com/substack/node-commondir.git, http://github.com/ljharb/shell-quote.git The MIT License Copyright (c) 2013 James Halliday (mail@substack.net) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. connect License: MIT By: TJ Holowaychuk, Douglas Christopher Wilson, Jonathan Ong, Tim Caswell Repository: senchalabs/connect (The MIT License) Copyright (c) 2010 Sencha Inc. Copyright (c) 2011 LearnBoost Copyright (c) 2011-2014 TJ Holowaychuk Copyright (c) 2015 Douglas Christopher Wilson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. convert-source-map License: MIT By: Thorsten Lorenz Repository: git://github.com/thlorenz/convert-source-map.git Copyright 2013 Thorsten Lorenz. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. cors License: MIT By: Troy Goode Repository: expressjs/cors (The MIT License) Copyright (c) 2013 Troy Goode troygoode@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. cross-spawn License: MIT By: André Cruz Repository: git@github.com:moxystudio/node-cross-spawn.git The MIT License (MIT) Copyright (c) 2018 Made With MOXY Lda hello@moxy.studio Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. cssesc License: MIT By: Mathias Bynens Repository: https://github.com/mathiasbynens/cssesc.git Copyright Mathias Bynens https://mathiasbynens.be/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. debug License: MIT By: Josh Junon, TJ Holowaychuk, Nathan Rajlich, Andrew Rhyne Repository: git://github.com/debug-js/debug.git (The MIT License) Copyright (c) 2014-2017 TJ Holowaychuk tj@vision-media.ca Copyright (c) 2018-2021 Josh Junon Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. dotenv License: BSD-2-Clause Repository: git://github.com/motdotla/dotenv.git Copyright (c) 2015, Scott Motte All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. dotenv-expand License: BSD-2-Clause By: motdotla Repository: https://github.com/motdotla/dotenv-expand Copyright (c) 2016, Scott Motte All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ee-first License: MIT By: Jonathan Ong, Douglas Christopher Wilson Repository: jonathanong/ee-first The MIT License (MIT) Copyright (c) 2014 Jonathan Ong me@jongleberry.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. encodeurl License: MIT By: Douglas Christopher Wilson Repository: pillarjs/encodeurl (The MIT License) Copyright (c) 2016 Douglas Christopher Wilson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. entities License: BSD-2-Clause By: Felix Boehm Repository: git://github.com/fb55/entities.git Copyright (c) Felix Böhm All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. es-module-lexer License: MIT By: Guy Bedford Repository: git+https://github.com/guybedford/es-module-lexer.git MIT License Copyright (C) 2018-2022 Guy Bedford Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. escape-html License: MIT Repository: component/escape-html (The MIT License) Copyright (c) 2012-2013 TJ Holowaychuk Copyright (c) 2015 Andreas Lubbe Copyright (c) 2015 Tiancheng \"Timothy\" Gu Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. estree-walker License: MIT By: Rich Harris Repository: https://github.com/Rich-Harris/estree-walker Copyright (c) 2015-20 these people Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. etag License: MIT By: Douglas Christopher Wilson, David Björklund Repository: jshttp/etag (The MIT License) Copyright (c) 2014-2016 Douglas Christopher Wilson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. eventemitter3 License: MIT By: Arnout Kazemier Repository: git://github.com/primus/eventemitter3.git The MIT License (MIT) Copyright (c) 2014 Arnout Kazemier Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. finalhandler License: MIT By: Douglas Christopher Wilson Repository: pillarjs/finalhandler (The MIT License) Copyright (c) 2014-2017 Douglas Christopher Wilson doug@somethingdoug.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. follow-redirects License: MIT By: Ruben Verborgh, Olivier Lalonde, James Talmage Repository: git+ssh://git@github.com/follow-redirects/follow-redirects.git Copyright 2014–present Olivier Lalonde olalonde@gmail.com, James Talmage james@talmage.io, Ruben Verborgh Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. generic-names License: MIT By: Alexey Litvinov Repository: git+https://github.com/css-modules/generic-names.git The MIT License (MIT) Copyright (c) 2015 Alexey Litvinov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. glob-parent License: ISC By: Gulp Team, Elan Shanker, Blaine Bublitz Repository: gulpjs/glob-parent The ISC License Copyright (c) 2015, 2019 Elan Shanker Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. host-validation-middleware License: MIT By: sapphi-red Repository: git+https://github.com/sapphi-red/host-validation-middleware.git MIT License Copyright (c) 2025 sapphi-red Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. http-proxy License: MIT By: Charlie Robbins, jcrugzz jcrugzz@gmail.com Repository: https://github.com/http-party/node-http-proxy.git node-http-proxy Copyright (c) 2010-2016 Charlie Robbins, Jarrett Cruger & the Contributors. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. icss-utils License: ISC By: Glen Maddern Repository: git+https://github.com/css-modules/icss-utils.git ISC License (ISC) Copyright 2018 Glen Maddern Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. is-binary-path License: MIT By: Sindre Sorhus Repository: sindresorhus/is-binary-path MIT License Copyright (c) 2019 Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com), Paul Miller (https://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-extglob License: MIT By: Jon Schlinkert Repository: jonschlinkert/is-extglob The MIT License (MIT) Copyright (c) 2014-2016, Jon Schlinkert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-glob License: MIT By: Jon Schlinkert, Brian Woodward, Daniel Perez Repository: micromatch/is-glob The MIT License (MIT) Copyright (c) 2014-2017, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. is-reference License: MIT By: Rich Harris Repository: git+https://github.com/Rich-Harris/is-reference.git isexe, which License: ISC By: Isaac Z. Schlueter Repositories: git+https://github.com/isaacs/isexe.git, git://github.com/isaacs/node-which.git The ISC License Copyright (c) Isaac Z. Schlueter and Contributors Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. js-tokens License: MIT By: Simon Lydell Repository: lydell/js-tokens The MIT License (MIT) Copyright (c) 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024 Simon Lydell Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. launch-editor, launch-editor-middleware License: MIT By: Evan You Repositories: git+https://github.com/yyx990803/launch-editor.git, git+https://github.com/yyx990803/launch-editor.git The MIT License (MIT) Copyright (c) 2017-present, Yuxi (Evan) You Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. lilconfig License: MIT By: antonk52 Repository: https://github.com/antonk52/lilconfig MIT License Copyright (c) 2022 Anton Kastritskiy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. loader-utils License: MIT By: Tobias Koppers @sokra Repository: https://github.com/webpack/loader-utils.git Copyright JS Foundation and other contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. lodash.camelcase License: MIT By: John-David Dalton, Blaine Bublitz, Mathias Bynens Repository: lodash/lodash Copyright jQuery Foundation and other contributors https://jquery.org/ Based on Underscore.js, copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors http://underscorejs.org/ This software consists of voluntary contributions made by many individuals. For exact contribution history, see the revision history available at https://github.com/lodash/lodash The following license applies to all parts of this software except as documented below: ==== Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ==== Copyright and related rights for sample code are waived via CC0. Sample code is defined as all source code displayed within the prose of the documentation. CC0: http://creativecommons.org/publicdomain/zero/1.0/ ==== Files located in the node_modules and vendor directories are externally maintained libraries used by this software which have their own licenses; we recommend you read them, as their terms may differ from the terms above. magic-string License: MIT By: Rich Harris Repository: https://github.com/rich-harris/magic-string Copyright 2018 Rich Harris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. mlly, ufo License: MIT Repositories: unjs/mlly, unjs/ufo MIT License Copyright (c) Pooya Parsa pooya@pi0.io Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. mrmime License: MIT By: Luke Edwards Repository: lukeed/mrmime The MIT License (MIT) Copyright (c) Luke Edwards luke.edwards05@gmail.com (https://lukeed.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ms License: MIT Repository: vercel/ms The MIT License (MIT) Copyright (c) 2020 Vercel, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. normalize-path License: MIT By: Jon Schlinkert, Blaine Bublitz Repository: jonschlinkert/normalize-path The MIT License (MIT) Copyright (c) 2014-2018, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. object-assign License: MIT By: Sindre Sorhus Repository: sindresorhus/object-assign The MIT License (MIT) Copyright (c) Sindre Sorhus sindresorhus@gmail.com (sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. on-finished License: MIT By: Douglas Christopher Wilson, Jonathan Ong Repository: jshttp/on-finished (The MIT License) Copyright (c) 2013 Jonathan Ong me@jongleberry.com Copyright (c) 2014 Douglas Christopher Wilson doug@somethingdoug.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. parse5 License: MIT By: Ivan Nikulin, https://github.com/inikulin/parse5/graphs/contributors Repository: git://github.com/inikulin/parse5.git Copyright (c) 2013-2019 Ivan Nikulin (ifaaan@gmail.com, https://github.com/inikulin) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. parseurl License: MIT By: Douglas Christopher Wilson, Jonathan Ong Repository: pillarjs/parseurl (The MIT License) Copyright (c) 2014 Jonathan Ong me@jongleberry.com Copyright (c) 2014-2017 Douglas Christopher Wilson doug@somethingdoug.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. path-key, shebang-regex License: MIT By: Sindre Sorhus Repositories: sindresorhus/path-key, sindresorhus/shebang-regex MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. periscopic License: MIT Repository: Rich-Harris/periscopic Copyright (c) 2019 Rich Harris Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. picocolors License: ISC By: Alexey Raspopov Repository: alexeyraspopov/picocolors ISC License Copyright (c) 2021-2024 Oleksii Raspopov, Kostiantyn Denysov, Anton Verinov Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. postcss-import License: MIT By: Maxime Thirouin Repository: https://github.com/postcss/postcss-import.git The MIT License (MIT) Copyright (c) 2014 Maxime Thirouin, Jason Campbell & Kevin Mårtensson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. postcss-load-config License: MIT By: Michael Ciniawky, Ryan Dunckel, Mateusz Derks, Dalton Santos, Patrick Gilday, François Wouts Repository: postcss/postcss-load-config The MIT License (MIT) Copyright Michael Ciniawsky michael.ciniawsky@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. postcss-modules License: MIT By: Alexander Madyankin Repository: https://github.com/css-modules/postcss-modules.git The MIT License (MIT) Copyright 2015-present Alexander Madyankin alexander@madyankin.name Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. postcss-modules-extract-imports License: ISC By: Glen Maddern Repository: https://github.com/css-modules/postcss-modules-extract-imports.git Copyright 2015 Glen Maddern Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. postcss-modules-local-by-default License: MIT By: Mark Dalgleish Repository: https://github.com/css-modules/postcss-modules-local-by-default.git The MIT License (MIT) Copyright 2015 Mark Dalgleish mark.john.dalgleish@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. postcss-modules-scope License: ISC By: Glen Maddern Repository: https://github.com/css-modules/postcss-modules-scope.git ISC License (ISC) Copyright (c) 2015, Glen Maddern Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. postcss-modules-values License: ISC By: Glen Maddern Repository: git+https://github.com/css-modules/postcss-modules-values.git ISC License (ISC) Copyright (c) 2015, Glen Maddern Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. postcss-selector-parser License: MIT By: Ben Briggs, Chris Eppstein Repository: postcss/postcss-selector-parser Copyright (c) Ben Briggs beneb.info@gmail.com (http://beneb.info) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. postcss-value-parser License: MIT By: Bogdan Chadkin Repository: https://github.com/TrySound/postcss-value-parser.git Copyright (c) Bogdan Chadkin trysound@yandex.ru Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. readdirp License: MIT By: Thorsten Lorenz, Paul Miller Repository: git://github.com/paulmillr/readdirp.git MIT License Copyright (c) 2012-2019 Thorsten Lorenz, Paul Miller (https://paulmillr.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. requires-port License: MIT By: Arnout Kazemier Repository: https://github.com/unshiftio/requires-port The MIT License (MIT) Copyright (c) 2015 Unshift.io, Arnout Kazemier, the Contributors. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. resolve.exports, totalist License: MIT By: Luke Edwards Repositories: lukeed/resolve.exports, lukeed/totalist The MIT License (MIT) Copyright (c) Luke Edwards luke.edwards05@gmail.com (lukeed.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. shebang-command License: MIT By: Kevin Mårtensson Repository: kevva/shebang-command MIT License Copyright (c) Kevin Mårtensson kevinmartensson@gmail.com (github.com/kevva) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. sirv License: MIT By: Luke Edwards Repository: lukeed/sirv statuses License: MIT By: Douglas Christopher Wilson, Jonathan Ong Repository: jshttp/statuses The MIT License (MIT) Copyright (c) 2014 Jonathan Ong me@jongleberry.com Copyright (c) 2016 Douglas Christopher Wilson doug@somethingdoug.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. string-hash License: CC0-1.0 By: The Dark Sky Company Repository: git://github.com/darkskyapp/string-hash.git strip-literal License: MIT By: Anthony Fu Repository: git+https://github.com/antfu/strip-literal.git MIT License Copyright (c) 2022 Anthony Fu https://github.com/antfu Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. to-regex-range License: MIT By: Jon Schlinkert, Rouven Weßling Repository: micromatch/to-regex-range The MIT License (MIT) Copyright (c) 2015-present, Jon Schlinkert. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. tsconfck License: MIT By: dominikg Repository: git+https://github.com/dominikg/tsconfck.git MIT License Copyright (c) 2021-present dominikg and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. -- Licenses for 3rd-party code included in tsconfck -- strip-bom and strip-json-comments MIT License Copyright (c) Sindre Sorhus sindresorhus@gmail.com (https://sindresorhus.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. unpipe License: MIT By: Douglas Christopher Wilson Repository: stream-utils/unpipe (The MIT License) Copyright (c) 2015 Douglas Christopher Wilson doug@somethingdoug.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. util-deprecate License: MIT By: Nathan Rajlich Repository: git://github.com/TooTallNate/util-deprecate.git (The MIT License) Copyright (c) 2014 Nathan Rajlich nathan@tootallnate.net Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. utils-merge License: MIT By: Jared Hanson Repository: git://github.com/jaredhanson/utils-merge.git The MIT License (MIT) Copyright (c) 2013-2017 Jared Hanson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. vary License: MIT By: Douglas Christopher Wilson Repository: jshttp/vary (The MIT License) Copyright (c) 2014-2017 Douglas Christopher Wilson Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ws License: MIT By: Einar Otto Stangvik Repository: git+https://github.com/websockets/ws.git Copyright (c) 2011 Einar Otto Stangvik einaros@gmail.com Copyright (c) 2013 Arnout Kazemier and contributors Copyright (c) 2016 Luigi Pinca and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Examiner-UI/node_modules/vite/README.html": {
    "href": "Examiner-UI/node_modules/vite/README.html",
    "title": "vite ⚡ | Examiner",
    "summary": "vite ⚡ Next Generation Frontend Tooling \uD83D\uDCA1 Instant Server Start ⚡️ Lightning Fast HMR \uD83D\uDEE0️ Rich Features \uD83D\uDCE6 Optimized Build \uD83D\uDD29 Universal Plugin Interface \uD83D\uDD11 Fully Typed APIs Vite (French word for \"fast\", pronounced /vit/) is a new breed of frontend build tool that significantly improves the frontend development experience. It consists of two major parts: A dev server that serves your source files over native ES modules, with rich built-in features and astonishingly fast Hot Module Replacement (HMR). A build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production. In addition, Vite is highly extensible via its Plugin API and JavaScript API with full typing support. Read the Docs to Learn More."
  },
  "Examiner-UI/node_modules/vite/node_modules/fdir/README.html": {
    "href": "Examiner-UI/node_modules/vite/node_modules/fdir/README.html",
    "title": "The Fastest Directory Crawler & Globber for NodeJS | Examiner",
    "summary": "The Fastest Directory Crawler & Globber for NodeJS ⚡ The Fastest: Nothing similar (in the NodeJS world) beats fdir in speed. It can easily crawl a directory containing 1 million files in < 1 second. \uD83D\uDCA1 Stupidly Easy: fdir uses expressive Builder pattern to build the crawler increasing code readability. \uD83E\uDD16 Zero Dependencies*: fdir only uses NodeJS fs & path modules. \uD83D\uDD7A Astonishingly Small: < 2KB in size gzipped & minified. \uD83D\uDDAE Hackable: Extending fdir is extremely simple now that the new Builder API is here. Feel free to experiment around. * picomatch must be installed manually by the user to support globbing. \uD83D\uDE84 Quickstart Installation You can install using npm: $ npm i fdir or Yarn: $ yarn add fdir Usage import { fdir } from \"fdir\"; // create the builder const api = new fdir().withFullPaths().crawl(\"path/to/dir\"); // get all files in a directory synchronously const files = api.sync(); // or asynchronously api.withPromise().then((files) => { // do something with the result here. }); Documentation: Documentation for all methods is available here. \uD83D\uDCCA Benchmarks: Please check the benchmark against the latest version here. \uD83D\uDE4FUsed by: fdir is downloaded over 200k+ times a week by projects around the world. Here's a list of some notable projects using fdir in production: Note: if you think your project should be here, feel free to open an issue. Notable is anything with a considerable amount of GitHub stars. rollup/plugins SuperchupuDev/tinyglobby pulumi/pulumi dotenvx/dotenvx mdn/yari streetwriters/notesnook imba/imba moroshko/react-scanner netlify/build yassinedoghri/astro-i18next selfrefactor/rambda whyboris/Video-Hub-App \uD83E\uDDAE LICENSE Copyright © 2024 Abdullah Atta under MIT. Read full text here."
  },
  "Examiner-UI/node_modules/vite/node_modules/picomatch/README.html": {
    "href": "Examiner-UI/node_modules/vite/node_modules/picomatch/README.html",
    "title": "Picomatch | Examiner",
    "summary": "Picomatch Blazing fast and accurate glob matcher written in JavaScript. No dependencies and full support for standard and extended Bash glob features, including braces, extglobs, POSIX brackets, and regular expressions. Why picomatch? Lightweight - No dependencies Minimal - Tiny API surface. Main export is a function that takes a glob pattern and returns a matcher function. Fast - Loads in about 2ms (that's several times faster than a single frame of a HD movie at 60fps) Performant - Use the returned matcher function to speed up repeat matching (like when watching files) Accurate matching - Using wildcards (* and ?), globstars (**) for nested directories, advanced globbing with extglobs, braces, and POSIX brackets, and support for escaping special characters with \\ or quotes. Well tested - Thousands of unit tests See the library comparison to other libraries. Table of Contents Click to expand Install Usage API picomatch .test .matchBase .isMatch .parse .scan .compileRe .makeRe .toRegex Options Picomatch options Scan Options Options Examples Globbing features Basic globbing Advanced globbing Braces Matching special characters as literals Library Comparisons Benchmarks Philosophies About Author License (TOC generated by verb using markdown-toc) Install Install with npm: npm install --save picomatch Usage The main export is a function that takes a glob pattern and an options object and returns a function for matching strings. const pm = require('picomatch'); const isMatch = pm('*.js'); console.log(isMatch('abcd')); //=> false console.log(isMatch('a.js')); //=> true console.log(isMatch('a.md')); //=> false console.log(isMatch('a/b.js')); //=> false API picomatch Creates a matcher function from one or more glob patterns. The returned function takes a string to match as its first argument, and returns true if the string is a match. The returned matcher function also takes a boolean as the second argument that, when true, returns an object with additional information. Params globs {String|Array}: One or more glob patterns. options {Object=} returns {Function=}: Returns a matcher function. Example const picomatch = require('picomatch'); // picomatch(glob[, options]); const isMatch = picomatch('*.!(*a)'); console.log(isMatch('a.a')); //=> false console.log(isMatch('a.b')); //=> true Example without node.js For environments without node.js, picomatch/posix provides you a dependency-free matcher, without automatic OS detection. const picomatch = require('picomatch/posix'); // the same API, defaulting to posix paths const isMatch = picomatch('a/*'); console.log(isMatch('a\\\\b')); //=> false console.log(isMatch('a/b')); //=> true // you can still configure the matcher function to accept windows paths const isMatch = picomatch('a/*', { options: windows }); console.log(isMatch('a\\\\b')); //=> true console.log(isMatch('a/b')); //=> true .test Test input with the given regex. This is used by the main picomatch() function to test the input string. Params input {String}: String to test. regex {RegExp} returns {Object}: Returns an object with matching info. Example const picomatch = require('picomatch'); // picomatch.test(input, regex[, options]); console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/)); // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' } .matchBase Match the basename of a filepath. Params input {String}: String to test. glob {RegExp|String}: Glob pattern or regex created by .makeRe. returns {Boolean} Example const picomatch = require('picomatch'); // picomatch.matchBase(input, glob[, options]); console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true .isMatch Returns true if any of the given glob patterns match the specified string. Params {String|Array}: str The string to test. {String|Array}: patterns One or more glob patterns to use for matching. {Object}: See available options. returns {Boolean}: Returns true if any patterns match str Example const picomatch = require('picomatch'); // picomatch.isMatch(string, patterns[, options]); console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true console.log(picomatch.isMatch('a.a', 'b.*')); //=> false .parse Parse a glob pattern to create the source string for a regular expression. Params pattern {String} options {Object} returns {Object}: Returns an object with useful properties and output to be used as a regex source string. Example const picomatch = require('picomatch'); const result = picomatch.parse(pattern[, options]); .scan Scan a glob pattern to separate the pattern into segments. Params input {String}: Glob pattern to scan. options {Object} returns {Object}: Returns an object with Example const picomatch = require('picomatch'); // picomatch.scan(input[, options]); const result = picomatch.scan('!./foo/*.js'); console.log(result); { prefix: '!./', input: '!./foo/*.js', start: 3, base: 'foo', glob: '*.js', isBrace: false, isBracket: false, isGlob: true, isExtglob: false, isGlobstar: false, negated: true } .compileRe Compile a regular expression from the state object returned by the parse() method. Params state {Object} options {Object} returnOutput {Boolean}: Intended for implementors, this argument allows you to return the raw output from the parser. returnState {Boolean}: Adds the state to a state property on the returned regex. Useful for implementors and debugging. returns {RegExp} .makeRe Create a regular expression from a parsed glob pattern. Params state {String}: The object returned from the .parse method. options {Object} returnOutput {Boolean}: Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result. returnState {Boolean}: Implementors may use this argument to return the state from the parsed glob with the returned regular expression. returns {RegExp}: Returns a regex created from the given pattern. Example const picomatch = require('picomatch'); const state = picomatch.parse('*.js'); // picomatch.compileRe(state[, options]); console.log(picomatch.compileRe(state)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ .toRegex Create a regular expression from the given regex source string. Params source {String}: Regular expression source string. options {Object} returns {RegExp} Example const picomatch = require('picomatch'); // picomatch.toRegex(source[, options]); const { output } = picomatch.parse('*.js'); console.log(picomatch.toRegex(output)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ Options Picomatch options The following options may be used with the main picomatch() function or any of the methods on the picomatch API. Option Type Default value Description basename boolean false If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. bash boolean false Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (**). capture boolean undefined Return regex matches in supporting methods. contains boolean undefined Allows glob to match any part of the given string(s). cwd string process.cwd() Current working directory. Used by picomatch.split() debug boolean undefined Debug regular expressions when an error is thrown. dot boolean false Enable dotfile matching. By default, dotfiles are ignored unless a . is explicitly defined in the pattern, or options.dot is true expandRange function undefined Custom function for expanding ranges in brace patterns, such as {a..z}. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. failglob boolean false Throws an error if no matches are found. Based on the bash option of the same name. fastpaths boolean true To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to false. flags string undefined Regex flags to use in the generated regex. If defined, the nocase option will be overridden. format function undefined Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. ignore array\\|string undefined One or more glob patterns for excluding strings that should not be matched from the result. keepQuotes boolean false Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes. literalBrackets boolean undefined When true, brackets in the glob pattern will be escaped so that only literal brackets will be matched. matchBase boolean false Alias for basename maxLength boolean 65536 Limit the max length of the input string. An error is thrown if the input string is longer than this value. nobrace boolean false Disable brace matching, so that {a,b} and {1..3} would be treated as literal characters. nobracket boolean undefined Disable matching with regex brackets. nocase boolean false Make matching case-insensitive. Equivalent to the regex i flag. Note that this option is overridden by the flags option. nodupes boolean true Deprecated, use nounique instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. noext boolean false Alias for noextglob noextglob boolean false Disable support for matching with extglobs (like +(a\\|b)) noglobstar boolean false Disable support for matching nested directories with globstars (**) nonegate boolean false Disable support for negating with leading ! noquantifiers boolean false Disable support for regex quantifiers (like a{1,2}) and treat them as brace patterns to be expanded. onIgnore function undefined Function to be called on ignored items. onMatch function undefined Function to be called on matched items. onResult function undefined Function to be called on all items, regardless of whether or not they are matched or ignored. posix boolean false Support POSIX character classes (\"posix brackets\"). posixSlashes boolean undefined Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself prepend boolean undefined String to prepend to the generated regex used for matching. regex boolean false Use regular expression rules for + (instead of matching literal +), and for stars that follow closing parentheses or brackets (as in )* and ]*). strictBrackets boolean undefined Throw an error if brackets, braces, or parens are imbalanced. strictSlashes boolean undefined When true, picomatch won't match trailing slashes with single stars. unescape boolean undefined Remove backslashes preceding escaped characters in the glob pattern. By default, backslashes are retained. unixify boolean undefined Alias for posixSlashes, for backwards compatibility. windows boolean false Also accept backslashes as the path separator. Scan Options In addition to the main picomatch options, the following options may also be used with the .scan method. Option Type Default value Description tokens boolean false When true, the returned object will include an array of tokens (objects), representing each path \"segment\" in the scanned glob pattern parts boolean false When true, the returned object will include an array of strings representing each path \"segment\" in the scanned glob pattern. This is automatically enabled when options.tokens is true Example const picomatch = require('picomatch'); const result = picomatch.scan('!./foo/*.js', { tokens: true }); console.log(result); // { // prefix: '!./', // input: '!./foo/*.js', // start: 3, // base: 'foo', // glob: '*.js', // isBrace: false, // isBracket: false, // isGlob: true, // isExtglob: false, // isGlobstar: false, // negated: true, // maxDepth: 2, // tokens: [ // { value: '!./', depth: 0, isGlob: false, negated: true, isPrefix: true }, // { value: 'foo', depth: 1, isGlob: false }, // { value: '*.js', depth: 1, isGlob: true } // ], // slashes: [ 2, 6 ], // parts: [ 'foo', '*.js' ] // } Options Examples options.expandRange Type: function Default: undefined Custom function for expanding ranges in brace patterns. The fill-range library is ideal for this purpose, or you can use custom code to do whatever you need. Example The following example shows how to create a glob that matches a folder const fill = require('fill-range'); const regex = pm.makeRe('foo/{01..25}/bar', { expandRange(a, b) { return `(${fill(a, b, { toRegex: true })})`; } }); console.log(regex); //=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/ console.log(regex.test('foo/00/bar')) // false console.log(regex.test('foo/01/bar')) // true console.log(regex.test('foo/10/bar')) // true console.log(regex.test('foo/22/bar')) // true console.log(regex.test('foo/25/bar')) // true console.log(regex.test('foo/26/bar')) // false options.format Type: function Default: undefined Custom function for formatting strings before they're matched. Example // strip leading './' from strings const format = str => str.replace(/^\\.\\//, ''); const isMatch = picomatch('foo/*.js', { format }); console.log(isMatch('./foo/bar.js')); //=> true options.onMatch const onMatch = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onMatch }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onIgnore const onIgnore = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onIgnore, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onResult const onResult = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onResult, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); Globbing features Basic globbing (Wildcard matching) Advanced globbing (extglobs, posix brackets, brace matching) Basic globbing Character Description * Matches any character zero or more times, excluding path separators. Does not match path separators or hidden files or directories (\"dotfiles\"), unless explicitly enabled by setting the dot option to true. ** Matches any character zero or more times, including path separators. Note that ** will only match path separators (/, and \\\\ with the windows option) when they are the only characters in a path segment. Thus, foo**/bar is equivalent to foo*/bar, and foo/a**b/bar is equivalent to foo/a*b/bar, and more than two consecutive stars in a glob path segment are regarded as a single star. Thus, foo/***/bar is equivalent to foo/*/bar. ? Matches any character excluding path separators one time. Does not match path separators or leading dots. [abc] Matches any characters inside the brackets. For example, [abc] would match the characters a, b or c, and nothing else. Matching behavior vs. Bash Picomatch's matching features and expected results in unit tests are based on Bash's unit tests and the Bash 4.3 specification, with the following exceptions: Bash will match foo/bar/baz with *. Picomatch only matches nested directories with **. Bash greedily matches with negated extglobs. For example, Bash 4.3 says that !(foo)* should match foo and foobar, since the trailing * bracktracks to match the preceding pattern. This is very memory-inefficient, and IMHO, also incorrect. Picomatch would return false for both foo and foobar. Advanced globbing extglobs POSIX brackets Braces Extglobs Pattern Description @(pattern) Match only one consecutive occurrence of pattern *(pattern) Match zero or more consecutive occurrences of pattern +(pattern) Match one or more consecutive occurrences of pattern ?(pattern) Match zero or one consecutive occurrences of pattern !(pattern) Match anything but pattern Examples const pm = require('picomatch'); // *(pattern) matches ZERO or more of \"pattern\" console.log(pm.isMatch('a', 'a*(z)')); // true console.log(pm.isMatch('az', 'a*(z)')); // true console.log(pm.isMatch('azzz', 'a*(z)')); // true // +(pattern) matches ONE or more of \"pattern\" console.log(pm.isMatch('a', 'a+(z)')); // false console.log(pm.isMatch('az', 'a+(z)')); // true console.log(pm.isMatch('azzz', 'a+(z)')); // true // supports multiple extglobs console.log(pm.isMatch('foo.bar', '!(foo).!(bar)')); // false // supports nested extglobs console.log(pm.isMatch('foo.bar', '!(!(foo)).!(!(bar))')); // true POSIX brackets POSIX classes are disabled by default. Enable this feature by setting the posix option to true. Enable POSIX bracket support console.log(pm.makeRe('[[:word:]]+', { posix: true })); //=> /^(?:(?=.)[A-Za-z0-9_]+\\/?)$/ Supported POSIX classes The following named POSIX bracket expressions are supported: [:alnum:] - Alphanumeric characters, equ [a-zA-Z0-9] [:alpha:] - Alphabetical characters, equivalent to [a-zA-Z]. [:ascii:] - ASCII characters, equivalent to [\\\\x00-\\\\x7F]. [:blank:] - Space and tab characters, equivalent to [ \\\\t]. [:cntrl:] - Control characters, equivalent to [\\\\x00-\\\\x1F\\\\x7F]. [:digit:] - Numerical digits, equivalent to [0-9]. [:graph:] - Graph characters, equivalent to [\\\\x21-\\\\x7E]. [:lower:] - Lowercase letters, equivalent to [a-z]. [:print:] - Print characters, equivalent to [\\\\x20-\\\\x7E ]. [:punct:] - Punctuation and symbols, equivalent to [\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_{|}~]`. [:space:] - Extended space characters, equivalent to [ \\\\t\\\\r\\\\n\\\\v\\\\f]. [:upper:] - Uppercase letters, equivalent to [A-Z]. [:word:] - Word characters (letters, numbers and underscores), equivalent to [A-Za-z0-9_]. [:xdigit:] - Hexadecimal digits, equivalent to [A-Fa-f0-9]. See the Bash Reference Manual for more information. Braces Picomatch does not do brace expansion. For brace expansion and advanced matching with braces, use micromatch instead. Picomatch has very basic support for braces. Matching special characters as literals If you wish to match the following special characters in a filepath, and you want to use these characters in your glob pattern, they must be escaped with backslashes or quotes: Special Characters Some characters that are used for matching in regular expressions are also regarded as valid file path characters on some platforms. To match any of the following characters as literals: `$^*+?()[] Examples: console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); Library Comparisons The following table shows which features are supported by minimatch, micromatch, picomatch, nanomatch, extglob, braces, and expand-brackets. Feature minimatch micromatch picomatch nanomatch extglob braces expand-brackets Wildcard matching (*?+) ✔ ✔ ✔ ✔ - - - Advancing globbing ✔ ✔ ✔ - - - - Brace matching ✔ ✔ ✔ - - ✔ - Brace expansion ✔ ✔ - - - ✔ - Extglobs partial ✔ ✔ - ✔ - - Posix brackets - ✔ ✔ - - - ✔ Regular expression syntax - ✔ ✔ ✔ ✔ - ✔ File system operations - - - - - - - Benchmarks Performance comparison of picomatch and minimatch. (Pay special attention to the last three benchmarks. Minimatch freezes on long ranges.) # .makeRe star (*) picomatch x 4,449,159 ops/sec ±0.24% (97 runs sampled) minimatch x 632,772 ops/sec ±0.14% (98 runs sampled) # .makeRe star; dot=true (*) picomatch x 3,500,079 ops/sec ±0.26% (99 runs sampled) minimatch x 564,916 ops/sec ±0.23% (96 runs sampled) # .makeRe globstar (**) picomatch x 3,261,000 ops/sec ±0.27% (98 runs sampled) minimatch x 1,664,766 ops/sec ±0.20% (100 runs sampled) # .makeRe globstars (**/**/**) picomatch x 3,284,469 ops/sec ±0.18% (97 runs sampled) minimatch x 1,435,880 ops/sec ±0.34% (95 runs sampled) # .makeRe with leading star (*.txt) picomatch x 3,100,197 ops/sec ±0.35% (99 runs sampled) minimatch x 428,347 ops/sec ±0.42% (94 runs sampled) # .makeRe - basic braces ({a,b,c}*.txt) picomatch x 443,578 ops/sec ±1.33% (89 runs sampled) minimatch x 107,143 ops/sec ±0.35% (94 runs sampled) # .makeRe - short ranges ({a..z}*.txt) picomatch x 415,484 ops/sec ±0.76% (96 runs sampled) minimatch x 14,299 ops/sec ±0.26% (96 runs sampled) # .makeRe - medium ranges ({1..100000}*.txt) picomatch x 395,020 ops/sec ±0.87% (89 runs sampled) minimatch x 2 ops/sec ±4.59% (10 runs sampled) # .makeRe - long ranges ({1..10000000}*.txt) picomatch x 400,036 ops/sec ±0.83% (90 runs sampled) minimatch (FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory) Philosophies The goal of this library is to be blazing fast, without compromising on accuracy. Accuracy The number one of goal of this library is accuracy. However, it's not unusual for different glob implementations to have different rules for matching behavior, even with simple wildcard matching. It gets increasingly more complicated when combinations of different features are combined, like when extglobs are combined with globstars, braces, slashes, and so on: !(**/{a,b,*/c}). Thus, given that there is no canonical glob specification to use as a single source of truth when differences of opinion arise regarding behavior, sometimes we have to implement our best judgement and rely on feedback from users to make improvements. Performance Although this library performs well in benchmarks, and in most cases it's faster than other popular libraries we benchmarked against, we will always choose accuracy over performance. It's not helpful to anyone if our library is faster at returning the wrong answer. About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Please read the contributing guide for advice on opening issues, pull requests, and coding standards. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: npm install -g verbose/verb#dev verb-generate-readme && verb Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2017-present, Jon Schlinkert. Released under the MIT License."
  },
  "Examiner-UI/node_modules/which/CHANGELOG.html": {
    "href": "Examiner-UI/node_modules/which/CHANGELOG.html",
    "title": "Changes | Examiner",
    "summary": "Changes 2.0.2 Rename bin to node-which 2.0.1 generate changelog and publish on version bump enforce 100% test coverage Promise interface 2.0.0 Parallel tests, modern JavaScript, and drop support for node < 8 1.3.1 update deps update travis v1.3.0 Add nothrow option to which.sync update tap v1.2.14 appveyor: drop node 5 and 0.x travis-ci: add node 6, drop 0.x v1.2.13 test: Pass missing option to pass on windows update tap update isexe to 2.0.0 neveragain.tech pledge request v1.2.12 Removed unused require v1.2.11 Prevent changelog script from being included in package v1.2.10 Use env.PATH only, not env.Path v1.2.9 fix for paths starting with ../ Remove unused is-absolute module v1.2.8 bullet items in changelog that contain (but don't start with) # v1.2.7 strip 'update changelog' changelog entries out of changelog v1.2.6 make the changelog bulleted v1.2.5 make a changelog, and keep it up to date don't include tests in package Properly handle relative-path executables appveyor Attach error code to Not Found error Make tests pass on Windows v1.2.4 Fix typo v1.2.3 update isexe, fix regression in pathExt handling v1.2.2 update deps, use isexe module, test windows v1.2.1 Sometimes windows PATH entries are quoted Fixed a bug in the check for group and user mode bits. This bug was introduced during refactoring for supporting strict mode. doc cli v1.2.0 Add support for opt.all and -as cli flags test the bin update travis Allow checking for multiple programs in bin/which tap 2 v1.1.2 travis Refactored and fixed undefined error on Windows Support strict mode v1.1.1 test +g exes against secondary groups, if available Use windows exe semantics on cygwin & msys cwd should be first in path on win32, not last Handle lower-case 'env.Path' on Windows Update docs use single-quotes v1.1.0 Add tests, depend on is-absolute v1.0.9 which.js: root is allowed to execute files owned by anyone v1.0.8 don't use graceful-fs v1.0.7 add license to package.json v1.0.6 isc license 1.0.5 Awful typo 1.0.4 Test for path absoluteness properly win: Allow '' as a pathext if cmd has a . in it 1.0.3 Remove references to execPath Make which.sync() work on Windows by honoring the PATHEXT variable. Make isExe() always return true on Windows. MIT 1.0.2 Only files can be exes 1.0.1 Respect the PATHEXT env for win32 support should 0755 the bin binary guts package 1st"
  },
  "Examiner-UI/node_modules/which/README.html": {
    "href": "Examiner-UI/node_modules/which/README.html",
    "title": "which | Examiner",
    "summary": "which Like the unix which utility. Finds the first instance of a specified executable in the PATH environment variable. Does not cache the results, so hash -r is not needed when the PATH changes. USAGE var which = require('which') // async usage which('node', function (er, resolvedPath) { // er is returned if no \"node\" is found on the PATH // if it is found, then the absolute path to the exec is returned }) // or promise which('node').then(resolvedPath => { ... }).catch(er => { ... not found ... }) // sync usage // throws if not found var resolved = which.sync('node') // if nothrow option is used, returns null if not found resolved = which.sync('node', {nothrow: true}) // Pass options to override the PATH and PATHEXT environment vars. which('node', { path: someOtherPath }, function (er, resolved) { if (er) throw er console.log('found at %j', resolved) }) CLI USAGE Same as the BSD which(1) binary. usage: which [-as] program ... OPTIONS You may pass an options object as the second argument. path: Use instead of the PATH environment variable. pathExt: Use instead of the PATHEXT environment variable. all: Return all matches, instead of just the first one. Note that this means the function returns an array of strings instead of a single string."
  },
  "Examiner-UI/node_modules/word-wrap/README.html": {
    "href": "Examiner-UI/node_modules/word-wrap/README.html",
    "title": "word-wrap | Examiner",
    "summary": "word-wrap Wrap words to a specified length. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ❤️ and support. Install Install with npm: $ npm install --save word-wrap Usage var wrap = require('word-wrap'); wrap('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'); Results in: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Options options.width Type: Number Default: 50 The width of the text before wrapping to a new line. Example: wrap(str, {width: 60}); options.indent Type: String Default: `` (two spaces) The string to use at the beginning of each line. Example: wrap(str, {indent: ' '}); options.newline Type: String Default: \\n The string to use at the end of each line. Example: wrap(str, {newline: '\\n\\n'}); options.escape Type: function Default: function(str){return str;} An escape function to run on each line after splitting them. Example: var xmlescape = require('xml-escape'); wrap(str, { escape: function(string){ return xmlescape(string); } }); options.trim Type: Boolean Default: false Trim trailing whitespace from the returned string. This option is included since .trim() would also strip the leading indentation from the first line. Example: wrap(str, {trim: true}); options.cut Type: Boolean Default: false Break a word between any two letters when the word is longer than the specified width. Example: wrap(str, {cut: true}); About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: common-words: Updated list (JSON) of the 100 most common words in the English language. Useful for… more | homepage shuffle-words: Shuffle the words in a string and optionally the letters in each word using the… more | homepage unique-words: Returns an array of unique words, or the number of occurrences of each word in… more | homepage wordcount: Count the words in a string. Support for english, CJK and Cyrillic. | homepage Contributors Commits Contributor 47 jonschlinkert 7 OlafConijn 3 doowb 2 aashutoshrathi 2 lordvlad 2 hildjj 1 danilosampaio 1 2fd 1 leonard-thieu 1 mohd-akram 1 toddself 1 wolfgang42 1 zachhale Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright © 2023, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on July 22, 2023."
  },
  "Examiner-UI/node_modules/yocto-queue/readme.html": {
    "href": "Examiner-UI/node_modules/yocto-queue/readme.html",
    "title": "yocto-queue | Examiner",
    "summary": "yocto-queue Tiny queue data structure You should use this package instead of an array if you do a lot of Array#push() and Array#shift() on large arrays, since Array#shift() has linear time complexity O(n) while Queue#dequeue() has constant time complexity O(1). That makes a huge difference for large arrays. A queue is an ordered list of elements where an element is inserted at the end of the queue and is removed from the front of the queue. A queue works based on the first-in, first-out (FIFO) principle. Install $ npm install yocto-queue Usage const Queue = require('yocto-queue'); const queue = new Queue(); queue.enqueue('\uD83E\uDD84'); queue.enqueue('\uD83C\uDF08'); console.log(queue.size); //=> 2 console.log(...queue); //=> '\uD83E\uDD84 \uD83C\uDF08' console.log(queue.dequeue()); //=> '\uD83E\uDD84' console.log(queue.dequeue()); //=> '\uD83C\uDF08' API queue = new Queue() The instance is an Iterable, which means you can iterate over the queue front to back with a “for…of” loop, or use spreading to convert the queue to an array. Don't do this unless you really need to though, since it's slow. .enqueue(value) Add a value to the queue. .dequeue() Remove the next value in the queue. Returns the removed value or undefined if the queue is empty. .clear() Clear the queue. .size The size of the queue. Related quick-lru - Simple “Least Recently Used” (LRU) cache"
  },
  "README.html": {
    "href": "README.html",
    "title": "Examiner project | Examiner",
    "summary": "Examiner project The idea of the examiner is to help students or in profistionFiled to create an exam for testing their knowledge base, or contuse review."
  },
  "api/API.ApiDoc.Tags.Requests.AddTagCommandRequestExample.html": {
    "href": "api/API.ApiDoc.Tags.Requests.AddTagCommandRequestExample.html",
    "title": "Class AddTagCommandRequestExample | Examiner",
    "summary": "Class AddTagCommandRequestExample Namespace API.ApiDoc.Tags.Requests Assembly API.dll public class AddTagCommandRequestExample : IExamplesProvider<AddTagCommand> Inheritance object AddTagCommandRequestExample Implements IExamplesProvider<AddTagCommand> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods GetExamples() public AddTagCommand GetExamples() Returns AddTagCommand"
  },
  "api/API.ApiDoc.Tags.Requests.html": {
    "href": "api/API.ApiDoc.Tags.Requests.html",
    "title": "Namespace API.ApiDoc.Tags.Requests | Examiner",
    "summary": "Namespace API.ApiDoc.Tags.Requests Classes AddTagCommandRequestExample"
  },
  "api/API.Controllers.LookupController.html": {
    "href": "api/API.Controllers.LookupController.html",
    "title": "Class LookupController | Examiner",
    "summary": "Class LookupController Namespace API.Controllers Assembly API.dll [Route(\"api/[controller]\")] public class LookupController : ControllerBase Inheritance object ControllerBase LookupController Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LookupController(IMediator) public LookupController(IMediator mediator) Parameters mediator IMediator Methods AddLangugue(AddLanguageCommand) [HttpPost(\"language\", Name = \"AddLangugue\")] public Task<IActionResult> AddLangugue(AddLanguageCommand command) Parameters command AddLanguageCommand Returns Task<IActionResult> GetLangugues() [HttpGet(\"language\", Name = \"AddLangugue\")] public Task<IActionResult> GetLangugues() Returns Task<IActionResult>"
  },
  "api/API.Controllers.V1.CategoryController.html": {
    "href": "api/API.Controllers.V1.CategoryController.html",
    "title": "Class CategoryController | Examiner",
    "summary": "Class CategoryController Namespace API.Controllers.V1 Assembly API.dll [Route(\"api/category\")] public class CategoryController : ControllerBase Inheritance object ControllerBase CategoryController Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors CategoryController(IMediator, IHttpResultResponder) public CategoryController(IMediator mediator, IHttpResultResponder httpResultResponder) Parameters mediator IMediator httpResultResponder IHttpResultResponder Methods AddCateogry(AddCategoryCommand) [HttpPost(Name = \"AddCateogry\")] public Task<IActionResult> AddCateogry(AddCategoryCommand command) Parameters command AddCategoryCommand Returns Task<IActionResult> GetAllCategory(GetAllCategoryQuery) [HttpGet(Name = \"GetAllCategory\")] public Task<IActionResult> GetAllCategory(GetAllCategoryQuery query) Parameters query GetAllCategoryQuery Returns Task<IActionResult> GetCategoryById(GetCategoryByIdQuery) [HttpGet(\"{id:guid}\", Name = \"GetCategoryById\")] public Task<IActionResult> GetCategoryById(GetCategoryByIdQuery query) Parameters query GetCategoryByIdQuery Returns Task<IActionResult> GetCategoryTimeline(Guid, GetEntityTimelineQuery) [HttpGet(\"{categoryId:guid}/timeline\", Name = \"GetCategoryTimeline\")] [EndpointName(\"GetCategoryTimeline\")] [EndpointSummary(\"Tag Timeline\")] [EndpointDescription(\"get the timeline for tag\")] public Task<IActionResult> GetCategoryTimeline(Guid categoryId, GetEntityTimelineQuery query) Parameters categoryId Guid query GetEntityTimelineQuery Returns Task<IActionResult> GetCategoryTimelineDetails(Guid, Guid) [HttpGet(\"{categoryId:guid}/timeline/{timelineId:guid}\", Name = \"GetCategoryTimelineDetails\")] [EndpointName(\"GetCategoryTimelineDetails\")] [EndpointSummary(\"Tag Timeline details\")] [EndpointDescription(\"get the timeline for tag\")] public Task<IActionResult> GetCategoryTimelineDetails(Guid categoryId, Guid timelineId) Parameters categoryId Guid timelineId Guid Returns Task<IActionResult> UpdateCategory(Guid, UpdateCategoryCommand) [HttpPut(\"{categoryId:guid}\", Name = \"UpdateCategory\")] public Task<IActionResult> UpdateCategory(Guid categoryId, UpdateCategoryCommand command) Parameters categoryId Guid command UpdateCategoryCommand Returns Task<IActionResult> UpdateParrentRefrence(Guid, UpdateCategoryCommand) [HttpPut(\"{categoryId:guid}/parent-reference\", Name = \"UpdateParrentRefrence\")] public Task<IActionResult> UpdateParrentRefrence(Guid categoryId, UpdateCategoryCommand command) Parameters categoryId Guid command UpdateCategoryCommand Returns Task<IActionResult>"
  },
  "api/API.Controllers.V1.QuestionsController.html": {
    "href": "api/API.Controllers.V1.QuestionsController.html",
    "title": "Class QuestionsController | Examiner",
    "summary": "Class QuestionsController Namespace API.Controllers.V1 Assembly API.dll [Route(\"api/[controller]\")] [ApiController] public class QuestionsController : ControllerBase Inheritance object ControllerBase QuestionsController Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors QuestionsController(IMediator) public QuestionsController(IMediator mediator) Parameters mediator IMediator Methods AddQuestion(AddQuestionCommand) [HttpPost] public Task<IActionResult> AddQuestion(AddQuestionCommand command) Parameters command AddQuestionCommand Returns Task<IActionResult> DeleteAllQuestion() [HttpDelete(Name = \"DeleteAllQuestion\")] public Task<IActionResult> DeleteAllQuestion() Returns Task<IActionResult> DeleteQuestion(Guid) [HttpDelete(\"{id}\", Name = \"DeleteQuestion\")] public Task<IActionResult> DeleteQuestion(Guid id) Parameters id Guid Returns Task<IActionResult> GetAllQuestions(GetAllQuestionsQuery) [HttpGet] public Task<IActionResult> GetAllQuestions(GetAllQuestionsQuery query) Parameters query GetAllQuestionsQuery Returns Task<IActionResult> GetQuestionById(Guid) [HttpGet(\"{id}\")] public Task<IActionResult> GetQuestionById(Guid id) Parameters id Guid Returns Task<IActionResult> UpdateQuestion(UpdateQuestionCommand) [HttpPut(Name = \"UpdateQuestion\")] public Task<IActionResult> UpdateQuestion(UpdateQuestionCommand command) Parameters command UpdateQuestionCommand Returns Task<IActionResult>"
  },
  "api/API.Controllers.V1.SourceController.html": {
    "href": "api/API.Controllers.V1.SourceController.html",
    "title": "Class SourceController | Examiner",
    "summary": "Class SourceController Namespace API.Controllers.V1 Assembly API.dll [Route(\"api/source\")] public class SourceController : ControllerBase Inheritance object ControllerBase SourceController Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SourceController(IMediator, IHttpResultResponder) public SourceController(IMediator mediator, IHttpResultResponder resultResponder) Parameters mediator IMediator resultResponder IHttpResultResponder Methods AddBulkNewTags(Guid, AddBulkTagsToSourceCommand) [HttpPost(\"{sourceId:guid}/tag/bulk\")] public Task<IActionResult> AddBulkNewTags(Guid sourceId, AddBulkTagsToSourceCommand command) Parameters sourceId Guid command AddBulkTagsToSourceCommand Returns Task<IActionResult> AddNewTag(Guid, Guid) [HttpPost(\"{sourceId:guid}/tag/{tagId:guid}\")] public Task<IActionResult> AddNewTag(Guid sourceId, Guid tagId) Parameters sourceId Guid tagId Guid Returns Task<IActionResult> AddReference(AddSourceCommand) [HttpPost(\"{id:guid}/reference\", Name = \"AddReference\")] public Task<IActionResult> AddReference(AddSourceCommand command) Parameters command AddSourceCommand Returns Task<IActionResult> AddSource(AddSourceCommand) [HttpPost(Name = \"AddSource\")] public Task<IActionResult> AddSource(AddSourceCommand command) Parameters command AddSourceCommand Returns Task<IActionResult> GetAllSources(GetAllSourceQuery) [HttpGet(Name = \"GetAllSources\")] [ProducesResponseType(200, Type = typeof(PageResponse<GetAllSourceQueryResult>))] public Task<IActionResult> GetAllSources(GetAllSourceQuery query) Parameters query GetAllSourceQuery Returns Task<IActionResult> GetSourceById(Guid) [HttpGet(\"{id:guid}\", Name = \"GetSourceById\")] [ProducesResponseType(200, Type = typeof(PageResponse<GetSourceByIdQueryResult>))] public Task<IActionResult> GetSourceById(Guid id) Parameters id Guid Returns Task<IActionResult> GetSourceTimeline(Guid, GetEntityTimelineQuery) [HttpGet(\"{id:guid}/timeline\", Name = \"GetSourceTimeline\")] [EndpointName(\"GetSourceTimeline\")] [EndpointSummary(\"Tag Timeline\")] [EndpointDescription(\"get the timeline for tag\")] public Task<IActionResult> GetSourceTimeline(Guid id, GetEntityTimelineQuery query) Parameters id Guid query GetEntityTimelineQuery Returns Task<IActionResult> GetSourceTimelineDetails(Guid, Guid, EntityTimelineDetailsQuery) [HttpGet(\"{id:guid}/timeline/{timelineId:guid}\", Name = \"GetSourceTimelineDetails\")] [EndpointName(\"GetSourceTimelineDetails\")] [EndpointSummary(\"Tag Timeline details\")] [EndpointDescription(\"get the timeline for tag\")] public Task<IActionResult> GetSourceTimelineDetails(Guid id, Guid timelineId, EntityTimelineDetailsQuery query) Parameters id Guid timelineId Guid query EntityTimelineDetailsQuery Returns Task<IActionResult> RemoveTag(RemoveTagFromSourceCommand) [HttpDelete(\"{sourceId:guid}/tag/{tagId:guid}\")] public Task<IActionResult> RemoveTag(RemoveTagFromSourceCommand command) Parameters command RemoveTagFromSourceCommand Returns Task<IActionResult> RemoveTag(Guid, RemoveBulkTagFromSourceCommand) [HttpDelete(\"{sourceId:guid}/tag/bulk\")] public Task<IActionResult> RemoveTag(Guid sourceId, RemoveBulkTagFromSourceCommand command) Parameters sourceId Guid command RemoveBulkTagFromSourceCommand Returns Task<IActionResult>"
  },
  "api/API.Controllers.V1.SystemController.html": {
    "href": "api/API.Controllers.V1.SystemController.html",
    "title": "Class SystemController | Examiner",
    "summary": "Class SystemController Namespace API.Controllers.V1 Assembly API.dll [Route(\"api/system\")] public class SystemController : ControllerBase Inheritance object ControllerBase SystemController Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SystemController(ISystemManager, IMediator, IHttpResultResponder) public SystemController(ISystemManager systemManager, IMediator mediator, IHttpResultResponder resultResponder) Parameters systemManager ISystemManager mediator IMediator resultResponder IHttpResultResponder Methods Debug() [HttpPost(\"logs/debug\")] public IActionResult Debug() Returns IActionResult Disable() [HttpPost(\"logs/disable\")] public IActionResult Disable() Returns IActionResult Enable() [HttpPost(\"logs/enable\")] public IActionResult Enable() Returns IActionResult GetDeletedEntities(GetDeletedEntitiesQuery) [HttpGet(\"deletedEntity\")] public Task<IActionResult> GetDeletedEntities(GetDeletedEntitiesQuery query) Parameters query GetDeletedEntitiesQuery Returns Task<IActionResult> GetLogs(LogSearchQuery) [HttpGet(\"logs\")] public Task<IActionResult> GetLogs(LogSearchQuery query) Parameters query LogSearchQuery Returns Task<IActionResult> GetSystemStatus() [HttpGet(\"status\")] public Task<IActionResult> GetSystemStatus() Returns Task<IActionResult> Status() [HttpGet(\"logs/status\")] public IActionResult Status() Returns IActionResult"
  },
  "api/API.Controllers.V1.TagController.html": {
    "href": "api/API.Controllers.V1.TagController.html",
    "title": "Class TagController | Examiner",
    "summary": "Class TagController Namespace API.Controllers.V1 Assembly API.dll [Route(\"api/tag\")] public class TagController : ControllerBase Inheritance object ControllerBase TagController Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors TagController(IMediator, IHttpResultResponder, IRepositoryManager) public TagController(IMediator mediator, IHttpResultResponder resultResponder, IRepositoryManager repositoryManager) Parameters mediator IMediator resultResponder IHttpResultResponder repositoryManager IRepositoryManager Methods AddTag(AddTagCommand) [HttpPost(Name = \"AddTag\")] [SwaggerRequestExample(typeof(AddTagCommand), typeof(AddTagCommandRequestExample))] public Task<IActionResult> AddTag(AddTagCommand command) Parameters command AddTagCommand Returns Task<IActionResult> ArchiveTag(ArchiveTagCommand) [HttpPost(\"{id:guid}/archive\", Name = \"ArchiveTag\")] [EndpointName(\"ArchiveTag\")] [EndpointSummary(\"Tag Archive\")] [EndpointDescription(\"Description\")] public Task ArchiveTag(ArchiveTagCommand command) Parameters command ArchiveTagCommand Returns Task DeleteTag(DeleteTagCommand) [HttpDelete(\"{id:guid}\", Name = \"DeleteTag\")] public Task<IActionResult> DeleteTag(DeleteTagCommand command) Parameters command DeleteTagCommand Returns Task<IActionResult> ExportTags(ExportTagsQuery) [HttpGet(\"export\")] public Task<IActionResult> ExportTags(ExportTagsQuery query) Parameters query ExportTagsQuery Returns Task<IActionResult> GetAllTags(GetAllTagsQuery) [HttpGet(Name = \"GetAllTags\")] public Task<IActionResult> GetAllTags(GetAllTagsQuery query) Parameters query GetAllTagsQuery Returns Task<IActionResult> GetTagTimeline(Guid, GetEntityTimelineQuery) [HttpGet(\"{id:guid}/timeline\", Name = \"GetTagTimeline\")] [EndpointName(\"GetTagTimeline\")] [EndpointSummary(\"Tag Timeline\")] [EndpointDescription(\"get the timeline for tag\")] public Task<IActionResult> GetTagTimeline(Guid id, GetEntityTimelineQuery query) Parameters id Guid query GetEntityTimelineQuery Returns Task<IActionResult> GetTagTimelineDetails(Guid, Guid) [HttpGet(\"{tagId:guid}/timeline/{timelineId:guid}\", Name = \"GetTagTimelineDetails\")] [EndpointName(\"GetTagTimelineDetails\")] [EndpointSummary(\"Tag Timeline details\")] [EndpointDescription(\"get the timeline for tag\")] public Task<IActionResult> GetTagTimelineDetails(Guid tagId, Guid timelineId) Parameters tagId Guid timelineId Guid Returns Task<IActionResult> ImportTags(IFormFile) [HttpPost(\"import\")] public Task<IActionResult> ImportTags(IFormFile file) Parameters file IFormFile Returns Task<IActionResult> TagAutoComplete(AutoCompleteTagsQuery) [HttpGet(\"autocomplete\")] public Task<IActionResult> TagAutoComplete(AutoCompleteTagsQuery query) Parameters query AutoCompleteTagsQuery Returns Task<IActionResult> TagDetails(Guid) [HttpGet(\"{id:guid}\", Name = \"TagDetails\")] [EndpointName(\"TagDetails\")] [EndpointSummary(\"Tag Details\")] [EndpointDescription(\"Tag Details\")] public Task<IActionResult> TagDetails(Guid id) Parameters id Guid Returns Task<IActionResult> TagRelatedSources(Guid, GetRelatedSourcesQuery) [HttpGet(\"{tagId:guid}/related-sources\", Name = \"TagRelatedSources\")] [EndpointName(\"TagRelatedSources\")] [EndpointSummary(\"Tag related sources\")] [EndpointDescription(\"Tag related sources\")] public Task<IActionResult> TagRelatedSources(Guid tagId, GetRelatedSourcesQuery query) Parameters tagId Guid query GetRelatedSourcesQuery Returns Task<IActionResult> UnarchiveTag(UnarchiveTagCommand) [HttpPost(\"{id:guid}/unarchive\", Name = \"UnarchiveTag\")] [EndpointName(\"UnarchiveTag\")] [EndpointSummary(\"Tag Unarchive\")] [EndpointDescription(\"Description\")] public Task<IActionResult> UnarchiveTag(UnarchiveTagCommand command) Parameters command UnarchiveTagCommand Returns Task<IActionResult> UpdateTag(UpdateTagCommand) [HttpPut(Name = \"UpdateTag\")] public Task<IActionResult> UpdateTag(UpdateTagCommand command) Parameters command UpdateTagCommand Returns Task<IActionResult>"
  },
  "api/API.Controllers.V1.html": {
    "href": "api/API.Controllers.V1.html",
    "title": "Namespace API.Controllers.V1 | Examiner",
    "summary": "Namespace API.Controllers.V1 Classes CategoryController QuestionsController SourceController SystemController TagController"
  },
  "api/API.Controllers.html": {
    "href": "api/API.Controllers.html",
    "title": "Namespace API.Controllers | Examiner",
    "summary": "Namespace API.Controllers Classes LookupController"
  },
  "api/API.Filters.ExampleSchemaFilter.html": {
    "href": "api/API.Filters.ExampleSchemaFilter.html",
    "title": "Class ExampleSchemaFilter | Examiner",
    "summary": "Class ExampleSchemaFilter Namespace API.Filters Assembly API.dll public class ExampleSchemaFilter : ISchemaFilter Inheritance object ExampleSchemaFilter Implements ISchemaFilter Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Apply(OpenApiSchema, SchemaFilterContext) public void Apply(OpenApiSchema schema, SchemaFilterContext context) Parameters schema OpenApiSchema context SchemaFilterContext"
  },
  "api/API.Filters.html": {
    "href": "api/API.Filters.html",
    "title": "Namespace API.Filters | Examiner",
    "summary": "Namespace API.Filters Classes ExampleSchemaFilter"
  },
  "api/API.Interfaces.IHttpResultResponder.html": {
    "href": "api/API.Interfaces.IHttpResultResponder.html",
    "title": "Interface IHttpResultResponder | Examiner",
    "summary": "Interface IHttpResultResponder Namespace API.Interfaces Assembly API.dll public interface IHttpResultResponder Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods FromResult(HttpContext, Result) IActionResult FromResult(HttpContext context, Result result) Parameters context HttpContext result Result Returns IActionResult FromResult<T>(HttpContext, Result<T>) IActionResult FromResult<T>(HttpContext context, Result<T> result) Parameters context HttpContext result Result<T> Returns IActionResult Type Parameters T"
  },
  "api/API.Interfaces.html": {
    "href": "api/API.Interfaces.html",
    "title": "Namespace API.Interfaces | Examiner",
    "summary": "Namespace API.Interfaces Interfaces IHttpResultResponder"
  },
  "api/API.Middleware.CorrelationIdMiddleware.html": {
    "href": "api/API.Middleware.CorrelationIdMiddleware.html",
    "title": "Class CorrelationIdMiddleware | Examiner",
    "summary": "Class CorrelationIdMiddleware Namespace API.Middleware Assembly API.dll public class CorrelationIdMiddleware Inheritance object CorrelationIdMiddleware Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Invoke(HttpContext, RequestDelegate) public Task Invoke(HttpContext context, RequestDelegate next) Parameters context HttpContext next RequestDelegate Returns Task"
  },
  "api/API.Middleware.LocalizationMiddleware.html": {
    "href": "api/API.Middleware.LocalizationMiddleware.html",
    "title": "Class LocalizationMiddleware | Examiner",
    "summary": "Class LocalizationMiddleware Namespace API.Middleware Assembly API.dll public class LocalizationMiddleware : IMiddleware Inheritance object LocalizationMiddleware Implements IMiddleware Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods InvokeAsync(HttpContext, RequestDelegate) Request handling method. public Task InvokeAsync(HttpContext context, RequestDelegate next) Parameters context HttpContext The HttpContext for the current request. next RequestDelegate The delegate representing the remaining middleware in the request pipeline. Returns Task A Task that represents the execution of this middleware."
  },
  "api/API.Middleware.ResultMiddleware.html": {
    "href": "api/API.Middleware.ResultMiddleware.html",
    "title": "Class ResultMiddleware | Examiner",
    "summary": "Class ResultMiddleware Namespace API.Middleware Assembly API.dll public class ResultMiddleware Inheritance object ResultMiddleware Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ResultMiddleware(RequestDelegate) public ResultMiddleware(RequestDelegate next) Parameters next RequestDelegate Methods Invoke(HttpContext) public Task Invoke(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/API.Middleware.html": {
    "href": "api/API.Middleware.html",
    "title": "Namespace API.Middleware | Examiner",
    "summary": "Namespace API.Middleware Classes CorrelationIdMiddleware LocalizationMiddleware ResultMiddleware"
  },
  "api/API.Services.HttpResultResponder.html": {
    "href": "api/API.Services.HttpResultResponder.html",
    "title": "Class HttpResultResponder | Examiner",
    "summary": "Class HttpResultResponder Namespace API.Services Assembly API.dll public class HttpResultResponder : IHttpResultResponder Inheritance object HttpResultResponder Implements IHttpResultResponder Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods FromResult(HttpContext, Result) public IActionResult FromResult(HttpContext context, Result result) Parameters context HttpContext result Result Returns IActionResult FromResult<T>(HttpContext, Result<T>) public IActionResult FromResult<T>(HttpContext context, Result<T> result) Parameters context HttpContext result Result<T> Returns IActionResult Type Parameters T"
  },
  "api/API.Services.html": {
    "href": "api/API.Services.html",
    "title": "Namespace API.Services | Examiner",
    "summary": "Namespace API.Services Classes HttpResultResponder"
  },
  "api/Application.ApplicationRegisterServices.html": {
    "href": "api/Application.ApplicationRegisterServices.html",
    "title": "Class ApplicationRegisterServices | Examiner",
    "summary": "Class ApplicationRegisterServices Namespace Application Assembly Application.dll public static class ApplicationRegisterServices Inheritance object ApplicationRegisterServices Methods RegisterApplication(IServiceCollection) public static IServiceCollection RegisterApplication(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Application.Auditing.ApplicationLogs.Queries.LogSearchQuery.LogSearchQuery.html": {
    "href": "api/Application.Auditing.ApplicationLogs.Queries.LogSearchQuery.LogSearchQuery.html",
    "title": "Class LogSearchQuery | Examiner",
    "summary": "Class LogSearchQuery Namespace Application.Auditing.ApplicationLogs.Queries.LogSearchQuery Assembly Application.dll public class LogSearchQuery : PageRequest, IRequest<PageResponse<ApplicationLog>>, IBaseRequest Inheritance object PageRequest LogSearchQuery Implements IRequest<PageResponse<ApplicationLog>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties EndDate public DateTimeOffset? EndDate { get; set; } Property Value DateTimeOffset? Level public LogEventLevel? Level { get; set; } Property Value LogEventLevel? Message public string? Message { get; set; } Property Value string StartDate public DateTimeOffset? StartDate { get; set; } Property Value DateTimeOffset?"
  },
  "api/Application.Auditing.ApplicationLogs.Queries.LogSearchQuery.LogSearchQueryHandler.html": {
    "href": "api/Application.Auditing.ApplicationLogs.Queries.LogSearchQuery.LogSearchQueryHandler.html",
    "title": "Class LogSearchQueryHandler | Examiner",
    "summary": "Class LogSearchQueryHandler Namespace Application.Auditing.ApplicationLogs.Queries.LogSearchQuery Assembly Application.dll public class LogSearchQueryHandler : IRequestHandler<LogSearchQuery, PageResponse<ApplicationLog>> Inheritance object LogSearchQueryHandler Implements IRequestHandler<LogSearchQuery, PageResponse<ApplicationLog>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LogSearchQueryHandler(IAuditManager) public LogSearchQueryHandler(IAuditManager auditManager) Parameters auditManager IAuditManager Methods Handle(LogSearchQuery, CancellationToken) Handles a request public Task<PageResponse<ApplicationLog>> Handle(LogSearchQuery request, CancellationToken cancellationToken) Parameters request LogSearchQuery The request cancellationToken CancellationToken Cancellation token Returns Task<PageResponse<ApplicationLog>> Response from the request"
  },
  "api/Application.Auditing.ApplicationLogs.Queries.LogSearchQuery.html": {
    "href": "api/Application.Auditing.ApplicationLogs.Queries.LogSearchQuery.html",
    "title": "Namespace Application.Auditing.ApplicationLogs.Queries.LogSearchQuery | Examiner",
    "summary": "Namespace Application.Auditing.ApplicationLogs.Queries.LogSearchQuery Classes LogSearchQuery LogSearchQueryHandler"
  },
  "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.GetDeletedEntitiesQuery.html": {
    "href": "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.GetDeletedEntitiesQuery.html",
    "title": "Class GetDeletedEntitiesQuery | Examiner",
    "summary": "Class GetDeletedEntitiesQuery Namespace Application.Auditing.EntitiesLog.Queries.GetDeletedEntities Assembly Application.dll public class GetDeletedEntitiesQuery : PageRequest, IRequest<Result<PageResponse<GetDeletedEntitiesQueryResult>>>, IBaseRequest Inheritance object PageRequest GetDeletedEntitiesQuery Implements IRequest<Result<PageResponse<GetDeletedEntitiesQueryResult>>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ActionBy public ActionBy? ActionBy { get; set; } Property Value ActionBy? Comment public string? Comment { get; set; } Property Value string EndDate public DateTimeOffset? EndDate { get; set; } Property Value DateTimeOffset? EntityName public EntityName? EntityName { get; set; } Property Value EntityName? StartDate public DateTimeOffset? StartDate { get; set; } Property Value DateTimeOffset?"
  },
  "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.GetDeletedEntitiesQueryHandler.html": {
    "href": "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.GetDeletedEntitiesQueryHandler.html",
    "title": "Class GetDeletedEntitiesQueryHandler | Examiner",
    "summary": "Class GetDeletedEntitiesQueryHandler Namespace Application.Auditing.EntitiesLog.Queries.GetDeletedEntities Assembly Application.dll public class GetDeletedEntitiesQueryHandler : IRequestHandler<GetDeletedEntitiesQuery, Result<PageResponse<GetDeletedEntitiesQueryResult>>> Inheritance object GetDeletedEntitiesQueryHandler Implements IRequestHandler<GetDeletedEntitiesQuery, Result<PageResponse<GetDeletedEntitiesQueryResult>>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetDeletedEntitiesQueryHandler(IAuditManager, IMapper) public GetDeletedEntitiesQueryHandler(IAuditManager auditManager, IMapper mapper) Parameters auditManager IAuditManager mapper IMapper Methods Handle(GetDeletedEntitiesQuery, CancellationToken) Handles a request public Task<Result<PageResponse<GetDeletedEntitiesQueryResult>>> Handle(GetDeletedEntitiesQuery request, CancellationToken cancellationToken) Parameters request GetDeletedEntitiesQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<PageResponse<GetDeletedEntitiesQueryResult>>> Response from the request"
  },
  "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.GetDeletedEntitiesQueryResult.html": {
    "href": "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.GetDeletedEntitiesQueryResult.html",
    "title": "Class GetDeletedEntitiesQueryResult | Examiner",
    "summary": "Class GetDeletedEntitiesQueryResult Namespace Application.Auditing.EntitiesLog.Queries.GetDeletedEntities Assembly Application.dll public class GetDeletedEntitiesQueryResult Inheritance object GetDeletedEntitiesQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ActionBy public ActionBy ActionBy { get; set; } Property Value ActionBy ActionDate public DateTimeOffset ActionDate { get; set; } Property Value DateTimeOffset EntityId public Guid EntityId { get; set; } Property Value Guid EntityName public EntityName EntityName { get; set; } Property Value EntityName VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.html": {
    "href": "api/Application.Auditing.EntitiesLog.Queries.GetDeletedEntities.html",
    "title": "Namespace Application.Auditing.EntitiesLog.Queries.GetDeletedEntities | Examiner",
    "summary": "Namespace Application.Auditing.EntitiesLog.Queries.GetDeletedEntities Classes GetDeletedEntitiesQuery GetDeletedEntitiesQueryHandler GetDeletedEntitiesQueryResult"
  },
  "api/Application.Categories.Commands.AddCategory.AddCategoryCommand.html": {
    "href": "api/Application.Categories.Commands.AddCategory.AddCategoryCommand.html",
    "title": "Class AddCategoryCommand | Examiner",
    "summary": "Class AddCategoryCommand Namespace Application.Categories.Commands.AddCategory Assembly Application.dll public class AddCategoryCommand : IRequest<Result<AddCategoryCommandResult>>, IBaseRequest Inheritance object AddCategoryCommand Implements IRequest<Result<AddCategoryCommandResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string Name public string Name { get; set; } Property Value string ParentId public Guid? ParentId { get; set; } Property Value Guid?"
  },
  "api/Application.Categories.Commands.AddCategory.AddCategoryCommandHandler.html": {
    "href": "api/Application.Categories.Commands.AddCategory.AddCategoryCommandHandler.html",
    "title": "Class AddCategoryCommandHandler | Examiner",
    "summary": "Class AddCategoryCommandHandler Namespace Application.Categories.Commands.AddCategory Assembly Application.dll public class AddCategoryCommandHandler : IRequestHandler<AddCategoryCommand, Result<AddCategoryCommandResult>> Inheritance object AddCategoryCommandHandler Implements IRequestHandler<AddCategoryCommand, Result<AddCategoryCommandResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddCategoryCommandHandler(IServiceManager, IMapper) public AddCategoryCommandHandler(IServiceManager serviceManager, IMapper mapper) Parameters serviceManager IServiceManager mapper IMapper Methods Handle(AddCategoryCommand, CancellationToken) Handles a request public Task<Result<AddCategoryCommandResult>> Handle(AddCategoryCommand request, CancellationToken cancellationToken) Parameters request AddCategoryCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result<AddCategoryCommandResult>> Response from the request"
  },
  "api/Application.Categories.Commands.AddCategory.AddCategoryCommandResult.html": {
    "href": "api/Application.Categories.Commands.AddCategory.AddCategoryCommandResult.html",
    "title": "Class AddCategoryCommandResult | Examiner",
    "summary": "Class AddCategoryCommandResult Namespace Application.Categories.Commands.AddCategory Assembly Application.dll public class AddCategoryCommandResult Inheritance object AddCategoryCommandResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string HasChildren public bool HasChildren { get; set; } Property Value bool Id public Guid Id { get; set; } Property Value Guid IsRoot public bool IsRoot { get; } Property Value bool Level public int Level { get; set; } Property Value int Name public string Name { get; set; } Property Value string ParentId public Guid? ParentId { get; set; } Property Value Guid?"
  },
  "api/Application.Categories.Commands.AddCategory.html": {
    "href": "api/Application.Categories.Commands.AddCategory.html",
    "title": "Namespace Application.Categories.Commands.AddCategory | Examiner",
    "summary": "Namespace Application.Categories.Commands.AddCategory Classes AddCategoryCommand AddCategoryCommandHandler AddCategoryCommandResult"
  },
  "api/Application.Categories.Commands.UpdateCategory.UpdateCategoryCommand.html": {
    "href": "api/Application.Categories.Commands.UpdateCategory.UpdateCategoryCommand.html",
    "title": "Class UpdateCategoryCommand | Examiner",
    "summary": "Class UpdateCategoryCommand Namespace Application.Categories.Commands.UpdateCategory Assembly Application.dll public class UpdateCategoryCommand : IRequest<Result>, IBaseRequest Inheritance object UpdateCategoryCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CategoryId public Guid CategoryId { get; set; } Property Value Guid Description public string? Description { get; set; } Property Value string Name public string Name { get; set; } Property Value string"
  },
  "api/Application.Categories.Commands.UpdateCategory.UpdateCategoryCommandHandler.html": {
    "href": "api/Application.Categories.Commands.UpdateCategory.UpdateCategoryCommandHandler.html",
    "title": "Class UpdateCategoryCommandHandler | Examiner",
    "summary": "Class UpdateCategoryCommandHandler Namespace Application.Categories.Commands.UpdateCategory Assembly Application.dll public class UpdateCategoryCommandHandler : IRequestHandler<UpdateCategoryCommand, Result> Inheritance object UpdateCategoryCommandHandler Implements IRequestHandler<UpdateCategoryCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors UpdateCategoryCommandHandler(IServiceManager) public UpdateCategoryCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(UpdateCategoryCommand, CancellationToken) Handles a request public Task<Result> Handle(UpdateCategoryCommand request, CancellationToken cancellationToken) Parameters request UpdateCategoryCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Categories.Commands.UpdateCategory.html": {
    "href": "api/Application.Categories.Commands.UpdateCategory.html",
    "title": "Namespace Application.Categories.Commands.UpdateCategory | Examiner",
    "summary": "Namespace Application.Categories.Commands.UpdateCategory Classes UpdateCategoryCommand UpdateCategoryCommandHandler"
  },
  "api/Application.Categories.Commands.UpdateCategoryParentReference.UpdateCategoryParentRefrenceCommand.html": {
    "href": "api/Application.Categories.Commands.UpdateCategoryParentReference.UpdateCategoryParentRefrenceCommand.html",
    "title": "Class UpdateCategoryParentRefrenceCommand | Examiner",
    "summary": "Class UpdateCategoryParentRefrenceCommand Namespace Application.Categories.Commands.UpdateCategoryParentReference Assembly Application.dll public class UpdateCategoryParentRefrenceCommand Inheritance object UpdateCategoryParentRefrenceCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties MyProperty public int MyProperty { get; set; } Property Value int"
  },
  "api/Application.Categories.Commands.UpdateCategoryParentReference.html": {
    "href": "api/Application.Categories.Commands.UpdateCategoryParentReference.html",
    "title": "Namespace Application.Categories.Commands.UpdateCategoryParentReference | Examiner",
    "summary": "Namespace Application.Categories.Commands.UpdateCategoryParentReference Classes UpdateCategoryParentRefrenceCommand"
  },
  "api/Application.Categories.Queries.GetAllCategory.GetAllCategoryQuery.html": {
    "href": "api/Application.Categories.Queries.GetAllCategory.GetAllCategoryQuery.html",
    "title": "Class GetAllCategoryQuery | Examiner",
    "summary": "Class GetAllCategoryQuery Namespace Application.Categories.Queries.GetAllCategory Assembly Application.dll public class GetAllCategoryQuery : PageRequest, IRequest<PageResponse<GetAllCategoryQueryResult>>, IBaseRequest Inheritance object PageRequest GetAllCategoryQuery Implements IRequest<PageResponse<GetAllCategoryQueryResult>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties HasChildren public bool? HasChildren { get; set; } Property Value bool? IsRoot public bool? IsRoot { get; set; } Property Value bool? Level public int? Level { get; set; } Property Value int? Search public string? Search { get; set; } Property Value string"
  },
  "api/Application.Categories.Queries.GetAllCategory.GetAllCategoryQueryHandler.html": {
    "href": "api/Application.Categories.Queries.GetAllCategory.GetAllCategoryQueryHandler.html",
    "title": "Class GetAllCategoryQueryHandler | Examiner",
    "summary": "Class GetAllCategoryQueryHandler Namespace Application.Categories.Queries.GetAllCategory Assembly Application.dll public class GetAllCategoryQueryHandler : IRequestHandler<GetAllCategoryQuery, PageResponse<GetAllCategoryQueryResult>> Inheritance object GetAllCategoryQueryHandler Implements IRequestHandler<GetAllCategoryQuery, PageResponse<GetAllCategoryQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetAllCategoryQueryHandler(IRepositoryManager, IMapper) public GetAllCategoryQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(GetAllCategoryQuery, CancellationToken) Handles a request public Task<PageResponse<GetAllCategoryQueryResult>> Handle(GetAllCategoryQuery request, CancellationToken cancellationToken) Parameters request GetAllCategoryQuery The request cancellationToken CancellationToken Cancellation token Returns Task<PageResponse<GetAllCategoryQueryResult>> Response from the request"
  },
  "api/Application.Categories.Queries.GetAllCategory.GetAllCategoryQueryResult.html": {
    "href": "api/Application.Categories.Queries.GetAllCategory.GetAllCategoryQueryResult.html",
    "title": "Class GetAllCategoryQueryResult | Examiner",
    "summary": "Class GetAllCategoryQueryResult Namespace Application.Categories.Queries.GetAllCategory Assembly Application.dll public class GetAllCategoryQueryResult Inheritance object GetAllCategoryQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties HasChildren public bool HasChildren { get; set; } Property Value bool Id public Guid Id { get; set; } Property Value Guid IsRoot public bool IsRoot { get; } Property Value bool Level public int Level { get; set; } Property Value int Name public string Name { get; set; } Property Value string ParentId public Guid? ParentId { get; set; } Property Value Guid?"
  },
  "api/Application.Categories.Queries.GetAllCategory.html": {
    "href": "api/Application.Categories.Queries.GetAllCategory.html",
    "title": "Namespace Application.Categories.Queries.GetAllCategory | Examiner",
    "summary": "Namespace Application.Categories.Queries.GetAllCategory Classes GetAllCategoryQuery GetAllCategoryQueryHandler GetAllCategoryQueryResult"
  },
  "api/Application.Categories.Queries.GetCategoryById.GetCategoryByIdQuery.html": {
    "href": "api/Application.Categories.Queries.GetCategoryById.GetCategoryByIdQuery.html",
    "title": "Class GetCategoryByIdQuery | Examiner",
    "summary": "Class GetCategoryByIdQuery Namespace Application.Categories.Queries.GetCategoryById Assembly Application.dll public class GetCategoryByIdQuery : IRequest<Result<GetCategoryByIdQueryResult>>, IBaseRequest Inheritance object GetCategoryByIdQuery Implements IRequest<Result<GetCategoryByIdQueryResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Categories.Queries.GetCategoryById.GetCategoryByIdQueryHandler.html": {
    "href": "api/Application.Categories.Queries.GetCategoryById.GetCategoryByIdQueryHandler.html",
    "title": "Class GetCategoryByIdQueryHandler | Examiner",
    "summary": "Class GetCategoryByIdQueryHandler Namespace Application.Categories.Queries.GetCategoryById Assembly Application.dll public class GetCategoryByIdQueryHandler : IRequestHandler<GetCategoryByIdQuery, Result<GetCategoryByIdQueryResult>> Inheritance object GetCategoryByIdQueryHandler Implements IRequestHandler<GetCategoryByIdQuery, Result<GetCategoryByIdQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetCategoryByIdQueryHandler(IRepositoryManager, IMapper) public GetCategoryByIdQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods BuildCategoryTree(Guid?, IEnumerable<Category>) public List<GetCategoryByIdQueryResult> BuildCategoryTree(Guid? parentId, IEnumerable<Category> allCategories) Parameters parentId Guid? allCategories IEnumerable<Category> Returns List<GetCategoryByIdQueryResult> Handle(GetCategoryByIdQuery, CancellationToken) Handles a request public Task<Result<GetCategoryByIdQueryResult>> Handle(GetCategoryByIdQuery request, CancellationToken cancellationToken) Parameters request GetCategoryByIdQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<GetCategoryByIdQueryResult>> Response from the request"
  },
  "api/Application.Categories.Queries.GetCategoryById.GetCategoryByIdQueryResult.html": {
    "href": "api/Application.Categories.Queries.GetCategoryById.GetCategoryByIdQueryResult.html",
    "title": "Class GetCategoryByIdQueryResult | Examiner",
    "summary": "Class GetCategoryByIdQueryResult Namespace Application.Categories.Queries.GetCategoryById Assembly Application.dll public class GetCategoryByIdQueryResult Inheritance object GetCategoryByIdQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CreationDate public DateTimeOffset CreationDate { get; set; } Property Value DateTimeOffset Description public string? Description { get; set; } Property Value string HasChildren public bool HasChildren { get; set; } Property Value bool Id public Guid Id { get; set; } Property Value Guid IsArchived public bool IsArchived { get; set; } Property Value bool IsRoot public bool IsRoot { get; set; } Property Value bool LastArchiveDate public DateTimeOffset? LastArchiveDate { get; set; } Property Value DateTimeOffset? LastModifiedDate public DateTimeOffset? LastModifiedDate { get; set; } Property Value DateTimeOffset? Level public int Level { get; set; } Property Value int Name public string Name { get; set; } Property Value string ParentId public Guid? ParentId { get; set; } Property Value Guid? VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Categories.Queries.GetCategoryById.html": {
    "href": "api/Application.Categories.Queries.GetCategoryById.html",
    "title": "Namespace Application.Categories.Queries.GetCategoryById | Examiner",
    "summary": "Namespace Application.Categories.Queries.GetCategoryById Classes GetCategoryByIdQuery GetCategoryByIdQueryHandler GetCategoryByIdQueryResult"
  },
  "api/Application.Commons.Attributes.MinMaxAttribute.html": {
    "href": "api/Application.Commons.Attributes.MinMaxAttribute.html",
    "title": "Class MinMaxAttribute | Examiner",
    "summary": "Class MinMaxAttribute Namespace Application.Commons.Attributes Assembly Application.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class MinMaxAttribute : Attribute Inheritance object Attribute MinMaxAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors MinMaxAttribute(int, int) public MinMaxAttribute(int min, int max) Parameters min int max int Properties Max public int Max { get; } Property Value int Min public int Min { get; } Property Value int"
  },
  "api/Application.Commons.Attributes.SwaggerExampleAttribute.html": {
    "href": "api/Application.Commons.Attributes.SwaggerExampleAttribute.html",
    "title": "Class SwaggerExampleAttribute | Examiner",
    "summary": "Class SwaggerExampleAttribute Namespace Application.Commons.Attributes Assembly Application.dll [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class SwaggerExampleAttribute : Attribute Inheritance object Attribute SwaggerExampleAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SwaggerExampleAttribute(object) public SwaggerExampleAttribute(object example) Parameters example object Properties Example public object Example { get; } Property Value object"
  },
  "api/Application.Commons.Attributes.html": {
    "href": "api/Application.Commons.Attributes.html",
    "title": "Namespace Application.Commons.Attributes | Examiner",
    "summary": "Namespace Application.Commons.Attributes Classes MinMaxAttribute SwaggerExampleAttribute"
  },
  "api/Application.Commons.Behaviors.LoggingBehavior-2.html": {
    "href": "api/Application.Commons.Behaviors.LoggingBehavior-2.html",
    "title": "Class LoggingBehavior<TRequest, TResponse> | Examiner",
    "summary": "Class LoggingBehavior<TRequest, TResponse> Namespace Application.Commons.Behaviors Assembly Application.dll public class LoggingBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse> where TRequest : notnull Type Parameters TRequest TResponse Inheritance object LoggingBehavior<TRequest, TResponse> Implements IPipelineBehavior<TRequest, TResponse> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LoggingBehavior(ILogger<LoggingBehavior<TRequest, TResponse>>) public LoggingBehavior(ILogger<LoggingBehavior<TRequest, TResponse>> logger) Parameters logger ILogger<LoggingBehavior<TRequest, TResponse>> Methods Handle(TRequest, RequestHandlerDelegate<TResponse>, CancellationToken) Pipeline handler. Perform any additional behavior and await the next delegate as necessary public Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken) Parameters request TRequest Incoming request next RequestHandlerDelegate<TResponse> Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler. cancellationToken CancellationToken Cancellation token Returns Task<TResponse> Awaitable task returning the TResponse"
  },
  "api/Application.Commons.Behaviors.MetricsBehavior-2.html": {
    "href": "api/Application.Commons.Behaviors.MetricsBehavior-2.html",
    "title": "Class MetricsBehavior<TRequest, TResponse> | Examiner",
    "summary": "Class MetricsBehavior<TRequest, TResponse> Namespace Application.Commons.Behaviors Assembly Application.dll public class MetricsBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse> where TRequest : notnull Type Parameters TRequest TResponse Inheritance object MetricsBehavior<TRequest, TResponse> Implements IPipelineBehavior<TRequest, TResponse> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors MetricsBehavior(ILogger<MetricsBehavior<TRequest, TResponse>>) public MetricsBehavior(ILogger<MetricsBehavior<TRequest, TResponse>> logger) Parameters logger ILogger<MetricsBehavior<TRequest, TResponse>> Methods Handle(TRequest, RequestHandlerDelegate<TResponse>, CancellationToken) Pipeline handler. Perform any additional behavior and await the next delegate as necessary public Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken) Parameters request TRequest Incoming request next RequestHandlerDelegate<TResponse> Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler. cancellationToken CancellationToken Cancellation token Returns Task<TResponse> Awaitable task returning the TResponse"
  },
  "api/Application.Commons.Behaviors.ValidationBehavior-2.html": {
    "href": "api/Application.Commons.Behaviors.ValidationBehavior-2.html",
    "title": "Class ValidationBehavior<TRequest, TResponse> | Examiner",
    "summary": "Class ValidationBehavior<TRequest, TResponse> Namespace Application.Commons.Behaviors Assembly Application.dll public class ValidationBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse> where TRequest : notnull where TResponse : class Type Parameters TRequest TResponse Inheritance object ValidationBehavior<TRequest, TResponse> Implements IPipelineBehavior<TRequest, TResponse> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ValidationBehavior(IEnumerable<IValidator<TRequest>>) public ValidationBehavior(IEnumerable<IValidator<TRequest>> validators) Parameters validators IEnumerable<IValidator<TRequest>> Methods Handle(TRequest, RequestHandlerDelegate<TResponse>, CancellationToken) Pipeline handler. Perform any additional behavior and await the next delegate as necessary public Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken) Parameters request TRequest Incoming request next RequestHandlerDelegate<TResponse> Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler. cancellationToken CancellationToken Cancellation token Returns Task<TResponse> Awaitable task returning the TResponse"
  },
  "api/Application.Commons.Behaviors.html": {
    "href": "api/Application.Commons.Behaviors.html",
    "title": "Namespace Application.Commons.Behaviors | Examiner",
    "summary": "Namespace Application.Commons.Behaviors Classes LoggingBehavior<TRequest, TResponse> MetricsBehavior<TRequest, TResponse> ValidationBehavior<TRequest, TResponse>"
  },
  "api/Application.Commons.Extensions.CloneExtension.html": {
    "href": "api/Application.Commons.Extensions.CloneExtension.html",
    "title": "Class CloneExtension | Examiner",
    "summary": "Class CloneExtension Namespace Application.Commons.Extensions Assembly Application.dll public static class CloneExtension Inheritance object CloneExtension Methods DeepClone<T>(T) public static T DeepClone<T>(T obj) Parameters obj T Returns T Type Parameters T"
  },
  "api/Application.Commons.Extensions.LoggingLevelController.html": {
    "href": "api/Application.Commons.Extensions.LoggingLevelController.html",
    "title": "Class LoggingLevelController | Examiner",
    "summary": "Class LoggingLevelController Namespace Application.Commons.Extensions Assembly Application.dll public static class LoggingLevelController Inheritance object LoggingLevelController Fields LevelSwitch public static readonly LoggingLevelSwitch LevelSwitch Field Value LoggingLevelSwitch"
  },
  "api/Application.Commons.Extensions.StringExtension.html": {
    "href": "api/Application.Commons.Extensions.StringExtension.html",
    "title": "Class StringExtension | Examiner",
    "summary": "Class StringExtension Namespace Application.Commons.Extensions Assembly Application.dll public static class StringExtension Inheritance object StringExtension Methods FirstCharToLower(string) public static string FirstCharToLower(this string input) Parameters input string Returns string ToReadableSize(double) public static string ToReadableSize(double bytes) Parameters bytes double Returns string"
  },
  "api/Application.Commons.Extensions.html": {
    "href": "api/Application.Commons.Extensions.html",
    "title": "Namespace Application.Commons.Extensions | Examiner",
    "summary": "Namespace Application.Commons.Extensions Classes CloneExtension LoggingLevelController StringExtension"
  },
  "api/Application.Commons.Extentions.QuestionDifficultyExtenstion.html": {
    "href": "api/Application.Commons.Extentions.QuestionDifficultyExtenstion.html",
    "title": "Class QuestionDifficultyExtenstion | Examiner",
    "summary": "Class QuestionDifficultyExtenstion Namespace Application.Commons.Extentions Assembly Domain.dll public static class QuestionDifficultyExtenstion Inheritance object QuestionDifficultyExtenstion Methods GetDifficultyCategory(short) public static QuestionDifficulty GetDifficultyCategory(this short mattrix) Parameters mattrix short Returns QuestionDifficulty float GetMattrix(QuestionDifficulty) calcalute the startign mattrix for each given difficulty, public static short GetMattrix(this QuestionDifficulty difficulty) Parameters difficulty QuestionDifficulty Returns short float"
  },
  "api/Application.Commons.Extentions.html": {
    "href": "api/Application.Commons.Extentions.html",
    "title": "Namespace Application.Commons.Extentions | Examiner",
    "summary": "Namespace Application.Commons.Extentions Classes QuestionDifficultyExtenstion"
  },
  "api/Application.Commons.Managers.IAuditManager.html": {
    "href": "api/Application.Commons.Managers.IAuditManager.html",
    "title": "Interface IAuditManager | Examiner",
    "summary": "Interface IAuditManager Namespace Application.Commons.Managers Assembly Application.dll public interface IAuditManager Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ApplicationLogRepository IApplicationLogRepository ApplicationLogRepository { get; } Property Value IApplicationLogRepository AuditTrailService IAuditTrailService AuditTrailService { get; } Property Value IAuditTrailService"
  },
  "api/Application.Commons.Managers.IServiceManager.html": {
    "href": "api/Application.Commons.Managers.IServiceManager.html",
    "title": "Interface IServiceManager | Examiner",
    "summary": "Interface IServiceManager Namespace Application.Commons.Managers Assembly Application.dll public interface IServiceManager : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CategoryService ICategoryService CategoryService { get; } Property Value ICategoryService LookupService ILookupService LookupService { get; } Property Value ILookupService QuestionService IQuestionService QuestionService { get; } Property Value IQuestionService SourceService ISourceService SourceService { get; } Property Value ISourceService TagService ITagService TagService { get; } Property Value ITagService"
  },
  "api/Application.Commons.Managers.ISystemManager.html": {
    "href": "api/Application.Commons.Managers.ISystemManager.html",
    "title": "Interface ISystemManager | Examiner",
    "summary": "Interface ISystemManager Namespace Application.Commons.Managers Assembly Application.dll public interface ISystemManager Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties SystemService ISystemService SystemService { get; } Property Value ISystemService"
  },
  "api/Application.Commons.Managers.html": {
    "href": "api/Application.Commons.Managers.html",
    "title": "Namespace Application.Commons.Managers | Examiner",
    "summary": "Namespace Application.Commons.Managers Interfaces IAuditManager IServiceManager ISystemManager"
  },
  "api/Application.Commons.MappingConfig.CategoryMapper.html": {
    "href": "api/Application.Commons.MappingConfig.CategoryMapper.html",
    "title": "Class CategoryMapper | Examiner",
    "summary": "Class CategoryMapper Namespace Application.Commons.MappingConfig Assembly Application.dll public class CategoryMapper : IRegister Inheritance object CategoryMapper Implements IRegister Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Register(TypeAdapterConfig) public void Register(TypeAdapterConfig config) Parameters config TypeAdapterConfig"
  },
  "api/Application.Commons.MappingConfig.SourceMapper.html": {
    "href": "api/Application.Commons.MappingConfig.SourceMapper.html",
    "title": "Class SourceMapper | Examiner",
    "summary": "Class SourceMapper Namespace Application.Commons.MappingConfig Assembly Application.dll public class SourceMapper : IRegister Inheritance object SourceMapper Implements IRegister Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Register(TypeAdapterConfig) public void Register(TypeAdapterConfig config) Parameters config TypeAdapterConfig"
  },
  "api/Application.Commons.MappingConfig.TagMapper.html": {
    "href": "api/Application.Commons.MappingConfig.TagMapper.html",
    "title": "Class TagMapper | Examiner",
    "summary": "Class TagMapper Namespace Application.Commons.MappingConfig Assembly Application.dll public class TagMapper : IRegister Inheritance object TagMapper Implements IRegister Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Register(TypeAdapterConfig) public void Register(TypeAdapterConfig config) Parameters config TypeAdapterConfig"
  },
  "api/Application.Commons.MappingConfig.html": {
    "href": "api/Application.Commons.MappingConfig.html",
    "title": "Namespace Application.Commons.MappingConfig | Examiner",
    "summary": "Namespace Application.Commons.MappingConfig Classes CategoryMapper SourceMapper TagMapper"
  },
  "api/Application.Commons.Models.Commands.AddMetadataCommand.html": {
    "href": "api/Application.Commons.Models.Commands.AddMetadataCommand.html",
    "title": "Class AddMetadataCommand | Examiner",
    "summary": "Class AddMetadataCommand Namespace Application.Commons.Models.Commands Assembly Application.dll public class AddMetadataCommand Inheritance object AddMetadataCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FiledName public string FiledName { get; set; } Property Value string FiledType public FiledType FiledType { get; set; } Property Value FiledType Value public string Value { get; set; } Property Value string"
  },
  "api/Application.Commons.Models.Commands.html": {
    "href": "api/Application.Commons.Models.Commands.html",
    "title": "Namespace Application.Commons.Models.Commands | Examiner",
    "summary": "Namespace Application.Commons.Models.Commands Classes AddMetadataCommand"
  },
  "api/Application.Commons.Models.Pageination.PageMetaData.html": {
    "href": "api/Application.Commons.Models.Pageination.PageMetaData.html",
    "title": "Class PageMetaData | Examiner",
    "summary": "Class PageMetaData Namespace Application.Commons.Models.Pageination Assembly Application.dll public class PageMetaData Inheritance object PageMetaData Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FirstItemIndex [SwaggerExample(1)] public int FirstItemIndex { get; } Property Value int HasNextPage [SwaggerSchema(\"has the next page?\")] [SwaggerExample(true)] public bool HasNextPage { get; } Property Value bool HasPreviousPage [SwaggerSchema(\"has the previous page?\")] [SwaggerExample(true)] public bool HasPreviousPage { get; } Property Value bool IsLastPage [SwaggerSchema(\"Is this the last page\")] [SwaggerExample(false)] public bool IsLastPage { get; } Property Value bool LastItemIndex [SwaggerExample(99)] public int LastItemIndex { get; } Property Value int NextPage [SwaggerSchema(\"The number of next page\")] [SwaggerExample(4)] public int? NextPage { get; } Property Value int? PageNumber [SwaggerSchema(\"The current page number\")] [SwaggerExample(3)] public int PageNumber { get; set; } Property Value int PageSize [SwaggerSchema(\"The size of current page\")] [SwaggerExample(50)] public int PageSize { get; set; } Property Value int PreviousPage [SwaggerSchema(\"The number of previous page\")] [SwaggerExample(2)] public int? PreviousPage { get; } Property Value int? TotalPages [SwaggerSchema(\"The total number of pages\")] [SwaggerExample(100)] public int TotalPages { get; set; } Property Value int TotalRecords [SwaggerSchema(\"The total number of record\")] [SwaggerExample(500)] public int TotalRecords { get; set; } Property Value int"
  },
  "api/Application.Commons.Models.Pageination.PageRequest.html": {
    "href": "api/Application.Commons.Models.Pageination.PageRequest.html",
    "title": "Class PageRequest | Examiner",
    "summary": "Class PageRequest Namespace Application.Commons.Models.Pageination Assembly Application.dll public class PageRequest Inheritance object PageRequest Derived LogSearchQuery GetDeletedEntitiesQuery GetAllCategoryQuery GetEntityTimelineQuery GetQuestionHistoryQuery GetAllTagsQuery GetAllQuestionsQuery GetAllSourceQuery GetRelatedSourcesQuery Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties PageNumber public int PageNumber { get; set; } Property Value int PageSize public int PageSize { get; set; } Property Value int"
  },
  "api/Application.Commons.Models.Pageination.PageResponse-1.html": {
    "href": "api/Application.Commons.Models.Pageination.PageResponse-1.html",
    "title": "Class PageResponse<T> | Examiner",
    "summary": "Class PageResponse<T> Namespace Application.Commons.Models.Pageination Assembly Application.dll [SwaggerSchema(\"\")] public class PageResponse<T> where T : class Type Parameters T Inheritance object PageResponse<T> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors PageResponse(IEnumerable<T>, int, int, int) public PageResponse(IEnumerable<T> data, int pageNumber, int pageSize, int totalRecords) Parameters data IEnumerable<T> pageNumber int pageSize int totalRecords int PageResponse(int, int, int) public PageResponse(int pageNumber, int pageSize, int totalRecords) Parameters pageNumber int pageSize int totalRecords int Properties Data [SwaggerSchema(null)] public IEnumerable<T> Data { get; set; } Property Value IEnumerable<T> MetaData [SwaggerSchema(\"a meta data for pagination object\")] public PageMetaData MetaData { get; set; } Property Value PageMetaData"
  },
  "api/Application.Commons.Models.Pageination.html": {
    "href": "api/Application.Commons.Models.Pageination.html",
    "title": "Namespace Application.Commons.Models.Pageination | Examiner",
    "summary": "Namespace Application.Commons.Models.Pageination Classes PageMetaData PageRequest PageResponse<T>"
  },
  "api/Application.Commons.Models.Results.PartialsSuccessResult.html": {
    "href": "api/Application.Commons.Models.Results.PartialsSuccessResult.html",
    "title": "Class PartialsSuccessResult | Examiner",
    "summary": "Class PartialsSuccessResult Namespace Application.Commons.Models.Results Assembly Application.dll public class PartialsSuccessResult Inheritance object PartialsSuccessResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Errors public Dictionary<string, string[]> Errors { get; set; } Property Value Dictionary<string, string[]> Successed public List<Guid> Successed { get; set; } Property Value List<Guid>"
  },
  "api/Application.Commons.Models.Results.Result-1.html": {
    "href": "api/Application.Commons.Models.Results.Result-1.html",
    "title": "Class Result<T> | Examiner",
    "summary": "Class Result<T> Namespace Application.Commons.Models.Results Assembly Application.dll public class Result<T> Type Parameters T Inheritance object Result<T> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Errors public Dictionary<string, string[]> Errors { get; init; } Property Value Dictionary<string, string[]> IsSuccess public bool IsSuccess { get; init; } Property Value bool StatusCode public HttpStatusCode StatusCode { get; set; } Property Value HttpStatusCode Value public T? Value { get; init; } Property Value T Methods AddError(string, string) public Result<T> AddError(string key, string error) Parameters key string error string Returns Result<T> ConflictFailure(string, string) public static Result<T> ConflictFailure(string key, string error) Parameters key string error string Returns Result<T> CreatedSuccess(T) public static Result<T> CreatedSuccess(T value) Parameters value T Returns Result<T> Failure(Dictionary<string, string[]>) public static Result<T> Failure(Dictionary<string, string[]> errors) Parameters errors Dictionary<string, string[]> Returns Result<T> Failure(Dictionary<string, string[]>, HttpStatusCode) public static Result<T> Failure(Dictionary<string, string[]> errors, HttpStatusCode statusCode) Parameters errors Dictionary<string, string[]> statusCode HttpStatusCode Returns Result<T> Failure(string, IEnumerable<string>) public static Result<T> Failure(string key, IEnumerable<string> errors) Parameters key string errors IEnumerable<string> Returns Result<T> Failure(string, IEnumerable<string>, HttpStatusCode) public static Result<T> Failure(string key, IEnumerable<string> errors, HttpStatusCode statusCode) Parameters key string errors IEnumerable<string> statusCode HttpStatusCode Returns Result<T> Failure(string, string) public static Result<T> Failure(string key, string error) Parameters key string error string Returns Result<T> Failure(string, string, HttpStatusCode) public static Result<T> Failure(string key, string error, HttpStatusCode statusCode) Parameters key string error string statusCode HttpStatusCode Returns Result<T> NotFoundFailure(string, string) public static Result<T> NotFoundFailure(string key, string error) Parameters key string error string Returns Result<T> Success(T) public static Result<T> Success(T value) Parameters value T Returns Result<T> Success(T, HttpStatusCode) public static Result<T> Success(T value, HttpStatusCode statusCode) Parameters value T statusCode HttpStatusCode Returns Result<T> UnprocessableEntityFailure(Dictionary<string, string[]>) public static Result<T> UnprocessableEntityFailure(Dictionary<string, string[]> errors) Parameters errors Dictionary<string, string[]> Returns Result<T> UnprocessableEntityFailure(string, IEnumerable<string>) public static Result<T> UnprocessableEntityFailure(string key, IEnumerable<string> errors) Parameters key string errors IEnumerable<string> Returns Result<T> UnprocessableEntityFailure(string, string) public static Result<T> UnprocessableEntityFailure(string key, string error) Parameters key string error string Returns Result<T>"
  },
  "api/Application.Commons.Models.Results.Result.html": {
    "href": "api/Application.Commons.Models.Results.Result.html",
    "title": "Class Result | Examiner",
    "summary": "Class Result Namespace Application.Commons.Models.Results Assembly Application.dll public class Result Inheritance object Result Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Errors public Dictionary<string, string[]> Errors { get; init; } Property Value Dictionary<string, string[]> IsSuccess public bool IsSuccess { get; init; } Property Value bool StatusCode public HttpStatusCode StatusCode { get; set; } Property Value HttpStatusCode Methods AddError(string, string) public Result AddError(string key, string error) Parameters key string error string Returns Result ConflictFailure(string, string) public static Result ConflictFailure(string key, string error) Parameters key string error string Returns Result Failure(Dictionary<string, string[]>) public static Result Failure(Dictionary<string, string[]> errors) Parameters errors Dictionary<string, string[]> Returns Result Failure(Dictionary<string, string[]>, HttpStatusCode) public static Result Failure(Dictionary<string, string[]> errors, HttpStatusCode statusCode) Parameters errors Dictionary<string, string[]> statusCode HttpStatusCode Returns Result Failure(string, IEnumerable<string>) public static Result Failure(string key, IEnumerable<string> errors) Parameters key string errors IEnumerable<string> Returns Result Failure(string, IEnumerable<string>, HttpStatusCode) public static Result Failure(string key, IEnumerable<string> errors, HttpStatusCode statusCode) Parameters key string errors IEnumerable<string> statusCode HttpStatusCode Returns Result Failure(string, string) public static Result Failure(string key, string error) Parameters key string error string Returns Result Failure(string, string, HttpStatusCode) public static Result Failure(string key, string error, HttpStatusCode statusCode) Parameters key string error string statusCode HttpStatusCode Returns Result NoContentSuccess() public static Result NoContentSuccess() Returns Result NotFoundFailure(string, string) public static Result NotFoundFailure(string key, string error) Parameters key string error string Returns Result Success() public static Result Success() Returns Result Success(HttpStatusCode) public static Result Success(HttpStatusCode statusCode) Parameters statusCode HttpStatusCode Returns Result UnprocessableEntityFailure(string, IEnumerable<string>) public static Result UnprocessableEntityFailure(string key, IEnumerable<string> errors) Parameters key string errors IEnumerable<string> Returns Result UnprocessableEntityFailure(string, string) public static Result UnprocessableEntityFailure(string key, string error) Parameters key string error string Returns Result"
  },
  "api/Application.Commons.Models.Results.html": {
    "href": "api/Application.Commons.Models.Results.html",
    "title": "Namespace Application.Commons.Models.Results | Examiner",
    "summary": "Namespace Application.Commons.Models.Results Classes PartialsSuccessResult Result Result<T>"
  },
  "api/Application.Commons.Models.ServicesModel.Source.AddMetadataSourceModel.html": {
    "href": "api/Application.Commons.Models.ServicesModel.Source.AddMetadataSourceModel.html",
    "title": "Class AddMetadataSourceModel | Examiner",
    "summary": "Class AddMetadataSourceModel Namespace Application.Commons.Models.ServicesModel.Source Assembly Application.dll public class AddMetadataSourceModel Inheritance object AddMetadataSourceModel Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FiledName public string FiledName { get; set; } Property Value string FiledType public FiledType FiledType { get; set; } Property Value FiledType Value public string Value { get; set; } Property Value string"
  },
  "api/Application.Commons.Models.ServicesModel.Source.AddSourceReferenceServiceModel.html": {
    "href": "api/Application.Commons.Models.ServicesModel.Source.AddSourceReferenceServiceModel.html",
    "title": "Class AddSourceReferenceServiceModel | Examiner",
    "summary": "Class AddSourceReferenceServiceModel Namespace Application.Commons.Models.ServicesModel.Source Assembly Application.dll public class AddSourceReferenceServiceModel Inheritance object AddSourceReferenceServiceModel Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Metadata public List<AddMetadataSourceModel>? Metadata { get; set; } Property Value List<AddMetadataSourceModel> Note public string Note { get; set; } Property Value string"
  },
  "api/Application.Commons.Models.ServicesModel.Source.AddSourceServiceModel.html": {
    "href": "api/Application.Commons.Models.ServicesModel.Source.AddSourceServiceModel.html",
    "title": "Class AddSourceServiceModel | Examiner",
    "summary": "Class AddSourceServiceModel Namespace Application.Commons.Models.ServicesModel.Source Assembly Application.dll public class AddSourceServiceModel Inheritance object AddSourceServiceModel Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CategoryId public Guid? CategoryId { get; set; } Property Value Guid? Description public string? Description { get; set; } Property Value string FileExtension public string? FileExtension { get; set; } Property Value string FilePath public string? FilePath { get; set; } Property Value string HasAttachment public bool HasAttachment { get; set; } Property Value bool Metadata public List<AddMetadataSourceModel>? Metadata { get; set; } Property Value List<AddMetadataSourceModel> Tags public List<Guid>? Tags { get; set; } Property Value List<Guid> Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Commons.Models.ServicesModel.Source.html": {
    "href": "api/Application.Commons.Models.ServicesModel.Source.html",
    "title": "Namespace Application.Commons.Models.ServicesModel.Source | Examiner",
    "summary": "Namespace Application.Commons.Models.ServicesModel.Source Classes AddMetadataSourceModel AddSourceReferenceServiceModel AddSourceServiceModel"
  },
  "api/Application.Commons.Models.SystemModels.AppStatusResponseModel.html": {
    "href": "api/Application.Commons.Models.SystemModels.AppStatusResponseModel.html",
    "title": "Class AppStatusResponseModel | Examiner",
    "summary": "Class AppStatusResponseModel Namespace Application.Commons.Models.SystemModels Assembly Application.dll public class AppStatusResponseModel Inheritance object AppStatusResponseModel Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties AppVersion public string AppVersion { get; set; } Property Value string Collections public List<CollectionStorageStat> Collections { get; set; } Property Value List<CollectionStorageStat> CpuArchitecture public string CpuArchitecture { get; set; } Property Value string DatabaseSizeBytes public string DatabaseSizeBytes { get; set; } Property Value string MemoryUsageMB public string MemoryUsageMB { get; set; } Property Value string OSVersion public string OSVersion { get; set; } Property Value string Uptime public TimeSpan Uptime { get; set; } Property Value TimeSpan"
  },
  "api/Application.Commons.Models.SystemModels.CollectionStorageStat.html": {
    "href": "api/Application.Commons.Models.SystemModels.CollectionStorageStat.html",
    "title": "Class CollectionStorageStat | Examiner",
    "summary": "Class CollectionStorageStat Namespace Application.Commons.Models.SystemModels Assembly Application.dll public class CollectionStorageStat Inheritance object CollectionStorageStat Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties AverageDocumentSizeBytes public string AverageDocumentSizeBytes { get; set; } Property Value string DocumentCount public int DocumentCount { get; set; } Property Value int EstimatedTotalSizeBytes public string EstimatedTotalSizeBytes { get; set; } Property Value string IndexCount public int IndexCount { get; set; } Property Value int Name public string Name { get; set; } Property Value string"
  },
  "api/Application.Commons.Models.SystemModels.html": {
    "href": "api/Application.Commons.Models.SystemModels.html",
    "title": "Namespace Application.Commons.Models.SystemModels | Examiner",
    "summary": "Namespace Application.Commons.Models.SystemModels Classes AppStatusResponseModel CollectionStorageStat"
  },
  "api/Application.Commons.Services.IAuditTrailService.html": {
    "href": "api/Application.Commons.Services.IAuditTrailService.html",
    "title": "Interface IAuditTrailService | Examiner",
    "summary": "Interface IAuditTrailService Namespace Application.Commons.Services Assembly Application.dll public interface IAuditTrailService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods AddNewEntity<T>(EntityName, Guid, ActionBy, T, int, string?) void AddNewEntity<T>(EntityName entityName, Guid entityId, ActionBy actionBy, T entity, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid actionBy ActionBy entity T versionNumber int comment string Type Parameters T Count(Guid) int Count(Guid entityId) Parameters entityId Guid Returns int CountDeletedEntity() int CountDeletedEntity() Returns int DeleteEntity<T>(EntityName, Guid, ActionType, ActionBy, T, int, string?) void DeleteEntity<T>(EntityName entityName, Guid entityId, ActionType actionType, ActionBy actionBy, T entity, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid actionType ActionType actionBy ActionBy entity T versionNumber int comment string Type Parameters T GetDeletedEntities(Func<AuditTrail, bool>, int, int) IEnumerable<AuditTrail> GetDeletedEntities(Func<AuditTrail, bool> func, int pageNumber, int pageSize) Parameters func Func<AuditTrail, bool> pageNumber int pageSize int Returns IEnumerable<AuditTrail> GetEntityTrail(Func<AuditTrail, bool>, int, int, Guid) IEnumerable<AuditTrail> GetEntityTrail(Func<AuditTrail, bool> func, int pageNumber, int pageSize, Guid entityId) Parameters func Func<AuditTrail, bool> pageNumber int pageSize int entityId Guid Returns IEnumerable<AuditTrail> GetEntityTrailDetails(Guid, EntityName, Guid) AuditTrail GetEntityTrailDetails(Guid trailId, EntityName entityName, Guid entityId) Parameters trailId Guid entityName EntityName entityId Guid Returns AuditTrail UpdateEntitiesBulk<T>(EntityName, IEnumerable<(Guid EntityId, ActionType ActionType, ActionBy ActionBy, T OldEntity, T NewEntity, int Version, string? Comment)>) void UpdateEntitiesBulk<T>(EntityName entityName, IEnumerable<(Guid EntityId, ActionType ActionType, ActionBy ActionBy, T OldEntity, T NewEntity, int Version, string? Comment)> changes) Parameters entityName EntityName changes IEnumerable<(Guid EntityId, ActionType ActionType, ActionBy ActionBy, T OldEntity, T NewEntity, int Version, string Comment)> Type Parameters T UpdateEntity<T>(EntityName, Guid, ActionType, ActionBy, T, T, int, string?) void UpdateEntity<T>(EntityName entityName, Guid entityId, ActionType actionType, ActionBy actionBy, T oldEntity, T newEntity, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid actionType ActionType actionBy ActionBy oldEntity T newEntity T versionNumber int comment string Type Parameters T"
  },
  "api/Application.Commons.Services.ICategoryService.html": {
    "href": "api/Application.Commons.Services.ICategoryService.html",
    "title": "Interface ICategoryService | Examiner",
    "summary": "Interface ICategoryService Namespace Application.Commons.Services Assembly Application.dll public interface ICategoryService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods AddCategory(string, string, Guid?) Result<Category> AddCategory(string name, string description, Guid? parentId) Parameters name string description string parentId Guid? Returns Result<Category> UpdateCategory(Guid, string, string) Result UpdateCategory(Guid categoryId, string name, string description) Parameters categoryId Guid name string description string Returns Result"
  },
  "api/Application.Commons.Services.ILoggingService.html": {
    "href": "api/Application.Commons.Services.ILoggingService.html",
    "title": "Interface ILoggingService | Examiner",
    "summary": "Interface ILoggingService Namespace Application.Commons.Services Assembly Application.dll public interface ILoggingService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods GetAllLogs() IEnumerable<ApplicationLog> GetAllLogs() Returns IEnumerable<ApplicationLog>"
  },
  "api/Application.Commons.Services.ILookupService.html": {
    "href": "api/Application.Commons.Services.ILookupService.html",
    "title": "Interface ILookupService | Examiner",
    "summary": "Interface ILookupService Namespace Application.Commons.Services Assembly Application.dll public interface ILookupService : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods AddLanguage(Language) void AddLanguage(Language language) Parameters language Language AddSource(Source) void AddSource(Source source) Parameters source Source GetLanguageReference(string) Guid GetLanguageReference(string code) Parameters code string Returns Guid GetLanguages() IEnumerable<Language> GetLanguages() Returns IEnumerable<Language> GetSource(Guid) Source GetSource(Guid id) Parameters id Guid Returns Source UpdateSource(Source) void UpdateSource(Source source) Parameters source Source"
  },
  "api/Application.Commons.Services.IQuestionService.html": {
    "href": "api/Application.Commons.Services.IQuestionService.html",
    "title": "Interface IQuestionService | Examiner",
    "summary": "Interface IQuestionService Namespace Application.Commons.Services Assembly Application.dll public interface IQuestionService : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Count() int Count() Returns int DeleteAllQuestions() void DeleteAllQuestions() DeleteQuestion(Guid) void DeleteQuestion(Guid id) Parameters id Guid GetQuestion(Guid) Question GetQuestion(Guid id) Parameters id Guid Returns Question GetQuestions(int, int) IEnumerable<Question> GetQuestions(int pageNumber, int pageSize) Parameters pageNumber int pageSize int Returns IEnumerable<Question> InsertQuestion(Question) Question InsertQuestion(Question question) Parameters question Question Returns Question UpdateQuestion(Question) void UpdateQuestion(Question question) Parameters question Question"
  },
  "api/Application.Commons.Services.ISourceService.html": {
    "href": "api/Application.Commons.Services.ISourceService.html",
    "title": "Interface ISourceService | Examiner",
    "summary": "Interface ISourceService Namespace Application.Commons.Services Assembly Application.dll public interface ISourceService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods AddBulkTag(Guid, IEnumerable<Guid>) Result<PartialsSuccessResult> AddBulkTag(Guid sourceId, IEnumerable<Guid> tagIds) Parameters sourceId Guid tagIds IEnumerable<Guid> Returns Result<PartialsSuccessResult> AddReference(IEnumerable<AddSourceReferenceServiceModel>, Guid) Result<IEnumerable<SourceReference>> AddReference(IEnumerable<AddSourceReferenceServiceModel> sourceReferences, Guid sourceId) Parameters sourceReferences IEnumerable<AddSourceReferenceServiceModel> sourceId Guid Returns Result<IEnumerable<SourceReference>> AddSource(AddSourceServiceModel) Result<Source> AddSource(AddSourceServiceModel model) Parameters model AddSourceServiceModel Returns Result<Source> AddTag(Guid, Guid) Result AddTag(Guid sourceId, Guid tagId) Parameters sourceId Guid tagId Guid Returns Result RemoveBulkTags(Guid, IEnumerable<Guid>) Result<PartialsSuccessResult> RemoveBulkTags(Guid sourceId, IEnumerable<Guid> tagIds) Parameters sourceId Guid tagIds IEnumerable<Guid> Returns Result<PartialsSuccessResult> RemoveTag(Guid, Guid) Result RemoveTag(Guid sourceId, Guid tagId) Parameters sourceId Guid tagId Guid Returns Result"
  },
  "api/Application.Commons.Services.ISystemService.html": {
    "href": "api/Application.Commons.Services.ISystemService.html",
    "title": "Interface ISystemService | Examiner",
    "summary": "Interface ISystemService Namespace Application.Commons.Services Assembly Application.dll public interface ISystemService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods AnalyzeCollections(int) List<CollectionStorageStat> AnalyzeCollections(int sampleSize = 10) Parameters sampleSize int Returns List<CollectionStorageStat> GetDatabaseFileSizeBytes() long GetDatabaseFileSizeBytes() Returns long"
  },
  "api/Application.Commons.Services.ITagService.html": {
    "href": "api/Application.Commons.Services.ITagService.html",
    "title": "Interface ITagService | Examiner",
    "summary": "Interface ITagService Namespace Application.Commons.Services Assembly Application.dll public interface ITagService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods AddTag(string, string?, string) Result<Tag> AddTag(string name, string? backgroundColorCode = null, string textColorCode = null) Parameters name string backgroundColorCode string textColorCode string Returns Result<Tag> ArchiveAllTag() Result ArchiveAllTag() Returns Result ArchiveTag(Guid) Result ArchiveTag(Guid id) Parameters id Guid Returns Result DeleteTag(Guid) Result DeleteTag(Guid id) Parameters id Guid Returns Result GetAllTags() IEnumerable<Tag> GetAllTags() Returns IEnumerable<Tag> UnArchiveTag(Guid) Result UnArchiveTag(Guid id) Parameters id Guid Returns Result UpdateTag(Guid, string, string, string) Result UpdateTag(Guid id, string name, string backgroundColorCode, string textColorCode) Parameters id Guid name string backgroundColorCode string textColorCode string Returns Result"
  },
  "api/Application.Commons.Services.html": {
    "href": "api/Application.Commons.Services.html",
    "title": "Namespace Application.Commons.Services | Examiner",
    "summary": "Namespace Application.Commons.Services Interfaces IAuditTrailService ICategoryService ILoggingService ILookupService IQuestionService ISourceService ISystemService ITagService"
  },
  "api/Application.Commons.SharedModelResult.LanguageResult.html": {
    "href": "api/Application.Commons.SharedModelResult.LanguageResult.html",
    "title": "Class LanguageResult | Examiner",
    "summary": "Class LanguageResult Namespace Application.Commons.SharedModelResult Assembly Application.dll public class LanguageResult Inheritance object LanguageResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Code public string Code { get; set; } Property Value string Name public string Name { get; set; } Property Value string"
  },
  "api/Application.Commons.SharedModelResult.QuestionSourceResult.html": {
    "href": "api/Application.Commons.SharedModelResult.QuestionSourceResult.html",
    "title": "Class QuestionSourceResult | Examiner",
    "summary": "Class QuestionSourceResult Namespace Application.Commons.SharedModelResult Assembly Application.dll public class QuestionSourceResult Inheritance object QuestionSourceResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid Title public string Title { get; set; } Property Value string Type public SourceTypeLookup Type { get; set; } Property Value SourceTypeLookup URL public string URL { get; set; } Property Value string"
  },
  "api/Application.Commons.SharedModelResult.Source.MetadataResult.html": {
    "href": "api/Application.Commons.SharedModelResult.Source.MetadataResult.html",
    "title": "Class MetadataResult | Examiner",
    "summary": "Class MetadataResult Namespace Application.Commons.SharedModelResult.Source Assembly Application.dll public class MetadataResult Inheritance object MetadataResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FiledName public string FiledName { get; set; } Property Value string FiledType public FiledType FiledType { get; set; } Property Value FiledType Id public Guid Id { get; set; } Property Value Guid Value public string Value { get; set; } Property Value string"
  },
  "api/Application.Commons.SharedModelResult.Source.SourceResult.html": {
    "href": "api/Application.Commons.SharedModelResult.Source.SourceResult.html",
    "title": "Class SourceResult | Examiner",
    "summary": "Class SourceResult Namespace Application.Commons.SharedModelResult.Source Assembly Application.dll public class SourceResult Inheritance object SourceResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description [SwaggerSchema(null, Description = \"short description for a source\", Nullable = true, Title = \"Source description\")] [SwaggerExample(\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc\")] [StringLength(2500, MinimumLength = 1)] public string? Description { get; set; } Property Value string Id [SwaggerSchema(null, Description = \"An UUID unique id for source\", ReadOnly = true, Format = \"UUID\", Nullable = false, Title = \"Source Unique Identifier\")] [SwaggerExample(\"01979c44-b446-7380-ad8b-df6b2a2be0bc\")] public Guid Id { get; set; } Property Value Guid Title [SwaggerSchema(null, Description = \"A source Title\", Nullable = false, Title = \"Source title\")] [SwaggerExample(\"Intro programming\")] [StringLength(100, MinimumLength = 1)] public string Title { get; set; } Property Value string Type [SwaggerSchema(null, Description = \"An type of a source\", ReadOnly = true, Format = \"UUID\", Nullable = false, Title = \"Source Unique Identifier\")] [SwaggerExample(SourceType.Article)] [StringLength(50, MinimumLength = 1)] public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Commons.SharedModelResult.Source.html": {
    "href": "api/Application.Commons.SharedModelResult.Source.html",
    "title": "Namespace Application.Commons.SharedModelResult.Source | Examiner",
    "summary": "Namespace Application.Commons.SharedModelResult.Source Classes MetadataResult SourceResult"
  },
  "api/Application.Commons.SharedModelResult.TagResult.html": {
    "href": "api/Application.Commons.SharedModelResult.TagResult.html",
    "title": "Class TagResult | Examiner",
    "summary": "Class TagResult Namespace Application.Commons.SharedModelResult Assembly Application.dll public class TagResult Inheritance object TagResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ColorCode [SwaggerSchema(null, Description = \"An collection of tags\", Nullable = false, Title = \"Tag color\")] [SwaggerExample(\"#8910A3\")] [StringLength(7, MinimumLength = 7)] public string ColorCode { get; set; } Property Value string Id [SwaggerSchema(null, Description = \"The Tag id\", Nullable = false, Title = \"Tag Id\")] [SwaggerExample(\"0197c089-8943-736d-b211-b7f4b6bf9728\")] [StringLength(100, MinimumLength = 1)] public Guid Id { get; set; } Property Value Guid Name [SwaggerSchema(null, Description = \"An collection of tags\", Nullable = false, Title = \"Tag name\")] [SwaggerExample(\"MATH-101\")] [StringLength(100, MinimumLength = 1)] public string Name { get; set; } Property Value string"
  },
  "api/Application.Commons.SharedModelResult.Timeline.EntityTimeline.TimelineQueryResult.html": {
    "href": "api/Application.Commons.SharedModelResult.Timeline.EntityTimeline.TimelineQueryResult.html",
    "title": "Class TimelineQueryResult | Examiner",
    "summary": "Class TimelineQueryResult Namespace Application.Commons.SharedModelResult.Timeline.EntityTimeline Assembly Application.dll public class TimelineQueryResult Inheritance object TimelineQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ActionBy public ActionBy ActionBy { get; set; } Property Value ActionBy ActionType public ActionType ActionType { get; set; } Property Value ActionType Comment public string? Comment { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid Timestamp public DateTimeOffset Timestamp { get; set; } Property Value DateTimeOffset VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Commons.SharedModelResult.Timeline.EntityTimeline.html": {
    "href": "api/Application.Commons.SharedModelResult.Timeline.EntityTimeline.html",
    "title": "Namespace Application.Commons.SharedModelResult.Timeline.EntityTimeline | Examiner",
    "summary": "Namespace Application.Commons.SharedModelResult.Timeline.EntityTimeline Classes TimelineQueryResult"
  },
  "api/Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails.EntityTimelineDetailsQueryResult.html": {
    "href": "api/Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails.EntityTimelineDetailsQueryResult.html",
    "title": "Class EntityTimelineDetailsQueryResult | Examiner",
    "summary": "Class EntityTimelineDetailsQueryResult Namespace Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails Assembly Application.dll public class EntityTimelineDetailsQueryResult Inheritance object EntityTimelineDetailsQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ActionBy public ActionBy ActionBy { get; set; } Property Value ActionBy ActionType public ActionType ActionType { get; set; } Property Value ActionType Comment public string? Comment { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid ModifiedProperties public IEnumerable<PropertyChangeResult>? ModifiedProperties { get; set; } Property Value IEnumerable<PropertyChangeResult> Timestamp public DateTimeOffset Timestamp { get; set; } Property Value DateTimeOffset VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails.PropertyChangeResult.html": {
    "href": "api/Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails.PropertyChangeResult.html",
    "title": "Class PropertyChangeResult | Examiner",
    "summary": "Class PropertyChangeResult Namespace Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails Assembly Application.dll public class PropertyChangeResult Inheritance object PropertyChangeResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties NewValue public object? NewValue { get; set; } Property Value object OldValue public object? OldValue { get; set; } Property Value object PropertyName public string PropertyName { get; set; } Property Value string PropertyType public string PropertyType { get; set; } Property Value string"
  },
  "api/Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails.html": {
    "href": "api/Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails.html",
    "title": "Namespace Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails | Examiner",
    "summary": "Namespace Application.Commons.SharedModelResult.Timeline.EntityTimelineDetails Classes EntityTimelineDetailsQueryResult PropertyChangeResult"
  },
  "api/Application.Commons.SharedModelResult.html": {
    "href": "api/Application.Commons.SharedModelResult.html",
    "title": "Namespace Application.Commons.SharedModelResult | Examiner",
    "summary": "Namespace Application.Commons.SharedModelResult Classes LanguageResult QuestionSourceResult TagResult"
  },
  "api/Application.Commons.Validation.Pagination.PageRequestValidator.html": {
    "href": "api/Application.Commons.Validation.Pagination.PageRequestValidator.html",
    "title": "Class PageRequestValidator | Examiner",
    "summary": "Class PageRequestValidator Namespace Application.Commons.Validation.Pagination Assembly Application.dll public class PageRequestValidator : AbstractValidator<PageRequest>, IValidator<PageRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<PageRequest> PageRequestValidator Implements IValidator<PageRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<PageRequest>.Validate(PageRequest) AbstractValidator<PageRequest>.ValidateAsync(PageRequest, CancellationToken) AbstractValidator<PageRequest>.Validate(ValidationContext<PageRequest>) AbstractValidator<PageRequest>.ValidateAsync(ValidationContext<PageRequest>, CancellationToken) AbstractValidator<PageRequest>.CreateDescriptor() AbstractValidator<PageRequest>.RuleFor<TProperty>(Expression<Func<PageRequest, TProperty>>) AbstractValidator<PageRequest>.Transform<TProperty, TTransformed>(Expression<Func<PageRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<PageRequest>.Transform<TProperty, TTransformed>(Expression<Func<PageRequest, TProperty>>, Func<PageRequest, TProperty, TTransformed>) AbstractValidator<PageRequest>.RuleForEach<TElement>(Expression<Func<PageRequest, IEnumerable<TElement>>>) AbstractValidator<PageRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<PageRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<PageRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<PageRequest, IEnumerable<TElement>>>, Func<PageRequest, TElement, TTransformed>) AbstractValidator<PageRequest>.RuleSet(string, Action) AbstractValidator<PageRequest>.When(Func<PageRequest, bool>, Action) AbstractValidator<PageRequest>.When(Func<PageRequest, ValidationContext<PageRequest>, bool>, Action) AbstractValidator<PageRequest>.Unless(Func<PageRequest, bool>, Action) AbstractValidator<PageRequest>.Unless(Func<PageRequest, ValidationContext<PageRequest>, bool>, Action) AbstractValidator<PageRequest>.WhenAsync(Func<PageRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<PageRequest>.WhenAsync(Func<PageRequest, ValidationContext<PageRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<PageRequest>.UnlessAsync(Func<PageRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<PageRequest>.UnlessAsync(Func<PageRequest, ValidationContext<PageRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<PageRequest>.Include(IValidator<PageRequest>) AbstractValidator<PageRequest>.Include<TValidator>(Func<PageRequest, TValidator>) AbstractValidator<PageRequest>.GetEnumerator() AbstractValidator<PageRequest>.EnsureInstanceNotNull(object) AbstractValidator<PageRequest>.PreValidate(ValidationContext<PageRequest>, ValidationResult) AbstractValidator<PageRequest>.RaiseValidationException(ValidationContext<PageRequest>, ValidationResult) AbstractValidator<PageRequest>.OnRuleAdded(IValidationRule<PageRequest>) AbstractValidator<PageRequest>.CascadeMode AbstractValidator<PageRequest>.ClassLevelCascadeMode AbstractValidator<PageRequest>.RuleLevelCascadeMode Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors PageRequestValidator() public PageRequestValidator()"
  },
  "api/Application.Commons.Validation.Pagination.html": {
    "href": "api/Application.Commons.Validation.Pagination.html",
    "title": "Namespace Application.Commons.Validation.Pagination | Examiner",
    "summary": "Namespace Application.Commons.Validation.Pagination Classes PageRequestValidator"
  },
  "api/Application.EntitlesTimeline.Queries.EntityTimeline.GetEntityTimelineQuery.html": {
    "href": "api/Application.EntitlesTimeline.Queries.EntityTimeline.GetEntityTimelineQuery.html",
    "title": "Class GetEntityTimelineQuery | Examiner",
    "summary": "Class GetEntityTimelineQuery Namespace Application.EntitlesTimeline.Queries.EntityTimeline Assembly Application.dll public class GetEntityTimelineQuery : PageRequest, IRequest<Result<PageResponse<TimelineQueryResult>>>, IBaseRequest Inheritance object PageRequest GetEntityTimelineQuery Implements IRequest<Result<PageResponse<TimelineQueryResult>>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ActionBy public ActionBy? ActionBy { get; set; } Property Value ActionBy? ActionType public ActionType? ActionType { get; set; } Property Value ActionType? Comment public string? Comment { get; set; } Property Value string EndDate public DateTimeOffset? EndDate { get; set; } Property Value DateTimeOffset? EntityName [JsonIgnore] public EntityName EntityName { get; set; } Property Value EntityName Id [JsonIgnore] public Guid Id { get; set; } Property Value Guid StartDate public DateTimeOffset? StartDate { get; set; } Property Value DateTimeOffset?"
  },
  "api/Application.EntitlesTimeline.Queries.EntityTimeline.html": {
    "href": "api/Application.EntitlesTimeline.Queries.EntityTimeline.html",
    "title": "Namespace Application.EntitlesTimeline.Queries.EntityTimeline | Examiner",
    "summary": "Namespace Application.EntitlesTimeline.Queries.EntityTimeline Classes GetEntityTimelineQuery"
  },
  "api/Application.EntitlesTimeline.Queries.EntityTimelineDetails.EntityTimelineDetailsQuery.html": {
    "href": "api/Application.EntitlesTimeline.Queries.EntityTimelineDetails.EntityTimelineDetailsQuery.html",
    "title": "Class EntityTimelineDetailsQuery | Examiner",
    "summary": "Class EntityTimelineDetailsQuery Namespace Application.EntitlesTimeline.Queries.EntityTimelineDetails Assembly Application.dll public class EntityTimelineDetailsQuery : IRequest<Result<EntityTimelineDetailsQueryResult>>, IBaseRequest Inheritance object EntityTimelineDetailsQuery Implements IRequest<Result<EntityTimelineDetailsQueryResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties EntityId public Guid EntityId { get; set; } Property Value Guid EntityName public EntityName EntityName { get; set; } Property Value EntityName TimelineId public Guid TimelineId { get; set; } Property Value Guid"
  },
  "api/Application.EntitlesTimeline.Queries.EntityTimelineDetails.EntityTimelineDetailsQueryHandler.html": {
    "href": "api/Application.EntitlesTimeline.Queries.EntityTimelineDetails.EntityTimelineDetailsQueryHandler.html",
    "title": "Class EntityTimelineDetailsQueryHandler | Examiner",
    "summary": "Class EntityTimelineDetailsQueryHandler Namespace Application.EntitlesTimeline.Queries.EntityTimelineDetails Assembly Application.dll public class EntityTimelineDetailsQueryHandler : IRequestHandler<EntityTimelineDetailsQuery, Result<EntityTimelineDetailsQueryResult>> Inheritance object EntityTimelineDetailsQueryHandler Implements IRequestHandler<EntityTimelineDetailsQuery, Result<EntityTimelineDetailsQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors EntityTimelineDetailsQueryHandler(IAuditManager, IMapper) public EntityTimelineDetailsQueryHandler(IAuditManager auditManager, IMapper mapper) Parameters auditManager IAuditManager mapper IMapper Methods Handle(EntityTimelineDetailsQuery, CancellationToken) Handles a request public Task<Result<EntityTimelineDetailsQueryResult>> Handle(EntityTimelineDetailsQuery request, CancellationToken cancellationToken) Parameters request EntityTimelineDetailsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<EntityTimelineDetailsQueryResult>> Response from the request"
  },
  "api/Application.EntitlesTimeline.Queries.EntityTimelineDetails.html": {
    "href": "api/Application.EntitlesTimeline.Queries.EntityTimelineDetails.html",
    "title": "Namespace Application.EntitlesTimeline.Queries.EntityTimelineDetails | Examiner",
    "summary": "Namespace Application.EntitlesTimeline.Queries.EntityTimelineDetails Classes EntityTimelineDetailsQuery EntityTimelineDetailsQueryHandler"
  },
  "api/Application.Histories.Queries.GetQuestionHistory.GetQuestionHistoryQuery.html": {
    "href": "api/Application.Histories.Queries.GetQuestionHistory.GetQuestionHistoryQuery.html",
    "title": "Class GetQuestionHistoryQuery | Examiner",
    "summary": "Class GetQuestionHistoryQuery Namespace Application.Histories.Queries.GetQuestionHistory Assembly Application.dll public class GetQuestionHistoryQuery : PageRequest, IRequest<PageResponse<GetQuestionHistoryQueryResult>>, IBaseRequest Inheritance object PageRequest GetQuestionHistoryQuery Implements IRequest<PageResponse<GetQuestionHistoryQueryResult>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties QuestionId [JsonIgnore] public Guid QuestionId { get; set; } Property Value Guid"
  },
  "api/Application.Histories.Queries.GetQuestionHistory.Models.PropertyChangesQueryResult.html": {
    "href": "api/Application.Histories.Queries.GetQuestionHistory.Models.PropertyChangesQueryResult.html",
    "title": "Class PropertyChangesQueryResult | Examiner",
    "summary": "Class PropertyChangesQueryResult Namespace Application.Histories.Queries.GetQuestionHistory.Models Assembly Application.dll public class PropertyChangesQueryResult Inheritance object PropertyChangesQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties DataType public string DataType { get; set; } Property Value string IsNullable public bool IsNullable { get; set; } Property Value bool Name public string Name { get; set; } Property Value string NewValue public object? NewValue { get; set; } Property Value object OldValue public object? OldValue { get; set; } Property Value object"
  },
  "api/Application.Histories.Queries.GetQuestionHistory.Models.html": {
    "href": "api/Application.Histories.Queries.GetQuestionHistory.Models.html",
    "title": "Namespace Application.Histories.Queries.GetQuestionHistory.Models | Examiner",
    "summary": "Namespace Application.Histories.Queries.GetQuestionHistory.Models Classes PropertyChangesQueryResult"
  },
  "api/Application.Histories.Queries.GetQuestionHistory.html": {
    "href": "api/Application.Histories.Queries.GetQuestionHistory.html",
    "title": "Namespace Application.Histories.Queries.GetQuestionHistory | Examiner",
    "summary": "Namespace Application.Histories.Queries.GetQuestionHistory Classes GetQuestionHistoryQuery"
  },
  "api/Application.Lookups.Commands.Languages.AddLanguageCommand.html": {
    "href": "api/Application.Lookups.Commands.Languages.AddLanguageCommand.html",
    "title": "Class AddLanguageCommand | Examiner",
    "summary": "Class AddLanguageCommand Namespace Application.Lookups.Commands.Languages Assembly Application.dll public class AddLanguageCommand : IRequest, IBaseRequest Inheritance object AddLanguageCommand Implements IRequest IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Code public required string Code { get; set; } Property Value string DisplayName public required string DisplayName { get; set; } Property Value string"
  },
  "api/Application.Lookups.Commands.Languages.AddLanguageCommandHandler.html": {
    "href": "api/Application.Lookups.Commands.Languages.AddLanguageCommandHandler.html",
    "title": "Class AddLanguageCommandHandler | Examiner",
    "summary": "Class AddLanguageCommandHandler Namespace Application.Lookups.Commands.Languages Assembly Application.dll public class AddLanguageCommandHandler : IRequestHandler<AddLanguageCommand> Inheritance object AddLanguageCommandHandler Implements IRequestHandler<AddLanguageCommand> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddLanguageCommandHandler(IServiceManager) public AddLanguageCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(AddLanguageCommand, CancellationToken) Handles a request public Task Handle(AddLanguageCommand request, CancellationToken cancellationToken) Parameters request AddLanguageCommand The request cancellationToken CancellationToken Cancellation token Returns Task Response from the request"
  },
  "api/Application.Lookups.Commands.Languages.html": {
    "href": "api/Application.Lookups.Commands.Languages.html",
    "title": "Namespace Application.Lookups.Commands.Languages | Examiner",
    "summary": "Namespace Application.Lookups.Commands.Languages Classes AddLanguageCommand AddLanguageCommandHandler"
  },
  "api/Application.Lookups.Commands.Sources.UpdateSource.UpdateSourceCommand.html": {
    "href": "api/Application.Lookups.Commands.Sources.UpdateSource.UpdateSourceCommand.html",
    "title": "Class UpdateSourceCommand | Examiner",
    "summary": "Class UpdateSourceCommand Namespace Application.Lookups.Commands.Sources.UpdateSource Assembly Application.dll public class UpdateSourceCommand : IRequest, IBaseRequest Inheritance object UpdateSourceCommand Implements IRequest IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid Tags public List<Guid>? Tags { get; set; } Property Value List<Guid> Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Lookups.Commands.Sources.UpdateSource.UpdateSourceCommandHandler.html": {
    "href": "api/Application.Lookups.Commands.Sources.UpdateSource.UpdateSourceCommandHandler.html",
    "title": "Class UpdateSourceCommandHandler | Examiner",
    "summary": "Class UpdateSourceCommandHandler Namespace Application.Lookups.Commands.Sources.UpdateSource Assembly Application.dll public class UpdateSourceCommandHandler : IRequestHandler<UpdateSourceCommand> Inheritance object UpdateSourceCommandHandler Implements IRequestHandler<UpdateSourceCommand> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors UpdateSourceCommandHandler(IServiceManager) public UpdateSourceCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(UpdateSourceCommand, CancellationToken) Handles a request public Task Handle(UpdateSourceCommand request, CancellationToken cancellationToken) Parameters request UpdateSourceCommand The request cancellationToken CancellationToken Cancellation token Returns Task Response from the request"
  },
  "api/Application.Lookups.Commands.Sources.UpdateSource.html": {
    "href": "api/Application.Lookups.Commands.Sources.UpdateSource.html",
    "title": "Namespace Application.Lookups.Commands.Sources.UpdateSource | Examiner",
    "summary": "Namespace Application.Lookups.Commands.Sources.UpdateSource Classes UpdateSourceCommand UpdateSourceCommandHandler"
  },
  "api/Application.Lookups.Queries.Languages.GetLanguages.GetLanguagesQuery.html": {
    "href": "api/Application.Lookups.Queries.Languages.GetLanguages.GetLanguagesQuery.html",
    "title": "Class GetLanguagesQuery | Examiner",
    "summary": "Class GetLanguagesQuery Namespace Application.Lookups.Queries.Languages.GetLanguages Assembly Application.dll public class GetLanguagesQuery : IRequest<IEnumerable<GetLanguagesQueryResult>>, IBaseRequest Inheritance object GetLanguagesQuery Implements IRequest<IEnumerable<GetLanguagesQueryResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object)"
  },
  "api/Application.Lookups.Queries.Languages.GetLanguages.GetLanguagesQueryHandler.html": {
    "href": "api/Application.Lookups.Queries.Languages.GetLanguages.GetLanguagesQueryHandler.html",
    "title": "Class GetLanguagesQueryHandler | Examiner",
    "summary": "Class GetLanguagesQueryHandler Namespace Application.Lookups.Queries.Languages.GetLanguages Assembly Application.dll public class GetLanguagesQueryHandler : IRequestHandler<GetLanguagesQuery, IEnumerable<GetLanguagesQueryResult>> Inheritance object GetLanguagesQueryHandler Implements IRequestHandler<GetLanguagesQuery, IEnumerable<GetLanguagesQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetLanguagesQueryHandler(IServiceManager) public GetLanguagesQueryHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(GetLanguagesQuery, CancellationToken) Handles a request public Task<IEnumerable<GetLanguagesQueryResult>> Handle(GetLanguagesQuery request, CancellationToken cancellationToken) Parameters request GetLanguagesQuery The request cancellationToken CancellationToken Cancellation token Returns Task<IEnumerable<GetLanguagesQueryResult>> Response from the request"
  },
  "api/Application.Lookups.Queries.Languages.GetLanguages.GetLanguagesQueryResult.html": {
    "href": "api/Application.Lookups.Queries.Languages.GetLanguages.GetLanguagesQueryResult.html",
    "title": "Class GetLanguagesQueryResult | Examiner",
    "summary": "Class GetLanguagesQueryResult Namespace Application.Lookups.Queries.Languages.GetLanguages Assembly Application.dll public class GetLanguagesQueryResult Inheritance object GetLanguagesQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Code public required string Code { get; set; } Property Value string DisplayName public required string DisplayName { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Lookups.Queries.Languages.GetLanguages.html": {
    "href": "api/Application.Lookups.Queries.Languages.GetLanguages.html",
    "title": "Namespace Application.Lookups.Queries.Languages.GetLanguages | Examiner",
    "summary": "Namespace Application.Lookups.Queries.Languages.GetLanguages Classes GetLanguagesQuery GetLanguagesQueryHandler GetLanguagesQueryResult"
  },
  "api/Application.Lookups.Queries.Tags.GetAllTags.GetAllTagsQuery.html": {
    "href": "api/Application.Lookups.Queries.Tags.GetAllTags.GetAllTagsQuery.html",
    "title": "Class GetAllTagsQuery | Examiner",
    "summary": "Class GetAllTagsQuery Namespace Application.Lookups.Queries.Tags.GetAllTags Assembly Application.dll public class GetAllTagsQuery : PageRequest, IRequest<Result<PageResponse<GetAllTagsQueryResult>>>, IBaseRequest Inheritance object PageRequest GetAllTagsQuery Implements IRequest<Result<PageResponse<GetAllTagsQueryResult>>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties BackgroundColorGroup public ColorCategory? BackgroundColorGroup { get; set; } Property Value ColorCategory? IsArchived public bool? IsArchived { get; set; } Property Value bool? Search public string? Search { get; set; } Property Value string TextColorGroup public ColorCategory? TextColorGroup { get; set; } Property Value ColorCategory?"
  },
  "api/Application.Lookups.Queries.Tags.GetAllTags.GetAllTagsQueryHandler.html": {
    "href": "api/Application.Lookups.Queries.Tags.GetAllTags.GetAllTagsQueryHandler.html",
    "title": "Class GetAllTagsQueryHandler | Examiner",
    "summary": "Class GetAllTagsQueryHandler Namespace Application.Lookups.Queries.Tags.GetAllTags Assembly Application.dll public class GetAllTagsQueryHandler : IRequestHandler<GetAllTagsQuery, Result<PageResponse<GetAllTagsQueryResult>>> Inheritance object GetAllTagsQueryHandler Implements IRequestHandler<GetAllTagsQuery, Result<PageResponse<GetAllTagsQueryResult>>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetAllTagsQueryHandler(IRepositoryManager, IMapper) public GetAllTagsQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(GetAllTagsQuery, CancellationToken) Handles a request public Task<Result<PageResponse<GetAllTagsQueryResult>>> Handle(GetAllTagsQuery request, CancellationToken cancellationToken) Parameters request GetAllTagsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<PageResponse<GetAllTagsQueryResult>>> Response from the request"
  },
  "api/Application.Lookups.Queries.Tags.GetAllTags.GetAllTagsQueryResult.html": {
    "href": "api/Application.Lookups.Queries.Tags.GetAllTags.GetAllTagsQueryResult.html",
    "title": "Class GetAllTagsQueryResult | Examiner",
    "summary": "Class GetAllTagsQueryResult Namespace Application.Lookups.Queries.Tags.GetAllTags Assembly Application.dll public class GetAllTagsQueryResult Inheritance object GetAllTagsQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties BackgroundColorCode public string BackgroundColorCode { get; set; } Property Value string BackgroundColorGroup public ColorCategory BackgroundColorGroup { get; set; } Property Value ColorCategory Id public Guid Id { get; set; } Property Value Guid IsArchived public bool IsArchived { get; set; } Property Value bool Name public string Name { get; set; } Property Value string TextColorCode public string TextColorCode { get; set; } Property Value string TextColorGroup public ColorCategory TextColorGroup { get; set; } Property Value ColorCategory"
  },
  "api/Application.Lookups.Queries.Tags.GetAllTags.html": {
    "href": "api/Application.Lookups.Queries.Tags.GetAllTags.html",
    "title": "Namespace Application.Lookups.Queries.Tags.GetAllTags | Examiner",
    "summary": "Namespace Application.Lookups.Queries.Tags.GetAllTags Classes GetAllTagsQuery GetAllTagsQueryHandler GetAllTagsQueryResult"
  },
  "api/Application.Questions.Commands.AddQuestion.AddQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.AddQuestionCommand.html",
    "title": "Class AddQuestionCommand | Examiner",
    "summary": "Class AddQuestionCommand Namespace Application.Questions.Commands.AddQuestion Assembly Application.dll public class AddQuestionCommand : IRequest<AddQuestionCommandResult>, IBaseRequest Inheritance object AddQuestionCommand Implements IRequest<AddQuestionCommandResult> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Category public Guid? Category { get; set; } Property Value Guid? Difficulty public QuestionDifficulty Difficulty { get; set; } Property Value QuestionDifficulty Language public Guid? Language { get; set; } Property Value Guid? LongAnswer public LongAnswerQuestionCommand? LongAnswer { get; set; } Property Value LongAnswerQuestionCommand Mark public required int Mark { get; set; } Property Value int Options public IEnumerable<MultipleChoiseQuestionCommand>? Options { get; set; } Property Value IEnumerable<MultipleChoiseQuestionCommand> QuestionText Question text. public required string QuestionText { get; set; } Property Value string QuestionType Question Type. witch can be the following 1- Multiple Choise. 2- True and false. public required QuestionType QuestionType { get; set; } Property Value QuestionType Reordering public IEnumerable<ReorderingQuestionCommand>? Reordering { get; set; } Property Value IEnumerable<ReorderingQuestionCommand> RequireManualReview public required bool RequireManualReview { get; set; } Property Value bool ShortAnswer public ShortAnswerQuestionCommand? ShortAnswer { get; set; } Property Value ShortAnswerQuestionCommand Sources public List<Guid>? Sources { get; set; } Property Value List<Guid> Tags public List<Guid>? Tags { get; set; } Property Value List<Guid> TrueAndFalseAnswer public TrueFalseQuestionCommand? TrueAndFalseAnswer { get; set; } Property Value TrueFalseQuestionCommand Variants List of the same question but different style public List<string>? Variants { get; set; } Property Value List<string>"
  },
  "api/Application.Questions.Commands.AddQuestion.AddQuestionCommandResult.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.AddQuestionCommandResult.html",
    "title": "Class AddQuestionCommandResult | Examiner",
    "summary": "Class AddQuestionCommandResult Namespace Application.Questions.Commands.AddQuestion Assembly Application.dll public class AddQuestionCommandResult Inheritance object AddQuestionCommandResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.FeedbackCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.FeedbackCommand.html",
    "title": "Class FeedbackCommand | Examiner",
    "summary": "Class FeedbackCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class FeedbackCommand Inheritance object FeedbackCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CorrectAnswerFeedback public string CorrectAnswerFeedback { get; set; } Property Value string WrongAnswerFeedback public string WrongAnswerFeedback { get; set; } Property Value string"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.LongAnswerQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.LongAnswerQuestionCommand.html",
    "title": "Class LongAnswerQuestionCommand | Examiner",
    "summary": "Class LongAnswerQuestionCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class LongAnswerQuestionCommand Inheritance object LongAnswerQuestionCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Answer public string Answer { get; set; } Property Value string GeneralFeedback public string? GeneralFeedback { get; set; } Property Value string MaximinWords public int? MaximinWords { get; set; } Property Value int? MinimanWords public int? MinimanWords { get; set; } Property Value int?"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.MultipleChoiseQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.MultipleChoiseQuestionCommand.html",
    "title": "Class MultipleChoiseQuestionCommand | Examiner",
    "summary": "Class MultipleChoiseQuestionCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class MultipleChoiseQuestionCommand Inheritance object MultipleChoiseQuestionCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FeedBack public string? FeedBack { get; set; } Property Value string IsCorrect public bool IsCorrect { get; set; } Property Value bool OptionText public string OptionText { get; set; } Property Value string Weight public float Weight { get; set; } Property Value float"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.QuestionSourceCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.QuestionSourceCommand.html",
    "title": "Class QuestionSourceCommand | Examiner",
    "summary": "Class QuestionSourceCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class QuestionSourceCommand Inheritance object QuestionSourceCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType URL public string URL { get; set; } Property Value string"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.ReorderingQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.ReorderingQuestionCommand.html",
    "title": "Class ReorderingQuestionCommand | Examiner",
    "summary": "Class ReorderingQuestionCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class ReorderingQuestionCommand Inheritance object ReorderingQuestionCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Feedback public FeedbackCommand? Feedback { get; set; } Property Value FeedbackCommand Order public int Order { get; set; } Property Value int Value public string Value { get; set; } Property Value string"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.ShortAnswerQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.ShortAnswerQuestionCommand.html",
    "title": "Class ShortAnswerQuestionCommand | Examiner",
    "summary": "Class ShortAnswerQuestionCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class ShortAnswerQuestionCommand Inheritance object ShortAnswerQuestionCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CorrectAnswer public required string CorrectAnswer { get; set; } Property Value string Feedback public FeedbackCommand? Feedback { get; set; } Property Value FeedbackCommand PossibleAnswers public List<string>? PossibleAnswers { get; set; } Property Value List<string>"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.TrueFalseQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.TrueFalseQuestionCommand.html",
    "title": "Class TrueFalseQuestionCommand | Examiner",
    "summary": "Class TrueFalseQuestionCommand Namespace Application.Questions.Commands.AddQuestion.CommandModels Assembly Application.dll public class TrueFalseQuestionCommand Inheritance object TrueFalseQuestionCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Feedback public FeedbackCommand? Feedback { get; set; } Property Value FeedbackCommand IsCorrect public bool IsCorrect { get; set; } Property Value bool"
  },
  "api/Application.Questions.Commands.AddQuestion.CommandModels.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.CommandModels.html",
    "title": "Namespace Application.Questions.Commands.AddQuestion.CommandModels | Examiner",
    "summary": "Namespace Application.Questions.Commands.AddQuestion.CommandModels Classes FeedbackCommand LongAnswerQuestionCommand MultipleChoiseQuestionCommand QuestionSourceCommand ReorderingQuestionCommand ShortAnswerQuestionCommand TrueFalseQuestionCommand"
  },
  "api/Application.Questions.Commands.AddQuestion.html": {
    "href": "api/Application.Questions.Commands.AddQuestion.html",
    "title": "Namespace Application.Questions.Commands.AddQuestion | Examiner",
    "summary": "Namespace Application.Questions.Commands.AddQuestion Classes AddQuestionCommand AddQuestionCommandResult"
  },
  "api/Application.Questions.Commands.DeleteAllQuestion.DeleteAllQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.DeleteAllQuestion.DeleteAllQuestionCommand.html",
    "title": "Class DeleteAllQuestionCommand | Examiner",
    "summary": "Class DeleteAllQuestionCommand Namespace Application.Questions.Commands.DeleteAllQuestion Assembly Application.dll public class DeleteAllQuestionCommand : IRequest, IBaseRequest Inheritance object DeleteAllQuestionCommand Implements IRequest IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object)"
  },
  "api/Application.Questions.Commands.DeleteAllQuestion.html": {
    "href": "api/Application.Questions.Commands.DeleteAllQuestion.html",
    "title": "Namespace Application.Questions.Commands.DeleteAllQuestion | Examiner",
    "summary": "Namespace Application.Questions.Commands.DeleteAllQuestion Classes DeleteAllQuestionCommand"
  },
  "api/Application.Questions.Commands.DeleteQuestion.DeleteQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.DeleteQuestion.DeleteQuestionCommand.html",
    "title": "Class DeleteQuestionCommand | Examiner",
    "summary": "Class DeleteQuestionCommand Namespace Application.Questions.Commands.DeleteQuestion Assembly Application.dll public class DeleteQuestionCommand : IRequest, IBaseRequest Inheritance object DeleteQuestionCommand Implements IRequest IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Questions.Commands.DeleteQuestion.html": {
    "href": "api/Application.Questions.Commands.DeleteQuestion.html",
    "title": "Namespace Application.Questions.Commands.DeleteQuestion | Examiner",
    "summary": "Namespace Application.Questions.Commands.DeleteQuestion Classes DeleteQuestionCommand"
  },
  "api/Application.Questions.Commands.UpdateQuestion.Models.QuestionSourceUpdateCommand.html": {
    "href": "api/Application.Questions.Commands.UpdateQuestion.Models.QuestionSourceUpdateCommand.html",
    "title": "Class QuestionSourceUpdateCommand | Examiner",
    "summary": "Class QuestionSourceUpdateCommand Namespace Application.Questions.Commands.UpdateQuestion.Models Assembly Application.dll public class QuestionSourceUpdateCommand Inheritance object QuestionSourceUpdateCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string ISBN public string? ISBN { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType URL public string URL { get; set; } Property Value string"
  },
  "api/Application.Questions.Commands.UpdateQuestion.Models.html": {
    "href": "api/Application.Questions.Commands.UpdateQuestion.Models.html",
    "title": "Namespace Application.Questions.Commands.UpdateQuestion.Models | Examiner",
    "summary": "Namespace Application.Questions.Commands.UpdateQuestion.Models Classes QuestionSourceUpdateCommand"
  },
  "api/Application.Questions.Commands.UpdateQuestion.UpdateQuestionCommand.html": {
    "href": "api/Application.Questions.Commands.UpdateQuestion.UpdateQuestionCommand.html",
    "title": "Class UpdateQuestionCommand | Examiner",
    "summary": "Class UpdateQuestionCommand Namespace Application.Questions.Commands.UpdateQuestion Assembly Application.dll public class UpdateQuestionCommand : IRequest, IBaseRequest Inheritance object UpdateQuestionCommand Implements IRequest IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Difficulty public QuestionDifficulty Difficulty { get; set; } Property Value QuestionDifficulty Id public Guid Id { get; set; } Property Value Guid Mark public int Mark { get; set; } Property Value int QuestionText public string QuestionText { get; set; } Property Value string RequireManulReview public bool RequireManulReview { get; set; } Property Value bool Sources public List<QuestionSourceUpdateCommand>? Sources { get; set; } Property Value List<QuestionSourceUpdateCommand> Tags public List<string>? Tags { get; set; } Property Value List<string> Variants public List<string>? Variants { get; set; } Property Value List<string>"
  },
  "api/Application.Questions.Commands.UpdateQuestion.UpdateQuestionCommandHandler.html": {
    "href": "api/Application.Questions.Commands.UpdateQuestion.UpdateQuestionCommandHandler.html",
    "title": "Class UpdateQuestionCommandHandler | Examiner",
    "summary": "Class UpdateQuestionCommandHandler Namespace Application.Questions.Commands.UpdateQuestion Assembly Application.dll public class UpdateQuestionCommandHandler : IRequestHandler<UpdateQuestionCommand> Inheritance object UpdateQuestionCommandHandler Implements IRequestHandler<UpdateQuestionCommand> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors UpdateQuestionCommandHandler(IServiceManager) public UpdateQuestionCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(UpdateQuestionCommand, CancellationToken) Handles a request public Task Handle(UpdateQuestionCommand request, CancellationToken cancellationToken) Parameters request UpdateQuestionCommand The request cancellationToken CancellationToken Cancellation token Returns Task Response from the request"
  },
  "api/Application.Questions.Commands.UpdateQuestion.html": {
    "href": "api/Application.Questions.Commands.UpdateQuestion.html",
    "title": "Namespace Application.Questions.Commands.UpdateQuestion | Examiner",
    "summary": "Namespace Application.Questions.Commands.UpdateQuestion Classes UpdateQuestionCommand UpdateQuestionCommandHandler"
  },
  "api/Application.Questions.Queries.GetAllQuestions.GetAllQuestionsQuery.html": {
    "href": "api/Application.Questions.Queries.GetAllQuestions.GetAllQuestionsQuery.html",
    "title": "Class GetAllQuestionsQuery | Examiner",
    "summary": "Class GetAllQuestionsQuery Namespace Application.Questions.Queries.GetAllQuestions Assembly Application.dll public class GetAllQuestionsQuery : PageRequest, IRequest<PageResponse<GetAllQuestionsQueryResult>>, IBaseRequest Inheritance object PageRequest GetAllQuestionsQuery Implements IRequest<PageResponse<GetAllQuestionsQueryResult>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Category public string? Category { get; set; } Property Value string QuestionType public QuestionType? QuestionType { get; set; } Property Value QuestionType? RequireManualReview public bool? RequireManualReview { get; set; } Property Value bool? Search public string? Search { get; set; } Property Value string Tags public string? Tags { get; set; } Property Value string"
  },
  "api/Application.Questions.Queries.GetAllQuestions.GetAllQuestionsQueryHandler.html": {
    "href": "api/Application.Questions.Queries.GetAllQuestions.GetAllQuestionsQueryHandler.html",
    "title": "Class GetAllQuestionsQueryHandler | Examiner",
    "summary": "Class GetAllQuestionsQueryHandler Namespace Application.Questions.Queries.GetAllQuestions Assembly Application.dll public class GetAllQuestionsQueryHandler : IRequestHandler<GetAllQuestionsQuery, PageResponse<GetAllQuestionsQueryResult>> Inheritance object GetAllQuestionsQueryHandler Implements IRequestHandler<GetAllQuestionsQuery, PageResponse<GetAllQuestionsQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetAllQuestionsQueryHandler(IRepositoryManager) public GetAllQuestionsQueryHandler(IRepositoryManager repositoryManager) Parameters repositoryManager IRepositoryManager Methods Handle(GetAllQuestionsQuery, CancellationToken) Handles a request public Task<PageResponse<GetAllQuestionsQueryResult>> Handle(GetAllQuestionsQuery request, CancellationToken cancellationToken) Parameters request GetAllQuestionsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<PageResponse<GetAllQuestionsQueryResult>> Response from the request"
  },
  "api/Application.Questions.Queries.GetAllQuestions.GetAllQuestionsQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetAllQuestions.GetAllQuestionsQueryResult.html",
    "title": "Class GetAllQuestionsQueryResult | Examiner",
    "summary": "Class GetAllQuestionsQueryResult Namespace Application.Questions.Queries.GetAllQuestions Assembly Application.dll public class GetAllQuestionsQueryResult Inheritance object GetAllQuestionsQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Category public string? Category { get; set; } Property Value string Difficulty public QuestionDifficulty Difficulty { get; set; } Property Value QuestionDifficulty Id public Guid Id { get; set; } Property Value Guid Mark public int Mark { get; set; } Property Value int QuestionText public string QuestionText { get; set; } Property Value string QuestionType public QuestionType QuestionType { get; set; } Property Value QuestionType RequireManualReview public bool RequireManualReview { get; set; } Property Value bool Tags public IEnumerable<TagResult>? Tags { get; set; } Property Value IEnumerable<TagResult>"
  },
  "api/Application.Questions.Queries.GetAllQuestions.html": {
    "href": "api/Application.Questions.Queries.GetAllQuestions.html",
    "title": "Namespace Application.Questions.Queries.GetAllQuestions | Examiner",
    "summary": "Namespace Application.Questions.Queries.GetAllQuestions Classes GetAllQuestionsQuery GetAllQuestionsQueryHandler GetAllQuestionsQueryResult"
  },
  "api/Application.Questions.Queries.GetQuestionsById.GetQuestionsByIdQuery.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.GetQuestionsByIdQuery.html",
    "title": "Class GetQuestionsByIdQuery | Examiner",
    "summary": "Class GetQuestionsByIdQuery Namespace Application.Questions.Queries.GetQuestionsById Assembly Application.dll public class GetQuestionsByIdQuery : IRequest<GetQuestionsByIdQueryResult>, IBaseRequest Inheritance object GetQuestionsByIdQuery Implements IRequest<GetQuestionsByIdQueryResult> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Questions.Queries.GetQuestionsById.GetQuestionsByIdQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.GetQuestionsByIdQueryResult.html",
    "title": "Class GetQuestionsByIdQueryResult | Examiner",
    "summary": "Class GetQuestionsByIdQueryResult Namespace Application.Questions.Queries.GetQuestionsById Assembly Application.dll public class GetQuestionsByIdQueryResult Inheritance object GetQuestionsByIdQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Category public string? Category { get; set; } Property Value string Difficulty public QuestionDifficultyLookup Difficulty { get; set; } Property Value QuestionDifficultyLookup Id public Guid Id { get; set; } Property Value Guid Language public LanguageResult? Language { get; set; } Property Value LanguageResult LongAnswer public LongAnswerQuestionQueryResult? LongAnswer { get; set; } Property Value LongAnswerQuestionQueryResult Mark public int Mark { get; set; } Property Value int MultipleChoiceOptions public IEnumerable<MultipleChoiseQuestionResult>? MultipleChoiceOptions { get; set; } Property Value IEnumerable<MultipleChoiseQuestionResult> QuestionText public string QuestionText { get; set; } Property Value string QuestionType public QuestionTypeLookup QuestionType { get; set; } Property Value QuestionTypeLookup Reordering public IEnumerable<ReorderingQuestionQueryResult>? Reordering { get; set; } Property Value IEnumerable<ReorderingQuestionQueryResult> RequireManualReview public bool RequireManualReview { get; set; } Property Value bool ShortAnswer public ShortAnswerQuestionQueryResult? ShortAnswer { get; set; } Property Value ShortAnswerQuestionQueryResult Sources public List<QuestionSourceResult>? Sources { get; set; } Property Value List<QuestionSourceResult> Tags public List<TagResult>? Tags { get; set; } Property Value List<TagResult> TrueAndFalse public TrueFalseQuestionQueryResult? TrueAndFalse { get; set; } Property Value TrueFalseQuestionQueryResult Variants public List<string>? Variants { get; set; } Property Value List<string> VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.FeedbackQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.FeedbackQueryResult.html",
    "title": "Class FeedbackQueryResult | Examiner",
    "summary": "Class FeedbackQueryResult Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Assembly Application.dll public class FeedbackQueryResult Inheritance object FeedbackQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CorrectAnswerFeedback public string CorrectAnswerFeedback { get; set; } Property Value string WrongAnswerFeedback public string WrongAnswerFeedback { get; set; } Property Value string"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.LongAnswerQuestionQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.LongAnswerQuestionQueryResult.html",
    "title": "Class LongAnswerQuestionQueryResult | Examiner",
    "summary": "Class LongAnswerQuestionQueryResult Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Assembly Application.dll public class LongAnswerQuestionQueryResult Inheritance object LongAnswerQuestionQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Answer public string Answer { get; set; } Property Value string GeneralFeedback public string? GeneralFeedback { get; set; } Property Value string MaximinWords public int? MaximinWords { get; set; } Property Value int? MinimanWords public int? MinimanWords { get; set; } Property Value int?"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.MultipleChoiseQuestionResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.MultipleChoiseQuestionResult.html",
    "title": "Class MultipleChoiseQuestionResult | Examiner",
    "summary": "Class MultipleChoiseQuestionResult Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Assembly Application.dll public class MultipleChoiseQuestionResult Inheritance object MultipleChoiseQuestionResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FeedBack public string? FeedBack { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid IsCorrect public bool IsCorrect { get; set; } Property Value bool OptionText public string OptionText { get; set; } Property Value string Weight public float Weight { get; set; } Property Value float"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.ReorderingQuestionQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.ReorderingQuestionQueryResult.html",
    "title": "Class ReorderingQuestionQueryResult | Examiner",
    "summary": "Class ReorderingQuestionQueryResult Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Assembly Application.dll public class ReorderingQuestionQueryResult Inheritance object ReorderingQuestionQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Feedback public FeedbackQueryResult? Feedback { get; set; } Property Value FeedbackQueryResult Id public Guid Id { get; set; } Property Value Guid Order public int Order { get; set; } Property Value int Value public string Value { get; set; } Property Value string"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.ShortAnswerQuestionQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.ShortAnswerQuestionQueryResult.html",
    "title": "Class ShortAnswerQuestionQueryResult | Examiner",
    "summary": "Class ShortAnswerQuestionQueryResult Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Assembly Application.dll public class ShortAnswerQuestionQueryResult Inheritance object ShortAnswerQuestionQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CorrectAnswer public required string CorrectAnswer { get; set; } Property Value string Feedback public FeedbackQueryResult? Feedback { get; set; } Property Value FeedbackQueryResult PossibleAnswers public List<string>? PossibleAnswers { get; set; } Property Value List<string>"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.TrueFalseQuestionQueryResult.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.TrueFalseQuestionQueryResult.html",
    "title": "Class TrueFalseQuestionQueryResult | Examiner",
    "summary": "Class TrueFalseQuestionQueryResult Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Assembly Application.dll public class TrueFalseQuestionQueryResult Inheritance object TrueFalseQuestionQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Feedback public FeedbackQueryResult? Feedback { get; set; } Property Value FeedbackQueryResult Id public Guid Id { get; set; } Property Value Guid IsCorrect public bool IsCorrect { get; set; } Property Value bool"
  },
  "api/Application.Questions.Queries.GetQuestionsById.ResultModel.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.ResultModel.html",
    "title": "Namespace Application.Questions.Queries.GetQuestionsById.ResultModel | Examiner",
    "summary": "Namespace Application.Questions.Queries.GetQuestionsById.ResultModel Classes FeedbackQueryResult LongAnswerQuestionQueryResult MultipleChoiseQuestionResult ReorderingQuestionQueryResult ShortAnswerQuestionQueryResult TrueFalseQuestionQueryResult"
  },
  "api/Application.Questions.Queries.GetQuestionsById.html": {
    "href": "api/Application.Questions.Queries.GetQuestionsById.html",
    "title": "Namespace Application.Questions.Queries.GetQuestionsById | Examiner",
    "summary": "Namespace Application.Questions.Queries.GetQuestionsById Classes GetQuestionsByIdQuery GetQuestionsByIdQueryResult"
  },
  "api/Application.Questions.Queries.GetRandomQuestions.GetRandomQuestionsQuery.html": {
    "href": "api/Application.Questions.Queries.GetRandomQuestions.GetRandomQuestionsQuery.html",
    "title": "Class GetRandomQuestionsQuery | Examiner",
    "summary": "Class GetRandomQuestionsQuery Namespace Application.Questions.Queries.GetRandomQuestions Assembly Application.dll public class GetRandomQuestionsQuery Inheritance object GetRandomQuestionsQuery Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CategoryId public Guid CategoryId { get; set; } Property Value Guid"
  },
  "api/Application.Questions.Queries.GetRandomQuestions.html": {
    "href": "api/Application.Questions.Queries.GetRandomQuestions.html",
    "title": "Namespace Application.Questions.Queries.GetRandomQuestions | Examiner",
    "summary": "Namespace Application.Questions.Queries.GetRandomQuestions Classes GetRandomQuestionsQuery"
  },
  "api/Application.Sources.Commands.AddBulkTagsToSource.AddBulkTagsToSourceCommand.html": {
    "href": "api/Application.Sources.Commands.AddBulkTagsToSource.AddBulkTagsToSourceCommand.html",
    "title": "Class AddBulkTagsToSourceCommand | Examiner",
    "summary": "Class AddBulkTagsToSourceCommand Namespace Application.Sources.Commands.AddBulkTagsToSource Assembly Application.dll public class AddBulkTagsToSourceCommand : IRequest<Result<PartialsSuccessResult>>, IBaseRequest Inheritance object AddBulkTagsToSourceCommand Implements IRequest<Result<PartialsSuccessResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties SourceId [JsonIgnore] public Guid SourceId { get; set; } Property Value Guid TagIds public IEnumerable<Guid> TagIds { get; set; } Property Value IEnumerable<Guid>"
  },
  "api/Application.Sources.Commands.AddBulkTagsToSource.AddBulkTagsToSourceCommandHandler.html": {
    "href": "api/Application.Sources.Commands.AddBulkTagsToSource.AddBulkTagsToSourceCommandHandler.html",
    "title": "Class AddBulkTagsToSourceCommandHandler | Examiner",
    "summary": "Class AddBulkTagsToSourceCommandHandler Namespace Application.Sources.Commands.AddBulkTagsToSource Assembly Application.dll public class AddBulkTagsToSourceCommandHandler : IRequestHandler<AddBulkTagsToSourceCommand, Result<PartialsSuccessResult>> Inheritance object AddBulkTagsToSourceCommandHandler Implements IRequestHandler<AddBulkTagsToSourceCommand, Result<PartialsSuccessResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddBulkTagsToSourceCommandHandler(IServiceManager) public AddBulkTagsToSourceCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(AddBulkTagsToSourceCommand, CancellationToken) Handles a request public Task<Result<PartialsSuccessResult>> Handle(AddBulkTagsToSourceCommand request, CancellationToken cancellationToken) Parameters request AddBulkTagsToSourceCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result<PartialsSuccessResult>> Response from the request"
  },
  "api/Application.Sources.Commands.AddBulkTagsToSource.html": {
    "href": "api/Application.Sources.Commands.AddBulkTagsToSource.html",
    "title": "Namespace Application.Sources.Commands.AddBulkTagsToSource | Examiner",
    "summary": "Namespace Application.Sources.Commands.AddBulkTagsToSource Classes AddBulkTagsToSourceCommand AddBulkTagsToSourceCommandHandler"
  },
  "api/Application.Sources.Commands.AddReference.AddReferenceCommand.html": {
    "href": "api/Application.Sources.Commands.AddReference.AddReferenceCommand.html",
    "title": "Class AddReferenceCommand | Examiner",
    "summary": "Class AddReferenceCommand Namespace Application.Sources.Commands.AddReference Assembly Application.dll public class AddReferenceCommand : IRequest, IBaseRequest Inheritance object AddReferenceCommand Implements IRequest IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Metadata public List<AddMetadataCommand>? Metadata { get; set; } Property Value List<AddMetadataCommand> Notes public string? Notes { get; set; } Property Value string SourceId public Guid SourceId { get; set; } Property Value Guid"
  },
  "api/Application.Sources.Commands.AddReference.AddReferenceCommandHandler.html": {
    "href": "api/Application.Sources.Commands.AddReference.AddReferenceCommandHandler.html",
    "title": "Class AddReferenceCommandHandler | Examiner",
    "summary": "Class AddReferenceCommandHandler Namespace Application.Sources.Commands.AddReference Assembly Application.dll public class AddReferenceCommandHandler Inheritance object AddReferenceCommandHandler Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object)"
  },
  "api/Application.Sources.Commands.AddReference.html": {
    "href": "api/Application.Sources.Commands.AddReference.html",
    "title": "Namespace Application.Sources.Commands.AddReference | Examiner",
    "summary": "Namespace Application.Sources.Commands.AddReference Classes AddReferenceCommand AddReferenceCommandHandler"
  },
  "api/Application.Sources.Commands.AddSource.AddSourceCommandHandler.html": {
    "href": "api/Application.Sources.Commands.AddSource.AddSourceCommandHandler.html",
    "title": "Class AddSourceCommandHandler | Examiner",
    "summary": "Class AddSourceCommandHandler Namespace Application.Sources.Commands.AddSource Assembly Application.dll public class AddSourceCommandHandler : IRequestHandler<AddSourceCommand, Result<AddSourceCommandResult>> Inheritance object AddSourceCommandHandler Implements IRequestHandler<AddSourceCommand, Result<AddSourceCommandResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddSourceCommandHandler(IServiceManager, IMapper) public AddSourceCommandHandler(IServiceManager serviceManager, IMapper mapper) Parameters serviceManager IServiceManager mapper IMapper Methods Handle(AddSourceCommand, CancellationToken) Handles a request public Task<Result<AddSourceCommandResult>> Handle(AddSourceCommand request, CancellationToken cancellationToken) Parameters request AddSourceCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result<AddSourceCommandResult>> Response from the request"
  },
  "api/Application.Sources.Commands.AddSource.Requests.AddSourceCommand.html": {
    "href": "api/Application.Sources.Commands.AddSource.Requests.AddSourceCommand.html",
    "title": "Class AddSourceCommand | Examiner",
    "summary": "Class AddSourceCommand Namespace Application.Sources.Commands.AddSource.Requests Assembly Application.dll public class AddSourceCommand : IRequest<Result<AddSourceCommandResult>>, IBaseRequest Inheritance object AddSourceCommand Implements IRequest<Result<AddSourceCommandResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CategoryId public Guid? CategoryId { get; set; } Property Value Guid? Description public string? Description { get; set; } Property Value string FileExtension public string? FileExtension { get; set; } Property Value string FilePath public string? FilePath { get; set; } Property Value string HasAttachment public bool HasAttachment { get; set; } Property Value bool Metadata public List<AddMetadataCommand>? Metadata { get; set; } Property Value List<AddMetadataCommand> References public List<AddSourceReferenceCommand>? References { get; set; } Property Value List<AddSourceReferenceCommand> Tags public List<Guid>? Tags { get; set; } Property Value List<Guid> Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Sources.Commands.AddSource.Requests.AddSourceReferenceCommand.html": {
    "href": "api/Application.Sources.Commands.AddSource.Requests.AddSourceReferenceCommand.html",
    "title": "Class AddSourceReferenceCommand | Examiner",
    "summary": "Class AddSourceReferenceCommand Namespace Application.Sources.Commands.AddSource.Requests Assembly Application.dll public class AddSourceReferenceCommand Inheritance object AddSourceReferenceCommand Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Metadata public List<AddMetadataCommand> Metadata { get; set; } Property Value List<AddMetadataCommand> Notes public string? Notes { get; set; } Property Value string"
  },
  "api/Application.Sources.Commands.AddSource.Requests.html": {
    "href": "api/Application.Sources.Commands.AddSource.Requests.html",
    "title": "Namespace Application.Sources.Commands.AddSource.Requests | Examiner",
    "summary": "Namespace Application.Sources.Commands.AddSource.Requests Classes AddSourceCommand AddSourceReferenceCommand"
  },
  "api/Application.Sources.Commands.AddSource.Results.AddSourceCommandResult.html": {
    "href": "api/Application.Sources.Commands.AddSource.Results.AddSourceCommandResult.html",
    "title": "Class AddSourceCommandResult | Examiner",
    "summary": "Class AddSourceCommandResult Namespace Application.Sources.Commands.AddSource.Results Assembly Application.dll public class AddSourceCommandResult Inheritance object AddSourceCommandResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string FileExtension public string? FileExtension { get; set; } Property Value string FilePath public string? FilePath { get; set; } Property Value string HasAttachment public bool HasAttachment { get; set; } Property Value bool Id public Guid Id { get; set; } Property Value Guid Metadata public IEnumerable<MetadataResult>? Metadata { get; set; } Property Value IEnumerable<MetadataResult> References public IEnumerable<AddSourceReferenceCommand>? References { get; set; } Property Value IEnumerable<AddSourceReferenceCommand> Tags public IEnumerable<Guid>? Tags { get; set; } Property Value IEnumerable<Guid> Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Sources.Commands.AddSource.Results.SourceReferenceResult.html": {
    "href": "api/Application.Sources.Commands.AddSource.Results.SourceReferenceResult.html",
    "title": "Class SourceReferenceResult | Examiner",
    "summary": "Class SourceReferenceResult Namespace Application.Sources.Commands.AddSource.Results Assembly Application.dll public class SourceReferenceResult Inheritance object SourceReferenceResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description public string? Description { get; set; } Property Value string FileExtension public string? FileExtension { get; set; } Property Value string FilePath public string? FilePath { get; set; } Property Value string HasAttachment public bool HasAttachment { get; set; } Property Value bool Metadata public List<MetadataResult>? Metadata { get; set; } Property Value List<MetadataResult> References public List<AddSourceReferenceCommand>? References { get; set; } Property Value List<AddSourceReferenceCommand> Tags public List<Guid>? Tags { get; set; } Property Value List<Guid> Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Sources.Commands.AddSource.Results.html": {
    "href": "api/Application.Sources.Commands.AddSource.Results.html",
    "title": "Namespace Application.Sources.Commands.AddSource.Results | Examiner",
    "summary": "Namespace Application.Sources.Commands.AddSource.Results Classes AddSourceCommandResult SourceReferenceResult"
  },
  "api/Application.Sources.Commands.AddSource.html": {
    "href": "api/Application.Sources.Commands.AddSource.html",
    "title": "Namespace Application.Sources.Commands.AddSource | Examiner",
    "summary": "Namespace Application.Sources.Commands.AddSource Classes AddSourceCommandHandler"
  },
  "api/Application.Sources.Commands.AddTagToSource.AddTagsToSourceCommand.html": {
    "href": "api/Application.Sources.Commands.AddTagToSource.AddTagsToSourceCommand.html",
    "title": "Class AddTagsToSourceCommand | Examiner",
    "summary": "Class AddTagsToSourceCommand Namespace Application.Sources.Commands.AddTagToSource Assembly Application.dll public class AddTagsToSourceCommand : IRequest<Result>, IBaseRequest Inheritance object AddTagsToSourceCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties SourceId public Guid SourceId { get; set; } Property Value Guid TagId public Guid TagId { get; set; } Property Value Guid"
  },
  "api/Application.Sources.Commands.AddTagToSource.AddTagsToSourceCommandHandler.html": {
    "href": "api/Application.Sources.Commands.AddTagToSource.AddTagsToSourceCommandHandler.html",
    "title": "Class AddTagsToSourceCommandHandler | Examiner",
    "summary": "Class AddTagsToSourceCommandHandler Namespace Application.Sources.Commands.AddTagToSource Assembly Application.dll public class AddTagsToSourceCommandHandler : IRequestHandler<AddTagsToSourceCommand, Result> Inheritance object AddTagsToSourceCommandHandler Implements IRequestHandler<AddTagsToSourceCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddTagsToSourceCommandHandler(IServiceManager) public AddTagsToSourceCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(AddTagsToSourceCommand, CancellationToken) Handles a request public Task<Result> Handle(AddTagsToSourceCommand request, CancellationToken cancellationToken) Parameters request AddTagsToSourceCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Sources.Commands.AddTagToSource.html": {
    "href": "api/Application.Sources.Commands.AddTagToSource.html",
    "title": "Namespace Application.Sources.Commands.AddTagToSource | Examiner",
    "summary": "Namespace Application.Sources.Commands.AddTagToSource Classes AddTagsToSourceCommand AddTagsToSourceCommandHandler"
  },
  "api/Application.Sources.Commands.RemoveBulkTagFromSource.RemoveBulkTagFromSourceCommand.html": {
    "href": "api/Application.Sources.Commands.RemoveBulkTagFromSource.RemoveBulkTagFromSourceCommand.html",
    "title": "Class RemoveBulkTagFromSourceCommand | Examiner",
    "summary": "Class RemoveBulkTagFromSourceCommand Namespace Application.Sources.Commands.RemoveBulkTagFromSource Assembly Application.dll public class RemoveBulkTagFromSourceCommand : IRequest<Result<PartialsSuccessResult>>, IBaseRequest Inheritance object RemoveBulkTagFromSourceCommand Implements IRequest<Result<PartialsSuccessResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties SourceId [JsonIgnore] public Guid SourceId { get; set; } Property Value Guid TagIds public IEnumerable<Guid> TagIds { get; set; } Property Value IEnumerable<Guid>"
  },
  "api/Application.Sources.Commands.RemoveBulkTagFromSource.html": {
    "href": "api/Application.Sources.Commands.RemoveBulkTagFromSource.html",
    "title": "Namespace Application.Sources.Commands.RemoveBulkTagFromSource | Examiner",
    "summary": "Namespace Application.Sources.Commands.RemoveBulkTagFromSource Classes RemoveBulkTagFromSourceCommand"
  },
  "api/Application.Sources.Commands.RemoveTagFromSource.RemoveTagFromSourceCommand.html": {
    "href": "api/Application.Sources.Commands.RemoveTagFromSource.RemoveTagFromSourceCommand.html",
    "title": "Class RemoveTagFromSourceCommand | Examiner",
    "summary": "Class RemoveTagFromSourceCommand Namespace Application.Sources.Commands.RemoveTagFromSource Assembly Application.dll public class RemoveTagFromSourceCommand : IRequest<Result>, IBaseRequest Inheritance object RemoveTagFromSourceCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties SourceId public Guid SourceId { get; set; } Property Value Guid TagId public Guid TagId { get; set; } Property Value Guid"
  },
  "api/Application.Sources.Commands.RemoveTagFromSource.RemoveTagFromSourceCommandHandler.html": {
    "href": "api/Application.Sources.Commands.RemoveTagFromSource.RemoveTagFromSourceCommandHandler.html",
    "title": "Class RemoveTagFromSourceCommandHandler | Examiner",
    "summary": "Class RemoveTagFromSourceCommandHandler Namespace Application.Sources.Commands.RemoveTagFromSource Assembly Application.dll public class RemoveTagFromSourceCommandHandler : IRequestHandler<RemoveTagFromSourceCommand, Result> Inheritance object RemoveTagFromSourceCommandHandler Implements IRequestHandler<RemoveTagFromSourceCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors RemoveTagFromSourceCommandHandler(IServiceManager) public RemoveTagFromSourceCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(RemoveTagFromSourceCommand, CancellationToken) Handles a request public Task<Result> Handle(RemoveTagFromSourceCommand request, CancellationToken cancellationToken) Parameters request RemoveTagFromSourceCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Sources.Commands.RemoveTagFromSource.html": {
    "href": "api/Application.Sources.Commands.RemoveTagFromSource.html",
    "title": "Namespace Application.Sources.Commands.RemoveTagFromSource | Examiner",
    "summary": "Namespace Application.Sources.Commands.RemoveTagFromSource Classes RemoveTagFromSourceCommand RemoveTagFromSourceCommandHandler"
  },
  "api/Application.Sources.Queries.GetAllSources.GetAllSourceQuery.html": {
    "href": "api/Application.Sources.Queries.GetAllSources.GetAllSourceQuery.html",
    "title": "Class GetAllSourceQuery | Examiner",
    "summary": "Class GetAllSourceQuery Namespace Application.Sources.Queries.GetAllSources Assembly Application.dll public class GetAllSourceQuery : PageRequest, IRequest<Result<PageResponse<GetAllSourceQueryResult>>>, IBaseRequest Inheritance object PageRequest GetAllSourceQuery Implements IRequest<Result<PageResponse<GetAllSourceQueryResult>>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Tags public Guid? Tags { get; set; } Property Value Guid? Title public string? Title { get; set; } Property Value string TypeId public SourceType? TypeId { get; set; } Property Value SourceType?"
  },
  "api/Application.Sources.Queries.GetAllSources.GetAllSourceQueryHandler.html": {
    "href": "api/Application.Sources.Queries.GetAllSources.GetAllSourceQueryHandler.html",
    "title": "Class GetAllSourceQueryHandler | Examiner",
    "summary": "Class GetAllSourceQueryHandler Namespace Application.Sources.Queries.GetAllSources Assembly Application.dll public class GetAllSourceQueryHandler : IRequestHandler<GetAllSourceQuery, Result<PageResponse<GetAllSourceQueryResult>>> Inheritance object GetAllSourceQueryHandler Implements IRequestHandler<GetAllSourceQuery, Result<PageResponse<GetAllSourceQueryResult>>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetAllSourceQueryHandler(IRepositoryManager, IMapper) public GetAllSourceQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(GetAllSourceQuery, CancellationToken) Handles a request public Task<Result<PageResponse<GetAllSourceQueryResult>>> Handle(GetAllSourceQuery request, CancellationToken cancellationToken) Parameters request GetAllSourceQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<PageResponse<GetAllSourceQueryResult>>> Response from the request"
  },
  "api/Application.Sources.Queries.GetAllSources.GetAllSourceQueryResult.html": {
    "href": "api/Application.Sources.Queries.GetAllSources.GetAllSourceQueryResult.html",
    "title": "Class GetAllSourceQueryResult | Examiner",
    "summary": "Class GetAllSourceQueryResult Namespace Application.Sources.Queries.GetAllSources Assembly Application.dll [SwaggerSchema(null, Description = \"Success response to get all the sources\")] public class GetAllSourceQueryResult Inheritance object GetAllSourceQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Description [SwaggerSchema(null, Description = \"short description for a source\", Nullable = true, Title = \"Source description\")] [SwaggerExample(\"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc\")] [StringLength(2500, MinimumLength = 1)] public string? Description { get; set; } Property Value string Id [SwaggerSchema(null, Description = \"An UUID unique id for source\", ReadOnly = true, Format = \"UUID\", Nullable = false, Title = \"Source Unique Identifier\")] [SwaggerExample(\"01979c44-b446-7380-ad8b-df6b2a2be0bc\")] public Guid Id { get; set; } Property Value Guid Tags [SwaggerSchema(null, Description = \"An collection of tags\", Nullable = true, Title = \"Source Tags\")] [Range(1, 50)] public List<TagResult>? Tags { get; set; } Property Value List<TagResult> Title [SwaggerSchema(null, Description = \"A source Title\", Nullable = false, Title = \"Source title\")] [SwaggerExample(\"Intro programming\")] [StringLength(100, MinimumLength = 1)] public string Title { get; set; } Property Value string Type [SwaggerSchema(null, Description = \"An type of a source\", ReadOnly = true, Format = \"UUID\", Nullable = false, Title = \"Source Unique Identifier\")] [SwaggerExample(SourceType.Article)] [StringLength(50, MinimumLength = 1)] public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Sources.Queries.GetAllSources.html": {
    "href": "api/Application.Sources.Queries.GetAllSources.html",
    "title": "Namespace Application.Sources.Queries.GetAllSources | Examiner",
    "summary": "Namespace Application.Sources.Queries.GetAllSources Classes GetAllSourceQuery GetAllSourceQueryHandler GetAllSourceQueryResult"
  },
  "api/Application.Sources.Queries.GetSourceById.GetSourceByIdQuery.html": {
    "href": "api/Application.Sources.Queries.GetSourceById.GetSourceByIdQuery.html",
    "title": "Class GetSourceByIdQuery | Examiner",
    "summary": "Class GetSourceByIdQuery Namespace Application.Sources.Queries.GetSourceById Assembly Application.dll public class GetSourceByIdQuery : IRequest<Result<GetSourceByIdQueryResult>>, IBaseRequest Inheritance object GetSourceByIdQuery Implements IRequest<Result<GetSourceByIdQueryResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Sources.Queries.GetSourceById.GetSourceByIdQueryHandler.html": {
    "href": "api/Application.Sources.Queries.GetSourceById.GetSourceByIdQueryHandler.html",
    "title": "Class GetSourceByIdQueryHandler | Examiner",
    "summary": "Class GetSourceByIdQueryHandler Namespace Application.Sources.Queries.GetSourceById Assembly Application.dll public class GetSourceByIdQueryHandler : IRequestHandler<GetSourceByIdQuery, Result<GetSourceByIdQueryResult>> Inheritance object GetSourceByIdQueryHandler Implements IRequestHandler<GetSourceByIdQuery, Result<GetSourceByIdQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetSourceByIdQueryHandler(IRepositoryManager, IMapper) public GetSourceByIdQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(GetSourceByIdQuery, CancellationToken) Handles a request public Task<Result<GetSourceByIdQueryResult>> Handle(GetSourceByIdQuery request, CancellationToken cancellationToken) Parameters request GetSourceByIdQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<GetSourceByIdQueryResult>> Response from the request"
  },
  "api/Application.Sources.Queries.GetSourceById.GetSourceByIdQueryResult.html": {
    "href": "api/Application.Sources.Queries.GetSourceById.GetSourceByIdQueryResult.html",
    "title": "Class GetSourceByIdQueryResult | Examiner",
    "summary": "Class GetSourceByIdQueryResult Namespace Application.Sources.Queries.GetSourceById Assembly Application.dll public class GetSourceByIdQueryResult Inheritance object GetSourceByIdQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ArchivedTags public IEnumerable<TagResult>? ArchivedTags { get; set; } Property Value IEnumerable<TagResult> CreationDate public DateTimeOffset CreationDate { get; set; } Property Value DateTimeOffset Description public string? Description { get; set; } Property Value string FileExtension public string? FileExtension { get; set; } Property Value string FilePath public string? FilePath { get; set; } Property Value string HasAttachment public bool HasAttachment { get; set; } Property Value bool Id public Guid Id { get; set; } Property Value Guid IsArchived public bool IsArchived { get; set; } Property Value bool LastArchiveDate public DateTimeOffset? LastArchiveDate { get; set; } Property Value DateTimeOffset? LastModifiedDate public DateTimeOffset? LastModifiedDate { get; set; } Property Value DateTimeOffset? Metadata public IEnumerable<MetadataResult>? Metadata { get; set; } Property Value IEnumerable<MetadataResult> Tags public IEnumerable<TagResult>? Tags { get; set; } Property Value IEnumerable<TagResult> Title public string Title { get; set; } Property Value string Type public SourceType Type { get; set; } Property Value SourceType VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Sources.Queries.GetSourceById.html": {
    "href": "api/Application.Sources.Queries.GetSourceById.html",
    "title": "Namespace Application.Sources.Queries.GetSourceById | Examiner",
    "summary": "Namespace Application.Sources.Queries.GetSourceById Classes GetSourceByIdQuery GetSourceByIdQueryHandler GetSourceByIdQueryResult"
  },
  "api/Application.Sources.Queries.GetSourceReferences.GetSourceReferencesQuery.html": {
    "href": "api/Application.Sources.Queries.GetSourceReferences.GetSourceReferencesQuery.html",
    "title": "Class GetSourceReferencesQuery | Examiner",
    "summary": "Class GetSourceReferencesQuery Namespace Application.Sources.Queries.GetSourceReferences Assembly Application.dll public class GetSourceReferencesQuery Inheritance object GetSourceReferencesQuery Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Note public string? Note { get; set; } Property Value string SourceId public int SourceId { get; set; } Property Value int"
  },
  "api/Application.Sources.Queries.GetSourceReferences.GetSourceReferencesQueryResult.html": {
    "href": "api/Application.Sources.Queries.GetSourceReferences.GetSourceReferencesQueryResult.html",
    "title": "Class GetSourceReferencesQueryResult | Examiner",
    "summary": "Class GetSourceReferencesQueryResult Namespace Application.Sources.Queries.GetSourceReferences Assembly Application.dll public class GetSourceReferencesQueryResult Inheritance object GetSourceReferencesQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public int Id { get; set; } Property Value int"
  },
  "api/Application.Sources.Queries.GetSourceReferences.html": {
    "href": "api/Application.Sources.Queries.GetSourceReferences.html",
    "title": "Namespace Application.Sources.Queries.GetSourceReferences | Examiner",
    "summary": "Namespace Application.Sources.Queries.GetSourceReferences Classes GetSourceReferencesQuery GetSourceReferencesQueryResult"
  },
  "api/Application.Tags.Commands.AddTag.AddTagCommand.html": {
    "href": "api/Application.Tags.Commands.AddTag.AddTagCommand.html",
    "title": "Class AddTagCommand | Examiner",
    "summary": "Class AddTagCommand Namespace Application.Tags.Commands.AddTag Assembly Application.dll [SwaggerSchema(null, Description = \"a command for creating a new tag\", Nullable = false, Required = new string[] { \"name\" })] public class AddTagCommand : IRequest<Result<AddTagCommandResult>>, IBaseRequest Inheritance object AddTagCommand Implements IRequest<Result<AddTagCommandResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties BackgroundColorCode [SwaggerSchema(null, Description = \"Hexcode color format should start with #\", Nullable = true, Title = \"Tag Color\")] [SwaggerExample(\"#1756a7\")] public string? BackgroundColorCode { get; set; } Property Value string Name [SwaggerSchema(null, Description = \"the Value for tag\", Nullable = false, Title = \"Tag Color\")] [SwaggerExample(\"Math-101\")] public string Name { get; set; } Property Value string TextColorCode [SwaggerSchema(null, Description = \"Hexcode color format should start with #\", Nullable = true, Title = \"Tag Color\")] [SwaggerExample(\"#1756a7\")] public string? TextColorCode { get; set; } Property Value string"
  },
  "api/Application.Tags.Commands.AddTag.AddTagCommandHandler.html": {
    "href": "api/Application.Tags.Commands.AddTag.AddTagCommandHandler.html",
    "title": "Class AddTagCommandHandler | Examiner",
    "summary": "Class AddTagCommandHandler Namespace Application.Tags.Commands.AddTag Assembly Application.dll public class AddTagCommandHandler : IRequestHandler<AddTagCommand, Result<AddTagCommandResult>> Inheritance object AddTagCommandHandler Implements IRequestHandler<AddTagCommand, Result<AddTagCommandResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddTagCommandHandler(IServiceManager, IMapper) public AddTagCommandHandler(IServiceManager serviceManager, IMapper mapper) Parameters serviceManager IServiceManager mapper IMapper Methods Handle(AddTagCommand, CancellationToken) Handles a request public Task<Result<AddTagCommandResult>> Handle(AddTagCommand request, CancellationToken cancellationToken) Parameters request AddTagCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result<AddTagCommandResult>> Response from the request"
  },
  "api/Application.Tags.Commands.AddTag.AddTagCommandResult.html": {
    "href": "api/Application.Tags.Commands.AddTag.AddTagCommandResult.html",
    "title": "Class AddTagCommandResult | Examiner",
    "summary": "Class AddTagCommandResult Namespace Application.Tags.Commands.AddTag Assembly Application.dll public class AddTagCommandResult Inheritance object AddTagCommandResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties BackgroundColorCode public string BackgroundColorCode { get; set; } Property Value string BackgroundColorGroup public ColorCategory BackgroundColorGroup { get; set; } Property Value ColorCategory CreationDate public DateTimeOffset CreationDate { get; set; } Property Value DateTimeOffset Id public Guid Id { get; set; } Property Value Guid Name public string Name { get; set; } Property Value string TextColorCode public string TextColorCode { get; set; } Property Value string TextColorGroup public ColorCategory TextColorGroup { get; set; } Property Value ColorCategory VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Tags.Commands.AddTag.AddTagCommandValidator.html": {
    "href": "api/Application.Tags.Commands.AddTag.AddTagCommandValidator.html",
    "title": "Class AddTagCommandValidator | Examiner",
    "summary": "Class AddTagCommandValidator Namespace Application.Tags.Commands.AddTag Assembly Application.dll public class AddTagCommandValidator : AbstractValidator<AddTagCommand>, IValidator<AddTagCommand>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<AddTagCommand> AddTagCommandValidator Implements IValidator<AddTagCommand> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<AddTagCommand>.Validate(AddTagCommand) AbstractValidator<AddTagCommand>.ValidateAsync(AddTagCommand, CancellationToken) AbstractValidator<AddTagCommand>.Validate(ValidationContext<AddTagCommand>) AbstractValidator<AddTagCommand>.ValidateAsync(ValidationContext<AddTagCommand>, CancellationToken) AbstractValidator<AddTagCommand>.CreateDescriptor() AbstractValidator<AddTagCommand>.RuleFor<TProperty>(Expression<Func<AddTagCommand, TProperty>>) AbstractValidator<AddTagCommand>.Transform<TProperty, TTransformed>(Expression<Func<AddTagCommand, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<AddTagCommand>.Transform<TProperty, TTransformed>(Expression<Func<AddTagCommand, TProperty>>, Func<AddTagCommand, TProperty, TTransformed>) AbstractValidator<AddTagCommand>.RuleForEach<TElement>(Expression<Func<AddTagCommand, IEnumerable<TElement>>>) AbstractValidator<AddTagCommand>.TransformForEach<TElement, TTransformed>(Expression<Func<AddTagCommand, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<AddTagCommand>.TransformForEach<TElement, TTransformed>(Expression<Func<AddTagCommand, IEnumerable<TElement>>>, Func<AddTagCommand, TElement, TTransformed>) AbstractValidator<AddTagCommand>.RuleSet(string, Action) AbstractValidator<AddTagCommand>.When(Func<AddTagCommand, bool>, Action) AbstractValidator<AddTagCommand>.When(Func<AddTagCommand, ValidationContext<AddTagCommand>, bool>, Action) AbstractValidator<AddTagCommand>.Unless(Func<AddTagCommand, bool>, Action) AbstractValidator<AddTagCommand>.Unless(Func<AddTagCommand, ValidationContext<AddTagCommand>, bool>, Action) AbstractValidator<AddTagCommand>.WhenAsync(Func<AddTagCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<AddTagCommand>.WhenAsync(Func<AddTagCommand, ValidationContext<AddTagCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<AddTagCommand>.UnlessAsync(Func<AddTagCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<AddTagCommand>.UnlessAsync(Func<AddTagCommand, ValidationContext<AddTagCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<AddTagCommand>.Include(IValidator<AddTagCommand>) AbstractValidator<AddTagCommand>.Include<TValidator>(Func<AddTagCommand, TValidator>) AbstractValidator<AddTagCommand>.GetEnumerator() AbstractValidator<AddTagCommand>.EnsureInstanceNotNull(object) AbstractValidator<AddTagCommand>.PreValidate(ValidationContext<AddTagCommand>, ValidationResult) AbstractValidator<AddTagCommand>.RaiseValidationException(ValidationContext<AddTagCommand>, ValidationResult) AbstractValidator<AddTagCommand>.OnRuleAdded(IValidationRule<AddTagCommand>) AbstractValidator<AddTagCommand>.CascadeMode AbstractValidator<AddTagCommand>.ClassLevelCascadeMode AbstractValidator<AddTagCommand>.RuleLevelCascadeMode Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AddTagCommandValidator() public AddTagCommandValidator()"
  },
  "api/Application.Tags.Commands.AddTag.html": {
    "href": "api/Application.Tags.Commands.AddTag.html",
    "title": "Namespace Application.Tags.Commands.AddTag | Examiner",
    "summary": "Namespace Application.Tags.Commands.AddTag Classes AddTagCommand AddTagCommandHandler AddTagCommandResult AddTagCommandValidator"
  },
  "api/Application.Tags.Commands.ArchiveAllTags.ArchiveAllTagsCommand.html": {
    "href": "api/Application.Tags.Commands.ArchiveAllTags.ArchiveAllTagsCommand.html",
    "title": "Class ArchiveAllTagsCommand | Examiner",
    "summary": "Class ArchiveAllTagsCommand Namespace Application.Tags.Commands.ArchiveAllTags Assembly Application.dll public class ArchiveAllTagsCommand : IRequest<Result>, IBaseRequest Inheritance object ArchiveAllTagsCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object)"
  },
  "api/Application.Tags.Commands.ArchiveAllTags.ArchiveAllTagsCommandHandler.html": {
    "href": "api/Application.Tags.Commands.ArchiveAllTags.ArchiveAllTagsCommandHandler.html",
    "title": "Class ArchiveAllTagsCommandHandler | Examiner",
    "summary": "Class ArchiveAllTagsCommandHandler Namespace Application.Tags.Commands.ArchiveAllTags Assembly Application.dll public class ArchiveAllTagsCommandHandler : IRequestHandler<ArchiveAllTagsCommand, Result> Inheritance object ArchiveAllTagsCommandHandler Implements IRequestHandler<ArchiveAllTagsCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ArchiveAllTagsCommandHandler(IServiceManager) public ArchiveAllTagsCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(ArchiveAllTagsCommand, CancellationToken) Handles a request public Task<Result> Handle(ArchiveAllTagsCommand request, CancellationToken cancellationToken) Parameters request ArchiveAllTagsCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Tags.Commands.ArchiveAllTags.html": {
    "href": "api/Application.Tags.Commands.ArchiveAllTags.html",
    "title": "Namespace Application.Tags.Commands.ArchiveAllTags | Examiner",
    "summary": "Namespace Application.Tags.Commands.ArchiveAllTags Classes ArchiveAllTagsCommand ArchiveAllTagsCommandHandler"
  },
  "api/Application.Tags.Commands.ArchiveTag.ArchiveTagCommand.html": {
    "href": "api/Application.Tags.Commands.ArchiveTag.ArchiveTagCommand.html",
    "title": "Class ArchiveTagCommand | Examiner",
    "summary": "Class ArchiveTagCommand Namespace Application.Tags.Commands.ArchiveTag Assembly Application.dll public class ArchiveTagCommand : IRequest<Result>, IBaseRequest Inheritance object ArchiveTagCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Tags.Commands.ArchiveTag.ArchiveTagCommandHandler.html": {
    "href": "api/Application.Tags.Commands.ArchiveTag.ArchiveTagCommandHandler.html",
    "title": "Class ArchiveTagCommandHandler | Examiner",
    "summary": "Class ArchiveTagCommandHandler Namespace Application.Tags.Commands.ArchiveTag Assembly Application.dll public class ArchiveTagCommandHandler : IRequestHandler<ArchiveTagCommand, Result> Inheritance object ArchiveTagCommandHandler Implements IRequestHandler<ArchiveTagCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ArchiveTagCommandHandler(IServiceManager) public ArchiveTagCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(ArchiveTagCommand, CancellationToken) Handles a request public Task<Result> Handle(ArchiveTagCommand request, CancellationToken cancellationToken) Parameters request ArchiveTagCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Tags.Commands.ArchiveTag.html": {
    "href": "api/Application.Tags.Commands.ArchiveTag.html",
    "title": "Namespace Application.Tags.Commands.ArchiveTag | Examiner",
    "summary": "Namespace Application.Tags.Commands.ArchiveTag Classes ArchiveTagCommand ArchiveTagCommandHandler"
  },
  "api/Application.Tags.Commands.DeleteTag.DeleteTagCommand.html": {
    "href": "api/Application.Tags.Commands.DeleteTag.DeleteTagCommand.html",
    "title": "Class DeleteTagCommand | Examiner",
    "summary": "Class DeleteTagCommand Namespace Application.Tags.Commands.DeleteTag Assembly Application.dll public class DeleteTagCommand : IRequest<Result>, IBaseRequest Inheritance object DeleteTagCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Tags.Commands.DeleteTag.DeleteTagCommandHandler.html": {
    "href": "api/Application.Tags.Commands.DeleteTag.DeleteTagCommandHandler.html",
    "title": "Class DeleteTagCommandHandler | Examiner",
    "summary": "Class DeleteTagCommandHandler Namespace Application.Tags.Commands.DeleteTag Assembly Application.dll public class DeleteTagCommandHandler : IRequestHandler<DeleteTagCommand, Result> Inheritance object DeleteTagCommandHandler Implements IRequestHandler<DeleteTagCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors DeleteTagCommandHandler(IServiceManager) public DeleteTagCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(DeleteTagCommand, CancellationToken) Handles a request public Task<Result> Handle(DeleteTagCommand request, CancellationToken cancellationToken) Parameters request DeleteTagCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Tags.Commands.DeleteTag.html": {
    "href": "api/Application.Tags.Commands.DeleteTag.html",
    "title": "Namespace Application.Tags.Commands.DeleteTag | Examiner",
    "summary": "Namespace Application.Tags.Commands.DeleteTag Classes DeleteTagCommand DeleteTagCommandHandler"
  },
  "api/Application.Tags.Commands.UnArchiveTag.UnArchiveTagCommandHandler.html": {
    "href": "api/Application.Tags.Commands.UnArchiveTag.UnArchiveTagCommandHandler.html",
    "title": "Class UnArchiveTagCommandHandler | Examiner",
    "summary": "Class UnArchiveTagCommandHandler Namespace Application.Tags.Commands.UnArchiveTag Assembly Application.dll public class UnArchiveTagCommandHandler : IRequestHandler<UnarchiveTagCommand, Result> Inheritance object UnArchiveTagCommandHandler Implements IRequestHandler<UnarchiveTagCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors UnArchiveTagCommandHandler(IServiceManager) public UnArchiveTagCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(UnarchiveTagCommand, CancellationToken) Handles a request public Task<Result> Handle(UnarchiveTagCommand request, CancellationToken cancellationToken) Parameters request UnarchiveTagCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Tags.Commands.UnArchiveTag.UnarchiveTagCommand.html": {
    "href": "api/Application.Tags.Commands.UnArchiveTag.UnarchiveTagCommand.html",
    "title": "Class UnarchiveTagCommand | Examiner",
    "summary": "Class UnarchiveTagCommand Namespace Application.Tags.Commands.UnArchiveTag Assembly Application.dll public class UnarchiveTagCommand : IRequest<Result>, IBaseRequest Inheritance object UnarchiveTagCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Tags.Commands.UnArchiveTag.html": {
    "href": "api/Application.Tags.Commands.UnArchiveTag.html",
    "title": "Namespace Application.Tags.Commands.UnArchiveTag | Examiner",
    "summary": "Namespace Application.Tags.Commands.UnArchiveTag Classes UnArchiveTagCommandHandler UnarchiveTagCommand"
  },
  "api/Application.Tags.Commands.UpdateTag.UpdateTagCommand.html": {
    "href": "api/Application.Tags.Commands.UpdateTag.UpdateTagCommand.html",
    "title": "Class UpdateTagCommand | Examiner",
    "summary": "Class UpdateTagCommand Namespace Application.Tags.Commands.UpdateTag Assembly Application.dll public class UpdateTagCommand : IRequest<Result>, IBaseRequest Inheritance object UpdateTagCommand Implements IRequest<Result> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties BackgroundColorCode public string? BackgroundColorCode { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid Name public string Name { get; set; } Property Value string TextColorCode public string? TextColorCode { get; set; } Property Value string"
  },
  "api/Application.Tags.Commands.UpdateTag.UpdateTagCommandHandler.html": {
    "href": "api/Application.Tags.Commands.UpdateTag.UpdateTagCommandHandler.html",
    "title": "Class UpdateTagCommandHandler | Examiner",
    "summary": "Class UpdateTagCommandHandler Namespace Application.Tags.Commands.UpdateTag Assembly Application.dll public class UpdateTagCommandHandler : IRequestHandler<UpdateTagCommand, Result> Inheritance object UpdateTagCommandHandler Implements IRequestHandler<UpdateTagCommand, Result> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors UpdateTagCommandHandler(IServiceManager) public UpdateTagCommandHandler(IServiceManager serviceManager) Parameters serviceManager IServiceManager Methods Handle(UpdateTagCommand, CancellationToken) Handles a request public Task<Result> Handle(UpdateTagCommand request, CancellationToken cancellationToken) Parameters request UpdateTagCommand The request cancellationToken CancellationToken Cancellation token Returns Task<Result> Response from the request"
  },
  "api/Application.Tags.Commands.UpdateTag.UpdateTagCommandValidator.html": {
    "href": "api/Application.Tags.Commands.UpdateTag.UpdateTagCommandValidator.html",
    "title": "Class UpdateTagCommandValidator | Examiner",
    "summary": "Class UpdateTagCommandValidator Namespace Application.Tags.Commands.UpdateTag Assembly Application.dll public class UpdateTagCommandValidator : AbstractValidator<UpdateTagCommand>, IValidator<UpdateTagCommand>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UpdateTagCommand> UpdateTagCommandValidator Implements IValidator<UpdateTagCommand> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UpdateTagCommand>.Validate(UpdateTagCommand) AbstractValidator<UpdateTagCommand>.ValidateAsync(UpdateTagCommand, CancellationToken) AbstractValidator<UpdateTagCommand>.Validate(ValidationContext<UpdateTagCommand>) AbstractValidator<UpdateTagCommand>.ValidateAsync(ValidationContext<UpdateTagCommand>, CancellationToken) AbstractValidator<UpdateTagCommand>.CreateDescriptor() AbstractValidator<UpdateTagCommand>.RuleFor<TProperty>(Expression<Func<UpdateTagCommand, TProperty>>) AbstractValidator<UpdateTagCommand>.Transform<TProperty, TTransformed>(Expression<Func<UpdateTagCommand, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UpdateTagCommand>.Transform<TProperty, TTransformed>(Expression<Func<UpdateTagCommand, TProperty>>, Func<UpdateTagCommand, TProperty, TTransformed>) AbstractValidator<UpdateTagCommand>.RuleForEach<TElement>(Expression<Func<UpdateTagCommand, IEnumerable<TElement>>>) AbstractValidator<UpdateTagCommand>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateTagCommand, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UpdateTagCommand>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateTagCommand, IEnumerable<TElement>>>, Func<UpdateTagCommand, TElement, TTransformed>) AbstractValidator<UpdateTagCommand>.RuleSet(string, Action) AbstractValidator<UpdateTagCommand>.When(Func<UpdateTagCommand, bool>, Action) AbstractValidator<UpdateTagCommand>.When(Func<UpdateTagCommand, ValidationContext<UpdateTagCommand>, bool>, Action) AbstractValidator<UpdateTagCommand>.Unless(Func<UpdateTagCommand, bool>, Action) AbstractValidator<UpdateTagCommand>.Unless(Func<UpdateTagCommand, ValidationContext<UpdateTagCommand>, bool>, Action) AbstractValidator<UpdateTagCommand>.WhenAsync(Func<UpdateTagCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateTagCommand>.WhenAsync(Func<UpdateTagCommand, ValidationContext<UpdateTagCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateTagCommand>.UnlessAsync(Func<UpdateTagCommand, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateTagCommand>.UnlessAsync(Func<UpdateTagCommand, ValidationContext<UpdateTagCommand>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateTagCommand>.Include(IValidator<UpdateTagCommand>) AbstractValidator<UpdateTagCommand>.Include<TValidator>(Func<UpdateTagCommand, TValidator>) AbstractValidator<UpdateTagCommand>.GetEnumerator() AbstractValidator<UpdateTagCommand>.EnsureInstanceNotNull(object) AbstractValidator<UpdateTagCommand>.PreValidate(ValidationContext<UpdateTagCommand>, ValidationResult) AbstractValidator<UpdateTagCommand>.RaiseValidationException(ValidationContext<UpdateTagCommand>, ValidationResult) AbstractValidator<UpdateTagCommand>.OnRuleAdded(IValidationRule<UpdateTagCommand>) AbstractValidator<UpdateTagCommand>.CascadeMode AbstractValidator<UpdateTagCommand>.ClassLevelCascadeMode AbstractValidator<UpdateTagCommand>.RuleLevelCascadeMode Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors UpdateTagCommandValidator() public UpdateTagCommandValidator()"
  },
  "api/Application.Tags.Commands.UpdateTag.html": {
    "href": "api/Application.Tags.Commands.UpdateTag.html",
    "title": "Namespace Application.Tags.Commands.UpdateTag | Examiner",
    "summary": "Namespace Application.Tags.Commands.UpdateTag Classes UpdateTagCommand UpdateTagCommandHandler UpdateTagCommandValidator"
  },
  "api/Application.Tags.Queries.AutoCompleteTags.AutoCompleteTagsQuery.html": {
    "href": "api/Application.Tags.Queries.AutoCompleteTags.AutoCompleteTagsQuery.html",
    "title": "Class AutoCompleteTagsQuery | Examiner",
    "summary": "Class AutoCompleteTagsQuery Namespace Application.Tags.Queries.AutoCompleteTags Assembly Application.dll public class AutoCompleteTagsQuery : IRequest<Result<IEnumerable<AutoCompleteTagsQueryResult>>>, IBaseRequest Inheritance object AutoCompleteTagsQuery Implements IRequest<Result<IEnumerable<AutoCompleteTagsQueryResult>>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Name public string Name { get; set; } Property Value string"
  },
  "api/Application.Tags.Queries.AutoCompleteTags.AutoCompleteTagsQueryHandler.html": {
    "href": "api/Application.Tags.Queries.AutoCompleteTags.AutoCompleteTagsQueryHandler.html",
    "title": "Class AutoCompleteTagsQueryHandler | Examiner",
    "summary": "Class AutoCompleteTagsQueryHandler Namespace Application.Tags.Queries.AutoCompleteTags Assembly Application.dll public class AutoCompleteTagsQueryHandler : IRequestHandler<AutoCompleteTagsQuery, Result<IEnumerable<AutoCompleteTagsQueryResult>>> Inheritance object AutoCompleteTagsQueryHandler Implements IRequestHandler<AutoCompleteTagsQuery, Result<IEnumerable<AutoCompleteTagsQueryResult>>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AutoCompleteTagsQueryHandler(IRepositoryManager, IMapper) public AutoCompleteTagsQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(AutoCompleteTagsQuery, CancellationToken) Handles a request public Task<Result<IEnumerable<AutoCompleteTagsQueryResult>>> Handle(AutoCompleteTagsQuery request, CancellationToken cancellationToken) Parameters request AutoCompleteTagsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<IEnumerable<AutoCompleteTagsQueryResult>>> Response from the request"
  },
  "api/Application.Tags.Queries.AutoCompleteTags.AutoCompleteTagsQueryResult.html": {
    "href": "api/Application.Tags.Queries.AutoCompleteTags.AutoCompleteTagsQueryResult.html",
    "title": "Class AutoCompleteTagsQueryResult | Examiner",
    "summary": "Class AutoCompleteTagsQueryResult Namespace Application.Tags.Queries.AutoCompleteTags Assembly Application.dll public class AutoCompleteTagsQueryResult Inheritance object AutoCompleteTagsQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid Name public string Name { get; set; } Property Value string"
  },
  "api/Application.Tags.Queries.AutoCompleteTags.html": {
    "href": "api/Application.Tags.Queries.AutoCompleteTags.html",
    "title": "Namespace Application.Tags.Queries.AutoCompleteTags | Examiner",
    "summary": "Namespace Application.Tags.Queries.AutoCompleteTags Classes AutoCompleteTagsQuery AutoCompleteTagsQueryHandler AutoCompleteTagsQueryResult"
  },
  "api/Application.Tags.Queries.ExportTags.ExportTagsQuery.html": {
    "href": "api/Application.Tags.Queries.ExportTags.ExportTagsQuery.html",
    "title": "Class ExportTagsQuery | Examiner",
    "summary": "Class ExportTagsQuery Namespace Application.Tags.Queries.ExportTags Assembly Application.dll public class ExportTagsQuery : IRequest<Result<ExportTagsQueryResult>>, IBaseRequest Inheritance object ExportTagsQuery Implements IRequest<Result<ExportTagsQueryResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Format public FileFormat Format { get; set; } Property Value FileFormat IncludeArchived public bool IncludeArchived { get; set; } Property Value bool"
  },
  "api/Application.Tags.Queries.ExportTags.ExportTagsQueryHandler.html": {
    "href": "api/Application.Tags.Queries.ExportTags.ExportTagsQueryHandler.html",
    "title": "Class ExportTagsQueryHandler | Examiner",
    "summary": "Class ExportTagsQueryHandler Namespace Application.Tags.Queries.ExportTags Assembly Application.dll public class ExportTagsQueryHandler : IRequestHandler<ExportTagsQuery, Result<ExportTagsQueryResult>> Inheritance object ExportTagsQueryHandler Implements IRequestHandler<ExportTagsQuery, Result<ExportTagsQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ExportTagsQueryHandler(IRepositoryManager) public ExportTagsQueryHandler(IRepositoryManager repositoryManager) Parameters repositoryManager IRepositoryManager Methods Handle(ExportTagsQuery, CancellationToken) Handles a request public Task<Result<ExportTagsQueryResult>> Handle(ExportTagsQuery request, CancellationToken cancellationToken) Parameters request ExportTagsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<ExportTagsQueryResult>> Response from the request"
  },
  "api/Application.Tags.Queries.ExportTags.ExportTagsQueryResult.html": {
    "href": "api/Application.Tags.Queries.ExportTags.ExportTagsQueryResult.html",
    "title": "Class ExportTagsQueryResult | Examiner",
    "summary": "Class ExportTagsQueryResult Namespace Application.Tags.Queries.ExportTags Assembly Application.dll public class ExportTagsQueryResult Inheritance object ExportTagsQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ContentType public string ContentType { get; set; } Property Value string FileContent public byte[] FileContent { get; set; } Property Value byte[] FileName public string FileName { get; set; } Property Value string"
  },
  "api/Application.Tags.Queries.ExportTags.html": {
    "href": "api/Application.Tags.Queries.ExportTags.html",
    "title": "Namespace Application.Tags.Queries.ExportTags | Examiner",
    "summary": "Namespace Application.Tags.Queries.ExportTags Classes ExportTagsQuery ExportTagsQueryHandler ExportTagsQueryResult"
  },
  "api/Application.Tags.Queries.GetAllTags.GetAllTagsQueryValidator.html": {
    "href": "api/Application.Tags.Queries.GetAllTags.GetAllTagsQueryValidator.html",
    "title": "Class GetAllTagsQueryValidator | Examiner",
    "summary": "Class GetAllTagsQueryValidator Namespace Application.Tags.Queries.GetAllTags Assembly Application.dll public class GetAllTagsQueryValidator : AbstractValidator<GetAllTagsQuery>, IValidator<GetAllTagsQuery>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<GetAllTagsQuery> GetAllTagsQueryValidator Implements IValidator<GetAllTagsQuery> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<GetAllTagsQuery>.Validate(GetAllTagsQuery) AbstractValidator<GetAllTagsQuery>.ValidateAsync(GetAllTagsQuery, CancellationToken) AbstractValidator<GetAllTagsQuery>.Validate(ValidationContext<GetAllTagsQuery>) AbstractValidator<GetAllTagsQuery>.ValidateAsync(ValidationContext<GetAllTagsQuery>, CancellationToken) AbstractValidator<GetAllTagsQuery>.CreateDescriptor() AbstractValidator<GetAllTagsQuery>.RuleFor<TProperty>(Expression<Func<GetAllTagsQuery, TProperty>>) AbstractValidator<GetAllTagsQuery>.Transform<TProperty, TTransformed>(Expression<Func<GetAllTagsQuery, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<GetAllTagsQuery>.Transform<TProperty, TTransformed>(Expression<Func<GetAllTagsQuery, TProperty>>, Func<GetAllTagsQuery, TProperty, TTransformed>) AbstractValidator<GetAllTagsQuery>.RuleForEach<TElement>(Expression<Func<GetAllTagsQuery, IEnumerable<TElement>>>) AbstractValidator<GetAllTagsQuery>.TransformForEach<TElement, TTransformed>(Expression<Func<GetAllTagsQuery, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<GetAllTagsQuery>.TransformForEach<TElement, TTransformed>(Expression<Func<GetAllTagsQuery, IEnumerable<TElement>>>, Func<GetAllTagsQuery, TElement, TTransformed>) AbstractValidator<GetAllTagsQuery>.RuleSet(string, Action) AbstractValidator<GetAllTagsQuery>.When(Func<GetAllTagsQuery, bool>, Action) AbstractValidator<GetAllTagsQuery>.When(Func<GetAllTagsQuery, ValidationContext<GetAllTagsQuery>, bool>, Action) AbstractValidator<GetAllTagsQuery>.Unless(Func<GetAllTagsQuery, bool>, Action) AbstractValidator<GetAllTagsQuery>.Unless(Func<GetAllTagsQuery, ValidationContext<GetAllTagsQuery>, bool>, Action) AbstractValidator<GetAllTagsQuery>.WhenAsync(Func<GetAllTagsQuery, CancellationToken, Task<bool>>, Action) AbstractValidator<GetAllTagsQuery>.WhenAsync(Func<GetAllTagsQuery, ValidationContext<GetAllTagsQuery>, CancellationToken, Task<bool>>, Action) AbstractValidator<GetAllTagsQuery>.UnlessAsync(Func<GetAllTagsQuery, CancellationToken, Task<bool>>, Action) AbstractValidator<GetAllTagsQuery>.UnlessAsync(Func<GetAllTagsQuery, ValidationContext<GetAllTagsQuery>, CancellationToken, Task<bool>>, Action) AbstractValidator<GetAllTagsQuery>.Include(IValidator<GetAllTagsQuery>) AbstractValidator<GetAllTagsQuery>.Include<TValidator>(Func<GetAllTagsQuery, TValidator>) AbstractValidator<GetAllTagsQuery>.GetEnumerator() AbstractValidator<GetAllTagsQuery>.EnsureInstanceNotNull(object) AbstractValidator<GetAllTagsQuery>.PreValidate(ValidationContext<GetAllTagsQuery>, ValidationResult) AbstractValidator<GetAllTagsQuery>.RaiseValidationException(ValidationContext<GetAllTagsQuery>, ValidationResult) AbstractValidator<GetAllTagsQuery>.OnRuleAdded(IValidationRule<GetAllTagsQuery>) AbstractValidator<GetAllTagsQuery>.CascadeMode AbstractValidator<GetAllTagsQuery>.ClassLevelCascadeMode AbstractValidator<GetAllTagsQuery>.RuleLevelCascadeMode Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetAllTagsQueryValidator() public GetAllTagsQueryValidator()"
  },
  "api/Application.Tags.Queries.GetAllTags.html": {
    "href": "api/Application.Tags.Queries.GetAllTags.html",
    "title": "Namespace Application.Tags.Queries.GetAllTags | Examiner",
    "summary": "Namespace Application.Tags.Queries.GetAllTags Classes GetAllTagsQueryValidator"
  },
  "api/Application.Tags.Queries.GetRelatedSources.GetRelatedSourcesQuery.html": {
    "href": "api/Application.Tags.Queries.GetRelatedSources.GetRelatedSourcesQuery.html",
    "title": "Class GetRelatedSourcesQuery | Examiner",
    "summary": "Class GetRelatedSourcesQuery Namespace Application.Tags.Queries.GetRelatedSources Assembly Application.dll public class GetRelatedSourcesQuery : PageRequest, IRequest<Result<PageResponse<GetRelatedSourcesQueryResult>>>, IBaseRequest Inheritance object PageRequest GetRelatedSourcesQuery Implements IRequest<Result<PageResponse<GetRelatedSourcesQueryResult>>> IBaseRequest Inherited Members PageRequest.PageNumber PageRequest.PageSize Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties TagId public Guid TagId { get; set; } Property Value Guid Title public string? Title { get; set; } Property Value string TypeId public SourceType? TypeId { get; set; } Property Value SourceType?"
  },
  "api/Application.Tags.Queries.GetRelatedSources.GetRelatedSourcesQueryHandler.html": {
    "href": "api/Application.Tags.Queries.GetRelatedSources.GetRelatedSourcesQueryHandler.html",
    "title": "Class GetRelatedSourcesQueryHandler | Examiner",
    "summary": "Class GetRelatedSourcesQueryHandler Namespace Application.Tags.Queries.GetRelatedSources Assembly Application.dll public class GetRelatedSourcesQueryHandler : IRequestHandler<GetRelatedSourcesQuery, Result<PageResponse<GetRelatedSourcesQueryResult>>> Inheritance object GetRelatedSourcesQueryHandler Implements IRequestHandler<GetRelatedSourcesQuery, Result<PageResponse<GetRelatedSourcesQueryResult>>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetRelatedSourcesQueryHandler(IRepositoryManager, IMapper) public GetRelatedSourcesQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(GetRelatedSourcesQuery, CancellationToken) Handles a request public Task<Result<PageResponse<GetRelatedSourcesQueryResult>>> Handle(GetRelatedSourcesQuery request, CancellationToken cancellationToken) Parameters request GetRelatedSourcesQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<PageResponse<GetRelatedSourcesQueryResult>>> Response from the request"
  },
  "api/Application.Tags.Queries.GetRelatedSources.GetRelatedSourcesQueryResult.html": {
    "href": "api/Application.Tags.Queries.GetRelatedSources.GetRelatedSourcesQueryResult.html",
    "title": "Class GetRelatedSourcesQueryResult | Examiner",
    "summary": "Class GetRelatedSourcesQueryResult Namespace Application.Tags.Queries.GetRelatedSources Assembly Application.dll public class GetRelatedSourcesQueryResult Inheritance object GetRelatedSourcesQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id [SwaggerSchema(null, Description = \"An UUID unique id for source\", ReadOnly = true, Format = \"UUID\", Nullable = false, Title = \"Source Unique Identifier\")] [SwaggerExample(\"01979c44-b446-7380-ad8b-df6b2a2be0bc\")] public Guid Id { get; set; } Property Value Guid IsArchived [SwaggerSchema(null, Description = \"flag if the source is archived\", Nullable = false, Title = \"Source archived flag\")] [SwaggerExample(false)] public bool IsArchived { get; set; } Property Value bool Title [SwaggerSchema(null, Description = \"A source Title\", Nullable = false, Title = \"Source title\")] [SwaggerExample(\"Intro programming\")] [StringLength(100, MinimumLength = 1)] public string Title { get; set; } Property Value string Type [SwaggerSchema(null, Description = \"An type of a source\", ReadOnly = true, Format = \"UUID\", Nullable = false, Title = \"Source Unique Identifier\")] [SwaggerExample(SourceType.Article)] [StringLength(50, MinimumLength = 1)] public SourceType Type { get; set; } Property Value SourceType"
  },
  "api/Application.Tags.Queries.GetRelatedSources.html": {
    "href": "api/Application.Tags.Queries.GetRelatedSources.html",
    "title": "Namespace Application.Tags.Queries.GetRelatedSources | Examiner",
    "summary": "Namespace Application.Tags.Queries.GetRelatedSources Classes GetRelatedSourcesQuery GetRelatedSourcesQueryHandler GetRelatedSourcesQueryResult"
  },
  "api/Application.Tags.Queries.GetTagDetails.GetTagDetailsQuery.html": {
    "href": "api/Application.Tags.Queries.GetTagDetails.GetTagDetailsQuery.html",
    "title": "Class GetTagDetailsQuery | Examiner",
    "summary": "Class GetTagDetailsQuery Namespace Application.Tags.Queries.GetTagDetails Assembly Application.dll public class GetTagDetailsQuery : IRequest<Result<GetTagDetailsQueryResult>>, IBaseRequest Inheritance object GetTagDetailsQuery Implements IRequest<Result<GetTagDetailsQueryResult>> IBaseRequest Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public Guid Id { get; set; } Property Value Guid"
  },
  "api/Application.Tags.Queries.GetTagDetails.GetTagDetailsQueryHandler.html": {
    "href": "api/Application.Tags.Queries.GetTagDetails.GetTagDetailsQueryHandler.html",
    "title": "Class GetTagDetailsQueryHandler | Examiner",
    "summary": "Class GetTagDetailsQueryHandler Namespace Application.Tags.Queries.GetTagDetails Assembly Application.dll public class GetTagDetailsQueryHandler : IRequestHandler<GetTagDetailsQuery, Result<GetTagDetailsQueryResult>> Inheritance object GetTagDetailsQueryHandler Implements IRequestHandler<GetTagDetailsQuery, Result<GetTagDetailsQueryResult>> Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors GetTagDetailsQueryHandler(IRepositoryManager, IMapper) public GetTagDetailsQueryHandler(IRepositoryManager repositoryManager, IMapper mapper) Parameters repositoryManager IRepositoryManager mapper IMapper Methods Handle(GetTagDetailsQuery, CancellationToken) Handles a request public Task<Result<GetTagDetailsQueryResult>> Handle(GetTagDetailsQuery request, CancellationToken cancellationToken) Parameters request GetTagDetailsQuery The request cancellationToken CancellationToken Cancellation token Returns Task<Result<GetTagDetailsQueryResult>> Response from the request"
  },
  "api/Application.Tags.Queries.GetTagDetails.GetTagDetailsQueryResult.html": {
    "href": "api/Application.Tags.Queries.GetTagDetails.GetTagDetailsQueryResult.html",
    "title": "Class GetTagDetailsQueryResult | Examiner",
    "summary": "Class GetTagDetailsQueryResult Namespace Application.Tags.Queries.GetTagDetails Assembly Application.dll public class GetTagDetailsQueryResult Inheritance object GetTagDetailsQueryResult Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties ColorGroup public ColorCategory ColorGroup { get; set; } Property Value ColorCategory ColorHexCode public string ColorHexCode { get; set; } Property Value string CreationDate public DateTimeOffset CreationDate { get; set; } Property Value DateTimeOffset Id public Guid Id { get; set; } Property Value Guid IsArchived public bool IsArchived { get; set; } Property Value bool LastArchiveDate public DateTimeOffset? LastArchiveDate { get; set; } Property Value DateTimeOffset? LastModifiedDate public DateTimeOffset? LastModifiedDate { get; set; } Property Value DateTimeOffset? Name public string Name { get; set; } Property Value string VersionNumber public int VersionNumber { get; set; } Property Value int"
  },
  "api/Application.Tags.Queries.GetTagDetails.html": {
    "href": "api/Application.Tags.Queries.GetTagDetails.html",
    "title": "Namespace Application.Tags.Queries.GetTagDetails | Examiner",
    "summary": "Namespace Application.Tags.Queries.GetTagDetails Classes GetTagDetailsQuery GetTagDetailsQueryHandler GetTagDetailsQueryResult"
  },
  "api/Application.html": {
    "href": "api/Application.html",
    "title": "Namespace Application | Examiner",
    "summary": "Namespace Application Classes ApplicationRegisterServices"
  },
  "api/Domain.Auditing.ApplicationLog.html": {
    "href": "api/Domain.Auditing.ApplicationLog.html",
    "title": "Class ApplicationLog | Examiner",
    "summary": "Class ApplicationLog Namespace Domain.Auditing Assembly Domain.dll public class ApplicationLog Inheritance object ApplicationLog Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Exception public ExceptionInfo? Exception { get; set; } Property Value ExceptionInfo Id public Guid Id { get; set; } Property Value Guid Level public LogEventLevel Level { get; set; } Property Value LogEventLevel Message public string Message { get; set; } Property Value string Properties public IDictionary<string, string> Properties { get; set; } Property Value IDictionary<string, string> Timestamp public DateTimeOffset Timestamp { get; set; } Property Value DateTimeOffset"
  },
  "api/Domain.Auditing.AuditTrail.html": {
    "href": "api/Domain.Auditing.AuditTrail.html",
    "title": "Class AuditTrail | Examiner",
    "summary": "Class AuditTrail Namespace Domain.Auditing Assembly Domain.dll public class AuditTrail Inheritance object AuditTrail Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AuditTrail(EntityName, Guid, ActionType, ActionBy, int, string?) public AuditTrail(EntityName entityName, Guid entityId, ActionType operation, ActionBy changedBy, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid operation ActionType changedBy ActionBy versionNumber int comment string Properties ChangedBy public ActionBy ChangedBy { get; set; } Property Value ActionBy Changes public List<PropertyChange> Changes { get; set; } Property Value List<PropertyChange> Comment public string? Comment { get; set; } Property Value string EntityId public Guid EntityId { get; set; } Property Value Guid EntityName public EntityName EntityName { get; set; } Property Value EntityName Id public Guid Id { get; set; } Property Value Guid Operation public ActionType Operation { get; set; } Property Value ActionType Timestamp public DateTimeOffset Timestamp { get; set; } Property Value DateTimeOffset VersionNumber public int VersionNumber { get; set; } Property Value int Methods GetChanges<T>(T, bool) public void GetChanges<T>(T obj, bool isDelete) Parameters obj T isDelete bool Type Parameters T GetChanges<T>(T, T) public void GetChanges<T>(T oldObj, T newObj) Parameters oldObj T newObj T Type Parameters T"
  },
  "api/Domain.Auditing.EntityAudit.html": {
    "href": "api/Domain.Auditing.EntityAudit.html",
    "title": "Class EntityAudit | Examiner",
    "summary": "Class EntityAudit Namespace Domain.Auditing Assembly Domain.dll Represents a base class for auditable entities, providing standard audit properties such as creation date, last modification timestamp, version tracking, and soft-archive support. public class EntityAudit Inheritance object EntityAudit Derived Category Tag Question Source SourceReference Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CreationDate Gets the timestamp when the entity was created. public DateTimeOffset CreationDate { get; protected set; } Property Value DateTimeOffset Id Gets or sets the unique identifier of the entity. public Guid Id { get; set; } Property Value Guid IsArchived Gets a value indicating whether the entity is archived (soft-deleted). public bool IsArchived { get; protected set; } Property Value bool LastArchiveDate Gets the timestamp when the entity was archived. public DateTimeOffset? LastArchiveDate { get; protected set; } Property Value DateTimeOffset? LastModifiedDate Gets the timestamp of the last modification made to the entity. public DateTimeOffset? LastModifiedDate { get; protected set; } Property Value DateTimeOffset? VersionNumber Gets the current version number of the entity. Incremented with each update. public int VersionNumber { get; protected set; } Property Value int Methods Archive() Archives the entity by setting IsArchived to true and updating the LastArchiveDate. Also updates the modification timestamp and version. protected void Archive() Created() Sets the entity as newly created. Initializes CreationDate, sets VersionNumber to 1, and ensures the entity is not archived. protected void Created() UnArchive() Unarchives the entity by setting IsArchived to false and updating the modification state. protected void UnArchive() Updated() Updates the LastModifiedDate to the current timestamp and increments the VersionNumber. Should be called whenever the entity is modified. protected void Updated()"
  },
  "api/Domain.Auditing.ExceptionInfo.html": {
    "href": "api/Domain.Auditing.ExceptionInfo.html",
    "title": "Class ExceptionInfo | Examiner",
    "summary": "Class ExceptionInfo Namespace Domain.Auditing Assembly Domain.dll public class ExceptionInfo Inheritance object ExceptionInfo Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties InnerException public ExceptionInfo? InnerException { get; set; } Property Value ExceptionInfo Message public string Message { get; set; } Property Value string StackTrace public string? StackTrace { get; set; } Property Value string Type public string Type { get; set; } Property Value string Methods FromException(Exception) public static ExceptionInfo FromException(Exception ex) Parameters ex Exception Returns ExceptionInfo"
  },
  "api/Domain.Auditing.PropertyChange.html": {
    "href": "api/Domain.Auditing.PropertyChange.html",
    "title": "Class PropertyChange | Examiner",
    "summary": "Class PropertyChange Namespace Domain.Auditing Assembly Domain.dll public class PropertyChange Inheritance object PropertyChange Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties NewValue public object? NewValue { get; set; } Property Value object OldValue public object? OldValue { get; set; } Property Value object PropertyName public string PropertyName { get; set; } Property Value string PropertyType public string PropertyType { get; set; } Property Value string"
  },
  "api/Domain.Auditing.html": {
    "href": "api/Domain.Auditing.html",
    "title": "Namespace Domain.Auditing | Examiner",
    "summary": "Namespace Domain.Auditing Classes ApplicationLog AuditTrail EntityAudit Represents a base class for auditable entities, providing standard audit properties such as creation date, last modification timestamp, version tracking, and soft-archive support. ExceptionInfo PropertyChange"
  },
  "api/Domain.Constants.ColorsConsts.html": {
    "href": "api/Domain.Constants.ColorsConsts.html",
    "title": "Class ColorsConsts | Examiner",
    "summary": "Class ColorsConsts Namespace Domain.Constants Assembly Domain.dll public class ColorsConsts Inheritance object ColorsConsts Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields White public const string White = \"#FFFFFF\" Field Value string"
  },
  "api/Domain.Constants.EnumValues.html": {
    "href": "api/Domain.Constants.EnumValues.html",
    "title": "Class EnumValues | Examiner",
    "summary": "Class EnumValues Namespace Domain.Constants Assembly Domain.dll public static class EnumValues Inheritance object EnumValues Fields LongAnswer public const string LongAnswer = \"long answer question\" Field Value string MultipleChoise public const string MultipleChoise = \"multiple choice question\" Field Value string Reordering public const string Reordering = \"reordering question\" Field Value string ShortAnswer public const string ShortAnswer = \"short answer question\" Field Value string TrueAndFalse public const string TrueAndFalse = \"true & false question\" Field Value string"
  },
  "api/Domain.Constants.ErrorMessage.html": {
    "href": "api/Domain.Constants.ErrorMessage.html",
    "title": "Class ErrorMessage | Examiner",
    "summary": "Class ErrorMessage Namespace Domain.Constants Assembly Domain.dll public class ErrorMessage Inheritance object ErrorMessage Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields ENTITY_IS_ARCHIVED public const string ENTITY_IS_ARCHIVED = \"ENTITY_IS_ARCHIVED\" Field Value string NOT_FOUND_ENTITY public const string NOT_FOUND_ENTITY = \"NOT_FOUND_ENTITY\" Field Value string TAG_WITH_SAME_NAME_EXISTS public const string TAG_WITH_SAME_NAME_EXISTS = \"TAG_WITH_SAME_NAME_EXISTS\" Field Value string"
  },
  "api/Domain.Constants.MaxLength.html": {
    "href": "api/Domain.Constants.MaxLength.html",
    "title": "Class MaxLength | Examiner",
    "summary": "Class MaxLength Namespace Domain.Constants Assembly Domain.dll public static class MaxLength Inheritance object MaxLength Fields PAGESIZE_MAX_VALUE public const int PAGESIZE_MAX_VALUE = 250 Field Value int QUESTION_TEXT_MAX_LENGTH public const int QUESTION_TEXT_MAX_LENGTH = 1000 Field Value int TAG_COLOR_CODE_MAX_LENGTH public const int TAG_COLOR_CODE_MAX_LENGTH = 7 Field Value int TAG_NAME_MAX_LENGTH public const int TAG_NAME_MAX_LENGTH = 100 Field Value int"
  },
  "api/Domain.Constants.QuestionDifficultyMatrixes.html": {
    "href": "api/Domain.Constants.QuestionDifficultyMatrixes.html",
    "title": "Class QuestionDifficultyMatrixes | Examiner",
    "summary": "Class QuestionDifficultyMatrixes Namespace Domain.Constants Assembly Domain.dll public static class QuestionDifficultyMatrixes Inheritance object QuestionDifficultyMatrixes Fields Average public const short Average = 45 Field Value short Basic public const short Basic = 0 Field Value short Challenging public const short Challenging = 60 Field Value short Extreme public const short Extreme = 90 Field Value short Manageable public const short Manageable = 30 Field Value short Simple public const short Simple = 15 Field Value short Tough public const short Tough = 75 Field Value short"
  },
  "api/Domain.Constants.RegexPattern.html": {
    "href": "api/Domain.Constants.RegexPattern.html",
    "title": "Class RegexPattern | Examiner",
    "summary": "Class RegexPattern Namespace Domain.Constants Assembly Domain.dll public class RegexPattern Inheritance object RegexPattern Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields MatchHexCode public const string MatchHexCode = \"^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$\" Field Value string"
  },
  "api/Domain.Constants.html": {
    "href": "api/Domain.Constants.html",
    "title": "Namespace Domain.Constants | Examiner",
    "summary": "Namespace Domain.Constants Classes ColorsConsts EnumValues ErrorMessage MaxLength QuestionDifficultyMatrixes RegexPattern"
  },
  "api/Domain.Entities.EntityLookup.Category.html": {
    "href": "api/Domain.Entities.EntityLookup.Category.html",
    "title": "Class Category | Examiner",
    "summary": "Class Category Namespace Domain.Entities.EntityLookup Assembly Domain.dll public class Category : EntityAudit Inheritance object EntityAudit Category Inherited Members EntityAudit.LastModifiedDate EntityAudit.LastArchiveDate EntityAudit.CreationDate EntityAudit.IsArchived EntityAudit.VersionNumber EntityAudit.Created() EntityAudit.Updated() EntityAudit.Archive() EntityAudit.UnArchive() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors Category(string, string?) public Category(string name, string? description) Parameters name string description string Category(string, string?, Guid, int) public Category(string name, string? description, Guid parentId, int level) Parameters name string description string parentId Guid level int Properties Description public string? Description { get; } Property Value string HasChildren public bool HasChildren { get; } Property Value bool Id public Guid Id { get; } Property Value Guid IsRoot [BsonIgnore] public bool IsRoot { get; } Property Value bool Level public int Level { get; } Property Value int Name public string Name { get; } Property Value string ParentId public Guid? ParentId { get; } Property Value Guid? Methods EnableChildrenFlag() public void EnableChildrenFlag() UpdateCategory(string, string?) public void UpdateCategory(string name, string? description) Parameters name string description string"
  },
  "api/Domain.Entities.EntityLookup.Language.html": {
    "href": "api/Domain.Entities.EntityLookup.Language.html",
    "title": "Class Language | Examiner",
    "summary": "Class Language Namespace Domain.Entities.EntityLookup Assembly Domain.dll translate public class Language Inheritance object Language Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors Language(string, string) public Language(string code, string displayName) Parameters code string displayName string Properties Code public string Code { get; } Property Value string DisplayName public string DisplayName { get; } Property Value string Id public Guid Id { get; } Property Value Guid"
  },
  "api/Domain.Entities.EntityLookup.Tag.html": {
    "href": "api/Domain.Entities.EntityLookup.Tag.html",
    "title": "Class Tag | Examiner",
    "summary": "Class Tag Namespace Domain.Entities.EntityLookup Assembly Domain.dll Represents a categorized tag entity with color properties and archiving support. public class Tag : EntityAudit Inheritance object EntityAudit Tag Inherited Members EntityAudit.LastModifiedDate EntityAudit.LastArchiveDate EntityAudit.CreationDate EntityAudit.IsArchived EntityAudit.VersionNumber EntityAudit.Created() EntityAudit.Updated() EntityAudit.Archive() EntityAudit.UnArchive() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Remarks The Tag class supports creation, updating, and soft-archiving functionality. It enforces domain rules to ensure that all tags have valid names and color codes in hexadecimal format. Constructors Tag(string, string, string) Initializes a new instance of the Tag class with the specified name and color codes. public Tag(string name, string backgroundColorHexCode, string textColorCode = null) Parameters name string The name of the tag. Must be non-empty and non-null. backgroundColorHexCode string The background color of the tag in hexadecimal format (e.g., #FFFFFF). Must be a valid 6-digit hex code with a leading hash. textColorCode string The optional text color of the tag in hexadecimal format (e.g., #000000). If not provided, the default color White will be used. Exceptions ArgumentNullException Thrown if name, backgroundColorHexCode, or resolved textColorCode is null or empty. ArgumentException Thrown if backgroundColorHexCode or textColorCode are not valid hex color codes (must match format #RRGGBB). Properties BackgroundColorCode Gets the background color code of the tag in hexadecimal format. public string BackgroundColorCode { get; } Property Value string BackgroundColorGroup Gets the color category group derived from the background color. public ColorCategory BackgroundColorGroup { get; } Property Value ColorCategory Id Gets the unique identifier of the tag. public Guid Id { get; } Property Value Guid Name Gets the name of the tag. public string Name { get; } Property Value string TextColorCode Gets the text color code of the tag in hexadecimal format. public string TextColorCode { get; } Property Value string TextColorGroup Gets the color category group derived from the text color. public ColorCategory TextColorGroup { get; } Property Value ColorCategory Methods ArchiveTag() Archives the tag by marking it as no longer active. public void ArchiveTag() Remarks This method sets IsArchived to true and records the archive timestamp. UnArchiveTag() Restores the tag from an archived state. public void UnArchiveTag() Remarks This method sets IsArchived to false and updates modification metadata. UpdateTag(string, string, string) Updates the current Tag with a new name, background color, and text color. public void UpdateTag(string name, string backgroundColorHexCode, string textColorCode) Parameters name string The new name of the tag. Must not be null or empty. backgroundColorHexCode string The new background color in hexadecimal format (e.g., #FF5733). Must be a valid 6-digit hex code with a leading hash. textColorCode string The new text color in hexadecimal format (e.g., #000000). Must be a valid 6-digit hex code with a leading hash. Exceptions ArgumentNullException Thrown if name, backgroundColorHexCode, or textColorCode is null or empty. ArgumentException Thrown if backgroundColorHexCode or textColorCode are not valid hex color codes (must match format #RRGGBB)."
  },
  "api/Domain.Entities.EntityLookup.html": {
    "href": "api/Domain.Entities.EntityLookup.html",
    "title": "Namespace Domain.Entities.EntityLookup | Examiner",
    "summary": "Namespace Domain.Entities.EntityLookup Classes Category Language translate Tag Represents a categorized tag entity with color properties and archiving support."
  },
  "api/Domain.Entities.Examiner.LongAnswerQuestion.html": {
    "href": "api/Domain.Entities.Examiner.LongAnswerQuestion.html",
    "title": "Class LongAnswerQuestion | Examiner",
    "summary": "Class LongAnswerQuestion Namespace Domain.Entities.Examiner Assembly Domain.dll public class LongAnswerQuestion Inheritance object LongAnswerQuestion Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LongAnswerQuestion(int?, int?, string, string?) public LongAnswerQuestion(int? maximinWords, int? minimanWords, string answer, string? feedback) Parameters maximinWords int? minimanWords int? answer string feedback string Properties Answer public string Answer { get; set; } Property Value string Feedback public string? Feedback { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid MaximinWords public int? MaximinWords { get; set; } Property Value int? MinimanWords public int? MinimanWords { get; set; } Property Value int?"
  },
  "api/Domain.Entities.Examiner.MultipleChoiceQuestionOption.html": {
    "href": "api/Domain.Entities.Examiner.MultipleChoiceQuestionOption.html",
    "title": "Class MultipleChoiceQuestionOption | Examiner",
    "summary": "Class MultipleChoiceQuestionOption Namespace Domain.Entities.Examiner Assembly Domain.dll public class MultipleChoiceQuestionOption Inheritance object MultipleChoiceQuestionOption Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors MultipleChoiceQuestionOption(string, bool, float, string?) public MultipleChoiceQuestionOption(string optionText, bool isCorrect, float weight, string? feedback = null) Parameters optionText string isCorrect bool weight float feedback string Properties FeedBack public string? FeedBack { get; } Property Value string Id public Guid Id { get; } Property Value Guid IsCorrect public bool IsCorrect { get; } Property Value bool OptionText public string OptionText { get; } Property Value string Weight public float Weight { get; } Property Value float"
  },
  "api/Domain.Entities.Examiner.MultipleChoiseQuestion.html": {
    "href": "api/Domain.Entities.Examiner.MultipleChoiseQuestion.html",
    "title": "Class MultipleChoiseQuestion | Examiner",
    "summary": "Class MultipleChoiseQuestion Namespace Domain.Entities.Examiner Assembly Domain.dll public class MultipleChoiseQuestion Inheritance object MultipleChoiseQuestion Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors MultipleChoiseQuestion(List<MultipleChoiceQuestionOption>) public MultipleChoiseQuestion(List<MultipleChoiceQuestionOption> options) Parameters options List<MultipleChoiceQuestionOption> Properties Options public List<MultipleChoiceQuestionOption> Options { get; set; } Property Value List<MultipleChoiceQuestionOption> Type public MultipleChoiseQuestionType Type { get; set; } Property Value MultipleChoiseQuestionType Methods CreateOption(string, bool, float, string?) public static MultipleChoiceQuestionOption CreateOption(string optionText, bool isCorrect, float weight, string? feedback) Parameters optionText string isCorrect bool weight float feedback string Returns MultipleChoiceQuestionOption"
  },
  "api/Domain.Entities.Examiner.Question.html": {
    "href": "api/Domain.Entities.Examiner.Question.html",
    "title": "Class Question | Examiner",
    "summary": "Class Question Namespace Domain.Entities.Examiner Assembly Domain.dll public class Question : EntityAudit Inheritance object EntityAudit Question Inherited Members EntityAudit.LastModifiedDate EntityAudit.LastArchiveDate EntityAudit.CreationDate EntityAudit.IsArchived EntityAudit.VersionNumber EntityAudit.Created() EntityAudit.Updated() EntityAudit.Archive() EntityAudit.UnArchive() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors Question(string, List<string>?, QuestionType, int, bool, QuestionDifficulty, Guid?, List<Guid>?, List<Guid>?, Guid?) public Question(string questionText, List<string>? variants, QuestionType questionType, int mark, bool requireManualReview, QuestionDifficulty difficulty, Guid? language = null, List<Guid>? tags = null, List<Guid>? sources = null, Guid? category = null) Parameters questionText string variants List<string> questionType QuestionType mark int requireManualReview bool difficulty QuestionDifficulty language Guid? tags List<Guid> sources List<Guid> category Guid? Properties Category The category under which this question falls, if any. public Guid? Category { get; } Property Value Guid? DifficultyIndex An index (0–100) representing how difficult the question is perceived to be. public short DifficultyIndex { get; } Property Value short HasAttachments Determine if the public bool HasAttachments { get; } Property Value bool Id Unique identifier for the question. public Guid Id { get; } Property Value Guid ImagesFilePaths File path for an image for handling images public List<string> ImagesFilePaths { get; } Property Value List<string> Language public Guid? Language { get; } Property Value Guid? LongAnswerQuestion Details specific to long answer questions (if applicable). public LongAnswerQuestion? LongAnswerQuestion { get; } Property Value LongAnswerQuestion Mark The number of points (marks) assigned to this question. public int Mark { get; } Property Value int MultipleChoiceQuestion Details specific to multiple choice questions (if applicable). public MultipleChoiseQuestion? MultipleChoiceQuestion { get; } Property Value MultipleChoiseQuestion QuestionText The actual text of the question displayed to the user. public string QuestionText { get; } Property Value string QuestionType The type of the question, e.g., MultipleChoice, TrueFalse, ShortAnswer. public QuestionType QuestionType { get; } Property Value QuestionType ReorderingQuestions Details specific to reordering questions (if applicable). public List<ReorderingQuestion>? ReorderingQuestions { get; } Property Value List<ReorderingQuestion> RequireManualReview Indicates whether the question needs manual grading (e.g., short answer). public bool RequireManualReview { get; } Property Value bool ShortAnswerQuestion Details specific to short answer questions (if applicable). public ShortAnswerQuestion? ShortAnswerQuestion { get; } Property Value ShortAnswerQuestion Sources Optional list of sources (e.g., books, websites) from which the question originates. public List<Guid>? Sources { get; } Property Value List<Guid> Tags public List<Guid>? Tags { get; } Property Value List<Guid> TrueFalseQuestion Details specific to true/false questions (if applicable). public TrueFalseQuestion? TrueFalseQuestion { get; } Property Value TrueFalseQuestion Variants Different phrase of questions public List<string>? Variants { get; } Property Value List<string> Methods CreateLongAnswer(int?, int?, string, string?) public void CreateLongAnswer(int? maximinWords, int? minimalWords, string answer, string? feedback) Parameters maximinWords int? minimalWords int? answer string feedback string CreateMultipleChoiceQuestion(MultipleChoiseQuestion) public void CreateMultipleChoiceQuestion(MultipleChoiseQuestion multipleChoiseQuestion) Parameters multipleChoiseQuestion MultipleChoiseQuestion CreateReordering(IEnumerable<ReorderingQuestion>) public void CreateReordering(IEnumerable<ReorderingQuestion> reorderingQuestions) Parameters reorderingQuestions IEnumerable<ReorderingQuestion> CreateShortAnswer(string, List<string>?, string?, string?) public void CreateShortAnswer(string correctAnswer, List<string>? possibleAnswers, string? wrongAnswerFeedBack, string? correctAnswerFeedBack) Parameters correctAnswer string possibleAnswers List<string> wrongAnswerFeedBack string correctAnswerFeedBack string CreateTrueAndFalse(TrueFalseQuestion) public void CreateTrueAndFalse(TrueFalseQuestion trueFalseQuestion) Parameters trueFalseQuestion TrueFalseQuestion RemoveTag(Guid) public void RemoveTag(Guid tagId) Parameters tagId Guid UpdateBasicQueastion(string, List<string>?, int, bool, List<string>, short) public void UpdateBasicQueastion(string questionText, List<string>? variants, int mark, bool requireManualReview, List<string> tags, short difficultyIndex) Parameters questionText string variants List<string> mark int requireManualReview bool tags List<string> difficultyIndex short"
  },
  "api/Domain.Entities.Examiner.QuestionAttachments.html": {
    "href": "api/Domain.Entities.Examiner.QuestionAttachments.html",
    "title": "Class QuestionAttachments | Examiner",
    "summary": "Class QuestionAttachments Namespace Domain.Entities.Examiner Assembly Domain.dll public class QuestionAttachments Inheritance object QuestionAttachments Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties FilePath public string FilePath { get; set; } Property Value string MyProperty public int MyProperty { get; set; } Property Value int"
  },
  "api/Domain.Entities.Examiner.ReorderingQuestion.html": {
    "href": "api/Domain.Entities.Examiner.ReorderingQuestion.html",
    "title": "Class ReorderingQuestion | Examiner",
    "summary": "Class ReorderingQuestion Namespace Domain.Entities.Examiner Assembly Domain.dll public class ReorderingQuestion Inheritance object ReorderingQuestion Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ReorderingQuestion(string, int, string?, string?) public ReorderingQuestion(string value, int order, string? wrongAnswerFeedBack, string? correctAnswerFeedBack) Parameters value string order int wrongAnswerFeedBack string correctAnswerFeedBack string Properties CorrectAnswerFeedBack public string? CorrectAnswerFeedBack { get; } Property Value string Id public Guid Id { get; } Property Value Guid Order public int Order { get; } Property Value int Value public string Value { get; } Property Value string WrongAnswerFeedBack public string? WrongAnswerFeedBack { get; } Property Value string"
  },
  "api/Domain.Entities.Examiner.ShortAnswerQuestion.html": {
    "href": "api/Domain.Entities.Examiner.ShortAnswerQuestion.html",
    "title": "Class ShortAnswerQuestion | Examiner",
    "summary": "Class ShortAnswerQuestion Namespace Domain.Entities.Examiner Assembly Domain.dll public class ShortAnswerQuestion Inheritance object ShortAnswerQuestion Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ShortAnswerQuestion(string, List<string>?, string?, string?) public ShortAnswerQuestion(string correctAnswer, List<string>? possibleAnswers, string? wrongAnswerFeedBack, string? correctAnswerFeedBack) Parameters correctAnswer string possibleAnswers List<string> wrongAnswerFeedBack string correctAnswerFeedBack string Properties CorrectAnswer public string CorrectAnswer { get; } Property Value string CorrectAnswerFeedBack public string? CorrectAnswerFeedBack { get; } Property Value string Id public Guid Id { get; set; } Property Value Guid PossibleAnswers public List<string>? PossibleAnswers { get; } Property Value List<string> WrongAnswerFeedBack public string? WrongAnswerFeedBack { get; } Property Value string"
  },
  "api/Domain.Entities.Examiner.TrueFalseQuestion.html": {
    "href": "api/Domain.Entities.Examiner.TrueFalseQuestion.html",
    "title": "Class TrueFalseQuestion | Examiner",
    "summary": "Class TrueFalseQuestion Namespace Domain.Entities.Examiner Assembly Domain.dll public class TrueFalseQuestion Inheritance object TrueFalseQuestion Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors TrueFalseQuestion(bool, string?, string?) public TrueFalseQuestion(bool isCorrect, string? wrongAnswerFeedBack, string? answerFeedBack) Parameters isCorrect bool wrongAnswerFeedBack string answerFeedBack string Properties AnswerFeedBack public string? AnswerFeedBack { get; set; } Property Value string Id public Guid Id { get; set; } Property Value Guid IsCorrect public bool IsCorrect { get; set; } Property Value bool Justification public string? Justification { get; set; } Property Value string RequireJustification public bool RequireJustification { get; set; } Property Value bool WrongAnswerFeedBack public string? WrongAnswerFeedBack { get; set; } Property Value string"
  },
  "api/Domain.Entities.Examiner.html": {
    "href": "api/Domain.Entities.Examiner.html",
    "title": "Namespace Domain.Entities.Examiner | Examiner",
    "summary": "Namespace Domain.Entities.Examiner Classes LongAnswerQuestion MultipleChoiceQuestionOption MultipleChoiseQuestion Question QuestionAttachments ReorderingQuestion ShortAnswerQuestion TrueFalseQuestion"
  },
  "api/Domain.Entities.Sources.Metadata.html": {
    "href": "api/Domain.Entities.Sources.Metadata.html",
    "title": "Class Metadata | Examiner",
    "summary": "Class Metadata Namespace Domain.Entities.Sources Assembly Domain.dll public class Metadata Inheritance object Metadata Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors Metadata(string, string, FiledType) public Metadata(string filedName, string value, FiledType filedType) Parameters filedName string value string filedType FiledType Properties FiledName public string FiledName { get; set; } Property Value string FiledType public FiledType FiledType { get; set; } Property Value FiledType Id public Guid Id { get; set; } Property Value Guid Value public string Value { get; set; } Property Value string"
  },
  "api/Domain.Entities.Sources.Source.html": {
    "href": "api/Domain.Entities.Sources.Source.html",
    "title": "Class Source | Examiner",
    "summary": "Class Source Namespace Domain.Entities.Sources Assembly Domain.dll public class Source : EntityAudit Inheritance object EntityAudit Source Inherited Members EntityAudit.Id EntityAudit.LastModifiedDate EntityAudit.LastArchiveDate EntityAudit.CreationDate EntityAudit.IsArchived EntityAudit.VersionNumber EntityAudit.Created() EntityAudit.Updated() EntityAudit.Archive() EntityAudit.UnArchive() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors Source(SourceType, string, string?, bool, string, string, IEnumerable<Guid>?, Guid?) public Source(SourceType type, string title, string? description, bool hasAttachment, string fileExtension, string filePath, IEnumerable<Guid>? tags, Guid? categoryId) Parameters type SourceType title string description string hasAttachment bool fileExtension string filePath string tags IEnumerable<Guid> categoryId Guid? Properties CategoryId public Guid? CategoryId { get; } Property Value Guid? Description public string? Description { get; } Property Value string FileExtension public string? FileExtension { get; } Property Value string FilePath public string? FilePath { get; } Property Value string HasAttachment public bool HasAttachment { get; } Property Value bool Metadata public List<Metadata>? Metadata { get; } Property Value List<Metadata> Tags public List<Guid>? Tags { get; } Property Value List<Guid> Title public string Title { get; } Property Value string Type public SourceType Type { get; } Property Value SourceType Methods AddMetadata(Metadata) public void AddMetadata(Metadata metadata) Parameters metadata Metadata AddMetadata(IEnumerable<Metadata>) public void AddMetadata(IEnumerable<Metadata> metadata) Parameters metadata IEnumerable<Metadata> AddMetadata(string, string, FiledType) public void AddMetadata(string filedName, string value, FiledType filedType) Parameters filedName string value string filedType FiledType AddNewTag(IEnumerable<Guid>) public void AddNewTag(IEnumerable<Guid> tagIds) Parameters tagIds IEnumerable<Guid> AddNewTag(Guid) public void AddNewTag(Guid tagId) Parameters tagId Guid RemoveTag(Guid) public void RemoveTag(Guid id) Parameters id Guid UpdateSource(SourceType, string, string?, IEnumerable<Guid>?) public void UpdateSource(SourceType type, string title, string? description, IEnumerable<Guid>? tags) Parameters type SourceType title string description string tags IEnumerable<Guid>"
  },
  "api/Domain.Entities.Sources.SourceReference.html": {
    "href": "api/Domain.Entities.Sources.SourceReference.html",
    "title": "Class SourceReference | Examiner",
    "summary": "Class SourceReference Namespace Domain.Entities.Sources Assembly Domain.dll public class SourceReference : EntityAudit Inheritance object EntityAudit SourceReference Inherited Members EntityAudit.LastModifiedDate EntityAudit.LastArchiveDate EntityAudit.CreationDate EntityAudit.IsArchived EntityAudit.VersionNumber EntityAudit.Created() EntityAudit.Updated() EntityAudit.Archive() EntityAudit.UnArchive() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SourceReference(string?, Guid) public SourceReference(string? notes, Guid sourceId) Parameters notes string sourceId Guid Properties Id public Guid Id { get; } Property Value Guid Metadata public List<Metadata>? Metadata { get; } Property Value List<Metadata> Notes public string? Notes { get; } Property Value string SourceId public Guid SourceId { get; } Property Value Guid Methods AddMetadata(Metadata) public void AddMetadata(Metadata metadata) Parameters metadata Metadata AddMetadata(IEnumerable<Metadata>) public void AddMetadata(IEnumerable<Metadata> metadata) Parameters metadata IEnumerable<Metadata> AddMetadata(string, string, FiledType) public void AddMetadata(string filedName, string value, FiledType filedType) Parameters filedName string value string filedType FiledType"
  },
  "api/Domain.Entities.Sources.html": {
    "href": "api/Domain.Entities.Sources.html",
    "title": "Namespace Domain.Entities.Sources | Examiner",
    "summary": "Namespace Domain.Entities.Sources Classes Metadata Source SourceReference"
  },
  "api/Domain.Enums.ActionBy.html": {
    "href": "api/Domain.Enums.ActionBy.html",
    "title": "Enum ActionBy | Examiner",
    "summary": "Enum ActionBy Namespace Domain.Enums Assembly Domain.dll public enum ActionBy Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields System = 2 User = 1"
  },
  "api/Domain.Enums.ActionType.html": {
    "href": "api/Domain.Enums.ActionType.html",
    "title": "Enum ActionType | Examiner",
    "summary": "Enum ActionType Namespace Domain.Enums Assembly Domain.dll public enum ActionType Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields AddNewTag = 6 Added = 1 Archived = 4 Deleted = 3 Modified = 2 RemoveTag = 7 UnArchived = 5"
  },
  "api/Domain.Enums.ColorCategory.html": {
    "href": "api/Domain.Enums.ColorCategory.html",
    "title": "Enum ColorCategory | Examiner",
    "summary": "Enum ColorCategory Namespace Domain.Enums Assembly Domain.dll public enum ColorCategory Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields Black = 10 Blue = 6 Cyan = 5 Gray = 11 Green = 4 Orange = 2 Pink = 8 Purple = 7 Red = 1 White = 9 Yellow = 3"
  },
  "api/Domain.Enums.EntityName.html": {
    "href": "api/Domain.Enums.EntityName.html",
    "title": "Enum EntityName | Examiner",
    "summary": "Enum EntityName Namespace Domain.Enums Assembly Domain.dll public enum EntityName Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields Category = 4 Reference = 3 Source = 2 Tag = 1"
  },
  "api/Domain.Enums.FileFormat.html": {
    "href": "api/Domain.Enums.FileFormat.html",
    "title": "Enum FileFormat | Examiner",
    "summary": "Enum FileFormat Namespace Domain.Enums Assembly Domain.dll public enum FileFormat Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields CSV = 2 JSON = 1"
  },
  "api/Domain.Enums.FiledType.html": {
    "href": "api/Domain.Enums.FiledType.html",
    "title": "Enum FiledType | Examiner",
    "summary": "Enum FiledType Namespace Domain.Enums Assembly Domain.dll public enum FiledType Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields Date = 3 Number = 2 Text = 1"
  },
  "api/Domain.Enums.MultipleChoiseQuestionType.html": {
    "href": "api/Domain.Enums.MultipleChoiseQuestionType.html",
    "title": "Enum MultipleChoiseQuestionType | Examiner",
    "summary": "Enum MultipleChoiseQuestionType Namespace Domain.Enums Assembly Domain.dll public enum MultipleChoiseQuestionType Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields MuktipleChoise = 1 SingleChoise = 2"
  },
  "api/Domain.Enums.OrderType.html": {
    "href": "api/Domain.Enums.OrderType.html",
    "title": "Enum OrderType | Examiner",
    "summary": "Enum OrderType Namespace Domain.Enums Assembly Domain.dll public enum OrderType Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields Ascending = 1 Descending = 2"
  },
  "api/Domain.Enums.QuestionDifficulty.html": {
    "href": "api/Domain.Enums.QuestionDifficulty.html",
    "title": "Enum QuestionDifficulty | Examiner",
    "summary": "Enum QuestionDifficulty Namespace Domain.Enums Assembly Domain.dll public enum QuestionDifficulty Extension Methods QuestionDifficultyExtenstion.GetMattrix(QuestionDifficulty) ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields Average = 4 Basic = 7 Challenging = 3 Extreme = 1 Manageable = 5 Simple = 6 Tough = 2"
  },
  "api/Domain.Enums.QuestionType.html": {
    "href": "api/Domain.Enums.QuestionType.html",
    "title": "Enum QuestionType | Examiner",
    "summary": "Enum QuestionType Namespace Domain.Enums Assembly Domain.dll public enum QuestionType Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields LongAnswer = 4 MultipleChoice = 1 Reordering = 5 ShortAnswer = 3 TrueAndFalse = 2"
  },
  "api/Domain.Enums.SourceType.html": {
    "href": "api/Domain.Enums.SourceType.html",
    "title": "Enum SourceType | Examiner",
    "summary": "Enum SourceType Namespace Domain.Enums Assembly Domain.dll public enum SourceType Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Fields Article = 3 Book = 4 Podcast = 2 Video = 1"
  },
  "api/Domain.Enums.html": {
    "href": "api/Domain.Enums.html",
    "title": "Namespace Domain.Enums | Examiner",
    "summary": "Namespace Domain.Enums Enums ActionBy ActionType ColorCategory EntityName FileFormat FiledType MultipleChoiseQuestionType OrderType QuestionDifficulty QuestionType SourceType"
  },
  "api/Domain.Extentions.ColorExtension.html": {
    "href": "api/Domain.Extentions.ColorExtension.html",
    "title": "Class ColorExtension | Examiner",
    "summary": "Class ColorExtension Namespace Domain.Extentions Assembly Domain.dll public static class ColorExtension Inheritance object ColorExtension Methods GenerateRandomHexColor() public static string GenerateRandomHexColor() Returns string GetColorGroup(string) public static ColorCategory GetColorGroup(this string hexColor) Parameters hexColor string Returns ColorCategory"
  },
  "api/Domain.Extentions.ObjectExtention.html": {
    "href": "api/Domain.Extentions.ObjectExtention.html",
    "title": "Class ObjectExtention | Examiner",
    "summary": "Class ObjectExtention Namespace Domain.Extentions Assembly Domain.dll public static class ObjectExtention Inheritance object ObjectExtention Methods IsNotNull(object) public static bool IsNotNull(this object value) Parameters value object Returns bool IsNull(object) public static bool IsNull(this object value) Parameters value object Returns bool"
  },
  "api/Domain.Extentions.StringExtension.html": {
    "href": "api/Domain.Extentions.StringExtension.html",
    "title": "Class StringExtension | Examiner",
    "summary": "Class StringExtension Namespace Domain.Extentions Assembly Domain.dll public static class StringExtension Inheritance object StringExtension Methods IsHexColor(string) public static bool IsHexColor(this string input) Parameters input string Returns bool IsNotNullOrEmpty(string) public static bool IsNotNullOrEmpty(this string value) Parameters value string Returns bool"
  },
  "api/Domain.Extentions.TypeExtensions.html": {
    "href": "api/Domain.Extentions.TypeExtensions.html",
    "title": "Class TypeExtensions | Examiner",
    "summary": "Class TypeExtensions Namespace Domain.Extentions Assembly Domain.dll public static class TypeExtensions Inheritance object TypeExtensions Methods GetFriendlyName(Type) public static string GetFriendlyName(this Type type) Parameters type Type Returns string"
  },
  "api/Domain.Extentions.html": {
    "href": "api/Domain.Extentions.html",
    "title": "Namespace Domain.Extentions | Examiner",
    "summary": "Namespace Domain.Extentions Classes ColorExtension ObjectExtention StringExtension TypeExtensions"
  },
  "api/Domain.Lookups.EntityHistoryTypeLookup.html": {
    "href": "api/Domain.Lookups.EntityHistoryTypeLookup.html",
    "title": "Class EntityHistoryTypeLookup | Examiner",
    "summary": "Class EntityHistoryTypeLookup Namespace Domain.Lookups Assembly Domain.dll public class EntityHistoryTypeLookup Inheritance object EntityHistoryTypeLookup Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public ActionType Id { get; set; } Property Value ActionType Value public string Value { get; } Property Value string"
  },
  "api/Domain.Lookups.QuestionDifficultyLookup.html": {
    "href": "api/Domain.Lookups.QuestionDifficultyLookup.html",
    "title": "Class QuestionDifficultyLookup | Examiner",
    "summary": "Class QuestionDifficultyLookup Namespace Domain.Lookups Assembly Domain.dll public class QuestionDifficultyLookup Inheritance object QuestionDifficultyLookup Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public QuestionDifficulty Id { get; set; } Property Value QuestionDifficulty Value public string Value { get; } Property Value string"
  },
  "api/Domain.Lookups.QuestionTypeLookup.html": {
    "href": "api/Domain.Lookups.QuestionTypeLookup.html",
    "title": "Class QuestionTypeLookup | Examiner",
    "summary": "Class QuestionTypeLookup Namespace Domain.Lookups Assembly Domain.dll public class QuestionTypeLookup Inheritance object QuestionTypeLookup Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties Id public QuestionType Id { get; set; } Property Value QuestionType Value public string Value { get; } Property Value string"
  },
  "api/Domain.Lookups.SourceTypeLookup.html": {
    "href": "api/Domain.Lookups.SourceTypeLookup.html",
    "title": "Class SourceTypeLookup | Examiner",
    "summary": "Class SourceTypeLookup Namespace Domain.Lookups Assembly Domain.dll public class SourceTypeLookup Inheritance object SourceTypeLookup Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SourceTypeLookup(SourceType) public SourceTypeLookup(SourceType id) Parameters id SourceType Properties Id public SourceType Id { get; set; } Property Value SourceType Value public string Value { get; } Property Value string"
  },
  "api/Domain.Lookups.html": {
    "href": "api/Domain.Lookups.html",
    "title": "Namespace Domain.Lookups | Examiner",
    "summary": "Namespace Domain.Lookups Classes EntityHistoryTypeLookup QuestionDifficultyLookup QuestionTypeLookup SourceTypeLookup"
  },
  "api/Domain.Managers.IRepositoryManager.html": {
    "href": "api/Domain.Managers.IRepositoryManager.html",
    "title": "Interface IRepositoryManager | Examiner",
    "summary": "Interface IRepositoryManager Namespace Domain.Managers Assembly Domain.dll public interface IRepositoryManager : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Properties CategoryRepository ICategoryRepository CategoryRepository { get; } Property Value ICategoryRepository LanguageRepository ILanguageRepository LanguageRepository { get; } Property Value ILanguageRepository QuestionRepository IQuestionRepository QuestionRepository { get; } Property Value IQuestionRepository ReferenceRepository IReferenceRepository ReferenceRepository { get; } Property Value IReferenceRepository SourceRepository ISourceRepository SourceRepository { get; } Property Value ISourceRepository TagRepository ITagRepository TagRepository { get; } Property Value ITagRepository"
  },
  "api/Domain.Managers.html": {
    "href": "api/Domain.Managers.html",
    "title": "Namespace Domain.Managers | Examiner",
    "summary": "Namespace Domain.Managers Interfaces IRepositoryManager"
  },
  "api/Domain.Repositories.IApplicationLogRepository.html": {
    "href": "api/Domain.Repositories.IApplicationLogRepository.html",
    "title": "Interface IApplicationLogRepository | Examiner",
    "summary": "Interface IApplicationLogRepository Namespace Domain.Repositories Assembly Domain.dll public interface IApplicationLogRepository Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Count() int Count() Returns int GetAll(Func<ApplicationLog, bool>, int, int) IEnumerable<ApplicationLog> GetAll(Func<ApplicationLog, bool> func, int pageNumber, int pageSize) Parameters func Func<ApplicationLog, bool> pageNumber int pageSize int Returns IEnumerable<ApplicationLog>"
  },
  "api/Domain.Repositories.ICategoryRepository.html": {
    "href": "api/Domain.Repositories.ICategoryRepository.html",
    "title": "Interface ICategoryRepository | Examiner",
    "summary": "Interface ICategoryRepository Namespace Domain.Repositories Assembly Domain.dll public interface ICategoryRepository : IBaseRepository<Category>, IDisposable Inherited Members IBaseRepository<Category>.Insert(Category) IBaseRepository<Category>.Insert(IEnumerable<Category>) IBaseRepository<Category>.GetById(Guid) IBaseRepository<Category>.GetAll() IBaseRepository<Category>.GetAll(Func<Category, bool>) IBaseRepository<Category>.GetAll(Func<Category, bool>, int, int) IBaseRepository<Category>.GetAllAsync(Func<Category, bool>, int, int) IBaseRepository<Category>.GetAll(int, int) IBaseRepository<Category>.GetCollection() IBaseRepository<Category>.Count() IBaseRepository<Category>.CountBy(Func<Category, bool>) IBaseRepository<Category>.CountAsync() IBaseRepository<Category>.DeleteById(Guid) IBaseRepository<Category>.DeleteAll() IBaseRepository<Category>.Update(Category) IBaseRepository<Category>.Update(IEnumerable<Category>) IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods IsNotExists(Guid) bool IsNotExists(Guid id) Parameters id Guid Returns bool"
  },
  "api/Domain.Repositories.ILanguageRepository.html": {
    "href": "api/Domain.Repositories.ILanguageRepository.html",
    "title": "Interface ILanguageRepository | Examiner",
    "summary": "Interface ILanguageRepository Namespace Domain.Repositories Assembly Domain.dll public interface ILanguageRepository : IBaseRepository<Language>, IDisposable Inherited Members IBaseRepository<Language>.Insert(Language) IBaseRepository<Language>.Insert(IEnumerable<Language>) IBaseRepository<Language>.GetById(Guid) IBaseRepository<Language>.GetAll() IBaseRepository<Language>.GetAll(Func<Language, bool>) IBaseRepository<Language>.GetAll(Func<Language, bool>, int, int) IBaseRepository<Language>.GetAllAsync(Func<Language, bool>, int, int) IBaseRepository<Language>.GetAll(int, int) IBaseRepository<Language>.GetCollection() IBaseRepository<Language>.Count() IBaseRepository<Language>.CountBy(Func<Language, bool>) IBaseRepository<Language>.CountAsync() IBaseRepository<Language>.DeleteById(Guid) IBaseRepository<Language>.DeleteAll() IBaseRepository<Language>.Update(Language) IBaseRepository<Language>.Update(IEnumerable<Language>) IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods GetLanguageReference(string) Guid GetLanguageReference(string code) Parameters code string Returns Guid IsLangCodeExists(string) bool IsLangCodeExists(string code) Parameters code string Returns bool"
  },
  "api/Domain.Repositories.IQuestionRepository.html": {
    "href": "api/Domain.Repositories.IQuestionRepository.html",
    "title": "Interface IQuestionRepository | Examiner",
    "summary": "Interface IQuestionRepository Namespace Domain.Repositories Assembly Domain.dll public interface IQuestionRepository : IBaseRepository<Question>, IDisposable Inherited Members IBaseRepository<Question>.Insert(Question) IBaseRepository<Question>.Insert(IEnumerable<Question>) IBaseRepository<Question>.GetById(Guid) IBaseRepository<Question>.GetAll() IBaseRepository<Question>.GetAll(Func<Question, bool>) IBaseRepository<Question>.GetAll(Func<Question, bool>, int, int) IBaseRepository<Question>.GetAllAsync(Func<Question, bool>, int, int) IBaseRepository<Question>.GetAll(int, int) IBaseRepository<Question>.GetCollection() IBaseRepository<Question>.Count() IBaseRepository<Question>.CountBy(Func<Question, bool>) IBaseRepository<Question>.CountAsync() IBaseRepository<Question>.DeleteById(Guid) IBaseRepository<Question>.DeleteAll() IBaseRepository<Question>.Update(Question) IBaseRepository<Question>.Update(IEnumerable<Question>) IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object)"
  },
  "api/Domain.Repositories.IReferenceRepository.html": {
    "href": "api/Domain.Repositories.IReferenceRepository.html",
    "title": "Interface IReferenceRepository | Examiner",
    "summary": "Interface IReferenceRepository Namespace Domain.Repositories Assembly Domain.dll public interface IReferenceRepository : IBaseRepository<SourceReference>, IDisposable Inherited Members IBaseRepository<SourceReference>.Insert(SourceReference) IBaseRepository<SourceReference>.Insert(IEnumerable<SourceReference>) IBaseRepository<SourceReference>.GetById(Guid) IBaseRepository<SourceReference>.GetAll() IBaseRepository<SourceReference>.GetAll(Func<SourceReference, bool>) IBaseRepository<SourceReference>.GetAll(Func<SourceReference, bool>, int, int) IBaseRepository<SourceReference>.GetAllAsync(Func<SourceReference, bool>, int, int) IBaseRepository<SourceReference>.GetAll(int, int) IBaseRepository<SourceReference>.GetCollection() IBaseRepository<SourceReference>.Count() IBaseRepository<SourceReference>.CountBy(Func<SourceReference, bool>) IBaseRepository<SourceReference>.CountAsync() IBaseRepository<SourceReference>.DeleteById(Guid) IBaseRepository<SourceReference>.DeleteAll() IBaseRepository<SourceReference>.Update(SourceReference) IBaseRepository<SourceReference>.Update(IEnumerable<SourceReference>) IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object)"
  },
  "api/Domain.Repositories.ISourceRepository.html": {
    "href": "api/Domain.Repositories.ISourceRepository.html",
    "title": "Interface ISourceRepository | Examiner",
    "summary": "Interface ISourceRepository Namespace Domain.Repositories Assembly Domain.dll public interface ISourceRepository : IBaseRepository<Source>, IDisposable Inherited Members IBaseRepository<Source>.Insert(Source) IBaseRepository<Source>.Insert(IEnumerable<Source>) IBaseRepository<Source>.GetById(Guid) IBaseRepository<Source>.GetAll() IBaseRepository<Source>.GetAll(Func<Source, bool>) IBaseRepository<Source>.GetAll(Func<Source, bool>, int, int) IBaseRepository<Source>.GetAllAsync(Func<Source, bool>, int, int) IBaseRepository<Source>.GetAll(int, int) IBaseRepository<Source>.GetCollection() IBaseRepository<Source>.Count() IBaseRepository<Source>.CountBy(Func<Source, bool>) IBaseRepository<Source>.CountAsync() IBaseRepository<Source>.DeleteById(Guid) IBaseRepository<Source>.DeleteAll() IBaseRepository<Source>.Update(Source) IBaseRepository<Source>.Update(IEnumerable<Source>) IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods IsExist(Guid) bool IsExist(Guid id) Parameters id Guid Returns bool IsNotExist(Guid) bool IsNotExist(Guid id) Parameters id Guid Returns bool"
  },
  "api/Domain.Repositories.ITagRepository.html": {
    "href": "api/Domain.Repositories.ITagRepository.html",
    "title": "Interface ITagRepository | Examiner",
    "summary": "Interface ITagRepository Namespace Domain.Repositories Assembly Domain.dll public interface ITagRepository : IBaseRepository<Tag>, IDisposable Inherited Members IBaseRepository<Tag>.Insert(Tag) IBaseRepository<Tag>.Insert(IEnumerable<Tag>) IBaseRepository<Tag>.GetById(Guid) IBaseRepository<Tag>.GetAll() IBaseRepository<Tag>.GetAll(Func<Tag, bool>) IBaseRepository<Tag>.GetAll(Func<Tag, bool>, int, int) IBaseRepository<Tag>.GetAllAsync(Func<Tag, bool>, int, int) IBaseRepository<Tag>.GetAll(int, int) IBaseRepository<Tag>.GetCollection() IBaseRepository<Tag>.Count() IBaseRepository<Tag>.CountBy(Func<Tag, bool>) IBaseRepository<Tag>.CountAsync() IBaseRepository<Tag>.DeleteById(Guid) IBaseRepository<Tag>.DeleteAll() IBaseRepository<Tag>.Update(Tag) IBaseRepository<Tag>.Update(IEnumerable<Tag>) IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods ArchiveTag(Guid) void ArchiveTag(Guid id) Parameters id Guid GetAllAvailableTags(IEnumerable<string>) IEnumerable<string> GetAllAvailableTags(IEnumerable<string> tags) Parameters tags IEnumerable<string> Returns IEnumerable<string> GetNotFoundTags(IEnumerable<Guid>) IEnumerable<Guid> GetNotFoundTags(IEnumerable<Guid> inputIds) Parameters inputIds IEnumerable<Guid> Returns IEnumerable<Guid> GetTagReference(string) Guid GetTagReference(string tag) Parameters tag string Returns Guid GetTagsReference(IEnumerable<string>) IEnumerable<Guid> GetTagsReference(IEnumerable<string> tags) Parameters tags IEnumerable<string> Returns IEnumerable<Guid> IsExist(IEnumerable<Guid>) bool IsExist(IEnumerable<Guid> ids) Parameters ids IEnumerable<Guid> Returns bool IsExist(Guid) bool IsExist(Guid id) Parameters id Guid Returns bool IsExist(string) bool IsExist(string name) Parameters name string Returns bool IsExist(string, Guid) bool IsExist(string name, Guid id) Parameters name string id Guid Returns bool IsNotExist(IEnumerable<Guid>) bool IsNotExist(IEnumerable<Guid> ids) Parameters ids IEnumerable<Guid> Returns bool IsNotExist(Guid) bool IsNotExist(Guid id) Parameters id Guid Returns bool UnArchiveTag(Guid) void UnArchiveTag(Guid id) Parameters id Guid"
  },
  "api/Domain.Repositories.RepositoryBase.IBaseRepository-1.html": {
    "href": "api/Domain.Repositories.RepositoryBase.IBaseRepository-1.html",
    "title": "Interface IBaseRepository<T> | Examiner",
    "summary": "Interface IBaseRepository<T> Namespace Domain.Repositories.RepositoryBase Assembly Domain.dll public interface IBaseRepository<T> : IDisposable where T : class Type Parameters T Inherited Members IDisposable.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Methods Count() int Count() Returns int CountAsync() Task<int> CountAsync() Returns Task<int> CountBy(Func<T, bool>) int CountBy(Func<T, bool> func) Parameters func Func<T, bool> Returns int DeleteAll() void DeleteAll() DeleteById(Guid) void DeleteById(Guid id) Parameters id Guid GetAll() IEnumerable<T> GetAll() Returns IEnumerable<T> GetAll(Func<T, bool>) IEnumerable<T> GetAll(Func<T, bool> func) Parameters func Func<T, bool> Returns IEnumerable<T> GetAll(Func<T, bool>, int, int) IEnumerable<T> GetAll(Func<T, bool> func, int pageNumber, int pageSize) Parameters func Func<T, bool> pageNumber int pageSize int Returns IEnumerable<T> GetAll(int, int) IEnumerable<T> GetAll(int pageNumber, int pageSize) Parameters pageNumber int pageSize int Returns IEnumerable<T> GetAllAsync(Func<T, bool>, int, int) Task<IEnumerable<T>> GetAllAsync(Func<T, bool> func, int pageNumber, int pageSize) Parameters func Func<T, bool> pageNumber int pageSize int Returns Task<IEnumerable<T>> GetById(Guid) T GetById(Guid id) Parameters id Guid Returns T GetCollection() ILiteCollection<T> GetCollection() Returns ILiteCollection<T> Insert(IEnumerable<T>) void Insert(IEnumerable<T> entity) Parameters entity IEnumerable<T> Insert(T) void Insert(T entity) Parameters entity T Update(IEnumerable<T>) void Update(IEnumerable<T> entity) Parameters entity IEnumerable<T> Update(T) void Update(T entity) Parameters entity T"
  },
  "api/Domain.Repositories.RepositoryBase.html": {
    "href": "api/Domain.Repositories.RepositoryBase.html",
    "title": "Namespace Domain.Repositories.RepositoryBase | Examiner",
    "summary": "Namespace Domain.Repositories.RepositoryBase Interfaces IBaseRepository<T>"
  },
  "api/Domain.Repositories.html": {
    "href": "api/Domain.Repositories.html",
    "title": "Namespace Domain.Repositories | Examiner",
    "summary": "Namespace Domain.Repositories Interfaces IApplicationLogRepository ICategoryRepository ILanguageRepository IQuestionRepository IReferenceRepository ISourceRepository ITagRepository"
  },
  "api/Infrastructure.Audits.AuditTrailService.html": {
    "href": "api/Infrastructure.Audits.AuditTrailService.html",
    "title": "Class AuditTrailService | Examiner",
    "summary": "Class AuditTrailService Namespace Infrastructure.Audits Assembly Infrastructure.dll public class AuditTrailService : BaseRepository<AuditTrail>, IBaseRepository<AuditTrail>, IDisposable, IAuditTrailService Inheritance object BaseRepository<AuditTrail> AuditTrailService Implements IBaseRepository<AuditTrail> IDisposable IAuditTrailService Inherited Members BaseRepository<AuditTrail>._db BaseRepository<AuditTrail>._collection BaseRepository<AuditTrail>._collectionName BaseRepository<AuditTrail>.Insert(AuditTrail) BaseRepository<AuditTrail>.Insert(IEnumerable<AuditTrail>) BaseRepository<AuditTrail>.Update(AuditTrail) BaseRepository<AuditTrail>.DeleteById(Guid) BaseRepository<AuditTrail>.DeleteAll() BaseRepository<AuditTrail>.GetById(Guid) BaseRepository<AuditTrail>.GetAll() BaseRepository<AuditTrail>.GetAll(Func<AuditTrail, bool>, int, int) BaseRepository<AuditTrail>.GetAll(Func<AuditTrail, bool>) BaseRepository<AuditTrail>.GetAllAsync(Func<AuditTrail, bool>, int, int) BaseRepository<AuditTrail>.GetAll(int, int) BaseRepository<AuditTrail>.GetCollection() BaseRepository<AuditTrail>.Count() BaseRepository<AuditTrail>.CountBy(Func<AuditTrail, bool>) BaseRepository<AuditTrail>.CountAsync() BaseRepository<AuditTrail>.Update(IEnumerable<AuditTrail>) BaseRepository<AuditTrail>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AuditTrailService(string) public AuditTrailService(string databasePath) Parameters databasePath string Methods AddEntitiesBulk(IEnumerable<AuditTrail>) public void AddEntitiesBulk(IEnumerable<AuditTrail> auditTrails) Parameters auditTrails IEnumerable<AuditTrail> AddNewEntity<T>(EntityName, Guid, ActionBy, T, int, string?) public void AddNewEntity<T>(EntityName entityName, Guid entityId, ActionBy actionBy, T entity, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid actionBy ActionBy entity T versionNumber int comment string Type Parameters T Count(Guid) public int Count(Guid entityId) Parameters entityId Guid Returns int CountDeletedEntity() public int CountDeletedEntity() Returns int DeleteEntity<T>(EntityName, Guid, ActionType, ActionBy, T, int, string?) public void DeleteEntity<T>(EntityName entityName, Guid entityId, ActionType actionType, ActionBy actionBy, T entity, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid actionType ActionType actionBy ActionBy entity T versionNumber int comment string Type Parameters T EnqueueAudit(AuditTrail) public void EnqueueAudit(AuditTrail audit) Parameters audit AuditTrail GetDeletedEntities(Func<AuditTrail, bool>, int, int) public IEnumerable<AuditTrail> GetDeletedEntities(Func<AuditTrail, bool> func, int pageNumber, int pageSize) Parameters func Func<AuditTrail, bool> pageNumber int pageSize int Returns IEnumerable<AuditTrail> GetEntityTrail(Func<AuditTrail, bool>, int, int, Guid) public IEnumerable<AuditTrail> GetEntityTrail(Func<AuditTrail, bool> func, int pageNumber, int pageSize, Guid entityId) Parameters func Func<AuditTrail, bool> pageNumber int pageSize int entityId Guid Returns IEnumerable<AuditTrail> GetEntityTrailDetails(Guid, EntityName, Guid) public AuditTrail GetEntityTrailDetails(Guid trailId, EntityName entityName, Guid entityId) Parameters trailId Guid entityName EntityName entityId Guid Returns AuditTrail UpdateEntitiesBulk<T>(EntityName, IEnumerable<(Guid EntityId, ActionType ActionType, ActionBy ActionBy, T OldEntity, T NewEntity, int Version, string? Comment)>) public void UpdateEntitiesBulk<T>(EntityName entityName, IEnumerable<(Guid EntityId, ActionType ActionType, ActionBy ActionBy, T OldEntity, T NewEntity, int Version, string? Comment)> changes) Parameters entityName EntityName changes IEnumerable<(Guid EntityId, ActionType ActionType, ActionBy ActionBy, T OldEntity, T NewEntity, int Version, string Comment)> Type Parameters T UpdateEntity<T>(EntityName, Guid, ActionType, ActionBy, T, T, int, string?) public void UpdateEntity<T>(EntityName entityName, Guid entityId, ActionType actionType, ActionBy actionBy, T oldEntity, T newEntity, int versionNumber, string? comment = null) Parameters entityName EntityName entityId Guid actionType ActionType actionBy ActionBy oldEntity T newEntity T versionNumber int comment string Type Parameters T"
  },
  "api/Infrastructure.Audits.html": {
    "href": "api/Infrastructure.Audits.html",
    "title": "Namespace Infrastructure.Audits | Examiner",
    "summary": "Namespace Infrastructure.Audits Classes AuditTrailService"
  },
  "api/Infrastructure.Factories.JsonStringLocalizerFactory.html": {
    "href": "api/Infrastructure.Factories.JsonStringLocalizerFactory.html",
    "title": "Class JsonStringLocalizerFactory | Examiner",
    "summary": "Class JsonStringLocalizerFactory Namespace Infrastructure.Factories Assembly Infrastructure.dll public class JsonStringLocalizerFactory : IStringLocalizerFactory Inheritance object JsonStringLocalizerFactory Implements IStringLocalizerFactory Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors JsonStringLocalizerFactory(IDistributedCache) public JsonStringLocalizerFactory(IDistributedCache cache) Parameters cache IDistributedCache Methods Create(string, string) Creates an IStringLocalizer. public IStringLocalizer Create(string baseName, string location) Parameters baseName string The base name of the resource to load strings from. location string The location to load resources from. Returns IStringLocalizer The IStringLocalizer. Create(Type) Creates an IStringLocalizer using the Assembly and FullName of the specified Type. public IStringLocalizer Create(Type resourceSource) Parameters resourceSource Type The Type. Returns IStringLocalizer The IStringLocalizer."
  },
  "api/Infrastructure.Factories.html": {
    "href": "api/Infrastructure.Factories.html",
    "title": "Namespace Infrastructure.Factories | Examiner",
    "summary": "Namespace Infrastructure.Factories Classes JsonStringLocalizerFactory"
  },
  "api/Infrastructure.InfrastructureRegisterServices.html": {
    "href": "api/Infrastructure.InfrastructureRegisterServices.html",
    "title": "Class InfrastructureRegisterServices | Examiner",
    "summary": "Class InfrastructureRegisterServices Namespace Infrastructure Assembly Infrastructure.dll public static class InfrastructureRegisterServices Inheritance object InfrastructureRegisterServices Methods RegisterInfrastructure(IServiceCollection) public static IServiceCollection RegisterInfrastructure(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Infrastructure.Managers.AuditManager.html": {
    "href": "api/Infrastructure.Managers.AuditManager.html",
    "title": "Class AuditManager | Examiner",
    "summary": "Class AuditManager Namespace Infrastructure.Managers Assembly Infrastructure.dll public class AuditManager : IAuditManager Inheritance object AuditManager Implements IAuditManager Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors AuditManager(IConfiguration) public AuditManager(IConfiguration configuration) Parameters configuration IConfiguration Properties ApplicationLogRepository public IApplicationLogRepository ApplicationLogRepository { get; } Property Value IApplicationLogRepository AuditTrailService public IAuditTrailService AuditTrailService { get; } Property Value IAuditTrailService"
  },
  "api/Infrastructure.Managers.RepositoryManager.html": {
    "href": "api/Infrastructure.Managers.RepositoryManager.html",
    "title": "Class RepositoryManager | Examiner",
    "summary": "Class RepositoryManager Namespace Infrastructure.Managers Assembly Infrastructure.dll public class RepositoryManager : IRepositoryManager, IDisposable Inheritance object RepositoryManager Implements IRepositoryManager IDisposable Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors RepositoryManager(IConfiguration) public RepositoryManager(IConfiguration configuration) Parameters configuration IConfiguration Properties CategoryRepository public ICategoryRepository CategoryRepository { get; } Property Value ICategoryRepository LanguageRepository public ILanguageRepository LanguageRepository { get; } Property Value ILanguageRepository QuestionRepository public IQuestionRepository QuestionRepository { get; } Property Value IQuestionRepository ReferenceRepository public IReferenceRepository ReferenceRepository { get; } Property Value IReferenceRepository SourceRepository public ISourceRepository SourceRepository { get; } Property Value ISourceRepository TagRepository public ITagRepository TagRepository { get; } Property Value ITagRepository Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool"
  },
  "api/Infrastructure.Managers.ServiceManager.html": {
    "href": "api/Infrastructure.Managers.ServiceManager.html",
    "title": "Class ServiceManager | Examiner",
    "summary": "Class ServiceManager Namespace Infrastructure.Managers Assembly Infrastructure.dll public class ServiceManager : IServiceManager, IDisposable Inheritance object ServiceManager Implements IServiceManager IDisposable Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ServiceManager(IRepositoryManager, IAuditManager, IMapper, IServiceProvider) public ServiceManager(IRepositoryManager repositoryManager, IAuditManager auditManager, IMapper mapper, IServiceProvider serviceProvider) Parameters repositoryManager IRepositoryManager auditManager IAuditManager mapper IMapper serviceProvider IServiceProvider Properties CategoryService public ICategoryService CategoryService { get; } Property Value ICategoryService LookupService public ILookupService LookupService { get; } Property Value ILookupService QuestionService public IQuestionService QuestionService { get; } Property Value IQuestionService SourceService public ISourceService SourceService { get; } Property Value ISourceService TagService public ITagService TagService { get; } Property Value ITagService Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool"
  },
  "api/Infrastructure.Managers.SystemManager.html": {
    "href": "api/Infrastructure.Managers.SystemManager.html",
    "title": "Class SystemManager | Examiner",
    "summary": "Class SystemManager Namespace Infrastructure.Managers Assembly Infrastructure.dll public class SystemManager : ISystemManager Inheritance object SystemManager Implements ISystemManager Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SystemManager(IConfiguration) public SystemManager(IConfiguration configuration) Parameters configuration IConfiguration Properties SystemService public ISystemService SystemService { get; } Property Value ISystemService"
  },
  "api/Infrastructure.Managers.html": {
    "href": "api/Infrastructure.Managers.html",
    "title": "Namespace Infrastructure.Managers | Examiner",
    "summary": "Namespace Infrastructure.Managers Classes AuditManager RepositoryManager ServiceManager SystemManager"
  },
  "api/Infrastructure.Repositories.BaseRepository.BaseRepository-1.html": {
    "href": "api/Infrastructure.Repositories.BaseRepository.BaseRepository-1.html",
    "title": "Class BaseRepository<T> | Examiner",
    "summary": "Class BaseRepository<T> Namespace Infrastructure.Repositories.BaseRepository Assembly Infrastructure.dll public class BaseRepository<T> : IBaseRepository<T>, IDisposable where T : class Type Parameters T Inheritance object BaseRepository<T> Implements IBaseRepository<T> IDisposable Derived AuditTrailService CategoryRepository LanguageRepository QuestionRepository ReferenceRepository SourceRepository TagRepository Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors BaseRepository(string, string) public BaseRepository(string databasePath, string collectionName) Parameters databasePath string collectionName string Fields _collection protected readonly ILiteCollection<T> _collection Field Value ILiteCollection<T> _collectionName protected readonly string _collectionName Field Value string _db protected readonly LiteDatabase _db Field Value LiteDatabase Methods Count() public virtual int Count() Returns int CountAsync() public virtual Task<int> CountAsync() Returns Task<int> CountBy(Func<T, bool>) public virtual int CountBy(Func<T, bool> func) Parameters func Func<T, bool> Returns int DeleteAll() public virtual void DeleteAll() DeleteById(Guid) public virtual void DeleteById(Guid id) Parameters id Guid Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetAll() public virtual IEnumerable<T> GetAll() Returns IEnumerable<T> GetAll(Func<T, bool>) public virtual IEnumerable<T> GetAll(Func<T, bool> func) Parameters func Func<T, bool> Returns IEnumerable<T> GetAll(Func<T, bool>, int, int) public virtual IEnumerable<T> GetAll(Func<T, bool> func, int pageNumber, int pageSize) Parameters func Func<T, bool> pageNumber int pageSize int Returns IEnumerable<T> GetAll(int, int) public virtual IEnumerable<T> GetAll(int pageNumber, int pageSize) Parameters pageNumber int pageSize int Returns IEnumerable<T> GetAllAsync(Func<T, bool>, int, int) public virtual Task<IEnumerable<T>> GetAllAsync(Func<T, bool> func, int pageNumber, int pageSize) Parameters func Func<T, bool> pageNumber int pageSize int Returns Task<IEnumerable<T>> GetById(Guid) public virtual T GetById(Guid id) Parameters id Guid Returns T GetCollection() public virtual ILiteCollection<T> GetCollection() Returns ILiteCollection<T> Insert(IEnumerable<T>) public virtual void Insert(IEnumerable<T> entity) Parameters entity IEnumerable<T> Insert(T) public virtual void Insert(T entity) Parameters entity T Update(IEnumerable<T>) public void Update(IEnumerable<T> entity) Parameters entity IEnumerable<T> Update(T) public virtual void Update(T entity) Parameters entity T"
  },
  "api/Infrastructure.Repositories.BaseRepository.html": {
    "href": "api/Infrastructure.Repositories.BaseRepository.html",
    "title": "Namespace Infrastructure.Repositories.BaseRepository | Examiner",
    "summary": "Namespace Infrastructure.Repositories.BaseRepository Classes BaseRepository<T>"
  },
  "api/Infrastructure.Repositories.CategoryRepository.html": {
    "href": "api/Infrastructure.Repositories.CategoryRepository.html",
    "title": "Class CategoryRepository | Examiner",
    "summary": "Class CategoryRepository Namespace Infrastructure.Repositories Assembly Infrastructure.dll public class CategoryRepository : BaseRepository<Category>, ICategoryRepository, IBaseRepository<Category>, IDisposable Inheritance object BaseRepository<Category> CategoryRepository Implements ICategoryRepository IBaseRepository<Category> IDisposable Inherited Members BaseRepository<Category>._db BaseRepository<Category>._collection BaseRepository<Category>._collectionName BaseRepository<Category>.Insert(Category) BaseRepository<Category>.Insert(IEnumerable<Category>) BaseRepository<Category>.Update(Category) BaseRepository<Category>.DeleteById(Guid) BaseRepository<Category>.DeleteAll() BaseRepository<Category>.GetById(Guid) BaseRepository<Category>.GetAll() BaseRepository<Category>.GetAll(Func<Category, bool>, int, int) BaseRepository<Category>.GetAll(Func<Category, bool>) BaseRepository<Category>.GetAllAsync(Func<Category, bool>, int, int) BaseRepository<Category>.GetAll(int, int) BaseRepository<Category>.GetCollection() BaseRepository<Category>.Count() BaseRepository<Category>.CountBy(Func<Category, bool>) BaseRepository<Category>.CountAsync() BaseRepository<Category>.Update(IEnumerable<Category>) BaseRepository<Category>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors CategoryRepository(string) public CategoryRepository(string databasePath) Parameters databasePath string Methods IsNotExists(Guid) public bool IsNotExists(Guid id) Parameters id Guid Returns bool"
  },
  "api/Infrastructure.Repositories.LanguageRepository.html": {
    "href": "api/Infrastructure.Repositories.LanguageRepository.html",
    "title": "Class LanguageRepository | Examiner",
    "summary": "Class LanguageRepository Namespace Infrastructure.Repositories Assembly Infrastructure.dll public class LanguageRepository : BaseRepository<Language>, ILanguageRepository, IBaseRepository<Language>, IDisposable Inheritance object BaseRepository<Language> LanguageRepository Implements ILanguageRepository IBaseRepository<Language> IDisposable Inherited Members BaseRepository<Language>._db BaseRepository<Language>._collection BaseRepository<Language>._collectionName BaseRepository<Language>.Insert(Language) BaseRepository<Language>.Insert(IEnumerable<Language>) BaseRepository<Language>.Update(Language) BaseRepository<Language>.DeleteById(Guid) BaseRepository<Language>.DeleteAll() BaseRepository<Language>.GetById(Guid) BaseRepository<Language>.GetAll() BaseRepository<Language>.GetAll(Func<Language, bool>, int, int) BaseRepository<Language>.GetAll(Func<Language, bool>) BaseRepository<Language>.GetAllAsync(Func<Language, bool>, int, int) BaseRepository<Language>.GetAll(int, int) BaseRepository<Language>.GetCollection() BaseRepository<Language>.Count() BaseRepository<Language>.CountBy(Func<Language, bool>) BaseRepository<Language>.CountAsync() BaseRepository<Language>.Update(IEnumerable<Language>) BaseRepository<Language>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LanguageRepository(string) public LanguageRepository(string databasePath) Parameters databasePath string Methods GetLanguageReference(string) public Guid GetLanguageReference(string code) Parameters code string Returns Guid IsLangCodeExists(string) public bool IsLangCodeExists(string code) Parameters code string Returns bool"
  },
  "api/Infrastructure.Repositories.QuestionRepository.html": {
    "href": "api/Infrastructure.Repositories.QuestionRepository.html",
    "title": "Class QuestionRepository | Examiner",
    "summary": "Class QuestionRepository Namespace Infrastructure.Repositories Assembly Infrastructure.dll public class QuestionRepository : BaseRepository<Question>, IQuestionRepository, IBaseRepository<Question>, IDisposable Inheritance object BaseRepository<Question> QuestionRepository Implements IQuestionRepository IBaseRepository<Question> IDisposable Inherited Members BaseRepository<Question>._db BaseRepository<Question>._collection BaseRepository<Question>._collectionName BaseRepository<Question>.Insert(Question) BaseRepository<Question>.Insert(IEnumerable<Question>) BaseRepository<Question>.Update(Question) BaseRepository<Question>.DeleteById(Guid) BaseRepository<Question>.DeleteAll() BaseRepository<Question>.GetById(Guid) BaseRepository<Question>.GetAll() BaseRepository<Question>.GetAll(Func<Question, bool>, int, int) BaseRepository<Question>.GetAll(Func<Question, bool>) BaseRepository<Question>.GetAllAsync(Func<Question, bool>, int, int) BaseRepository<Question>.GetAll(int, int) BaseRepository<Question>.GetCollection() BaseRepository<Question>.Count() BaseRepository<Question>.CountBy(Func<Question, bool>) BaseRepository<Question>.CountAsync() BaseRepository<Question>.Update(IEnumerable<Question>) BaseRepository<Question>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors QuestionRepository(string) public QuestionRepository(string databasePath) Parameters databasePath string"
  },
  "api/Infrastructure.Repositories.ReferenceRepository.html": {
    "href": "api/Infrastructure.Repositories.ReferenceRepository.html",
    "title": "Class ReferenceRepository | Examiner",
    "summary": "Class ReferenceRepository Namespace Infrastructure.Repositories Assembly Infrastructure.dll public class ReferenceRepository : BaseRepository<SourceReference>, IReferenceRepository, IBaseRepository<SourceReference>, IDisposable Inheritance object BaseRepository<SourceReference> ReferenceRepository Implements IReferenceRepository IBaseRepository<SourceReference> IDisposable Inherited Members BaseRepository<SourceReference>._db BaseRepository<SourceReference>._collection BaseRepository<SourceReference>._collectionName BaseRepository<SourceReference>.Insert(SourceReference) BaseRepository<SourceReference>.Insert(IEnumerable<SourceReference>) BaseRepository<SourceReference>.Update(SourceReference) BaseRepository<SourceReference>.DeleteById(Guid) BaseRepository<SourceReference>.DeleteAll() BaseRepository<SourceReference>.GetById(Guid) BaseRepository<SourceReference>.GetAll() BaseRepository<SourceReference>.GetAll(Func<SourceReference, bool>, int, int) BaseRepository<SourceReference>.GetAll(Func<SourceReference, bool>) BaseRepository<SourceReference>.GetAllAsync(Func<SourceReference, bool>, int, int) BaseRepository<SourceReference>.GetAll(int, int) BaseRepository<SourceReference>.GetCollection() BaseRepository<SourceReference>.Count() BaseRepository<SourceReference>.CountBy(Func<SourceReference, bool>) BaseRepository<SourceReference>.CountAsync() BaseRepository<SourceReference>.Update(IEnumerable<SourceReference>) BaseRepository<SourceReference>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors ReferenceRepository(string) public ReferenceRepository(string databasePath) Parameters databasePath string"
  },
  "api/Infrastructure.Repositories.SourceRepository.html": {
    "href": "api/Infrastructure.Repositories.SourceRepository.html",
    "title": "Class SourceRepository | Examiner",
    "summary": "Class SourceRepository Namespace Infrastructure.Repositories Assembly Infrastructure.dll public class SourceRepository : BaseRepository<Source>, ISourceRepository, IBaseRepository<Source>, IDisposable Inheritance object BaseRepository<Source> SourceRepository Implements ISourceRepository IBaseRepository<Source> IDisposable Inherited Members BaseRepository<Source>._db BaseRepository<Source>._collection BaseRepository<Source>._collectionName BaseRepository<Source>.Insert(Source) BaseRepository<Source>.Insert(IEnumerable<Source>) BaseRepository<Source>.Update(Source) BaseRepository<Source>.DeleteById(Guid) BaseRepository<Source>.DeleteAll() BaseRepository<Source>.GetById(Guid) BaseRepository<Source>.GetAll() BaseRepository<Source>.GetAll(Func<Source, bool>, int, int) BaseRepository<Source>.GetAll(Func<Source, bool>) BaseRepository<Source>.GetAllAsync(Func<Source, bool>, int, int) BaseRepository<Source>.GetAll(int, int) BaseRepository<Source>.GetCollection() BaseRepository<Source>.Count() BaseRepository<Source>.CountBy(Func<Source, bool>) BaseRepository<Source>.CountAsync() BaseRepository<Source>.Update(IEnumerable<Source>) BaseRepository<Source>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SourceRepository(string) public SourceRepository(string databasePath) Parameters databasePath string Methods IsExist(Guid) public bool IsExist(Guid id) Parameters id Guid Returns bool IsNotExist(Guid) public bool IsNotExist(Guid id) Parameters id Guid Returns bool"
  },
  "api/Infrastructure.Repositories.TagRepository.html": {
    "href": "api/Infrastructure.Repositories.TagRepository.html",
    "title": "Class TagRepository | Examiner",
    "summary": "Class TagRepository Namespace Infrastructure.Repositories Assembly Infrastructure.dll public class TagRepository : BaseRepository<Tag>, ITagRepository, IBaseRepository<Tag>, IDisposable Inheritance object BaseRepository<Tag> TagRepository Implements ITagRepository IBaseRepository<Tag> IDisposable Inherited Members BaseRepository<Tag>._db BaseRepository<Tag>._collection BaseRepository<Tag>._collectionName BaseRepository<Tag>.Insert(Tag) BaseRepository<Tag>.Insert(IEnumerable<Tag>) BaseRepository<Tag>.Update(Tag) BaseRepository<Tag>.DeleteById(Guid) BaseRepository<Tag>.DeleteAll() BaseRepository<Tag>.GetById(Guid) BaseRepository<Tag>.GetAll() BaseRepository<Tag>.GetAll(Func<Tag, bool>, int, int) BaseRepository<Tag>.GetAll(Func<Tag, bool>) BaseRepository<Tag>.GetAllAsync(Func<Tag, bool>, int, int) BaseRepository<Tag>.GetAll(int, int) BaseRepository<Tag>.GetCollection() BaseRepository<Tag>.Count() BaseRepository<Tag>.CountBy(Func<Tag, bool>) BaseRepository<Tag>.CountAsync() BaseRepository<Tag>.Update(IEnumerable<Tag>) BaseRepository<Tag>.Dispose() Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors TagRepository(string) public TagRepository(string databasePath) Parameters databasePath string Methods ArchiveTag(Guid) public void ArchiveTag(Guid id) Parameters id Guid GetAllAvailableTags(IEnumerable<string>) public IEnumerable<string> GetAllAvailableTags(IEnumerable<string> tags) Parameters tags IEnumerable<string> Returns IEnumerable<string> GetNotFoundTags(IEnumerable<Guid>) public IEnumerable<Guid> GetNotFoundTags(IEnumerable<Guid> inputIds) Parameters inputIds IEnumerable<Guid> Returns IEnumerable<Guid> GetTagReference(string) public Guid GetTagReference(string tag) Parameters tag string Returns Guid GetTagsReference(IEnumerable<string>) public IEnumerable<Guid> GetTagsReference(IEnumerable<string> tags) Parameters tags IEnumerable<string> Returns IEnumerable<Guid> IsExist(IEnumerable<Guid>) public bool IsExist(IEnumerable<Guid> ids) Parameters ids IEnumerable<Guid> Returns bool IsExist(Guid) public bool IsExist(Guid id) Parameters id Guid Returns bool IsExist(string) public bool IsExist(string name) Parameters name string Returns bool IsExist(string, Guid) public bool IsExist(string name, Guid id) Parameters name string id Guid Returns bool IsNotExist(IEnumerable<Guid>) public bool IsNotExist(IEnumerable<Guid> ids) Parameters ids IEnumerable<Guid> Returns bool IsNotExist(Guid) public bool IsNotExist(Guid id) Parameters id Guid Returns bool UnArchiveTag(Guid) public void UnArchiveTag(Guid id) Parameters id Guid"
  },
  "api/Infrastructure.Repositories.html": {
    "href": "api/Infrastructure.Repositories.html",
    "title": "Namespace Infrastructure.Repositories | Examiner",
    "summary": "Namespace Infrastructure.Repositories Classes CategoryRepository LanguageRepository QuestionRepository ReferenceRepository SourceRepository TagRepository"
  },
  "api/Infrastructure.Services.CategoryService.html": {
    "href": "api/Infrastructure.Services.CategoryService.html",
    "title": "Class CategoryService | Examiner",
    "summary": "Class CategoryService Namespace Infrastructure.Services Assembly Infrastructure.dll public class CategoryService : ICategoryService Inheritance object CategoryService Implements ICategoryService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors CategoryService(IRepositoryManager, IAuditManager, IMapper) public CategoryService(IRepositoryManager repositoryManager, IAuditManager auditManager, IMapper mapper) Parameters repositoryManager IRepositoryManager auditManager IAuditManager mapper IMapper Methods AddCategory(string, string, Guid?) public Result<Category> AddCategory(string name, string description, Guid? parentId) Parameters name string description string parentId Guid? Returns Result<Category> UpdateCategory(Guid, string, string) public Result UpdateCategory(Guid categoryId, string name, string description) Parameters categoryId Guid name string description string Returns Result"
  },
  "api/Infrastructure.Services.JsonStringLocalizer.html": {
    "href": "api/Infrastructure.Services.JsonStringLocalizer.html",
    "title": "Class JsonStringLocalizer | Examiner",
    "summary": "Class JsonStringLocalizer Namespace Infrastructure.Services Assembly Infrastructure.dll public class JsonStringLocalizer : IStringLocalizer Inheritance object JsonStringLocalizer Implements IStringLocalizer Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors JsonStringLocalizer(IDistributedCache) public JsonStringLocalizer(IDistributedCache cache) Parameters cache IDistributedCache Properties this[string] Gets the string resource with the given name. public LocalizedString this[string name] { get; } Parameters name string The name of the string resource. Property Value LocalizedString The string resource as a LocalizedString. this[string, object[]] Gets the string resource with the given name and formatted with the supplied arguments. public LocalizedString this[string name, params object[] arguments] { get; } Parameters name string The name of the string resource. arguments object[] The values to format the string with. Property Value LocalizedString The formatted string resource as a LocalizedString. Methods GetAllStrings(bool) Gets all string resources. public IEnumerable<LocalizedString> GetAllStrings(bool includeParentCultures) Parameters includeParentCultures bool A bool indicating whether to include strings from parent cultures. Returns IEnumerable<LocalizedString> The strings."
  },
  "api/Infrastructure.Services.LoggingService.html": {
    "href": "api/Infrastructure.Services.LoggingService.html",
    "title": "Class LoggingService | Examiner",
    "summary": "Class LoggingService Namespace Infrastructure.Services Assembly Infrastructure.dll public class LoggingService : ILogEventSink, IDisposable Inheritance object LoggingService Implements ILogEventSink IDisposable Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LoggingService(string) public LoggingService(string databasePath) Parameters databasePath string Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Emit(LogEvent) Emit the provided log event to the sink. public void Emit(LogEvent logEvent) Parameters logEvent LogEvent The log event to write. Remarks Implementers should allow exceptions to propagate when event emission fails. The logger will handle exceptions and produce diagnostics appropriately. See Also IBatchedLogEventSink GetAllLogs() public IEnumerable<ApplicationLog> GetAllLogs() Returns IEnumerable<ApplicationLog>"
  },
  "api/Infrastructure.Services.LookupService.html": {
    "href": "api/Infrastructure.Services.LookupService.html",
    "title": "Class LookupService | Examiner",
    "summary": "Class LookupService Namespace Infrastructure.Services Assembly Infrastructure.dll public class LookupService : ILookupService, IDisposable Inheritance object LookupService Implements ILookupService IDisposable Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors LookupService(IRepositoryManager, IAuditManager) public LookupService(IRepositoryManager repositoryManager, IAuditManager auditManager) Parameters repositoryManager IRepositoryManager auditManager IAuditManager Methods AddLanguage(Language) public void AddLanguage(Language language) Parameters language Language AddSource(Source) public void AddSource(Source source) Parameters source Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool GetLanguageReference(string) public Guid GetLanguageReference(string code) Parameters code string Returns Guid GetLanguages() public IEnumerable<Language> GetLanguages() Returns IEnumerable<Language> GetSource(Guid) public Source GetSource(Guid id) Parameters id Guid Returns Source UpdateSource(Source) public void UpdateSource(Source source) Parameters source Source"
  },
  "api/Infrastructure.Services.QuestionService.html": {
    "href": "api/Infrastructure.Services.QuestionService.html",
    "title": "Class QuestionService | Examiner",
    "summary": "Class QuestionService Namespace Infrastructure.Services Assembly Infrastructure.dll public class QuestionService : IQuestionService, IDisposable Inheritance object QuestionService Implements IQuestionService IDisposable Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors QuestionService(IQuestionRepository) public QuestionService(IQuestionRepository questionRepository) Parameters questionRepository IQuestionRepository Methods Count() public int Count() Returns int DeleteAllQuestions() public void DeleteAllQuestions() DeleteQuestion(Guid) public void DeleteQuestion(Guid id) Parameters id Guid Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool GetQuestion(Guid) public Question GetQuestion(Guid id) Parameters id Guid Returns Question GetQuestions(int, int) public IEnumerable<Question> GetQuestions(int pageNumber, int pageSize) Parameters pageNumber int pageSize int Returns IEnumerable<Question> InsertQuestion(Question) public Question InsertQuestion(Question question) Parameters question Question Returns Question UpdateQuestion(Question) public void UpdateQuestion(Question question) Parameters question Question"
  },
  "api/Infrastructure.Services.SourceService.html": {
    "href": "api/Infrastructure.Services.SourceService.html",
    "title": "Class SourceService | Examiner",
    "summary": "Class SourceService Namespace Infrastructure.Services Assembly Infrastructure.dll public class SourceService : ISourceService Inheritance object SourceService Implements ISourceService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SourceService(IRepositoryManager, IAuditManager, IMapper) public SourceService(IRepositoryManager repositoryManager, IAuditManager auditManager, IMapper mapper) Parameters repositoryManager IRepositoryManager auditManager IAuditManager mapper IMapper Methods AddBulkTag(Guid, IEnumerable<Guid>) public Result<PartialsSuccessResult> AddBulkTag(Guid sourceId, IEnumerable<Guid> tagIds) Parameters sourceId Guid tagIds IEnumerable<Guid> Returns Result<PartialsSuccessResult> AddReference(SourceReference) public void AddReference(SourceReference reference) Parameters reference SourceReference AddReference(IEnumerable<AddSourceReferenceServiceModel>, Guid) public Result<IEnumerable<SourceReference>> AddReference(IEnumerable<AddSourceReferenceServiceModel> sourceReferences, Guid sourceId) Parameters sourceReferences IEnumerable<AddSourceReferenceServiceModel> sourceId Guid Returns Result<IEnumerable<SourceReference>> AddSource(AddSourceServiceModel) public Result<Source> AddSource(AddSourceServiceModel model) Parameters model AddSourceServiceModel Returns Result<Source> AddTag(Guid, Guid) public Result AddTag(Guid sourceId, Guid tagId) Parameters sourceId Guid tagId Guid Returns Result RemoveBulkTags(Guid, IEnumerable<Guid>) public Result<PartialsSuccessResult> RemoveBulkTags(Guid sourceId, IEnumerable<Guid> tagIds) Parameters sourceId Guid tagIds IEnumerable<Guid> Returns Result<PartialsSuccessResult> RemoveTag(Guid, Guid) public Result RemoveTag(Guid sourceId, Guid tagId) Parameters sourceId Guid tagId Guid Returns Result"
  },
  "api/Infrastructure.Services.SystemService.html": {
    "href": "api/Infrastructure.Services.SystemService.html",
    "title": "Class SystemService | Examiner",
    "summary": "Class SystemService Namespace Infrastructure.Services Assembly Infrastructure.dll public class SystemService : ISystemService Inheritance object SystemService Implements ISystemService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors SystemService(string) public SystemService(string databasePath) Parameters databasePath string Methods AnalyzeCollections(int) public List<CollectionStorageStat> AnalyzeCollections(int sampleSize = 10) Parameters sampleSize int Returns List<CollectionStorageStat> GetDatabaseFileSizeBytes() public long GetDatabaseFileSizeBytes() Returns long"
  },
  "api/Infrastructure.Services.TagService.html": {
    "href": "api/Infrastructure.Services.TagService.html",
    "title": "Class TagService | Examiner",
    "summary": "Class TagService Namespace Infrastructure.Services Assembly Infrastructure.dll public class TagService : ITagService Inheritance object TagService Implements ITagService Extension Methods ObjectExtention.IsNotNull(object) ObjectExtention.IsNull(object) Constructors TagService(IRepositoryManager, IAuditManager, IStringLocalizer<TagService>) public TagService(IRepositoryManager repositoryManager, IAuditManager auditManager, IStringLocalizer<TagService> localizer) Parameters repositoryManager IRepositoryManager auditManager IAuditManager localizer IStringLocalizer<TagService> Methods AddTag(string, string?, string) public Result<Tag> AddTag(string name, string? backgroundColorCode = null, string testColorCode = null) Parameters name string backgroundColorCode string testColorCode string Returns Result<Tag> ArchiveAllTag() public Result ArchiveAllTag() Returns Result ArchiveTag(Guid) public Result ArchiveTag(Guid id) Parameters id Guid Returns Result DeleteTag(Guid) delete a tag and all related entities with a tag. public Result DeleteTag(Guid id) Parameters id Guid Returns Result GetAllTags() public IEnumerable<Tag> GetAllTags() Returns IEnumerable<Tag> UnArchiveTag(Guid) public Result UnArchiveTag(Guid id) Parameters id Guid Returns Result UpdateTag(Guid, string, string, string) the service will check if there different tag with same name. public Result UpdateTag(Guid id, string name, string backgroundColorCode, string textColorCode) Parameters id Guid name string the new Name backgroundColorCode string the color in hex code textColorCode string Returns Result"
  },
  "api/Infrastructure.Services.html": {
    "href": "api/Infrastructure.Services.html",
    "title": "Namespace Infrastructure.Services | Examiner",
    "summary": "Namespace Infrastructure.Services Classes CategoryService JsonStringLocalizer LoggingService LookupService QuestionService SourceService SystemService TagService"
  },
  "api/Infrastructure.html": {
    "href": "api/Infrastructure.html",
    "title": "Namespace Infrastructure | Examiner",
    "summary": "Namespace Infrastructure Classes InfrastructureRegisterServices"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Examiner",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Examiner",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Examiner",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}